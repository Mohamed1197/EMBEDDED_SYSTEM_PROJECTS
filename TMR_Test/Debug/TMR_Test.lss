
TMR_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002040  000020d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800080  00800080  000020f4  2**0
                  ALLOC
  3 .stab         00001c08  00000000  00000000  000020f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e40  00000000  00000000  00003cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000086d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000928b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__vector_10>
      2c:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <main>
      8a:	0c 94 1e 10 	jmp	0x203c	; 0x203c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static void (*ADC_pfNotification)(u16) = NULL;

static u8 ADC_u8BusyFlag =0;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	   CLR_BIT(ADC_u8_ADMUX_REG,7);
	   CLR_BIT(ADC_u8_ADMUX_REG,6);
	}
#elif(ADC_VREF == AVCC)
	{
	    CLR_BIT(ADC_u8_ADMUX_REG,7);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	    SET_BIT(ADC_u8_ADMUX_REG,6);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
#endif

	/* ADC Adjust Result */
#if(ADJUST_RESULT == RIGHT_ADJUST)
	{
		CLR_BIT(ADC_u8_ADMUX_REG,5);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
	{
		SET_BIT(ADC_u8_ADCSRA_REG,5);
	}
#elif(ADC_AUTO_TRIG_MODE == ADC_AUTO_TRIG_DISABLE)
	{
		CLR_BIT(ADC_u8_ADCSRA_REG,5);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_ADCSRA_REG,1);
	    SET_BIT(ADC_u8_ADCSRA_REG,0);
	}
#elif(ADC_CLOCK == CLOCK_64)
	{
		SET_BIT(ADC_u8_ADCSRA_REG,2);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	84 60       	ori	r24, 0x04	; 4
     b92:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADCSRA_REG,1);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	    CLR_BIT(ADC_u8_ADCSRA_REG,0);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	8c 93       	st	X, r24
#endif

	/* ADC Enable Peripheral */
#if(ADC_MODE == ADC_ENABLE)
	{
		SET_BIT(ADC_u8_ADCSRA_REG,7);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
#elif(ADC_MODE == ADC_DISABLE)
	{
		CLR_BIT(ADC_u8_ADCSRA_REG,7);
	}
#endif
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8GetDigitalValueSunchNonBlocking>:

u8 ADC_u8GetDigitalValueSunchNonBlocking(u8 Copy_u8ChannelNb,u16* Copy_pu16DigitalValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	8e 83       	std	Y+6, r24	; 0x06
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u8TimeOutCounter = 0;
     be2:	19 82       	std	Y+1, r1	; 0x01
     be4:	1a 82       	std	Y+2, r1	; 0x02
     be6:	1b 82       	std	Y+3, r1	; 0x03
     be8:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
     bea:	8e 81       	ldd	r24, Y+6	; 0x06
     bec:	80 32       	cpi	r24, 0x20	; 32
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <ADC_u8GetDigitalValueSunchNonBlocking+0x2e>
     bf0:	5c c0       	rjmp	.+184    	; 0xcaa <ADC_u8GetDigitalValueSunchNonBlocking+0xe6>
     bf2:	8f 81       	ldd	r24, Y+7	; 0x07
     bf4:	98 85       	ldd	r25, Y+8	; 0x08
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	09 f4       	brne	.+2      	; 0xbfc <ADC_u8GetDigitalValueSunchNonBlocking+0x38>
     bfa:	57 c0       	rjmp	.+174    	; 0xcaa <ADC_u8GetDigitalValueSunchNonBlocking+0xe6>
	{
		/* Clear MUX 4..0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
     bfc:	a7 e2       	ldi	r26, 0x27	; 39
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e2       	ldi	r30, 0x27	; 39
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	80 7e       	andi	r24, 0xE0	; 224
     c08:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     c0a:	a7 e2       	ldi	r26, 0x27	; 39
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e7 e2       	ldi	r30, 0x27	; 39
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	90 81       	ld	r25, Z
     c14:	8e 81       	ldd	r24, Y+6	; 0x06
     c16:	89 2b       	or	r24, r25
     c18:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     c1a:	a6 e2       	ldi	r26, 0x26	; 38
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e6 e2       	ldi	r30, 0x26	; 38
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	80 64       	ori	r24, 0x40	; 64
     c26:	8c 93       	st	X, r24
     c28:	0b c0       	rjmp	.+22     	; 0xc40 <ADC_u8GetDigitalValueSunchNonBlocking+0x7c>
		/* Wait Till Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)==0) && (Local_u8TimeOutCounter < ADC_u8_TIME_OUT_MAX_VALUE))
		{
			Local_u8TimeOutCounter ++;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	ab 81       	ldd	r26, Y+3	; 0x03
     c30:	bc 81       	ldd	r27, Y+4	; 0x04
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	a1 1d       	adc	r26, r1
     c36:	b1 1d       	adc	r27, r1
     c38:	89 83       	std	Y+1, r24	; 0x01
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	ab 83       	std	Y+3, r26	; 0x03
     c3e:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Till Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)==0) && (Local_u8TimeOutCounter < ADC_u8_TIME_OUT_MAX_VALUE))
     c40:	e6 e2       	ldi	r30, 0x26	; 38
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	82 95       	swap	r24
     c48:	8f 70       	andi	r24, 0x0F	; 15
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	81 70       	andi	r24, 0x01	; 1
     c50:	90 70       	andi	r25, 0x00	; 0
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	61 f4       	brne	.+24     	; 0xc6e <ADC_u8GetDigitalValueSunchNonBlocking+0xaa>
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	ab 81       	ldd	r26, Y+3	; 0x03
     c5c:	bc 81       	ldd	r27, Y+4	; 0x04
     c5e:	80 3a       	cpi	r24, 0xA0	; 160
     c60:	26 e8       	ldi	r18, 0x86	; 134
     c62:	92 07       	cpc	r25, r18
     c64:	21 e0       	ldi	r18, 0x01	; 1
     c66:	a2 07       	cpc	r26, r18
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	b2 07       	cpc	r27, r18
     c6c:	f0 f2       	brcs	.-68     	; 0xc2a <ADC_u8GetDigitalValueSunchNonBlocking+0x66>
		{
			Local_u8TimeOutCounter ++;
		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(Local_u8TimeOutCounter >= ADC_u8_TIME_OUT_MAX_VALUE)
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	ab 81       	ldd	r26, Y+3	; 0x03
     c74:	bc 81       	ldd	r27, Y+4	; 0x04
     c76:	80 3a       	cpi	r24, 0xA0	; 160
     c78:	26 e8       	ldi	r18, 0x86	; 134
     c7a:	92 07       	cpc	r25, r18
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	a2 07       	cpc	r26, r18
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	b2 07       	cpc	r27, r18
     c84:	10 f0       	brcs	.+4      	; 0xc8a <ADC_u8GetDigitalValueSunchNonBlocking+0xc6>
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     c86:	1d 82       	std	Y+5, r1	; 0x05
     c88:	11 c0       	rjmp	.+34     	; 0xcac <ADC_u8GetDigitalValueSunchNonBlocking+0xe8>
		}
		else
		{
			/* Read Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     c8a:	e4 e2       	ldi	r30, 0x24	; 36
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	ef 81       	ldd	r30, Y+7	; 0x07
     c94:	f8 85       	ldd	r31, Y+8	; 0x08
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
			/* Clear Flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     c9a:	a6 e2       	ldi	r26, 0x26	; 38
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e6 e2       	ldi	r30, 0x26	; 38
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	8c 93       	st	X, r24
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <ADC_u8GetDigitalValueSunchNonBlocking+0xe8>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     caa:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cae:	28 96       	adiw	r28, 0x08	; 8
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <ADC_u8GetDigitalValueAsync>:
u8 ADC_u8GetDigitalValueAsync(u8 Copy_u8ChannelNb,void(*Copy_PfNotification)(u16))
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <ADC_u8GetDigitalValueAsync+0x6>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <ADC_u8GetDigitalValueAsync+0x8>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	8a 83       	std	Y+2, r24	; 0x02
     cce:	7c 83       	std	Y+4, r23	; 0x04
     cd0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (*Copy_PfNotification != NULL) && (ADC_u8BusyFlag == 0) )
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	80 32       	cpi	r24, 0x20	; 32
     cda:	78 f5       	brcc	.+94     	; 0xd3a <ADC_u8GetDigitalValueAsync+0x7a>
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	59 f1       	breq	.+86     	; 0xd3a <ADC_u8GetDigitalValueAsync+0x7a>
     ce4:	80 91 82 00 	lds	r24, 0x0082
     ce8:	88 23       	and	r24, r24
     cea:	39 f5       	brne	.+78     	; 0xd3a <ADC_u8GetDigitalValueAsync+0x7a>
	{
		/* ADC is Busy */
		ADC_u8BusyFlag = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 82 00 	sts	0x0082, r24
		/* Updating Global Pointer to a Function With the Notification Function */
		ADC_pfNotification = Copy_PfNotification;
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	90 93 81 00 	sts	0x0081, r25
     cfa:	80 93 80 00 	sts	0x0080, r24
		/* Enable Interrupt PIE */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     cfe:	a6 e2       	ldi	r26, 0x26	; 38
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e6 e2       	ldi	r30, 0x26	; 38
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	88 60       	ori	r24, 0x08	; 8
     d0a:	8c 93       	st	X, r24
		/* Clear MUX 4..0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d0c:	a7 e2       	ldi	r26, 0x27	; 39
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e7 e2       	ldi	r30, 0x27	; 39
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 7e       	andi	r24, 0xE0	; 224
     d18:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     d1a:	a7 e2       	ldi	r26, 0x27	; 39
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e7 e2       	ldi	r30, 0x27	; 39
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	90 81       	ld	r25, Z
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	89 2b       	or	r24, r25
     d28:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d2a:	a6 e2       	ldi	r26, 0x26	; 38
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e6 e2       	ldi	r30, 0x26	; 38
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 64       	ori	r24, 0x40	; 64
     d36:	8c 93       	st	X, r24
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <ADC_u8GetDigitalValueAsync+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     d3a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <ADC_u8ReadADCRegister>:
u8 ADC_u8ReadADCRegister(u16 * Copy_pu16ADCRegValue)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <ADC_u8ReadADCRegister+0x6>
     d52:	0f 92       	push	r0
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9b 83       	std	Y+3, r25	; 0x03
     d5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCRegValue !=NULL)
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	49 f0       	breq	.+18     	; 0xd7a <ADC_u8ReadADCRegister+0x2e>
	{
	    *Copy_pu16ADCRegValue = ADC_u16_ADC_REG;
     d68:	e4 e2       	ldi	r30, 0x24	; 36
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	ea 81       	ldd	r30, Y+2	; 0x02
     d72:	fb 81       	ldd	r31, Y+3	; 0x03
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	80 83       	st	Z, r24
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <ADC_u8ReadADCRegister+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     d7a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <__vector_16>:
/* Prototype of ADC ISR */
void __vector_16(void)   __attribute__((signal));
void __vector_16(void)
{
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	4f 93       	push	r20
     d9a:	5f 93       	push	r21
     d9c:	6f 93       	push	r22
     d9e:	7f 93       	push	r23
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	af 93       	push	r26
     da6:	bf 93       	push	r27
     da8:	ef 93       	push	r30
     daa:	ff 93       	push	r31
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     db4:	80 91 80 00 	lds	r24, 0x0080
     db8:	90 91 81 00 	lds	r25, 0x0081
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	99 f0       	breq	.+38     	; 0xde6 <__vector_16+0x5c>
	{
		/* Clear PIE */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     dc0:	a6 e2       	ldi	r26, 0x26	; 38
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e6 e2       	ldi	r30, 0x26	; 38
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	87 7f       	andi	r24, 0xF7	; 247
     dcc:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     dce:	20 91 80 00 	lds	r18, 0x0080
     dd2:	30 91 81 00 	lds	r19, 0x0081
     dd6:	e4 e2       	ldi	r30, 0x24	; 36
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	f9 01       	movw	r30, r18
     de0:	09 95       	icall
		/* Clear Busy Flag */
		ADC_u8BusyFlag =0;
     de2:	10 92 82 00 	sts	0x0082, r1
	}
}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	0f 92       	push	r0
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     e16:	ea e3       	ldi	r30, 0x3A	; 58
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     e1c:	e7 e3       	ldi	r30, 0x37	; 55
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	10 82       	st	Z, r1
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     e22:	e4 e3       	ldi	r30, 0x34	; 52
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     e28:	e1 e3       	ldi	r30, 0x31	; 49
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 e3       	ldi	r24, 0x30	; 48
     e2e:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     e30:	eb e3       	ldi	r30, 0x3B	; 59
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     e36:	e8 e3       	ldi	r30, 0x38	; 56
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     e42:	e2 e3       	ldi	r30, 0x32	; 50
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	2e 97       	sbiw	r28, 0x0e	; 14
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	8a 83       	std	Y+2, r24	; 0x02
     e66:	6b 83       	std	Y+3, r22	; 0x03
     e68:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	08 f0       	brcs	.+2      	; 0xe76 <DIO_u8SetPinDirection+0x26>
     e74:	0c c1       	rjmp	.+536    	; 0x108e <DIO_u8SetPinDirection+0x23e>
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	88 30       	cpi	r24, 0x08	; 8
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <DIO_u8SetPinDirection+0x2e>
     e7c:	08 c1       	rjmp	.+528    	; 0x108e <DIO_u8SetPinDirection+0x23e>
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	88 23       	and	r24, r24
     e82:	21 f0       	breq	.+8      	; 0xe8c <DIO_u8SetPinDirection+0x3c>
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	09 f0       	breq	.+2      	; 0xe8c <DIO_u8SetPinDirection+0x3c>
     e8a:	01 c1       	rjmp	.+514    	; 0x108e <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3e 87       	std	Y+14, r19	; 0x0e
     e94:	2d 87       	std	Y+13, r18	; 0x0d
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <DIO_u8SetPinDirection+0x52>
     ea0:	4f c0       	rjmp	.+158    	; 0xf40 <DIO_u8SetPinDirection+0xf0>
     ea2:	2d 85       	ldd	r18, Y+13	; 0x0d
     ea4:	3e 85       	ldd	r19, Y+14	; 0x0e
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	2c f4       	brge	.+10     	; 0xeb6 <DIO_u8SetPinDirection+0x66>
     eac:	8d 85       	ldd	r24, Y+13	; 0x0d
     eae:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	71 f0       	breq	.+28     	; 0xed0 <DIO_u8SetPinDirection+0x80>
     eb4:	ed c0       	rjmp	.+474    	; 0x1090 <DIO_u8SetPinDirection+0x240>
     eb6:	2d 85       	ldd	r18, Y+13	; 0x0d
     eb8:	3e 85       	ldd	r19, Y+14	; 0x0e
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <DIO_u8SetPinDirection+0x72>
     ec0:	77 c0       	rjmp	.+238    	; 0xfb0 <DIO_u8SetPinDirection+0x160>
     ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f4       	brne	.+2      	; 0xece <DIO_u8SetPinDirection+0x7e>
     ecc:	a9 c0       	rjmp	.+338    	; 0x1020 <DIO_u8SetPinDirection+0x1d0>
     ece:	e0 c0       	rjmp	.+448    	; 0x1090 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3c 87       	std	Y+12, r19	; 0x0c
     ed8:	2b 87       	std	Y+11, r18	; 0x0b
     eda:	8b 85       	ldd	r24, Y+11	; 0x0b
     edc:	9c 85       	ldd	r25, Y+12	; 0x0c
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	d1 f0       	breq	.+52     	; 0xf16 <DIO_u8SetPinDirection+0xc6>
     ee2:	2b 85       	ldd	r18, Y+11	; 0x0b
     ee4:	3c 85       	ldd	r19, Y+12	; 0x0c
     ee6:	21 30       	cpi	r18, 0x01	; 1
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f0       	breq	.+2      	; 0xeee <DIO_u8SetPinDirection+0x9e>
     eec:	d1 c0       	rjmp	.+418    	; 0x1090 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     eee:	aa e3       	ldi	r26, 0x3A	; 58
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_u8SetPinDirection+0xbc>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_u8SetPinDirection+0xb8>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	bd c0       	rjmp	.+378    	; 0x1090 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_u8SetPinDirection+0xe4>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_u8SetPinDirection+0xe0>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	a8 c0       	rjmp	.+336    	; 0x1090 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3a 87       	std	Y+10, r19	; 0x0a
     f48:	29 87       	std	Y+9, r18	; 0x09
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	d1 f0       	breq	.+52     	; 0xf86 <DIO_u8SetPinDirection+0x136>
     f52:	29 85       	ldd	r18, Y+9	; 0x09
     f54:	3a 85       	ldd	r19, Y+10	; 0x0a
     f56:	21 30       	cpi	r18, 0x01	; 1
     f58:	31 05       	cpc	r19, r1
     f5a:	09 f0       	breq	.+2      	; 0xf5e <DIO_u8SetPinDirection+0x10e>
     f5c:	99 c0       	rjmp	.+306    	; 0x1090 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     f5e:	a7 e3       	ldi	r26, 0x37	; 55
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e7 e3       	ldi	r30, 0x37	; 55
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_u8SetPinDirection+0x12c>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_u8SetPinDirection+0x128>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	85 c0       	rjmp	.+266    	; 0x1090 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     f86:	a7 e3       	ldi	r26, 0x37	; 55
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e7 e3       	ldi	r30, 0x37	; 55
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_u8SetPinDirection+0x154>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_u8SetPinDirection+0x150>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	70 c0       	rjmp	.+224    	; 0x1090 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	38 87       	std	Y+8, r19	; 0x08
     fb8:	2f 83       	std	Y+7, r18	; 0x07
     fba:	8f 81       	ldd	r24, Y+7	; 0x07
     fbc:	98 85       	ldd	r25, Y+8	; 0x08
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	d1 f0       	breq	.+52     	; 0xff6 <DIO_u8SetPinDirection+0x1a6>
     fc2:	2f 81       	ldd	r18, Y+7	; 0x07
     fc4:	38 85       	ldd	r19, Y+8	; 0x08
     fc6:	21 30       	cpi	r18, 0x01	; 1
     fc8:	31 05       	cpc	r19, r1
     fca:	09 f0       	breq	.+2      	; 0xfce <DIO_u8SetPinDirection+0x17e>
     fcc:	61 c0       	rjmp	.+194    	; 0x1090 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     fce:	a4 e3       	ldi	r26, 0x34	; 52
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e4 e3       	ldi	r30, 0x34	; 52
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_u8SetPinDirection+0x19c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_u8SetPinDirection+0x198>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	4d c0       	rjmp	.+154    	; 0x1090 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     ff6:	a4 e3       	ldi	r26, 0x34	; 52
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e4 e3       	ldi	r30, 0x34	; 52
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_u8SetPinDirection+0x1c4>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_u8SetPinDirection+0x1c0>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	38 c0       	rjmp	.+112    	; 0x1090 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3e 83       	std	Y+6, r19	; 0x06
    1028:	2d 83       	std	Y+5, r18	; 0x05
    102a:	8d 81       	ldd	r24, Y+5	; 0x05
    102c:	9e 81       	ldd	r25, Y+6	; 0x06
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	c9 f0       	breq	.+50     	; 0x1064 <DIO_u8SetPinDirection+0x214>
    1032:	2d 81       	ldd	r18, Y+5	; 0x05
    1034:	3e 81       	ldd	r19, Y+6	; 0x06
    1036:	21 30       	cpi	r18, 0x01	; 1
    1038:	31 05       	cpc	r19, r1
    103a:	51 f5       	brne	.+84     	; 0x1090 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
    103c:	a1 e3       	ldi	r26, 0x31	; 49
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e1 e3       	ldi	r30, 0x31	; 49
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_u8SetPinDirection+0x20a>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_u8SetPinDirection+0x206>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
    1064:	a1 e3       	ldi	r26, 0x31	; 49
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e1 e3       	ldi	r30, 0x31	; 49
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_u8SetPinDirection+0x232>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_u8SetPinDirection+0x22e>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    108e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	2e 96       	adiw	r28, 0x0e	; 14
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	2e 97       	sbiw	r28, 0x0e	; 14
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	8a 83       	std	Y+2, r24	; 0x02
    10ba:	6b 83       	std	Y+3, r22	; 0x03
    10bc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <DIO_u8SetPinValue+0x26>
    10c8:	0c c1       	rjmp	.+536    	; 0x12e2 <DIO_u8SetPinValue+0x23e>
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 30       	cpi	r24, 0x08	; 8
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <DIO_u8SetPinValue+0x2e>
    10d0:	08 c1       	rjmp	.+528    	; 0x12e2 <DIO_u8SetPinValue+0x23e>
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	21 f0       	breq	.+8      	; 0x10e0 <DIO_u8SetPinValue+0x3c>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	88 23       	and	r24, r24
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <DIO_u8SetPinValue+0x3c>
    10de:	01 c1       	rjmp	.+514    	; 0x12e2 <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	3e 87       	std	Y+14, r19	; 0x0e
    10e8:	2d 87       	std	Y+13, r18	; 0x0d
    10ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	91 05       	cpc	r25, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <DIO_u8SetPinValue+0x52>
    10f4:	4f c0       	rjmp	.+158    	; 0x1194 <DIO_u8SetPinValue+0xf0>
    10f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    10f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	2c f4       	brge	.+10     	; 0x110a <DIO_u8SetPinValue+0x66>
    1100:	8d 85       	ldd	r24, Y+13	; 0x0d
    1102:	9e 85       	ldd	r25, Y+14	; 0x0e
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	71 f0       	breq	.+28     	; 0x1124 <DIO_u8SetPinValue+0x80>
    1108:	ed c0       	rjmp	.+474    	; 0x12e4 <DIO_u8SetPinValue+0x240>
    110a:	2d 85       	ldd	r18, Y+13	; 0x0d
    110c:	3e 85       	ldd	r19, Y+14	; 0x0e
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <DIO_u8SetPinValue+0x72>
    1114:	77 c0       	rjmp	.+238    	; 0x1204 <DIO_u8SetPinValue+0x160>
    1116:	8d 85       	ldd	r24, Y+13	; 0x0d
    1118:	9e 85       	ldd	r25, Y+14	; 0x0e
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <DIO_u8SetPinValue+0x7e>
    1120:	a9 c0       	rjmp	.+338    	; 0x1274 <DIO_u8SetPinValue+0x1d0>
    1122:	e0 c0       	rjmp	.+448    	; 0x12e4 <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3c 87       	std	Y+12, r19	; 0x0c
    112c:	2b 87       	std	Y+11, r18	; 0x0b
    112e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1130:	9c 85       	ldd	r25, Y+12	; 0x0c
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	d1 f0       	breq	.+52     	; 0x116a <DIO_u8SetPinValue+0xc6>
    1136:	2b 85       	ldd	r18, Y+11	; 0x0b
    1138:	3c 85       	ldd	r19, Y+12	; 0x0c
    113a:	21 30       	cpi	r18, 0x01	; 1
    113c:	31 05       	cpc	r19, r1
    113e:	09 f0       	breq	.+2      	; 0x1142 <DIO_u8SetPinValue+0x9e>
    1140:	d1 c0       	rjmp	.+418    	; 0x12e4 <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
    1142:	ab e3       	ldi	r26, 0x3B	; 59
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	eb e3       	ldi	r30, 0x3B	; 59
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_u8SetPinValue+0xbc>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_u8SetPinValue+0xb8>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	bd c0       	rjmp	.+378    	; 0x12e4 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
    116a:	ab e3       	ldi	r26, 0x3B	; 59
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8SetPinValue+0xe4>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8SetPinValue+0xe0>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	a8 c0       	rjmp	.+336    	; 0x12e4 <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3a 87       	std	Y+10, r19	; 0x0a
    119c:	29 87       	std	Y+9, r18	; 0x09
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	d1 f0       	breq	.+52     	; 0x11da <DIO_u8SetPinValue+0x136>
    11a6:	29 85       	ldd	r18, Y+9	; 0x09
    11a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    11aa:	21 30       	cpi	r18, 0x01	; 1
    11ac:	31 05       	cpc	r19, r1
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <DIO_u8SetPinValue+0x10e>
    11b0:	99 c0       	rjmp	.+306    	; 0x12e4 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    11b2:	a8 e3       	ldi	r26, 0x38	; 56
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e8 e3       	ldi	r30, 0x38	; 56
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_u8SetPinValue+0x12c>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_u8SetPinValue+0x128>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	85 c0       	rjmp	.+266    	; 0x12e4 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    11da:	a8 e3       	ldi	r26, 0x38	; 56
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e8 e3       	ldi	r30, 0x38	; 56
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_u8SetPinValue+0x154>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_u8SetPinValue+0x150>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	70 c0       	rjmp	.+224    	; 0x12e4 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	38 87       	std	Y+8, r19	; 0x08
    120c:	2f 83       	std	Y+7, r18	; 0x07
    120e:	8f 81       	ldd	r24, Y+7	; 0x07
    1210:	98 85       	ldd	r25, Y+8	; 0x08
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	d1 f0       	breq	.+52     	; 0x124a <DIO_u8SetPinValue+0x1a6>
    1216:	2f 81       	ldd	r18, Y+7	; 0x07
    1218:	38 85       	ldd	r19, Y+8	; 0x08
    121a:	21 30       	cpi	r18, 0x01	; 1
    121c:	31 05       	cpc	r19, r1
    121e:	09 f0       	breq	.+2      	; 0x1222 <DIO_u8SetPinValue+0x17e>
    1220:	61 c0       	rjmp	.+194    	; 0x12e4 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_u8SetPinValue+0x19c>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_u8SetPinValue+0x198>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	4d c0       	rjmp	.+154    	; 0x12e4 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    124a:	a5 e3       	ldi	r26, 0x35	; 53
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e3       	ldi	r30, 0x35	; 53
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_u8SetPinValue+0x1c4>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_u8SetPinValue+0x1c0>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	38 c0       	rjmp	.+112    	; 0x12e4 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3e 83       	std	Y+6, r19	; 0x06
    127c:	2d 83       	std	Y+5, r18	; 0x05
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	c9 f0       	breq	.+50     	; 0x12b8 <DIO_u8SetPinValue+0x214>
    1286:	2d 81       	ldd	r18, Y+5	; 0x05
    1288:	3e 81       	ldd	r19, Y+6	; 0x06
    128a:	21 30       	cpi	r18, 0x01	; 1
    128c:	31 05       	cpc	r19, r1
    128e:	51 f5       	brne	.+84     	; 0x12e4 <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    1290:	a2 e3       	ldi	r26, 0x32	; 50
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e2 e3       	ldi	r30, 0x32	; 50
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_u8SetPinValue+0x20a>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_u8SetPinValue+0x206>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	16 c0       	rjmp	.+44     	; 0x12e4 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    12b8:	a2 e3       	ldi	r26, 0x32	; 50
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e2 e3       	ldi	r30, 0x32	; 50
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_u8SetPinValue+0x232>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_u8SetPinValue+0x22e>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    12e2:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e6:	2e 96       	adiw	r28, 0x0e	; 14
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	27 97       	sbiw	r28, 0x07	; 7
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	8a 83       	std	Y+2, r24	; 0x02
    130e:	6b 83       	std	Y+3, r22	; 0x03
    1310:	5d 83       	std	Y+5, r21	; 0x05
    1312:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	08 f0       	brcs	.+2      	; 0x1320 <DIO_u8GetPinValue+0x28>
    131e:	ea c0       	rjmp	.+468    	; 0x14f4 <DIO_u8GetPinValue+0x1fc>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 30       	cpi	r24, 0x08	; 8
    1324:	08 f0       	brcs	.+2      	; 0x1328 <DIO_u8GetPinValue+0x30>
    1326:	e6 c0       	rjmp	.+460    	; 0x14f4 <DIO_u8GetPinValue+0x1fc>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	09 f4       	brne	.+2      	; 0x1332 <DIO_u8GetPinValue+0x3a>
    1330:	e1 c0       	rjmp	.+450    	; 0x14f4 <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3f 83       	std	Y+7, r19	; 0x07
    133a:	2e 83       	std	Y+6, r18	; 0x06
    133c:	4e 81       	ldd	r20, Y+6	; 0x06
    133e:	5f 81       	ldd	r21, Y+7	; 0x07
    1340:	41 30       	cpi	r20, 0x01	; 1
    1342:	51 05       	cpc	r21, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <DIO_u8GetPinValue+0x50>
    1346:	48 c0       	rjmp	.+144    	; 0x13d8 <DIO_u8GetPinValue+0xe0>
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	91 05       	cpc	r25, r1
    1350:	34 f4       	brge	.+12     	; 0x135e <DIO_u8GetPinValue+0x66>
    1352:	2e 81       	ldd	r18, Y+6	; 0x06
    1354:	3f 81       	ldd	r19, Y+7	; 0x07
    1356:	21 15       	cp	r18, r1
    1358:	31 05       	cpc	r19, r1
    135a:	71 f0       	breq	.+28     	; 0x1378 <DIO_u8GetPinValue+0x80>
    135c:	cc c0       	rjmp	.+408    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
    135e:	4e 81       	ldd	r20, Y+6	; 0x06
    1360:	5f 81       	ldd	r21, Y+7	; 0x07
    1362:	42 30       	cpi	r20, 0x02	; 2
    1364:	51 05       	cpc	r21, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <DIO_u8GetPinValue+0x72>
    1368:	67 c0       	rjmp	.+206    	; 0x1438 <DIO_u8GetPinValue+0x140>
    136a:	8e 81       	ldd	r24, Y+6	; 0x06
    136c:	9f 81       	ldd	r25, Y+7	; 0x07
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <DIO_u8GetPinValue+0x7e>
    1374:	90 c0       	rjmp	.+288    	; 0x1496 <DIO_u8GetPinValue+0x19e>
    1376:	bf c0       	rjmp	.+382    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    1378:	e9 e3       	ldi	r30, 0x39	; 57
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a9 01       	movw	r20, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_u8GetPinValue+0x98>
    138c:	55 95       	asr	r21
    138e:	47 95       	ror	r20
    1390:	8a 95       	dec	r24
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_u8GetPinValue+0x94>
    1394:	ca 01       	movw	r24, r20
    1396:	81 70       	andi	r24, 0x01	; 1
    1398:	90 70       	andi	r25, 0x00	; 0
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	21 f4       	brne	.+8      	; 0x13a6 <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    139e:	ec 81       	ldd	r30, Y+4	; 0x04
    13a0:	fd 81       	ldd	r31, Y+5	; 0x05
    13a2:	10 82       	st	Z, r1
    13a4:	a8 c0       	rjmp	.+336    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    13a6:	e9 e3       	ldi	r30, 0x39	; 57
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_u8GetPinValue+0xc6>
    13ba:	55 95       	asr	r21
    13bc:	47 95       	ror	r20
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_u8GetPinValue+0xc2>
    13c2:	ca 01       	movw	r24, r20
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	90 70       	andi	r25, 0x00	; 0
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <DIO_u8GetPinValue+0xd6>
    13cc:	94 c0       	rjmp	.+296    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    13ce:	ec 81       	ldd	r30, Y+4	; 0x04
    13d0:	fd 81       	ldd	r31, Y+5	; 0x05
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 83       	st	Z, r24
    13d6:	8f c0       	rjmp	.+286    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    13d8:	e6 e3       	ldi	r30, 0x36	; 54
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_u8GetPinValue+0xf8>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_u8GetPinValue+0xf4>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	90 70       	andi	r25, 0x00	; 0
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	21 f4       	brne	.+8      	; 0x1406 <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    13fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1400:	fd 81       	ldd	r31, Y+5	; 0x05
    1402:	10 82       	st	Z, r1
    1404:	78 c0       	rjmp	.+240    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    1406:	e6 e3       	ldi	r30, 0x36	; 54
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_u8GetPinValue+0x126>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_u8GetPinValue+0x122>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	90 70       	andi	r25, 0x00	; 0
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <DIO_u8GetPinValue+0x136>
    142c:	64 c0       	rjmp	.+200    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    142e:	ec 81       	ldd	r30, Y+4	; 0x04
    1430:	fd 81       	ldd	r31, Y+5	; 0x05
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 83       	st	Z, r24
    1436:	5f c0       	rjmp	.+190    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    1438:	e3 e3       	ldi	r30, 0x33	; 51
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a9 01       	movw	r20, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_u8GetPinValue+0x158>
    144c:	55 95       	asr	r21
    144e:	47 95       	ror	r20
    1450:	8a 95       	dec	r24
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_u8GetPinValue+0x154>
    1454:	ca 01       	movw	r24, r20
    1456:	81 70       	andi	r24, 0x01	; 1
    1458:	90 70       	andi	r25, 0x00	; 0
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	21 f4       	brne	.+8      	; 0x1466 <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    145e:	ec 81       	ldd	r30, Y+4	; 0x04
    1460:	fd 81       	ldd	r31, Y+5	; 0x05
    1462:	10 82       	st	Z, r1
    1464:	48 c0       	rjmp	.+144    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    1466:	e3 e3       	ldi	r30, 0x33	; 51
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_u8GetPinValue+0x186>
    147a:	55 95       	asr	r21
    147c:	47 95       	ror	r20
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_u8GetPinValue+0x182>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	90 70       	andi	r25, 0x00	; 0
    1488:	88 23       	and	r24, r24
    148a:	a9 f1       	breq	.+106    	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    148c:	ec 81       	ldd	r30, Y+4	; 0x04
    148e:	fd 81       	ldd	r31, Y+5	; 0x05
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 83       	st	Z, r24
    1494:	30 c0       	rjmp	.+96     	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    1496:	e0 e3       	ldi	r30, 0x30	; 48
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_u8GetPinValue+0x1b6>
    14aa:	55 95       	asr	r21
    14ac:	47 95       	ror	r20
    14ae:	8a 95       	dec	r24
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_u8GetPinValue+0x1b2>
    14b2:	ca 01       	movw	r24, r20
    14b4:	81 70       	andi	r24, 0x01	; 1
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    14bc:	ec 81       	ldd	r30, Y+4	; 0x04
    14be:	fd 81       	ldd	r31, Y+5	; 0x05
    14c0:	10 82       	st	Z, r1
    14c2:	19 c0       	rjmp	.+50     	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    14c4:	e0 e3       	ldi	r30, 0x30	; 48
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a9 01       	movw	r20, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_u8GetPinValue+0x1e4>
    14d8:	55 95       	asr	r21
    14da:	47 95       	ror	r20
    14dc:	8a 95       	dec	r24
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_u8GetPinValue+0x1e0>
    14e0:	ca 01       	movw	r24, r20
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	90 70       	andi	r25, 0x00	; 0
    14e6:	88 23       	and	r24, r24
    14e8:	31 f0       	breq	.+12     	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    14ea:	ec 81       	ldd	r30, Y+4	; 0x04
    14ec:	fd 81       	ldd	r31, Y+5	; 0x05
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	80 83       	st	Z, r24
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    14f4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f8:	27 96       	adiw	r28, 0x07	; 7
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	2d 97       	sbiw	r28, 0x0d	; 13
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	8a 83       	std	Y+2, r24	; 0x02
    1520:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	08 f0       	brcs	.+2      	; 0x152e <DIO_u8SetPortDirection+0x24>
    152c:	87 c0       	rjmp	.+270    	; 0x163c <DIO_u8SetPortDirection+0x132>
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	21 f0       	breq	.+8      	; 0x153c <DIO_u8SetPortDirection+0x32>
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	88 23       	and	r24, r24
    1538:	09 f0       	breq	.+2      	; 0x153c <DIO_u8SetPortDirection+0x32>
    153a:	80 c0       	rjmp	.+256    	; 0x163c <DIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	3d 87       	std	Y+13, r19	; 0x0d
    1544:	2c 87       	std	Y+12, r18	; 0x0c
    1546:	8c 85       	ldd	r24, Y+12	; 0x0c
    1548:	9d 85       	ldd	r25, Y+13	; 0x0d
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	91 05       	cpc	r25, r1
    154e:	71 f1       	breq	.+92     	; 0x15ac <DIO_u8SetPortDirection+0xa2>
    1550:	2c 85       	ldd	r18, Y+12	; 0x0c
    1552:	3d 85       	ldd	r19, Y+13	; 0x0d
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	2c f4       	brge	.+10     	; 0x1564 <DIO_u8SetPortDirection+0x5a>
    155a:	8c 85       	ldd	r24, Y+12	; 0x0c
    155c:	9d 85       	ldd	r25, Y+13	; 0x0d
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	69 f0       	breq	.+26     	; 0x157c <DIO_u8SetPortDirection+0x72>
    1562:	6d c0       	rjmp	.+218    	; 0x163e <DIO_u8SetPortDirection+0x134>
    1564:	2c 85       	ldd	r18, Y+12	; 0x0c
    1566:	3d 85       	ldd	r19, Y+13	; 0x0d
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	b9 f1       	breq	.+110    	; 0x15dc <DIO_u8SetPortDirection+0xd2>
    156e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1570:	9d 85       	ldd	r25, Y+13	; 0x0d
    1572:	83 30       	cpi	r24, 0x03	; 3
    1574:	91 05       	cpc	r25, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <DIO_u8SetPortDirection+0x70>
    1578:	49 c0       	rjmp	.+146    	; 0x160c <DIO_u8SetPortDirection+0x102>
    157a:	61 c0       	rjmp	.+194    	; 0x163e <DIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3b 87       	std	Y+11, r19	; 0x0b
    1584:	2a 87       	std	Y+10, r18	; 0x0a
    1586:	8a 85       	ldd	r24, Y+10	; 0x0a
    1588:	9b 85       	ldd	r25, Y+11	; 0x0b
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	31 f0       	breq	.+12     	; 0x159a <DIO_u8SetPortDirection+0x90>
    158e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1590:	3b 85       	ldd	r19, Y+11	; 0x0b
    1592:	21 30       	cpi	r18, 0x01	; 1
    1594:	31 05       	cpc	r19, r1
    1596:	29 f0       	breq	.+10     	; 0x15a2 <DIO_u8SetPortDirection+0x98>
    1598:	52 c0       	rjmp	.+164    	; 0x163e <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    159a:	ea e3       	ldi	r30, 0x3A	; 58
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	10 82       	st	Z, r1
    15a0:	4e c0       	rjmp	.+156    	; 0x163e <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    15a2:	ea e3       	ldi	r30, 0x3A	; 58
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	80 83       	st	Z, r24
    15aa:	49 c0       	rjmp	.+146    	; 0x163e <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	39 87       	std	Y+9, r19	; 0x09
    15b4:	28 87       	std	Y+8, r18	; 0x08
    15b6:	88 85       	ldd	r24, Y+8	; 0x08
    15b8:	99 85       	ldd	r25, Y+9	; 0x09
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	31 f0       	breq	.+12     	; 0x15ca <DIO_u8SetPortDirection+0xc0>
    15be:	28 85       	ldd	r18, Y+8	; 0x08
    15c0:	39 85       	ldd	r19, Y+9	; 0x09
    15c2:	21 30       	cpi	r18, 0x01	; 1
    15c4:	31 05       	cpc	r19, r1
    15c6:	29 f0       	breq	.+10     	; 0x15d2 <DIO_u8SetPortDirection+0xc8>
    15c8:	3a c0       	rjmp	.+116    	; 0x163e <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	10 82       	st	Z, r1
    15d0:	36 c0       	rjmp	.+108    	; 0x163e <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    15d2:	e7 e3       	ldi	r30, 0x37	; 55
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	80 83       	st	Z, r24
    15da:	31 c0       	rjmp	.+98     	; 0x163e <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3f 83       	std	Y+7, r19	; 0x07
    15e4:	2e 83       	std	Y+6, r18	; 0x06
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	31 f0       	breq	.+12     	; 0x15fa <DIO_u8SetPortDirection+0xf0>
    15ee:	2e 81       	ldd	r18, Y+6	; 0x06
    15f0:	3f 81       	ldd	r19, Y+7	; 0x07
    15f2:	21 30       	cpi	r18, 0x01	; 1
    15f4:	31 05       	cpc	r19, r1
    15f6:	29 f0       	breq	.+10     	; 0x1602 <DIO_u8SetPortDirection+0xf8>
    15f8:	22 c0       	rjmp	.+68     	; 0x163e <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    15fa:	e4 e3       	ldi	r30, 0x34	; 52
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	10 82       	st	Z, r1
    1600:	1e c0       	rjmp	.+60     	; 0x163e <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    1602:	e4 e3       	ldi	r30, 0x34	; 52
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	80 83       	st	Z, r24
    160a:	19 c0       	rjmp	.+50     	; 0x163e <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3d 83       	std	Y+5, r19	; 0x05
    1614:	2c 83       	std	Y+4, r18	; 0x04
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	31 f0       	breq	.+12     	; 0x162a <DIO_u8SetPortDirection+0x120>
    161e:	2c 81       	ldd	r18, Y+4	; 0x04
    1620:	3d 81       	ldd	r19, Y+5	; 0x05
    1622:	21 30       	cpi	r18, 0x01	; 1
    1624:	31 05       	cpc	r19, r1
    1626:	29 f0       	breq	.+10     	; 0x1632 <DIO_u8SetPortDirection+0x128>
    1628:	0a c0       	rjmp	.+20     	; 0x163e <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    162a:	e1 e3       	ldi	r30, 0x31	; 49
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	10 82       	st	Z, r1
    1630:	06 c0       	rjmp	.+12     	; 0x163e <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    1632:	e1 e3       	ldi	r30, 0x31	; 49
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	80 83       	st	Z, r24
    163a:	01 c0       	rjmp	.+2      	; 0x163e <DIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    163c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	2d 96       	adiw	r28, 0x0d	; 13
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <DIO_u8SetPortValue+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <DIO_u8SetPortValue+0x8>
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	8a 83       	std	Y+2, r24	; 0x02
    1662:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	d1 f0       	breq	.+52     	; 0x16b0 <DIO_u8SetPortValue+0x5e>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <DIO_u8SetPortValue+0x3e>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	61 f0       	breq	.+24     	; 0x16a6 <DIO_u8SetPortValue+0x54>
    168e:	1f c0       	rjmp	.+62     	; 0x16ce <DIO_u8SetPortValue+0x7c>
    1690:	2c 81       	ldd	r18, Y+4	; 0x04
    1692:	3d 81       	ldd	r19, Y+5	; 0x05
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <DIO_u8SetPortValue+0x68>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	81 f0       	breq	.+32     	; 0x16c4 <DIO_u8SetPortValue+0x72>
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    16a6:	eb e3       	ldi	r30, 0x3B	; 59
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	80 83       	st	Z, r24
    16ae:	10 c0       	rjmp	.+32     	; 0x16d0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    16b0:	e8 e3       	ldi	r30, 0x38	; 56
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	80 83       	st	Z, r24
    16b8:	0b c0       	rjmp	.+22     	; 0x16d0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    16ba:	e5 e3       	ldi	r30, 0x35	; 53
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	80 83       	st	Z, r24
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    16c4:	e2 e3       	ldi	r30, 0x32	; 50
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	80 83       	st	Z, r24
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    16ce:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <DIO_u8GetPortValue+0x6>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <DIO_u8GetPortValue+0x8>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <DIO_u8GetPortValue+0xa>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	7c 83       	std	Y+4, r23	; 0x04
    16f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	e9 f1       	breq	.+122    	; 0x177c <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3e 83       	std	Y+6, r19	; 0x06
    170a:	2d 83       	std	Y+5, r18	; 0x05
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	91 05       	cpc	r25, r1
    1714:	e1 f0       	breq	.+56     	; 0x174e <DIO_u8GetPortValue+0x6c>
    1716:	2d 81       	ldd	r18, Y+5	; 0x05
    1718:	3e 81       	ldd	r19, Y+6	; 0x06
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	2c f4       	brge	.+10     	; 0x172a <DIO_u8GetPortValue+0x48>
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	61 f0       	breq	.+24     	; 0x1740 <DIO_u8GetPortValue+0x5e>
    1728:	27 c0       	rjmp	.+78     	; 0x1778 <DIO_u8GetPortValue+0x96>
    172a:	2d 81       	ldd	r18, Y+5	; 0x05
    172c:	3e 81       	ldd	r19, Y+6	; 0x06
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	a1 f0       	breq	.+40     	; 0x175c <DIO_u8GetPortValue+0x7a>
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	83 30       	cpi	r24, 0x03	; 3
    173a:	91 05       	cpc	r25, r1
    173c:	b1 f0       	breq	.+44     	; 0x176a <DIO_u8GetPortValue+0x88>
    173e:	1c c0       	rjmp	.+56     	; 0x1778 <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    1740:	e9 e3       	ldi	r30, 0x39	; 57
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	eb 81       	ldd	r30, Y+3	; 0x03
    1748:	fc 81       	ldd	r31, Y+4	; 0x04
    174a:	80 83       	st	Z, r24
    174c:	18 c0       	rjmp	.+48     	; 0x177e <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    174e:	e6 e3       	ldi	r30, 0x36	; 54
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	eb 81       	ldd	r30, Y+3	; 0x03
    1756:	fc 81       	ldd	r31, Y+4	; 0x04
    1758:	80 83       	st	Z, r24
    175a:	11 c0       	rjmp	.+34     	; 0x177e <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    175c:	e3 e3       	ldi	r30, 0x33	; 51
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	eb 81       	ldd	r30, Y+3	; 0x03
    1764:	fc 81       	ldd	r31, Y+4	; 0x04
    1766:	80 83       	st	Z, r24
    1768:	0a c0       	rjmp	.+20     	; 0x177e <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    176a:	e0 e3       	ldi	r30, 0x30	; 48
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	eb 81       	ldd	r30, Y+3	; 0x03
    1772:	fc 81       	ldd	r31, Y+4	; 0x04
    1774:	80 83       	st	Z, r24
    1776:	03 c0       	rjmp	.+6      	; 0x177e <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    1778:	19 82       	std	Y+1, r1	; 0x01
    177a:	01 c0       	rjmp	.+2      	; 0x177e <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    177c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	26 96       	adiw	r28, 0x06	; 6
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <GI_voidEnable>:
/* Defination of SREG */
#define GI_u8_SREG              *((volatile u8*)0x5F)


void GI_voidEnable (void)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
    179a:	af e5       	ldi	r26, 0x5F	; 95
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ef e5       	ldi	r30, 0x5F	; 95
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 68       	ori	r24, 0x80	; 128
    17a6:	8c 93       	st	X, r24
}
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <GI_voidDisable>:

void GI_voidDisable(void)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
    17b6:	af e5       	ldi	r26, 0x5F	; 95
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	ef e5       	ldi	r30, 0x5F	; 95
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8f 77       	andi	r24, 0x7F	; 127
    17c2:	8c 93       	st	X, r24
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <KPD_u8GetKey>:
static u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN, KPD_u8_R2_PIN, KPD_u8_R3_PIN, KPD_u8_R4_PIN};
static u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN, KPD_u8_C2_PIN, KPD_u8_C3_PIN, KPD_u8_C4_PIN};

/* Rows output *//* Columns Input */
u8 KPD_u8GetKey(u8 * Copy_pu8ReturnedKey)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	a3 97       	sbiw	r28, 0x23	; 35
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	9b a3       	std	Y+35, r25	; 0x23
    17e0:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = STD_TYPES_OK;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
    17e6:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
    17e8:	8a a1       	ldd	r24, Y+34	; 0x22
    17ea:	9b a1       	ldd	r25, Y+35	; 0x23
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <KPD_u8GetKey+0x28>
    17f0:	4f c1       	rjmp	.+670    	; 0x1a90 <KPD_u8GetKey+0x2c6>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    17f2:	ea a1       	ldd	r30, Y+34	; 0x22
    17f4:	fb a1       	ldd	r31, Y+35	; 0x23
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	80 83       	st	Z, r24
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    17fa:	1f 8e       	std	Y+31, r1	; 0x1f
    17fc:	44 c1       	rjmp	.+648    	; 0x1a86 <KPD_u8GetKey+0x2bc>
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
    17fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	fc 01       	movw	r30, r24
    1806:	e8 58       	subi	r30, 0x88	; 136
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	90 81       	ld	r25, Z
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	69 2f       	mov	r22, r25
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_u8SetPinValue>
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    1816:	1e 8e       	std	Y+30, r1	; 0x1e
    1818:	20 c1       	rjmp	.+576    	; 0x1a5a <KPD_u8GetKey+0x290>
		    {
			    DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    181a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	fc 01       	movw	r30, r24
    1822:	e4 58       	subi	r30, 0x84	; 132
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	90 81       	ld	r25, Z
    1828:	9e 01       	movw	r18, r28
    182a:	2f 5d       	subi	r18, 0xDF	; 223
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	69 2f       	mov	r22, r25
    1832:	a9 01       	movw	r20, r18
    1834:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
    1838:	89 a1       	ldd	r24, Y+33	; 0x21
    183a:	88 23       	and	r24, r24
    183c:	09 f0       	breq	.+2      	; 0x1840 <KPD_u8GetKey+0x76>
    183e:	0a c1       	rjmp	.+532    	; 0x1a54 <KPD_u8GetKey+0x28a>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a0 ea       	ldi	r26, 0xA0	; 160
    1846:	b1 e4       	ldi	r27, 0x41	; 65
    1848:	89 8f       	std	Y+25, r24	; 0x19
    184a:	9a 8f       	std	Y+26, r25	; 0x1a
    184c:	ab 8f       	std	Y+27, r26	; 0x1b
    184e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1850:	69 8d       	ldd	r22, Y+25	; 0x19
    1852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	4a ef       	ldi	r20, 0xFA	; 250
    185e:	54 e4       	ldi	r21, 0x44	; 68
    1860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	8d 8b       	std	Y+21, r24	; 0x15
    186a:	9e 8b       	std	Y+22, r25	; 0x16
    186c:	af 8b       	std	Y+23, r26	; 0x17
    186e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1870:	6d 89       	ldd	r22, Y+21	; 0x15
    1872:	7e 89       	ldd	r23, Y+22	; 0x16
    1874:	8f 89       	ldd	r24, Y+23	; 0x17
    1876:	98 8d       	ldd	r25, Y+24	; 0x18
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1884:	88 23       	and	r24, r24
    1886:	2c f4       	brge	.+10     	; 0x1892 <KPD_u8GetKey+0xc8>
		__ticks = 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9c 8b       	std	Y+20, r25	; 0x14
    188e:	8b 8b       	std	Y+19, r24	; 0x13
    1890:	3f c0       	rjmp	.+126    	; 0x1910 <KPD_u8GetKey+0x146>
	else if (__tmp > 65535)
    1892:	6d 89       	ldd	r22, Y+21	; 0x15
    1894:	7e 89       	ldd	r23, Y+22	; 0x16
    1896:	8f 89       	ldd	r24, Y+23	; 0x17
    1898:	98 8d       	ldd	r25, Y+24	; 0x18
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	3f ef       	ldi	r19, 0xFF	; 255
    189e:	4f e7       	ldi	r20, 0x7F	; 127
    18a0:	57 e4       	ldi	r21, 0x47	; 71
    18a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a6:	18 16       	cp	r1, r24
    18a8:	4c f5       	brge	.+82     	; 0x18fc <KPD_u8GetKey+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18aa:	69 8d       	ldd	r22, Y+25	; 0x19
    18ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e2       	ldi	r20, 0x20	; 32
    18b8:	51 e4       	ldi	r21, 0x41	; 65
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9c 8b       	std	Y+20, r25	; 0x14
    18d0:	8b 8b       	std	Y+19, r24	; 0x13
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <KPD_u8GetKey+0x128>
    18d4:	88 ec       	ldi	r24, 0xC8	; 200
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9a 8b       	std	Y+18, r25	; 0x12
    18da:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18dc:	89 89       	ldd	r24, Y+17	; 0x11
    18de:	9a 89       	ldd	r25, Y+18	; 0x12
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <KPD_u8GetKey+0x116>
    18e4:	9a 8b       	std	Y+18, r25	; 0x12
    18e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ea:	9c 89       	ldd	r25, Y+20	; 0x14
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f2:	8b 89       	ldd	r24, Y+19	; 0x13
    18f4:	9c 89       	ldd	r25, Y+20	; 0x14
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	69 f7       	brne	.-38     	; 0x18d4 <KPD_u8GetKey+0x10a>
    18fa:	14 c0       	rjmp	.+40     	; 0x1924 <KPD_u8GetKey+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fc:	6d 89       	ldd	r22, Y+21	; 0x15
    18fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1900:	8f 89       	ldd	r24, Y+23	; 0x17
    1902:	98 8d       	ldd	r25, Y+24	; 0x18
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	9c 89       	ldd	r25, Y+20	; 0x14
    1914:	98 8b       	std	Y+16, r25	; 0x10
    1916:	8f 87       	std	Y+15, r24	; 0x0f
    1918:	8f 85       	ldd	r24, Y+15	; 0x0f
    191a:	98 89       	ldd	r25, Y+16	; 0x10
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <KPD_u8GetKey+0x152>
    1920:	98 8b       	std	Y+16, r25	; 0x10
    1922:	8f 87       	std	Y+15, r24	; 0x0f
			    {
				    /* Debouncing */
				    _delay_ms(20);
				   // while(Local_u8ReturnedPinValue == DIO_u8_LOW)
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    1924:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	e4 58       	subi	r30, 0x84	; 132
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	90 81       	ld	r25, Z
    1932:	9e 01       	movw	r18, r28
    1934:	2f 5d       	subi	r18, 0xDF	; 223
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	69 2f       	mov	r22, r25
    193c:	a9 01       	movw	r20, r18
    193e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_u8GetPinValue>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a0 e2       	ldi	r26, 0x20	; 32
    1948:	b1 e4       	ldi	r27, 0x41	; 65
    194a:	8b 87       	std	Y+11, r24	; 0x0b
    194c:	9c 87       	std	Y+12, r25	; 0x0c
    194e:	ad 87       	std	Y+13, r26	; 0x0d
    1950:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1952:	6b 85       	ldd	r22, Y+11	; 0x0b
    1954:	7c 85       	ldd	r23, Y+12	; 0x0c
    1956:	8d 85       	ldd	r24, Y+13	; 0x0d
    1958:	9e 85       	ldd	r25, Y+14	; 0x0e
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a ef       	ldi	r20, 0xFA	; 250
    1960:	54 e4       	ldi	r21, 0x44	; 68
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8f 83       	std	Y+7, r24	; 0x07
    196c:	98 87       	std	Y+8, r25	; 0x08
    196e:	a9 87       	std	Y+9, r26	; 0x09
    1970:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <KPD_u8GetKey+0x1ca>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <KPD_u8GetKey+0x248>
	else if (__tmp > 65535)
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	4c f5       	brge	.+82     	; 0x19fe <KPD_u8GetKey+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <KPD_u8GetKey+0x22a>
    19d6:	88 ec       	ldi	r24, 0xC8	; 200
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <KPD_u8GetKey+0x218>
    19e6:	9c 83       	std	Y+4, r25	; 0x04
    19e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <KPD_u8GetKey+0x20c>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <KPD_u8GetKey+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <KPD_u8GetKey+0x254>
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01
				    }
				     _delay_ms(10);
				        * Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8_RowsCounter][Local_u8_ColsCounter];
    1a26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a28:	48 2f       	mov	r20, r24
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	ca 01       	movw	r24, r20
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	82 0f       	add	r24, r18
    1a3e:	93 1f       	adc	r25, r19
    1a40:	fc 01       	movw	r30, r24
    1a42:	e8 59       	subi	r30, 0x98	; 152
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	ea a1       	ldd	r30, Y+34	; 0x22
    1a4a:	fb a1       	ldd	r31, Y+35	; 0x23
    1a4c:	80 83       	st	Z, r24

                     Local_u8Flag = 1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	8d 8f       	std	Y+29, r24	; 0x1d
    1a52:	07 c0       	rjmp	.+14     	; 0x1a62 <KPD_u8GetKey+0x298>
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    1a54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	8e 8f       	std	Y+30, r24	; 0x1e
    1a5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a5c:	84 30       	cpi	r24, 0x04	; 4
    1a5e:	08 f4       	brcc	.+2      	; 0x1a62 <KPD_u8GetKey+0x298>
    1a60:	dc ce       	rjmp	.-584    	; 0x181a <KPD_u8GetKey+0x50>
					break;
					
			    }
		     }
			 /* Deactivate currently Row  */
		     DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_HIGH);
    1a62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	fc 01       	movw	r30, r24
    1a6a:	e8 58       	subi	r30, 0x88	; 136
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	90 81       	ld	r25, Z
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	69 2f       	mov	r22, r25
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_u8SetPinValue>
		   	 if(Local_u8Flag == 1)
    1a7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	49 f0       	breq	.+18     	; 0x1a92 <KPD_u8GetKey+0x2c8>
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    1a80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	8f 8f       	std	Y+31, r24	; 0x1f
    1a86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a88:	84 30       	cpi	r24, 0x04	; 4
    1a8a:	08 f4       	brcc	.+2      	; 0x1a8e <KPD_u8GetKey+0x2c4>
    1a8c:	b8 ce       	rjmp	.-656    	; 0x17fe <KPD_u8GetKey+0x34>
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <KPD_u8GetKey+0x2c8>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1a90:	18 a2       	std	Y+32, r1	; 0x20
	}
	return Local_u8ErrorState;
    1a92:	88 a1       	ldd	r24, Y+32	; 0x20
	
}
    1a94:	a3 96       	adiw	r28, 0x23	; 35
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <TMR_voidTimer0Init>:

static void (*TMR_pfTimer0OVF)(void) = NULL;
static void (*TMR_pfTimer0CTC)(void) = NULL;

void TMR_voidTimer0Init(void)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
	    }
      #endif
	}
#elif (TIMER_MODE == CTC_MODE)
	{
	  CLR_BIT(TMR_u8_TCCR0_REG,6);
    1aae:	a3 e5       	ldi	r26, 0x53	; 83
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e3 e5       	ldi	r30, 0x53	; 83
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 7b       	andi	r24, 0xBF	; 191
    1aba:	8c 93       	st	X, r24
	  SET_BIT(TMR_u8_TCCR0_REG,3);
    1abc:	a3 e5       	ldi	r26, 0x53	; 83
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e3 e5       	ldi	r30, 0x53	; 83
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 60       	ori	r24, 0x08	; 8
    1ac8:	8c 93       	st	X, r24
	  TMR_u8_OCR0_REG = COMPARE_MATCH_VALUE;
    1aca:	ec e5       	ldi	r30, 0x5C	; 92
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	83 e6       	ldi	r24, 0x63	; 99
    1ad0:	80 83       	st	Z, r24
      #if (TIMER_PIE == ENABLE_TIMER0_PIE)
	   {
		  SET_BIT(TMR_u8_TIMSK_REG,1);
    1ad2:	a9 e5       	ldi	r26, 0x59	; 89
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e9 e5       	ldi	r30, 0x59	; 89
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	82 60       	ori	r24, 0x02	; 2
    1ade:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,5);
	SET_BIT(TMR_u8_TCCR0_REG,4);
}
#elif ((COMPARE_OUTPUT_MODE == CLEAR_OC0_ON_COMPARE) || (COMPARE_OUTPUT_MODE == NON_INVERTING_PWM))
{
	SET_BIT(TMR_u8_TCCR0_REG,5);
    1ae0:	a3 e5       	ldi	r26, 0x53	; 83
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e3 e5       	ldi	r30, 0x53	; 83
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 62       	ori	r24, 0x20	; 32
    1aec:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,4);
    1aee:	a3 e5       	ldi	r26, 0x53	; 83
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e3 e5       	ldi	r30, 0x53	; 83
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 7e       	andi	r24, 0xEF	; 239
    1afa:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,1);
		 SET_BIT(TMR_u8_TCCR0_REG,0);
	}
#elif (PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR0_REG,2);
    1afc:	a3 e5       	ldi	r26, 0x53	; 83
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e3 e5       	ldi	r30, 0x53	; 83
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8b 7f       	andi	r24, 0xFB	; 251
    1b08:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR0_REG,1);
    1b0a:	a3 e5       	ldi	r26, 0x53	; 83
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e3 e5       	ldi	r30, 0x53	; 83
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	82 60       	ori	r24, 0x02	; 2
    1b16:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,0);
    1b18:	a3 e5       	ldi	r26, 0x53	; 83
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e3 e5       	ldi	r30, 0x53	; 83
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	8e 7f       	andi	r24, 0xFE	; 254
    1b24:	8c 93       	st	X, r24
//		/* Prescaler => 8 */
//   	    CLR_BIT(TMR_u8_TCCR0_REG,2);
//	    SET_BIT(TMR_u8_TCCR0_REG,1);
//	    CLR_BIT(TMR_u8_TCCR0_REG,0);

}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <TMR_voidTimer1Init>:

void TMR_voidTimer1Init(void)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
	/* Timer1 Select Mode 14 => ICR1 top Value */
	SET_BIT(TMR_u8_TCCR1A_REG,1);
    1b34:	af e4       	ldi	r26, 0x4F	; 79
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	ef e4       	ldi	r30, 0x4F	; 79
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	82 60       	ori	r24, 0x02	; 2
    1b40:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1A_REG,0);
    1b42:	af e4       	ldi	r26, 0x4F	; 79
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	ef e4       	ldi	r30, 0x4F	; 79
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8e 7f       	andi	r24, 0xFE	; 254
    1b4e:	8c 93       	st	X, r24
	SET_BIT(TMR_u8_TCCR1B_REG,4);
    1b50:	ae e4       	ldi	r26, 0x4E	; 78
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ee e4       	ldi	r30, 0x4E	; 78
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 61       	ori	r24, 0x10	; 16
    1b5c:	8c 93       	st	X, r24
	SET_BIT(TMR_u8_TCCR1B_REG,3);
    1b5e:	ae e4       	ldi	r26, 0x4E	; 78
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	ee e4       	ldi	r30, 0x4E	; 78
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	88 60       	ori	r24, 0x08	; 8
    1b6a:	8c 93       	st	X, r24

	/* Channel A => NON Inverting */
	SET_BIT(TMR_u8_TCCR1A_REG,7);
    1b6c:	af e4       	ldi	r26, 0x4F	; 79
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ef e4       	ldi	r30, 0x4F	; 79
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 68       	ori	r24, 0x80	; 128
    1b78:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1A_REG,6);
    1b7a:	af e4       	ldi	r26, 0x4F	; 79
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	ef e4       	ldi	r30, 0x4F	; 79
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 7b       	andi	r24, 0xBF	; 191
    1b86:	8c 93       	st	X, r24

	/* Set Max Value */
	TMR_u16_ICR1_REG = 19999;
    1b88:	e6 e4       	ldi	r30, 0x46	; 70
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	8f e1       	ldi	r24, 0x1F	; 31
    1b8e:	9e e4       	ldi	r25, 0x4E	; 78
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24

	/* Set Prescaler => 8 */
	CLR_BIT(TMR_u8_TCCR1B_REG,2);
    1b94:	ae e4       	ldi	r26, 0x4E	; 78
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	ee e4       	ldi	r30, 0x4E	; 78
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8b 7f       	andi	r24, 0xFB	; 251
    1ba0:	8c 93       	st	X, r24
	SET_BIT(TMR_u8_TCCR1B_REG,1);
    1ba2:	ae e4       	ldi	r26, 0x4E	; 78
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ee e4       	ldi	r30, 0x4E	; 78
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	82 60       	ori	r24, 0x02	; 2
    1bae:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1B_REG,0);
    1bb0:	ae e4       	ldi	r26, 0x4E	; 78
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ee e4       	ldi	r30, 0x4E	; 78
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8e 7f       	andi	r24, 0xFE	; 254
    1bbc:	8c 93       	st	X, r24

}
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <TMR_voidTimer1SetCompareMatchValueChannelA>:

void TMR_voidTimer1SetCompareMatchValueChannelA(u16 Copy_u16CompareMatchValue)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <TMR_voidTimer1SetCompareMatchValueChannelA+0x6>
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	TMR_u16_OCR1A_REG = Copy_u16CompareMatchValue;
    1bd2:	ea e4       	ldi	r30, 0x4A	; 74
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <TMR_voidTimer0SetCompareMatchValue>:

void TMR_voidTimer0SetCompareMatchValue(u8 Copy_u8OCRValue)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	0f 92       	push	r0
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	TMR_u8_OCR0_REG = Copy_u8OCRValue;
    1bf4:	ec e5       	ldi	r30, 0x5C	; 92
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	80 83       	st	Z, r24
}
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <TMR_u8Timer0OVFSetCallBack>:

u8  TMR_u8Timer0OVFSetCallBack(void(*Copy_pf)(void))
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <TMR_u8Timer0OVFSetCallBack+0x6>
    1c0a:	0f 92       	push	r0
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	39 f0       	breq	.+14     	; 0x1c2e <TMR_u8Timer0OVFSetCallBack+0x2a>
	{
		TMR_pfTimer0OVF = Copy_pf;
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	9b 81       	ldd	r25, Y+3	; 0x03
    1c24:	90 93 84 00 	sts	0x0084, r25
    1c28:	80 93 83 00 	sts	0x0083, r24
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <TMR_u8Timer0OVFSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    1c2e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <TMR_u8Timer0CTCSetCallBack>:

u8  TMR_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <TMR_u8Timer0CTCSetCallBack+0x6>
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9b 83       	std	Y+3, r25	; 0x03
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <TMR_u8Timer0CTCSetCallBack+0x2a>
	{
		TMR_pfTimer0CTC = Copy_pf;
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5e:	90 93 86 00 	sts	0x0086, r25
    1c62:	80 93 85 00 	sts	0x0085, r24
    1c66:	01 c0       	rjmp	.+2      	; 0x1c6a <TMR_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    1c68:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <__vector_11>:

/* Prototype of ISR Timer0 OVF */
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	2f 93       	push	r18
    1c84:	3f 93       	push	r19
    1c86:	4f 93       	push	r20
    1c88:	5f 93       	push	r21
    1c8a:	6f 93       	push	r22
    1c8c:	7f 93       	push	r23
    1c8e:	8f 93       	push	r24
    1c90:	9f 93       	push	r25
    1c92:	af 93       	push	r26
    1c94:	bf 93       	push	r27
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    1ca2:	80 91 87 00 	lds	r24, 0x0087
    1ca6:	90 91 88 00 	lds	r25, 0x0088
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	90 93 88 00 	sts	0x0088, r25
    1cb0:	80 93 87 00 	sts	0x0087, r24
	if(Local_u16Counter == 3907)
    1cb4:	80 91 87 00 	lds	r24, 0x0087
    1cb8:	90 91 88 00 	lds	r25, 0x0088
    1cbc:	2f e0       	ldi	r18, 0x0F	; 15
    1cbe:	83 34       	cpi	r24, 0x43	; 67
    1cc0:	92 07       	cpc	r25, r18
    1cc2:	99 f4       	brne	.+38     	; 0x1cea <__vector_11+0x72>
	{
		/* Set Preload Value */
		TMR_u8_TCNT0_REG = 192;
    1cc4:	e2 e5       	ldi	r30, 0x52	; 82
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 ec       	ldi	r24, 0xC0	; 192
    1cca:	80 83       	st	Z, r24
		/* Reset Counter */
		Local_u16Counter = 0;
    1ccc:	10 92 88 00 	sts	0x0088, r1
    1cd0:	10 92 87 00 	sts	0x0087, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0OVF != NULL)
    1cd4:	80 91 83 00 	lds	r24, 0x0083
    1cd8:	90 91 84 00 	lds	r25, 0x0084
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	29 f0       	breq	.+10     	; 0x1cea <__vector_11+0x72>
		{
			TMR_pfTimer0OVF();
    1ce0:	e0 91 83 00 	lds	r30, 0x0083
    1ce4:	f0 91 84 00 	lds	r31, 0x0084
    1ce8:	09 95       	icall
		}
	}
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	bf 91       	pop	r27
    1cf4:	af 91       	pop	r26
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	7f 91       	pop	r23
    1cfc:	6f 91       	pop	r22
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	0f 90       	pop	r0
    1d0c:	1f 90       	pop	r1
    1d0e:	18 95       	reti

00001d10 <__vector_10>:
/* Prototype of ISR Timer0 Compare Match */
void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
    1d10:	1f 92       	push	r1
    1d12:	0f 92       	push	r0
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	0f 92       	push	r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	2f 93       	push	r18
    1d1c:	3f 93       	push	r19
    1d1e:	4f 93       	push	r20
    1d20:	5f 93       	push	r21
    1d22:	6f 93       	push	r22
    1d24:	7f 93       	push	r23
    1d26:	8f 93       	push	r24
    1d28:	9f 93       	push	r25
    1d2a:	af 93       	push	r26
    1d2c:	bf 93       	push	r27
    1d2e:	ef 93       	push	r30
    1d30:	ff 93       	push	r31
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    1d3a:	80 91 89 00 	lds	r24, 0x0089
    1d3e:	90 91 8a 00 	lds	r25, 0x008A
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	90 93 8a 00 	sts	0x008A, r25
    1d48:	80 93 89 00 	sts	0x0089, r24
	if(Local_u16Counter == 10000)
    1d4c:	80 91 89 00 	lds	r24, 0x0089
    1d50:	90 91 8a 00 	lds	r25, 0x008A
    1d54:	27 e2       	ldi	r18, 0x27	; 39
    1d56:	80 31       	cpi	r24, 0x10	; 16
    1d58:	92 07       	cpc	r25, r18
    1d5a:	79 f4       	brne	.+30     	; 0x1d7a <__vector_10+0x6a>
	{
		/* Reset Counter */
		Local_u16Counter = 0;
    1d5c:	10 92 8a 00 	sts	0x008A, r1
    1d60:	10 92 89 00 	sts	0x0089, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0CTC != NULL)
    1d64:	80 91 85 00 	lds	r24, 0x0085
    1d68:	90 91 86 00 	lds	r25, 0x0086
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	29 f0       	breq	.+10     	; 0x1d7a <__vector_10+0x6a>
		{
			TMR_pfTimer0CTC();
    1d70:	e0 91 85 00 	lds	r30, 0x0085
    1d74:	f0 91 86 00 	lds	r31, 0x0086
    1d78:	09 95       	icall
		}
	}
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	ff 91       	pop	r31
    1d80:	ef 91       	pop	r30
    1d82:	bf 91       	pop	r27
    1d84:	af 91       	pop	r26
    1d86:	9f 91       	pop	r25
    1d88:	8f 91       	pop	r24
    1d8a:	7f 91       	pop	r23
    1d8c:	6f 91       	pop	r22
    1d8e:	5f 91       	pop	r21
    1d90:	4f 91       	pop	r20
    1d92:	3f 91       	pop	r19
    1d94:	2f 91       	pop	r18
    1d96:	0f 90       	pop	r0
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	0f 90       	pop	r0
    1d9c:	1f 90       	pop	r1
    1d9e:	18 95       	reti

00001da0 <main>:


void App_voidTogLed(void);

int main(void)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	a1 97       	sbiw	r28, 0x21	; 33
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8OCRValue =0;
    1db4:	19 a2       	std	Y+33, r1	; 0x21
	u16 Local_u16DigitalValue , Local_u16OCRValue;
	DIO_u8Init();
    1db6:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_u8Init>
//	/* Set Call back of Timer */
//	TMR_u8Timer0CTCSetCallBack(&App_voidTogLed);
	/* Start Timer */


	TMR_voidTimer1Init();
    1dba:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <TMR_voidTimer1Init>
	while(1)
	{
		/* Get Digital Value ADC0 */
//		ADC_u8GetDigitalValueSunchNonBlocking(ADC_u8_CHANNEL_0,&Local_u16DigitalValue);
//		Local_u16OCRValue =((2000UL* Local_u16DigitalValue)/1023)+580;
		TMR_voidTimer1SetCompareMatchValueChannelA(2500);
    1dbe:	84 ec       	ldi	r24, 0xC4	; 196
    1dc0:	99 e0       	ldi	r25, 0x09	; 9
    1dc2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <TMR_voidTimer1SetCompareMatchValueChannelA>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	aa e7       	ldi	r26, 0x7A	; 122
    1dcc:	b4 e4       	ldi	r27, 0x44	; 68
    1dce:	89 8f       	std	Y+25, r24	; 0x19
    1dd0:	9a 8f       	std	Y+26, r25	; 0x1a
    1dd2:	ab 8f       	std	Y+27, r26	; 0x1b
    1dd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a ef       	ldi	r20, 0xFA	; 250
    1de4:	54 e4       	ldi	r21, 0x44	; 68
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8d 8b       	std	Y+21, r24	; 0x15
    1df0:	9e 8b       	std	Y+22, r25	; 0x16
    1df2:	af 8b       	std	Y+23, r26	; 0x17
    1df4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1df6:	6d 89       	ldd	r22, Y+21	; 0x15
    1df8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <main+0x78>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <main+0xf6>
	else if (__tmp > 65535)
    1e18:	6d 89       	ldd	r22, Y+21	; 0x15
    1e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	69 8d       	ldd	r22, Y+25	; 0x19
    1e32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <main+0xd8>
    1e5a:	88 ec       	ldi	r24, 0xC8	; 200
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9a 8b       	std	Y+18, r25	; 0x12
    1e60:	89 8b       	std	Y+17, r24	; 0x11
    1e62:	89 89       	ldd	r24, Y+17	; 0x11
    1e64:	9a 89       	ldd	r25, Y+18	; 0x12
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <main+0xc6>
    1e6a:	9a 8b       	std	Y+18, r25	; 0x12
    1e6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e70:	9c 89       	ldd	r25, Y+20	; 0x14
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <main+0xba>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	6d 89       	ldd	r22, Y+21	; 0x15
    1e84:	7e 89       	ldd	r23, Y+22	; 0x16
    1e86:	8f 89       	ldd	r24, Y+23	; 0x17
    1e88:	98 8d       	ldd	r25, Y+24	; 0x18
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9c 8b       	std	Y+20, r25	; 0x14
    1e94:	8b 8b       	std	Y+19, r24	; 0x13
    1e96:	8b 89       	ldd	r24, Y+19	; 0x13
    1e98:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9a:	98 8b       	std	Y+16, r25	; 0x10
    1e9c:	8f 87       	std	Y+15, r24	; 0x0f
    1e9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea0:	98 89       	ldd	r25, Y+16	; 0x10
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <main+0x102>
    1ea6:	98 8b       	std	Y+16, r25	; 0x10
    1ea8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		TMR_voidTimer1SetCompareMatchValueChannelA(500);
    1eaa:	84 ef       	ldi	r24, 0xF4	; 244
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <TMR_voidTimer1SetCompareMatchValueChannelA>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	aa e7       	ldi	r26, 0x7A	; 122
    1eb8:	b4 e4       	ldi	r27, 0x44	; 68
    1eba:	8b 87       	std	Y+11, r24	; 0x0b
    1ebc:	9c 87       	std	Y+12, r25	; 0x0c
    1ebe:	ad 87       	std	Y+13, r26	; 0x0d
    1ec0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a ef       	ldi	r20, 0xFA	; 250
    1ed0:	54 e4       	ldi	r21, 0x44	; 68
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	8f 83       	std	Y+7, r24	; 0x07
    1edc:	98 87       	std	Y+8, r25	; 0x08
    1ede:	a9 87       	std	Y+9, r26	; 0x09
    1ee0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <main+0x164>
		__ticks = 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	3f c0       	rjmp	.+126    	; 0x1f82 <main+0x1e2>
	else if (__tmp > 65535)
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f e7       	ldi	r20, 0x7F	; 127
    1f12:	57 e4       	ldi	r21, 0x47	; 71
    1f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f18:	18 16       	cp	r1, r24
    1f1a:	4c f5       	brge	.+82     	; 0x1f6e <main+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e2       	ldi	r20, 0x20	; 32
    1f2a:	51 e4       	ldi	r21, 0x41	; 65
    1f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <main+0x1c4>
    1f46:	88 ec       	ldi	r24, 0xC8	; 200
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <main+0x1b2>
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <main+0x1a6>
    1f6c:	28 cf       	rjmp	.-432    	; 0x1dbe <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <main+0x1ee>
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	13 cf       	rjmp	.-474    	; 0x1dbe <main+0x1e>

00001f98 <App_voidTogLed>:
	}
	return 0 ;

	}
void App_voidTogLed(void)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0)
    1fa0:	80 91 8b 00 	lds	r24, 0x008B
    1fa4:	88 23       	and	r24, r24
    1fa6:	49 f4       	brne	.+18     	; 0x1fba <App_voidTogLed+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_u8SetPinValue>
		Local_u8Flag =1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	80 93 8b 00 	sts	0x008B, r24
    1fb8:	07 c0       	rjmp	.+14     	; 0x1fc8 <App_voidTogLed+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <DIO_u8SetPinValue>
		Local_u8Flag =0;
    1fc4:	10 92 8b 00 	sts	0x008B, r1
	}
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <__prologue_saves__>:
    1fce:	2f 92       	push	r2
    1fd0:	3f 92       	push	r3
    1fd2:	4f 92       	push	r4
    1fd4:	5f 92       	push	r5
    1fd6:	6f 92       	push	r6
    1fd8:	7f 92       	push	r7
    1fda:	8f 92       	push	r8
    1fdc:	9f 92       	push	r9
    1fde:	af 92       	push	r10
    1fe0:	bf 92       	push	r11
    1fe2:	cf 92       	push	r12
    1fe4:	df 92       	push	r13
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	ca 1b       	sub	r28, r26
    1ff8:	db 0b       	sbc	r29, r27
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	09 94       	ijmp

00002006 <__epilogue_restores__>:
    2006:	2a 88       	ldd	r2, Y+18	; 0x12
    2008:	39 88       	ldd	r3, Y+17	; 0x11
    200a:	48 88       	ldd	r4, Y+16	; 0x10
    200c:	5f 84       	ldd	r5, Y+15	; 0x0f
    200e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2010:	7d 84       	ldd	r7, Y+13	; 0x0d
    2012:	8c 84       	ldd	r8, Y+12	; 0x0c
    2014:	9b 84       	ldd	r9, Y+11	; 0x0b
    2016:	aa 84       	ldd	r10, Y+10	; 0x0a
    2018:	b9 84       	ldd	r11, Y+9	; 0x09
    201a:	c8 84       	ldd	r12, Y+8	; 0x08
    201c:	df 80       	ldd	r13, Y+7	; 0x07
    201e:	ee 80       	ldd	r14, Y+6	; 0x06
    2020:	fd 80       	ldd	r15, Y+5	; 0x05
    2022:	0c 81       	ldd	r16, Y+4	; 0x04
    2024:	1b 81       	ldd	r17, Y+3	; 0x03
    2026:	aa 81       	ldd	r26, Y+2	; 0x02
    2028:	b9 81       	ldd	r27, Y+1	; 0x01
    202a:	ce 0f       	add	r28, r30
    202c:	d1 1d       	adc	r29, r1
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	ed 01       	movw	r28, r26
    203a:	08 95       	ret

0000203c <_exit>:
    203c:	f8 94       	cli

0000203e <__stop_program>:
    203e:	ff cf       	rjmp	.-2      	; 0x203e <__stop_program>
