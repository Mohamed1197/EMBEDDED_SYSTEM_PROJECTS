
IMT_SMART_HOME_FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  000057f0  00005884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080010c  0080010c  00005930  2**0
                  ALLOC
  3 .stab         000065a0  00000000  00000000  00005930  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002bf6  00000000  00000000  0000bed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000eac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ec06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ed76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000109bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000118aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00012658  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000127b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00012a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_9>
      28:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_10>
      2c:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 22 	call	0x452c	; 0x452c <main>
      8a:	0c 94 f6 2b 	jmp	0x57ec	; 0x57ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 2b 	jmp	0x577e	; 0x577e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ee       	ldi	r26, 0xEB	; 235
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 2b 	jmp	0x577e	; 0x577e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ee       	ldi	r24, 0xEB	; 235
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cf 2b 	jmp	0x579e	; 0x579e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	83 60       	ori	r24, 0x03	; 3
     b68:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     bd0:	ec e5       	ldi	r30, 0x5C	; 92
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <MTIMER0_VidOVF_SetCallBack+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	90 93 16 01 	sts	0x0116, r25
     bf6:	80 93 15 01 	sts	0x0115, r24
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <MTIMER0_VidCTC_SetCallBack+0x6>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	90 93 16 01 	sts	0x0116, r25
     c1a:	80 93 15 01 	sts	0x0115, r24
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     c52:	e0 91 15 01 	lds	r30, 0x0115
     c56:	f0 91 16 01 	lds	r31, 0x0116
     c5a:	09 95       	icall
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     cac:	e0 91 15 01 	lds	r30, 0x0115
     cb0:	f0 91 16 01 	lds	r31, 0x0116
     cb4:	09 95       	icall
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     ce4:	ae e4       	ldi	r26, 0x4E	; 78
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ee e4       	ldi	r30, 0x4E	; 78
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	88 7f       	andi	r24, 0xF8	; 248
     cf0:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     cf2:	ae e4       	ldi	r26, 0x4E	; 78
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ee e4       	ldi	r30, 0x4E	; 78
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	82 60       	ori	r24, 0x02	; 2
     cfe:	8c 93       	st	X, r24
	/*Mode Select*/
#if TIMER1_SET_MODE == TIMER1_NORMAL_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     d00:	ae e4       	ldi	r26, 0x4E	; 78
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ee e4       	ldi	r30, 0x4E	; 78
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7e       	andi	r24, 0xEF	; 239
     d0c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     d0e:	ae e4       	ldi	r26, 0x4E	; 78
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ee e4       	ldi	r30, 0x4E	; 78
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	87 7f       	andi	r24, 0xF7	; 247
     d1a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     d1c:	af e4       	ldi	r26, 0x4F	; 79
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ef e4       	ldi	r30, 0x4F	; 79
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
     d2a:	af e4       	ldi	r26, 0x4F	; 79
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ef e4       	ldi	r30, 0x4F	; 79
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
     d38:	a9 e5       	ldi	r26, 0x59	; 89
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e9 e5       	ldi	r30, 0x59	; 89
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	84 60       	ori	r24, 0x04	; 4
     d44:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <MTIMER1_voidInit>:

/***********************************************************************************************/
/*                          Anther way to initialize Timer 1                                   */
/***********************************************************************************************/
void MTIMER1_voidInit( Timer1Mode_type mode,Timer1Scaler_type scaler,OC1A_Mode_type oc1a_mode,OC1B_Mode_type oc1b_mode)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	2a 97       	sbiw	r28, 0x0a	; 10
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	6a 83       	std	Y+2, r22	; 0x02
     d64:	4b 83       	std	Y+3, r20	; 0x03
     d66:	2c 83       	std	Y+4, r18	; 0x04
	switch (mode)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3a 87       	std	Y+10, r19	; 0x0a
     d70:	29 87       	std	Y+9, r18	; 0x09
     d72:	89 85       	ldd	r24, Y+9	; 0x09
     d74:	9a 85       	ldd	r25, Y+10	; 0x0a
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	91 05       	cpc	r25, r1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <MTIMER1_voidInit+0x32>
     d7c:	56 c0       	rjmp	.+172    	; 0xe2a <MTIMER1_voidInit+0xde>
     d7e:	29 85       	ldd	r18, Y+9	; 0x09
     d80:	3a 85       	ldd	r19, Y+10	; 0x0a
     d82:	23 30       	cpi	r18, 0x03	; 3
     d84:	31 05       	cpc	r19, r1
     d86:	54 f4       	brge	.+20     	; 0xd9c <MTIMER1_voidInit+0x50>
     d88:	89 85       	ldd	r24, Y+9	; 0x09
     d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	99 f0       	breq	.+38     	; 0xdb6 <MTIMER1_voidInit+0x6a>
     d90:	29 85       	ldd	r18, Y+9	; 0x09
     d92:	3a 85       	ldd	r19, Y+10	; 0x0a
     d94:	21 30       	cpi	r18, 0x01	; 1
     d96:	31 05       	cpc	r19, r1
     d98:	59 f1       	breq	.+86     	; 0xdf0 <MTIMER1_voidInit+0xa4>
     d9a:	9d c0       	rjmp	.+314    	; 0xed6 <MTIMER1_voidInit+0x18a>
     d9c:	89 85       	ldd	r24, Y+9	; 0x09
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <MTIMER1_voidInit+0x5c>
     da6:	5e c0       	rjmp	.+188    	; 0xe64 <MTIMER1_voidInit+0x118>
     da8:	29 85       	ldd	r18, Y+9	; 0x09
     daa:	3a 85       	ldd	r19, Y+10	; 0x0a
     dac:	24 30       	cpi	r18, 0x04	; 4
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <MTIMER1_voidInit+0x68>
     db2:	75 c0       	rjmp	.+234    	; 0xe9e <MTIMER1_voidInit+0x152>
     db4:	90 c0       	rjmp	.+288    	; 0xed6 <MTIMER1_voidInit+0x18a>
	{
	case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A,WGM10);
     db6:	af e4       	ldi	r26, 0x4F	; 79
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ef e4       	ldi	r30, 0x4F	; 79
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8e 7f       	andi	r24, 0xFE	; 254
     dc2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
     dc4:	af e4       	ldi	r26, 0x4F	; 79
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ef e4       	ldi	r30, 0x4F	; 79
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
     dd2:	ae e4       	ldi	r26, 0x4E	; 78
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ee e4       	ldi	r30, 0x4E	; 78
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	87 7f       	andi	r24, 0xF7	; 247
     dde:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
     de0:	ae e4       	ldi	r26, 0x4E	; 78
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ee e4       	ldi	r30, 0x4E	; 78
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 7e       	andi	r24, 0xEF	; 239
     dec:	8c 93       	st	X, r24
     dee:	73 c0       	rjmp	.+230    	; 0xed6 <MTIMER1_voidInit+0x18a>
		break;
	case TIMER1_CTC_ICR_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
     df0:	af e4       	ldi	r26, 0x4F	; 79
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	ef e4       	ldi	r30, 0x4F	; 79
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
     dfe:	af e4       	ldi	r26, 0x4F	; 79
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ef e4       	ldi	r30, 0x4F	; 79
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
     e0c:	ae e4       	ldi	r26, 0x4E	; 78
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ee e4       	ldi	r30, 0x4E	; 78
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	88 60       	ori	r24, 0x08	; 8
     e18:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
     e1a:	ae e4       	ldi	r26, 0x4E	; 78
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ee e4       	ldi	r30, 0x4E	; 78
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 61       	ori	r24, 0x10	; 16
     e26:	8c 93       	st	X, r24
     e28:	56 c0       	rjmp	.+172    	; 0xed6 <MTIMER1_voidInit+0x18a>
		break;

	case TIMER1_CTC_OCRA_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
     e2a:	af e4       	ldi	r26, 0x4F	; 79
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ef e4       	ldi	r30, 0x4F	; 79
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8e 7f       	andi	r24, 0xFE	; 254
     e36:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
     e38:	af e4       	ldi	r26, 0x4F	; 79
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ef e4       	ldi	r30, 0x4F	; 79
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8d 7f       	andi	r24, 0xFD	; 253
     e44:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
     e46:	ae e4       	ldi	r26, 0x4E	; 78
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ee e4       	ldi	r30, 0x4E	; 78
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
     e54:	ae e4       	ldi	r26, 0x4E	; 78
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ee e4       	ldi	r30, 0x4E	; 78
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8f 7e       	andi	r24, 0xEF	; 239
     e60:	8c 93       	st	X, r24
     e62:	39 c0       	rjmp	.+114    	; 0xed6 <MTIMER1_voidInit+0x18a>
		break;

	case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
     e64:	af e4       	ldi	r26, 0x4F	; 79
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ef e4       	ldi	r30, 0x4F	; 79
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8e 7f       	andi	r24, 0xFE	; 254
     e70:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
     e72:	af e4       	ldi	r26, 0x4F	; 79
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ef e4       	ldi	r30, 0x4F	; 79
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
     e80:	ae e4       	ldi	r26, 0x4E	; 78
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ee e4       	ldi	r30, 0x4E	; 78
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	88 60       	ori	r24, 0x08	; 8
     e8c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
     e8e:	ae e4       	ldi	r26, 0x4E	; 78
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ee e4       	ldi	r30, 0x4E	; 78
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 61       	ori	r24, 0x10	; 16
     e9a:	8c 93       	st	X, r24
     e9c:	1c c0       	rjmp	.+56     	; 0xed6 <MTIMER1_voidInit+0x18a>
		break;

	case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
     e9e:	af e4       	ldi	r26, 0x4F	; 79
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ef e4       	ldi	r30, 0x4F	; 79
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	81 60       	ori	r24, 0x01	; 1
     eaa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
     eac:	af e4       	ldi	r26, 0x4F	; 79
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
     eba:	ae e4       	ldi	r26, 0x4E	; 78
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ee e4       	ldi	r30, 0x4E	; 78
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	88 60       	ori	r24, 0x08	; 8
     ec6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
     ec8:	ae e4       	ldi	r26, 0x4E	; 78
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ee e4       	ldi	r30, 0x4E	; 78
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 61       	ori	r24, 0x10	; 16
     ed4:	8c 93       	st	X, r24
		break;
	}
	switch (oc1a_mode)
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	38 87       	std	Y+8, r19	; 0x08
     ede:	2f 83       	std	Y+7, r18	; 0x07
     ee0:	8f 81       	ldd	r24, Y+7	; 0x07
     ee2:	98 85       	ldd	r25, Y+8	; 0x08
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	21 f1       	breq	.+72     	; 0xf32 <MTIMER1_voidInit+0x1e6>
     eea:	2f 81       	ldd	r18, Y+7	; 0x07
     eec:	38 85       	ldd	r19, Y+8	; 0x08
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <MTIMER1_voidInit+0x1b2>
     ef4:	8f 81       	ldd	r24, Y+7	; 0x07
     ef6:	98 85       	ldd	r25, Y+8	; 0x08
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	61 f0       	breq	.+24     	; 0xf14 <MTIMER1_voidInit+0x1c8>
     efc:	46 c0       	rjmp	.+140    	; 0xf8a <MTIMER1_voidInit+0x23e>
     efe:	2f 81       	ldd	r18, Y+7	; 0x07
     f00:	38 85       	ldd	r19, Y+8	; 0x08
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	21 f1       	breq	.+72     	; 0xf50 <MTIMER1_voidInit+0x204>
     f08:	8f 81       	ldd	r24, Y+7	; 0x07
     f0a:	98 85       	ldd	r25, Y+8	; 0x08
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	71 f1       	breq	.+92     	; 0xf6e <MTIMER1_voidInit+0x222>
     f12:	3b c0       	rjmp	.+118    	; 0xf8a <MTIMER1_voidInit+0x23e>
	{
	case OCRA_DISCONNECTED:
		CLR_BIT(TCCR1A,COM1A0);
     f14:	af e4       	ldi	r26, 0x4F	; 79
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ef e4       	ldi	r30, 0x4F	; 79
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7b       	andi	r24, 0xBF	; 191
     f20:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1A1);
     f22:	af e4       	ldi	r26, 0x4F	; 79
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ef e4       	ldi	r30, 0x4F	; 79
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 77       	andi	r24, 0x7F	; 127
     f2e:	8c 93       	st	X, r24
     f30:	2c c0       	rjmp	.+88     	; 0xf8a <MTIMER1_voidInit+0x23e>
		break;
	case OCRA_TOGGLE:
		SET_BIT(TCCR1A,COM1A0);
     f32:	af e4       	ldi	r26, 0x4F	; 79
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ef e4       	ldi	r30, 0x4F	; 79
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 64       	ori	r24, 0x40	; 64
     f3e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1A1);
     f40:	af e4       	ldi	r26, 0x4F	; 79
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ef e4       	ldi	r30, 0x4F	; 79
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8f 77       	andi	r24, 0x7F	; 127
     f4c:	8c 93       	st	X, r24
     f4e:	1d c0       	rjmp	.+58     	; 0xf8a <MTIMER1_voidInit+0x23e>
		break;
	case OCRA_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1A0);
     f50:	af e4       	ldi	r26, 0x4F	; 79
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ef e4       	ldi	r30, 0x4F	; 79
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8f 7b       	andi	r24, 0xBF	; 191
     f5c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
     f5e:	af e4       	ldi	r26, 0x4F	; 79
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ef e4       	ldi	r30, 0x4F	; 79
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 68       	ori	r24, 0x80	; 128
     f6a:	8c 93       	st	X, r24
     f6c:	0e c0       	rjmp	.+28     	; 0xf8a <MTIMER1_voidInit+0x23e>
		break;
	case OCRA_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
     f6e:	af e4       	ldi	r26, 0x4F	; 79
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ef e4       	ldi	r30, 0x4F	; 79
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 64       	ori	r24, 0x40	; 64
     f7a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
     f7c:	af e4       	ldi	r26, 0x4F	; 79
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ef e4       	ldi	r30, 0x4F	; 79
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	8c 93       	st	X, r24
		break;
	}
	switch (oc1b_mode)
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3e 83       	std	Y+6, r19	; 0x06
     f92:	2d 83       	std	Y+5, r18	; 0x05
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	91 05       	cpc	r25, r1
     f9c:	21 f1       	breq	.+72     	; 0xfe6 <MTIMER1_voidInit+0x29a>
     f9e:	2d 81       	ldd	r18, Y+5	; 0x05
     fa0:	3e 81       	ldd	r19, Y+6	; 0x06
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <MTIMER1_voidInit+0x266>
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	61 f0       	breq	.+24     	; 0xfc8 <MTIMER1_voidInit+0x27c>
     fb0:	46 c0       	rjmp	.+140    	; 0x103e <MTIMER1_voidInit+0x2f2>
     fb2:	2d 81       	ldd	r18, Y+5	; 0x05
     fb4:	3e 81       	ldd	r19, Y+6	; 0x06
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	31 05       	cpc	r19, r1
     fba:	21 f1       	breq	.+72     	; 0x1004 <MTIMER1_voidInit+0x2b8>
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	91 05       	cpc	r25, r1
     fc4:	71 f1       	breq	.+92     	; 0x1022 <MTIMER1_voidInit+0x2d6>
     fc6:	3b c0       	rjmp	.+118    	; 0x103e <MTIMER1_voidInit+0x2f2>
	{
	case OCRB_DISCONNECTED:
		CLR_BIT(TCCR1A,COM1B0);
     fc8:	af e4       	ldi	r26, 0x4F	; 79
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ef e4       	ldi	r30, 0x4F	; 79
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7e       	andi	r24, 0xEF	; 239
     fd4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1B1);
     fd6:	af e4       	ldi	r26, 0x4F	; 79
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ef e4       	ldi	r30, 0x4F	; 79
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8f 7d       	andi	r24, 0xDF	; 223
     fe2:	8c 93       	st	X, r24
     fe4:	2c c0       	rjmp	.+88     	; 0x103e <MTIMER1_voidInit+0x2f2>
		break;
	case OCRB_TOGGLE:
		SET_BIT(TCCR1A,COM1B0);
     fe6:	af e4       	ldi	r26, 0x4F	; 79
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ef e4       	ldi	r30, 0x4F	; 79
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 61       	ori	r24, 0x10	; 16
     ff2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,COM1B1);
     ff4:	af e4       	ldi	r26, 0x4F	; 79
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ef e4       	ldi	r30, 0x4F	; 79
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8f 7d       	andi	r24, 0xDF	; 223
    1000:	8c 93       	st	X, r24
    1002:	1d c0       	rjmp	.+58     	; 0x103e <MTIMER1_voidInit+0x2f2>
		break;
	case OCRB_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1B0);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7e       	andi	r24, 0xEF	; 239
    1010:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1012:	af e4       	ldi	r26, 0x4F	; 79
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 62       	ori	r24, 0x20	; 32
    101e:	8c 93       	st	X, r24
    1020:	0e c0       	rjmp	.+28     	; 0x103e <MTIMER1_voidInit+0x2f2>
		break;
	case OCRB_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    1022:	af e4       	ldi	r26, 0x4F	; 79
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ef e4       	ldi	r30, 0x4F	; 79
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 61       	ori	r24, 0x10	; 16
    102e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1030:	af e4       	ldi	r26, 0x4F	; 79
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ef e4       	ldi	r30, 0x4F	; 79
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 62       	ori	r24, 0x20	; 32
    103c:	8c 93       	st	X, r24
		break;
	}


	TCCR1B&=0XF8;
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 7f       	andi	r24, 0xF8	; 248
    104a:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    104c:	ae e4       	ldi	r26, 0x4E	; 78
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ee e4       	ldi	r30, 0x4E	; 78
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	90 81       	ld	r25, Z
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	89 2b       	or	r24, r25
    105a:	8c 93       	st	X, r24
	ICR1 = 19999;     /* top ICR for frequency 50 Hz for Servo */
    105c:	e6 e4       	ldi	r30, 0x46	; 70
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8f e1       	ldi	r24, 0x1F	; 31
    1062:	9e e4       	ldi	r25, 0x4E	; 78
    1064:	91 83       	std	Z+1, r25	; 0x01
    1066:	80 83       	st	Z, r24

}
    1068:	2a 96       	adiw	r28, 0x0a	; 10
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <MTIMER1_voidSetOcr1b>:
/**************************************************************************************************/
/*                                      For Servo Motor                                           */
/**************************************************************************************************/

void MTIMER1_voidSetOcr1b(u16 Copy_u16OCRValue)
{
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <MTIMER1_voidSetOcr1b+0xa>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=999+((u32)Copy_u16OCRValue*1000)/180;
    108c:	0a e4       	ldi	r16, 0x4A	; 74
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	cc 01       	movw	r24, r24
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	28 ee       	ldi	r18, 0xE8	; 232
    109c:	33 e0       	ldi	r19, 0x03	; 3
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <__mulsi3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	24 eb       	ldi	r18, 0xB4	; 180
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 9d 2b 	call	0x573a	; 0x573a <__udivmodsi4>
    10be:	da 01       	movw	r26, r20
    10c0:	c9 01       	movw	r24, r18
    10c2:	89 51       	subi	r24, 0x19	; 25
    10c4:	9c 4f       	sbci	r25, 0xFC	; 252
    10c6:	f8 01       	movw	r30, r16
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <MTIMER1_VidSetPreload>:


/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <MTIMER1_VidSetPreload+0x6>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
    10e8:	ec e4       	ldi	r30, 0x4C	; 76
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1106:	ec e4       	ldi	r30, 0x4C	; 76
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
    111c:	e6 e4       	ldi	r30, 0x46	; 70
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	88 23       	and	r24, r24
    113a:	41 f4       	brne	.+16     	; 0x114c <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
    113c:	ae e4       	ldi	r26, 0x4E	; 78
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ee e4       	ldi	r30, 0x4E	; 78
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8f 7b       	andi	r24, 0xBF	; 191
    1148:	8c 93       	st	X, r24
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	39 f4       	brne	.+14     	; 0x1160 <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
    1152:	ae e4       	ldi	r26, 0x4E	; 78
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ee e4       	ldi	r30, 0x4E	; 78
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	80 64       	ori	r24, 0x40	; 64
    115e:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <MTIMER1_VidOVF_SetCallBack+0x6>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	90 93 18 01 	sts	0x0118, r25
    117e:	80 93 17 01 	sts	0x0117, r24
}
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <MTIMER1_VidICF_SetCallBack+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	90 93 1a 01 	sts	0x011A, r25
    11a2:	80 93 19 01 	sts	0x0119, r24
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    11da:	e0 91 17 01 	lds	r30, 0x0117
    11de:	f0 91 18 01 	lds	r31, 0x0118
    11e2:	09 95       	icall
}
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
    1234:	e0 91 19 01 	lds	r30, 0x0119
    1238:	f0 91 1a 01 	lds	r31, 0x011A
    123c:	09 95       	icall
}
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	bf 91       	pop	r27
    1248:	af 91       	pop	r26
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	7f 91       	pop	r23
    1250:	6f 91       	pop	r22
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    126c:	af e5       	ldi	r26, 0x5F	; 95
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ef e5       	ldi	r30, 0x5F	; 95
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 68       	ori	r24, 0x80	; 128
    1278:	8c 93       	st	X, r24
}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1288:	af e5       	ldi	r26, 0x5F	; 95
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ef e5       	ldi	r30, 0x5F	; 95
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 77       	andi	r24, 0x7F	; 127
    1294:	8c 93       	st	X, r24
}
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    12a4:	a5 e5       	ldi	r26, 0x55	; 85
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e5       	ldi	r30, 0x55	; 85
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    12b2:	a5 e5       	ldi	r26, 0x55	; 85
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e5 e5       	ldi	r30, 0x55	; 85
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    12c0:	ab e5       	ldi	r26, 0x5B	; 91
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	eb e5       	ldi	r30, 0x5B	; 91
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 64       	ori	r24, 0x40	; 64
    12cc:	8c 93       	st	X, r24
}
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    12dc:	a5 e5       	ldi	r26, 0x55	; 85
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e5       	ldi	r30, 0x55	; 85
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	84 60       	ori	r24, 0x04	; 4
    12e8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    12ea:	a5 e5       	ldi	r26, 0x55	; 85
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e5       	ldi	r30, 0x55	; 85
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	88 60       	ori	r24, 0x08	; 8
    12f6:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    12f8:	ab e5       	ldi	r26, 0x5B	; 91
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	eb e5       	ldi	r30, 0x5B	; 91
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	80 68       	ori	r24, 0x80	; 128
    1304:	8c 93       	st	X, r24
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    1314:	a4 e5       	ldi	r26, 0x54	; 84
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e4 e5       	ldi	r30, 0x54	; 84
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	80 64       	ori	r24, 0x40	; 64
    1320:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    1322:	ab e5       	ldi	r26, 0x5B	; 91
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	eb e5       	ldi	r30, 0x5B	; 91
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	80 62       	ori	r24, 0x20	; 32
    132e:	8c 93       	st	X, r24
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <MEXTI_VidSenseControl+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <MEXTI_VidSenseControl+0x8>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3c 83       	std	Y+4, r19	; 0x04
    134e:	2b 83       	std	Y+3, r18	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <MEXTI_VidSenseControl+0x26>
    135a:	54 c0       	rjmp	.+168    	; 0x1404 <MEXTI_VidSenseControl+0xce>
    135c:	2b 81       	ldd	r18, Y+3	; 0x03
    135e:	3c 81       	ldd	r19, Y+4	; 0x04
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <MEXTI_VidSenseControl+0x32>
    1366:	96 c0       	rjmp	.+300    	; 0x1494 <MEXTI_VidSenseControl+0x15e>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	09 f0       	breq	.+2      	; 0x1372 <MEXTI_VidSenseControl+0x3c>
    1370:	a6 c0       	rjmp	.+332    	; 0x14be <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	88 23       	and	r24, r24
    1376:	79 f4       	brne	.+30     	; 0x1396 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8e 7f       	andi	r24, 0xFE	; 254
    1384:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8d 7f       	andi	r24, 0xFD	; 253
    1392:	8c 93       	st	X, r24
    1394:	94 c0       	rjmp	.+296    	; 0x14be <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	79 f4       	brne	.+30     	; 0x13ba <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    139c:	a5 e5       	ldi	r26, 0x55	; 85
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e5       	ldi	r30, 0x55	; 85
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	81 60       	ori	r24, 0x01	; 1
    13a8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    13aa:	a5 e5       	ldi	r26, 0x55	; 85
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e5       	ldi	r30, 0x55	; 85
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8d 7f       	andi	r24, 0xFD	; 253
    13b6:	8c 93       	st	X, r24
    13b8:	82 c0       	rjmp	.+260    	; 0x14be <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	79 f4       	brne	.+30     	; 0x13de <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    13c0:	a5 e5       	ldi	r26, 0x55	; 85
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e5       	ldi	r30, 0x55	; 85
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8e 7f       	andi	r24, 0xFE	; 254
    13cc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    13ce:	a5 e5       	ldi	r26, 0x55	; 85
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e5       	ldi	r30, 0x55	; 85
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	82 60       	ori	r24, 0x02	; 2
    13da:	8c 93       	st	X, r24
    13dc:	70 c0       	rjmp	.+224    	; 0x14be <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <MEXTI_VidSenseControl+0xb0>
    13e4:	6c c0       	rjmp	.+216    	; 0x14be <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    13e6:	a5 e5       	ldi	r26, 0x55	; 85
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e5       	ldi	r30, 0x55	; 85
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	81 60       	ori	r24, 0x01	; 1
    13f2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    13f4:	a5 e5       	ldi	r26, 0x55	; 85
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e5 e5       	ldi	r30, 0x55	; 85
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	8c 93       	st	X, r24
    1402:	5d c0       	rjmp	.+186    	; 0x14be <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	88 23       	and	r24, r24
    1408:	79 f4       	brne	.+30     	; 0x1428 <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    140a:	a5 e5       	ldi	r26, 0x55	; 85
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e5       	ldi	r30, 0x55	; 85
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8b 7f       	andi	r24, 0xFB	; 251
    1416:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1418:	a5 e5       	ldi	r26, 0x55	; 85
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e5       	ldi	r30, 0x55	; 85
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	87 7f       	andi	r24, 0xF7	; 247
    1424:	8c 93       	st	X, r24
    1426:	4b c0       	rjmp	.+150    	; 0x14be <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	79 f4       	brne	.+30     	; 0x144c <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    142e:	a5 e5       	ldi	r26, 0x55	; 85
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e5       	ldi	r30, 0x55	; 85
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	84 60       	ori	r24, 0x04	; 4
    143a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    143c:	a5 e5       	ldi	r26, 0x55	; 85
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e5 e5       	ldi	r30, 0x55	; 85
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	87 7f       	andi	r24, 0xF7	; 247
    1448:	8c 93       	st	X, r24
    144a:	39 c0       	rjmp	.+114    	; 0x14be <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	79 f4       	brne	.+30     	; 0x1470 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    1452:	a5 e5       	ldi	r26, 0x55	; 85
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e5       	ldi	r30, 0x55	; 85
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8b 7f       	andi	r24, 0xFB	; 251
    145e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1460:	a5 e5       	ldi	r26, 0x55	; 85
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e5       	ldi	r30, 0x55	; 85
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	88 60       	ori	r24, 0x08	; 8
    146c:	8c 93       	st	X, r24
    146e:	27 c0       	rjmp	.+78     	; 0x14be <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	21 f5       	brne	.+72     	; 0x14be <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    1476:	a5 e5       	ldi	r26, 0x55	; 85
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e5       	ldi	r30, 0x55	; 85
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	84 60       	ori	r24, 0x04	; 4
    1482:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1484:	a5 e5       	ldi	r26, 0x55	; 85
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e5       	ldi	r30, 0x55	; 85
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	88 60       	ori	r24, 0x08	; 8
    1490:	8c 93       	st	X, r24
    1492:	15 c0       	rjmp	.+42     	; 0x14be <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	41 f4       	brne	.+16     	; 0x14aa <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    149a:	a4 e5       	ldi	r26, 0x54	; 84
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e4 e5       	ldi	r30, 0x54	; 84
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 7b       	andi	r24, 0xBF	; 191
    14a6:	8c 93       	st	X, r24
    14a8:	0a c0       	rjmp	.+20     	; 0x14be <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	39 f4       	brne	.+14     	; 0x14be <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    14b0:	a4 e5       	ldi	r26, 0x54	; 84
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e4 e5       	ldi	r30, 0x54	; 84
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 64       	ori	r24, 0x40	; 64
    14bc:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <MEXTI0_Set_CallBackFunction+0x6>
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	90 93 1c 01 	sts	0x011C, r25
    14e2:	80 93 1b 01 	sts	0x011B, r24
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    151a:	e0 91 1b 01 	lds	r30, 0x011B
    151e:	f0 91 1c 01 	lds	r31, 0x011C
    1522:	09 95       	icall
}
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	ff 91       	pop	r31
    152a:	ef 91       	pop	r30
    152c:	bf 91       	pop	r27
    152e:	af 91       	pop	r26
    1530:	9f 91       	pop	r25
    1532:	8f 91       	pop	r24
    1534:	7f 91       	pop	r23
    1536:	6f 91       	pop	r22
    1538:	5f 91       	pop	r21
    153a:	4f 91       	pop	r20
    153c:	3f 91       	pop	r19
    153e:	2f 91       	pop	r18
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0
    1546:	1f 90       	pop	r1
    1548:	18 95       	reti

0000154a <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	00 d0       	rcall	.+0      	; 0x1550 <MDIO_Error_State_SetPinDirection+0x6>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <MDIO_Error_State_SetPinDirection+0x8>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <MDIO_Error_State_SetPinDirection+0xa>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	8a 83       	std	Y+2, r24	; 0x02
    155a:	6b 83       	std	Y+3, r22	; 0x03
    155c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	88 30       	cpi	r24, 0x08	; 8
    1566:	08 f0       	brcs	.+2      	; 0x156a <MDIO_Error_State_SetPinDirection+0x20>
    1568:	e8 c0       	rjmp	.+464    	; 0x173a <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3e 83       	std	Y+6, r19	; 0x06
    1572:	2d 83       	std	Y+5, r18	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	09 f4       	brne	.+2      	; 0x1580 <MDIO_Error_State_SetPinDirection+0x36>
    157e:	48 c0       	rjmp	.+144    	; 0x1610 <MDIO_Error_State_SetPinDirection+0xc6>
    1580:	2d 81       	ldd	r18, Y+5	; 0x05
    1582:	3e 81       	ldd	r19, Y+6	; 0x06
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <MDIO_Error_State_SetPinDirection+0x4a>
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	71 f0       	breq	.+28     	; 0x15ae <MDIO_Error_State_SetPinDirection+0x64>
    1592:	d1 c0       	rjmp	.+418    	; 0x1736 <MDIO_Error_State_SetPinDirection+0x1ec>
    1594:	2d 81       	ldd	r18, Y+5	; 0x05
    1596:	3e 81       	ldd	r19, Y+6	; 0x06
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <MDIO_Error_State_SetPinDirection+0x56>
    159e:	69 c0       	rjmp	.+210    	; 0x1672 <MDIO_Error_State_SetPinDirection+0x128>
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <MDIO_Error_State_SetPinDirection+0x62>
    15aa:	94 c0       	rjmp	.+296    	; 0x16d4 <MDIO_Error_State_SetPinDirection+0x18a>
    15ac:	c4 c0       	rjmp	.+392    	; 0x1736 <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	a1 f4       	brne	.+40     	; 0x15dc <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    15b4:	aa e3       	ldi	r26, 0x3A	; 58
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	ea e3       	ldi	r30, 0x3A	; 58
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <MDIO_Error_State_SetPinDirection+0x88>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <MDIO_Error_State_SetPinDirection+0x84>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	b0 c0       	rjmp	.+352    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	88 23       	and	r24, r24
    15e0:	a9 f4       	brne	.+42     	; 0x160c <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    15e2:	aa e3       	ldi	r26, 0x3A	; 58
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	ea e3       	ldi	r30, 0x3A	; 58
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <MDIO_Error_State_SetPinDirection+0xb6>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <MDIO_Error_State_SetPinDirection+0xb2>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	98 c0       	rjmp	.+304    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	96 c0       	rjmp	.+300    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	a1 f4       	brne	.+40     	; 0x163e <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    1616:	a7 e3       	ldi	r26, 0x37	; 55
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e7 e3       	ldi	r30, 0x37	; 55
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <MDIO_Error_State_SetPinDirection+0xea>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <MDIO_Error_State_SetPinDirection+0xe6>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	7f c0       	rjmp	.+254    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	88 23       	and	r24, r24
    1642:	a9 f4       	brne	.+42     	; 0x166e <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1644:	a7 e3       	ldi	r26, 0x37	; 55
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e7 e3       	ldi	r30, 0x37	; 55
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <MDIO_Error_State_SetPinDirection+0x118>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <MDIO_Error_State_SetPinDirection+0x114>
    1666:	80 95       	com	r24
    1668:	84 23       	and	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	67 c0       	rjmp	.+206    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	65 c0       	rjmp	.+202    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	a1 f4       	brne	.+40     	; 0x16a0 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    1678:	a4 e3       	ldi	r26, 0x34	; 52
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e4 e3       	ldi	r30, 0x34	; 52
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <MDIO_Error_State_SetPinDirection+0x14c>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <MDIO_Error_State_SetPinDirection+0x148>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	4e c0       	rjmp	.+156    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	88 23       	and	r24, r24
    16a4:	a9 f4       	brne	.+42     	; 0x16d0 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    16a6:	a4 e3       	ldi	r26, 0x34	; 52
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e4 e3       	ldi	r30, 0x34	; 52
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <MDIO_Error_State_SetPinDirection+0x17a>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <MDIO_Error_State_SetPinDirection+0x176>
    16c8:	80 95       	com	r24
    16ca:	84 23       	and	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	36 c0       	rjmp	.+108    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	34 c0       	rjmp	.+104    	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	a1 f4       	brne	.+40     	; 0x1702 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    16da:	a1 e3       	ldi	r26, 0x31	; 49
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e1 e3       	ldi	r30, 0x31	; 49
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <MDIO_Error_State_SetPinDirection+0x1ae>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <MDIO_Error_State_SetPinDirection+0x1aa>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	1d c0       	rjmp	.+58     	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	88 23       	and	r24, r24
    1706:	a9 f4       	brne	.+42     	; 0x1732 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    1708:	a1 e3       	ldi	r26, 0x31	; 49
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e1 e3       	ldi	r30, 0x31	; 49
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <MDIO_Error_State_SetPinDirection+0x1dc>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <MDIO_Error_State_SetPinDirection+0x1d8>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	05 c0       	rjmp	.+10     	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1732:	19 82       	std	Y+1, r1	; 0x01
    1734:	03 c0       	rjmp	.+6      	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    1736:	19 82       	std	Y+1, r1	; 0x01
    1738:	01 c0       	rjmp	.+2      	; 0x173c <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    173a:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    173c:	89 81       	ldd	r24, Y+1	; 0x01

}
    173e:	26 96       	adiw	r28, 0x06	; 6
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <MDIO_Error_State_SetPortDirection+0x6>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <MDIO_Error_State_SetPortDirection+0x8>
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	8a 83       	std	Y+2, r24	; 0x02
    1760:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	8f 3f       	cpi	r24, 0xFF	; 255
    176a:	19 f0       	breq	.+6      	; 0x1772 <MDIO_Error_State_SetPortDirection+0x22>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	88 23       	and	r24, r24
    1770:	a9 f5       	brne	.+106    	; 0x17dc <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3d 83       	std	Y+5, r19	; 0x05
    177a:	2c 83       	std	Y+4, r18	; 0x04
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	d1 f0       	breq	.+52     	; 0x17ba <MDIO_Error_State_SetPortDirection+0x6a>
    1786:	2c 81       	ldd	r18, Y+4	; 0x04
    1788:	3d 81       	ldd	r19, Y+5	; 0x05
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	2c f4       	brge	.+10     	; 0x179a <MDIO_Error_State_SetPortDirection+0x4a>
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	61 f0       	breq	.+24     	; 0x17b0 <MDIO_Error_State_SetPortDirection+0x60>
    1798:	1f c0       	rjmp	.+62     	; 0x17d8 <MDIO_Error_State_SetPortDirection+0x88>
    179a:	2c 81       	ldd	r18, Y+4	; 0x04
    179c:	3d 81       	ldd	r19, Y+5	; 0x05
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <MDIO_Error_State_SetPortDirection+0x74>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	81 f0       	breq	.+32     	; 0x17ce <MDIO_Error_State_SetPortDirection+0x7e>
    17ae:	14 c0       	rjmp	.+40     	; 0x17d8 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    17b0:	ea e3       	ldi	r30, 0x3A	; 58
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	80 83       	st	Z, r24
    17b8:	12 c0       	rjmp	.+36     	; 0x17de <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    17ba:	e7 e3       	ldi	r30, 0x37	; 55
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	80 83       	st	Z, r24
    17c2:	0d c0       	rjmp	.+26     	; 0x17de <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    17c4:	e4 e3       	ldi	r30, 0x34	; 52
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	80 83       	st	Z, r24
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    17ce:	e1 e3       	ldi	r30, 0x31	; 49
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	80 83       	st	Z, r24
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    17d8:	19 82       	std	Y+1, r1	; 0x01
    17da:	01 c0       	rjmp	.+2      	; 0x17de <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    17dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <MDIO_Error_State_SetPinValue+0x6>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <MDIO_Error_State_SetPinValue+0x8>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <MDIO_Error_State_SetPinValue+0xa>
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	8a 83       	std	Y+2, r24	; 0x02
    1800:	6b 83       	std	Y+3, r22	; 0x03
    1802:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	88 30       	cpi	r24, 0x08	; 8
    180c:	08 f0       	brcs	.+2      	; 0x1810 <MDIO_Error_State_SetPinValue+0x20>
    180e:	e8 c0       	rjmp	.+464    	; 0x19e0 <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3e 83       	std	Y+6, r19	; 0x06
    1818:	2d 83       	std	Y+5, r18	; 0x05
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	91 05       	cpc	r25, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <MDIO_Error_State_SetPinValue+0x36>
    1824:	48 c0       	rjmp	.+144    	; 0x18b6 <MDIO_Error_State_SetPinValue+0xc6>
    1826:	2d 81       	ldd	r18, Y+5	; 0x05
    1828:	3e 81       	ldd	r19, Y+6	; 0x06
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <MDIO_Error_State_SetPinValue+0x4a>
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	71 f0       	breq	.+28     	; 0x1854 <MDIO_Error_State_SetPinValue+0x64>
    1838:	d1 c0       	rjmp	.+418    	; 0x19dc <MDIO_Error_State_SetPinValue+0x1ec>
    183a:	2d 81       	ldd	r18, Y+5	; 0x05
    183c:	3e 81       	ldd	r19, Y+6	; 0x06
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <MDIO_Error_State_SetPinValue+0x56>
    1844:	69 c0       	rjmp	.+210    	; 0x1918 <MDIO_Error_State_SetPinValue+0x128>
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	91 05       	cpc	r25, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <MDIO_Error_State_SetPinValue+0x62>
    1850:	94 c0       	rjmp	.+296    	; 0x197a <MDIO_Error_State_SetPinValue+0x18a>
    1852:	c4 c0       	rjmp	.+392    	; 0x19dc <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	a1 f4       	brne	.+40     	; 0x1882 <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    185a:	ab e3       	ldi	r26, 0x3B	; 59
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	eb e3       	ldi	r30, 0x3B	; 59
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <MDIO_Error_State_SetPinValue+0x88>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <MDIO_Error_State_SetPinValue+0x84>
    187c:	84 2b       	or	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	b0 c0       	rjmp	.+352    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	88 23       	and	r24, r24
    1886:	a9 f4       	brne	.+42     	; 0x18b2 <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    1888:	ab e3       	ldi	r26, 0x3B	; 59
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	eb e3       	ldi	r30, 0x3B	; 59
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	48 2f       	mov	r20, r24
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 2e       	mov	r0, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <MDIO_Error_State_SetPinValue+0xb6>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	0a 94       	dec	r0
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <MDIO_Error_State_SetPinValue+0xb2>
    18aa:	80 95       	com	r24
    18ac:	84 23       	and	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	98 c0       	rjmp	.+304    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    18b2:	19 82       	std	Y+1, r1	; 0x01
    18b4:	96 c0       	rjmp	.+300    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	a1 f4       	brne	.+40     	; 0x18e4 <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    18bc:	a8 e3       	ldi	r26, 0x38	; 56
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e8 e3       	ldi	r30, 0x38	; 56
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <MDIO_Error_State_SetPinValue+0xea>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <MDIO_Error_State_SetPinValue+0xe6>
    18de:	84 2b       	or	r24, r20
    18e0:	8c 93       	st	X, r24
    18e2:	7f c0       	rjmp	.+254    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	88 23       	and	r24, r24
    18e8:	a9 f4       	brne	.+42     	; 0x1914 <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    18ea:	a8 e3       	ldi	r26, 0x38	; 56
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e8 e3       	ldi	r30, 0x38	; 56
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <MDIO_Error_State_SetPinValue+0x118>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <MDIO_Error_State_SetPinValue+0x114>
    190c:	80 95       	com	r24
    190e:	84 23       	and	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	67 c0       	rjmp	.+206    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1914:	19 82       	std	Y+1, r1	; 0x01
    1916:	65 c0       	rjmp	.+202    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	a1 f4       	brne	.+40     	; 0x1946 <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    191e:	a5 e3       	ldi	r26, 0x35	; 53
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e5 e3       	ldi	r30, 0x35	; 53
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <MDIO_Error_State_SetPinValue+0x14c>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <MDIO_Error_State_SetPinValue+0x148>
    1940:	84 2b       	or	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	4e c0       	rjmp	.+156    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	88 23       	and	r24, r24
    194a:	a9 f4       	brne	.+42     	; 0x1976 <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    194c:	a5 e3       	ldi	r26, 0x35	; 53
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e5 e3       	ldi	r30, 0x35	; 53
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <MDIO_Error_State_SetPinValue+0x17a>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <MDIO_Error_State_SetPinValue+0x176>
    196e:	80 95       	com	r24
    1970:	84 23       	and	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	36 c0       	rjmp	.+108    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1976:	19 82       	std	Y+1, r1	; 0x01
    1978:	34 c0       	rjmp	.+104    	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	a1 f4       	brne	.+40     	; 0x19a8 <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    1980:	a2 e3       	ldi	r26, 0x32	; 50
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e2 e3       	ldi	r30, 0x32	; 50
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <MDIO_Error_State_SetPinValue+0x1ae>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <MDIO_Error_State_SetPinValue+0x1aa>
    19a2:	84 2b       	or	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	1d c0       	rjmp	.+58     	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	88 23       	and	r24, r24
    19ac:	a9 f4       	brne	.+42     	; 0x19d8 <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    19ae:	a2 e3       	ldi	r26, 0x32	; 50
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <MDIO_Error_State_SetPinValue+0x1dc>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <MDIO_Error_State_SetPinValue+0x1d8>
    19d0:	80 95       	com	r24
    19d2:	84 23       	and	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	05 c0       	rjmp	.+10     	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    19d8:	19 82       	std	Y+1, r1	; 0x01
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    19dc:	19 82       	std	Y+1, r1	; 0x01
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    19e0:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    19e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    19e4:	26 96       	adiw	r28, 0x06	; 6
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <MDIO_Error_State_SetPortValue+0x6>
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <MDIO_Error_State_SetPortValue+0x8>
    19fe:	0f 92       	push	r0
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	8a 83       	std	Y+2, r24	; 0x02
    1a06:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	3d 83       	std	Y+5, r19	; 0x05
    1a14:	2c 83       	std	Y+4, r18	; 0x04
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	d1 f0       	breq	.+52     	; 0x1a54 <MDIO_Error_State_SetPortValue+0x5e>
    1a20:	2c 81       	ldd	r18, Y+4	; 0x04
    1a22:	3d 81       	ldd	r19, Y+5	; 0x05
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <MDIO_Error_State_SetPortValue+0x3e>
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	61 f0       	breq	.+24     	; 0x1a4a <MDIO_Error_State_SetPortValue+0x54>
    1a32:	1f c0       	rjmp	.+62     	; 0x1a72 <MDIO_Error_State_SetPortValue+0x7c>
    1a34:	2c 81       	ldd	r18, Y+4	; 0x04
    1a36:	3d 81       	ldd	r19, Y+5	; 0x05
    1a38:	22 30       	cpi	r18, 0x02	; 2
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	81 f0       	breq	.+32     	; 0x1a5e <MDIO_Error_State_SetPortValue+0x68>
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	9d 81       	ldd	r25, Y+5	; 0x05
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	91 05       	cpc	r25, r1
    1a46:	81 f0       	breq	.+32     	; 0x1a68 <MDIO_Error_State_SetPortValue+0x72>
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    1a4a:	eb e3       	ldi	r30, 0x3B	; 59
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	80 83       	st	Z, r24
    1a52:	10 c0       	rjmp	.+32     	; 0x1a74 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    1a54:	e8 e3       	ldi	r30, 0x38	; 56
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	80 83       	st	Z, r24
    1a5c:	0b c0       	rjmp	.+22     	; 0x1a74 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    1a5e:	e5 e3       	ldi	r30, 0x35	; 53
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	80 83       	st	Z, r24
    1a66:	06 c0       	rjmp	.+12     	; 0x1a74 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    1a68:	e2 e3       	ldi	r30, 0x32	; 50
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	80 83       	st	Z, r24
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    1a72:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	27 97       	sbiw	r28, 0x07	; 7
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	8a 83       	std	Y+2, r24	; 0x02
    1a9c:	6b 83       	std	Y+3, r22	; 0x03
    1a9e:	5d 83       	std	Y+5, r21	; 0x05
    1aa0:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	88 30       	cpi	r24, 0x08	; 8
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <MDIO_Error_State_GetPinValue+0x28>
    1aac:	79 c0       	rjmp	.+242    	; 0x1ba0 <MDIO_Error_State_GetPinValue+0x11a>
    1aae:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <MDIO_Error_State_GetPinValue+0x34>
    1ab8:	73 c0       	rjmp	.+230    	; 0x1ba0 <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3f 83       	std	Y+7, r19	; 0x07
    1ac2:	2e 83       	std	Y+6, r18	; 0x06
    1ac4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ac6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ac8:	41 30       	cpi	r20, 0x01	; 1
    1aca:	51 05       	cpc	r21, r1
    1acc:	59 f1       	breq	.+86     	; 0x1b24 <MDIO_Error_State_GetPinValue+0x9e>
    1ace:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	34 f4       	brge	.+12     	; 0x1ae4 <MDIO_Error_State_GetPinValue+0x5e>
    1ad8:	2e 81       	ldd	r18, Y+6	; 0x06
    1ada:	3f 81       	ldd	r19, Y+7	; 0x07
    1adc:	21 15       	cp	r18, r1
    1ade:	31 05       	cpc	r19, r1
    1ae0:	69 f0       	breq	.+26     	; 0x1afc <MDIO_Error_State_GetPinValue+0x76>
    1ae2:	5c c0       	rjmp	.+184    	; 0x1b9c <MDIO_Error_State_GetPinValue+0x116>
    1ae4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ae6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ae8:	42 30       	cpi	r20, 0x02	; 2
    1aea:	51 05       	cpc	r21, r1
    1aec:	79 f1       	breq	.+94     	; 0x1b4c <MDIO_Error_State_GetPinValue+0xc6>
    1aee:	8e 81       	ldd	r24, Y+6	; 0x06
    1af0:	9f 81       	ldd	r25, Y+7	; 0x07
    1af2:	83 30       	cpi	r24, 0x03	; 3
    1af4:	91 05       	cpc	r25, r1
    1af6:	09 f4       	brne	.+2      	; 0x1afa <MDIO_Error_State_GetPinValue+0x74>
    1af8:	3d c0       	rjmp	.+122    	; 0x1b74 <MDIO_Error_State_GetPinValue+0xee>
    1afa:	50 c0       	rjmp	.+160    	; 0x1b9c <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    1afc:	e9 e3       	ldi	r30, 0x39	; 57
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a9 01       	movw	r20, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <MDIO_Error_State_GetPinValue+0x8e>
    1b10:	55 95       	asr	r21
    1b12:	47 95       	ror	r20
    1b14:	8a 95       	dec	r24
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <MDIO_Error_State_GetPinValue+0x8a>
    1b18:	ca 01       	movw	r24, r20
    1b1a:	81 70       	andi	r24, 0x01	; 1
    1b1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b20:	80 83       	st	Z, r24
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1b24:	e6 e3       	ldi	r30, 0x36	; 54
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a9 01       	movw	r20, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <MDIO_Error_State_GetPinValue+0xb6>
    1b38:	55 95       	asr	r21
    1b3a:	47 95       	ror	r20
    1b3c:	8a 95       	dec	r24
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <MDIO_Error_State_GetPinValue+0xb2>
    1b40:	ca 01       	movw	r24, r20
    1b42:	81 70       	andi	r24, 0x01	; 1
    1b44:	ec 81       	ldd	r30, Y+4	; 0x04
    1b46:	fd 81       	ldd	r31, Y+5	; 0x05
    1b48:	80 83       	st	Z, r24
    1b4a:	2b c0       	rjmp	.+86     	; 0x1ba2 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1b4c:	e3 e3       	ldi	r30, 0x33	; 51
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <MDIO_Error_State_GetPinValue+0xde>
    1b60:	55 95       	asr	r21
    1b62:	47 95       	ror	r20
    1b64:	8a 95       	dec	r24
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <MDIO_Error_State_GetPinValue+0xda>
    1b68:	ca 01       	movw	r24, r20
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b6e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b70:	80 83       	st	Z, r24
    1b72:	17 c0       	rjmp	.+46     	; 0x1ba2 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1b74:	e0 e3       	ldi	r30, 0x30	; 48
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a9 01       	movw	r20, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <MDIO_Error_State_GetPinValue+0x106>
    1b88:	55 95       	asr	r21
    1b8a:	47 95       	ror	r20
    1b8c:	8a 95       	dec	r24
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <MDIO_Error_State_GetPinValue+0x102>
    1b90:	ca 01       	movw	r24, r20
    1b92:	81 70       	andi	r24, 0x01	; 1
    1b94:	ec 81       	ldd	r30, Y+4	; 0x04
    1b96:	fd 81       	ldd	r31, Y+5	; 0x05
    1b98:	80 83       	st	Z, r24
    1b9a:	03 c0       	rjmp	.+6      	; 0x1ba2 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1b9c:	19 82       	std	Y+1, r1	; 0x01
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ba4:	27 96       	adiw	r28, 0x07	; 7
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <MDIO_Error_State_SetNippleValue+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <MDIO_Error_State_SetNippleValue+0x8>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <MDIO_Error_State_SetNippleValue+0xa>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
    1bc6:	6b 83       	std	Y+3, r22	; 0x03
    1bc8:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	85 30       	cpi	r24, 0x05	; 5
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <MDIO_Error_State_SetNippleValue+0x20>
    1bd4:	c9 c0       	rjmp	.+402    	; 0x1d68 <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3e 83       	std	Y+6, r19	; 0x06
    1bde:	2d 83       	std	Y+5, r18	; 0x05
    1be0:	6d 81       	ldd	r22, Y+5	; 0x05
    1be2:	7e 81       	ldd	r23, Y+6	; 0x06
    1be4:	61 30       	cpi	r22, 0x01	; 1
    1be6:	71 05       	cpc	r23, r1
    1be8:	09 f4       	brne	.+2      	; 0x1bec <MDIO_Error_State_SetNippleValue+0x36>
    1bea:	41 c0       	rjmp	.+130    	; 0x1c6e <MDIO_Error_State_SetNippleValue+0xb8>
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	34 f4       	brge	.+12     	; 0x1c02 <MDIO_Error_State_SetNippleValue+0x4c>
    1bf6:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf8:	3e 81       	ldd	r19, Y+6	; 0x06
    1bfa:	21 15       	cp	r18, r1
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	71 f0       	breq	.+28     	; 0x1c1c <MDIO_Error_State_SetNippleValue+0x66>
    1c00:	b1 c0       	rjmp	.+354    	; 0x1d64 <MDIO_Error_State_SetNippleValue+0x1ae>
    1c02:	6d 81       	ldd	r22, Y+5	; 0x05
    1c04:	7e 81       	ldd	r23, Y+6	; 0x06
    1c06:	62 30       	cpi	r22, 0x02	; 2
    1c08:	71 05       	cpc	r23, r1
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <MDIO_Error_State_SetNippleValue+0x58>
    1c0c:	59 c0       	rjmp	.+178    	; 0x1cc0 <MDIO_Error_State_SetNippleValue+0x10a>
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	83 30       	cpi	r24, 0x03	; 3
    1c14:	91 05       	cpc	r25, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <MDIO_Error_State_SetNippleValue+0x64>
    1c18:	7c c0       	rjmp	.+248    	; 0x1d12 <MDIO_Error_State_SetNippleValue+0x15c>
    1c1a:	a4 c0       	rjmp	.+328    	; 0x1d64 <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1c1c:	ab e3       	ldi	r26, 0x3B	; 59
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	eb e3       	ldi	r30, 0x3B	; 59
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	8f e0       	ldi	r24, 0x0F	; 15
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <MDIO_Error_State_SetNippleValue+0x82>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	2a 95       	dec	r18
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <MDIO_Error_State_SetNippleValue+0x7e>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1c42:	ab e3       	ldi	r26, 0x3B	; 59
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	eb e3       	ldi	r30, 0x3B	; 59
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	88 2f       	mov	r24, r24
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	b9 01       	movw	r22, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <MDIO_Error_State_SetNippleValue+0xac>
    1c5e:	66 0f       	add	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	8a 95       	dec	r24
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <MDIO_Error_State_SetNippleValue+0xa8>
    1c66:	cb 01       	movw	r24, r22
    1c68:	84 2b       	or	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	7e c0       	rjmp	.+252    	; 0x1d6a <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1c6e:	a8 e3       	ldi	r26, 0x38	; 56
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e8 e3       	ldi	r30, 0x38	; 56
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	8f e0       	ldi	r24, 0x0F	; 15
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <MDIO_Error_State_SetNippleValue+0xd4>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	2a 95       	dec	r18
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <MDIO_Error_State_SetNippleValue+0xd0>
    1c8e:	80 95       	com	r24
    1c90:	84 23       	and	r24, r20
    1c92:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1c94:	a8 e3       	ldi	r26, 0x38	; 56
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e8 e3       	ldi	r30, 0x38	; 56
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	b9 01       	movw	r22, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <MDIO_Error_State_SetNippleValue+0xfe>
    1cb0:	66 0f       	add	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	8a 95       	dec	r24
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <MDIO_Error_State_SetNippleValue+0xfa>
    1cb8:	cb 01       	movw	r24, r22
    1cba:	84 2b       	or	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	55 c0       	rjmp	.+170    	; 0x1d6a <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1cc0:	a5 e3       	ldi	r26, 0x35	; 53
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e5 e3       	ldi	r30, 0x35	; 53
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	8f e0       	ldi	r24, 0x0F	; 15
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <MDIO_Error_State_SetNippleValue+0x126>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	2a 95       	dec	r18
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <MDIO_Error_State_SetNippleValue+0x122>
    1ce0:	80 95       	com	r24
    1ce2:	84 23       	and	r24, r20
    1ce4:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1ce6:	a5 e3       	ldi	r26, 0x35	; 53
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e5 e3       	ldi	r30, 0x35	; 53
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	b9 01       	movw	r22, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <MDIO_Error_State_SetNippleValue+0x150>
    1d02:	66 0f       	add	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	8a 95       	dec	r24
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <MDIO_Error_State_SetNippleValue+0x14c>
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	84 2b       	or	r24, r20
    1d0e:	8c 93       	st	X, r24
    1d10:	2c c0       	rjmp	.+88     	; 0x1d6a <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1d12:	a2 e3       	ldi	r26, 0x32	; 50
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e2 e3       	ldi	r30, 0x32	; 50
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	8f e0       	ldi	r24, 0x0F	; 15
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <MDIO_Error_State_SetNippleValue+0x178>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	2a 95       	dec	r18
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <MDIO_Error_State_SetNippleValue+0x174>
    1d32:	80 95       	com	r24
    1d34:	84 23       	and	r24, r20
    1d36:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1d38:	a2 e3       	ldi	r26, 0x32	; 50
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e2 e3       	ldi	r30, 0x32	; 50
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	48 2f       	mov	r20, r24
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	b9 01       	movw	r22, r18
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <MDIO_Error_State_SetNippleValue+0x1a2>
    1d54:	66 0f       	add	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	8a 95       	dec	r24
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <MDIO_Error_State_SetNippleValue+0x19e>
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	84 2b       	or	r24, r20
    1d60:	8c 93       	st	X, r24
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1d64:	19 82       	std	Y+1, r1	; 0x01
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1d68:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6c:	26 96       	adiw	r28, 0x06	; 6
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <MDIO_VidActivePullUP+0x6>
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	6a 81       	ldd	r22, Y+2	; 0x02
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>

}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1db2:	a7 e2       	ldi	r26, 0x27	; 39
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e7 e2       	ldi	r30, 0x27	; 39
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	80 64       	ori	r24, 0x40	; 64
    1dbe:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1dc0:	a7 e2       	ldi	r26, 0x27	; 39
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e7 e2       	ldi	r30, 0x27	; 39
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	8f 77       	andi	r24, 0x7F	; 127
    1dcc:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1dce:	a6 e2       	ldi	r26, 0x26	; 38
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e6 e2       	ldi	r30, 0x26	; 38
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 7f       	andi	r24, 0xF8	; 248
    1dda:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1ddc:	a6 e2       	ldi	r26, 0x26	; 38
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e6 e2       	ldi	r30, 0x26	; 38
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	87 60       	ori	r24, 0x07	; 7
    1de8:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1dea:	a7 e2       	ldi	r26, 0x27	; 39
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e7 e2       	ldi	r30, 0x27	; 39
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8f 7d       	andi	r24, 0xDF	; 223
    1df6:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1df8:	a6 e2       	ldi	r26, 0x26	; 38
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e6 e2       	ldi	r30, 0x26	; 38
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 68       	ori	r24, 0x80	; 128
    1e04:	8c 93       	st	X, r24
}
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	0f 92       	push	r0
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	87 70       	andi	r24, 0x07	; 7
    1e1c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1e1e:	a7 e2       	ldi	r26, 0x27	; 39
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e7 e2       	ldi	r30, 0x27	; 39
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 7e       	andi	r24, 0xE0	; 224
    1e2a:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1e2c:	a7 e2       	ldi	r26, 0x27	; 39
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e7 e2       	ldi	r30, 0x27	; 39
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	90 81       	ld	r25, Z
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	89 2b       	or	r24, r25
    1e3a:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1e3c:	a6 e2       	ldi	r26, 0x26	; 38
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e6 e2       	ldi	r30, 0x26	; 38
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	80 64       	ori	r24, 0x40	; 64
    1e48:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1e4a:	e6 e2       	ldi	r30, 0x26	; 38
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	82 95       	swap	r24
    1e52:	8f 70       	andi	r24, 0x0F	; 15
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	81 70       	andi	r24, 0x01	; 1
    1e5a:	90 70       	andi	r25, 0x00	; 0
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	a9 f3       	breq	.-22     	; 0x1e4a <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1e60:	e4 e2       	ldi	r30, 0x24	; 36
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <HSWITCH_VidInit_PullUP+0x6>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e80:	fa 81       	ldd	r31, Y+2	; 0x02
    1e82:	81 81       	ldd	r24, Z+1	; 0x01
    1e84:	e9 81       	ldd	r30, Y+1	; 0x01
    1e86:	fa 81       	ldd	r31, Y+2	; 0x02
    1e88:	90 81       	ld	r25, Z
    1e8a:	69 2f       	mov	r22, r25
    1e8c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <MDIO_VidActivePullUP>
}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <HSWITCH_u8SwitchState+0x6>
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1eae:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb2:	81 81       	ldd	r24, Z+1	; 0x01
    1eb4:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb6:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb8:	90 81       	ld	r25, Z
    1eba:	69 2f       	mov	r22, r25
    1ebc:	9e 01       	movw	r18, r28
    1ebe:	2f 5f       	subi	r18, 0xFF	; 255
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	a9 01       	movw	r20, r18
    1ec4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <HSEVEN_SEGMENT_VidInit+0x6>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	80 81       	ld	r24, Z
    1eea:	6f ef       	ldi	r22, 0xFF	; 255
    1eec:	0e 94 a8 0b 	call	0x1750	; 0x1750 <MDIO_Error_State_SetPortDirection>
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <HSEVEN_SEGMENT_VidOff+0x6>
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1f0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f10:	81 81       	ldd	r24, Z+1	; 0x01
    1f12:	81 30       	cpi	r24, 0x01	; 1
    1f14:	31 f4       	brne	.+12     	; 0x1f22 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1f16:	e9 81       	ldd	r30, Y+1	; 0x01
    1f18:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1a:	80 81       	ld	r24, Z
    1f1c:	6b 81       	ldd	r22, Y+3	; 0x03
    1f1e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	81 81       	ldd	r24, Z+1	; 0x01
    1f28:	88 23       	and	r24, r24
    1f2a:	51 f4       	brne	.+20     	; 0x1f40 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	20 81       	ld	r18, Z
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	98 2f       	mov	r25, r24
    1f36:	90 95       	com	r25
    1f38:	82 2f       	mov	r24, r18
    1f3a:	69 2f       	mov	r22, r25
    1f3c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
	}
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	27 97       	sbiw	r28, 0x07	; 7
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1f66:	e9 81       	ldd	r30, Y+1	; 0x01
    1f68:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6a:	81 81       	ldd	r24, Z+1	; 0x01
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1f70:	9b c0       	rjmp	.+310    	; 0x20a8 <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3f 83       	std	Y+7, r19	; 0x07
    1f7a:	2e 83       	std	Y+6, r18	; 0x06
    1f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	91 05       	cpc	r25, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1f86:	5f c0       	rjmp	.+190    	; 0x2046 <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1f88:	2e 81       	ldd	r18, Y+6	; 0x06
    1f8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f8c:	25 30       	cpi	r18, 0x05	; 5
    1f8e:	31 05       	cpc	r19, r1
    1f90:	dc f4       	brge	.+54     	; 0x1fc8 <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1f92:	8e 81       	ldd	r24, Y+6	; 0x06
    1f94:	9f 81       	ldd	r25, Y+7	; 0x07
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	91 05       	cpc	r25, r1
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    1f9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	79 f1       	breq	.+94     	; 0x200e <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    1fb0:	74 c0       	rjmp	.+232    	; 0x209a <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1fb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	b9 f1       	breq	.+110    	; 0x202a <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    1fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc0:	83 30       	cpi	r24, 0x03	; 3
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	c9 f1       	breq	.+114    	; 0x2038 <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1fc6:	69 c0       	rjmp	.+210    	; 0x209a <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1fc8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fca:	3f 81       	ldd	r19, Y+7	; 0x07
    1fcc:	27 30       	cpi	r18, 0x07	; 7
    1fce:	31 05       	cpc	r19, r1
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1fd2:	4e c0       	rjmp	.+156    	; 0x2070 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd8:	88 30       	cpi	r24, 0x08	; 8
    1fda:	91 05       	cpc	r25, r1
    1fdc:	5c f4       	brge	.+22     	; 0x1ff4 <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1fde:	2e 81       	ldd	r18, Y+6	; 0x06
    1fe0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fe2:	25 30       	cpi	r18, 0x05	; 5
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	b1 f1       	breq	.+108    	; 0x2054 <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fea:	9f 81       	ldd	r25, Y+7	; 0x07
    1fec:	86 30       	cpi	r24, 0x06	; 6
    1fee:	91 05       	cpc	r25, r1
    1ff0:	c1 f1       	breq	.+112    	; 0x2062 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1ff2:	53 c0       	rjmp	.+166    	; 0x209a <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1ff4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ff6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ff8:	28 30       	cpi	r18, 0x08	; 8
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    2000:	8e 81       	ldd	r24, Y+6	; 0x06
    2002:	9f 81       	ldd	r25, Y+7	; 0x07
    2004:	89 30       	cpi	r24, 0x09	; 9
    2006:	91 05       	cpc	r25, r1
    2008:	09 f4       	brne	.+2      	; 0x200c <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    200a:	40 c0       	rjmp	.+128    	; 0x208c <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    200c:	46 c0       	rjmp	.+140    	; 0x209a <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    200e:	e9 81       	ldd	r30, Y+1	; 0x01
    2010:	fa 81       	ldd	r31, Y+2	; 0x02
    2012:	80 81       	ld	r24, Z
    2014:	6f e3       	ldi	r22, 0x3F	; 63
    2016:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    201a:	e6 c0       	rjmp	.+460    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    201c:	e9 81       	ldd	r30, Y+1	; 0x01
    201e:	fa 81       	ldd	r31, Y+2	; 0x02
    2020:	80 81       	ld	r24, Z
    2022:	66 e0       	ldi	r22, 0x06	; 6
    2024:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2028:	df c0       	rjmp	.+446    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    202a:	e9 81       	ldd	r30, Y+1	; 0x01
    202c:	fa 81       	ldd	r31, Y+2	; 0x02
    202e:	80 81       	ld	r24, Z
    2030:	6b e5       	ldi	r22, 0x5B	; 91
    2032:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2036:	d8 c0       	rjmp	.+432    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    2038:	e9 81       	ldd	r30, Y+1	; 0x01
    203a:	fa 81       	ldd	r31, Y+2	; 0x02
    203c:	80 81       	ld	r24, Z
    203e:	6f e4       	ldi	r22, 0x4F	; 79
    2040:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2044:	d1 c0       	rjmp	.+418    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    2046:	e9 81       	ldd	r30, Y+1	; 0x01
    2048:	fa 81       	ldd	r31, Y+2	; 0x02
    204a:	80 81       	ld	r24, Z
    204c:	66 e6       	ldi	r22, 0x66	; 102
    204e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2052:	ca c0       	rjmp	.+404    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    2054:	e9 81       	ldd	r30, Y+1	; 0x01
    2056:	fa 81       	ldd	r31, Y+2	; 0x02
    2058:	80 81       	ld	r24, Z
    205a:	6d e6       	ldi	r22, 0x6D	; 109
    205c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2060:	c3 c0       	rjmp	.+390    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	80 81       	ld	r24, Z
    2068:	6d e7       	ldi	r22, 0x7D	; 125
    206a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    206e:	bc c0       	rjmp	.+376    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    2070:	e9 81       	ldd	r30, Y+1	; 0x01
    2072:	fa 81       	ldd	r31, Y+2	; 0x02
    2074:	80 81       	ld	r24, Z
    2076:	67 e0       	ldi	r22, 0x07	; 7
    2078:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    207c:	b5 c0       	rjmp	.+362    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    207e:	e9 81       	ldd	r30, Y+1	; 0x01
    2080:	fa 81       	ldd	r31, Y+2	; 0x02
    2082:	80 81       	ld	r24, Z
    2084:	6f e7       	ldi	r22, 0x7F	; 127
    2086:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    208a:	ae c0       	rjmp	.+348    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    208c:	e9 81       	ldd	r30, Y+1	; 0x01
    208e:	fa 81       	ldd	r31, Y+2	; 0x02
    2090:	80 81       	ld	r24, Z
    2092:	6f e6       	ldi	r22, 0x6F	; 111
    2094:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2098:	a7 c0       	rjmp	.+334    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    209a:	e9 81       	ldd	r30, Y+1	; 0x01
    209c:	fa 81       	ldd	r31, Y+2	; 0x02
    209e:	80 81       	ld	r24, Z
    20a0:	69 e7       	ldi	r22, 0x79	; 121
    20a2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    20a6:	a0 c0       	rjmp	.+320    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    20a8:	e9 81       	ldd	r30, Y+1	; 0x01
    20aa:	fa 81       	ldd	r31, Y+2	; 0x02
    20ac:	81 81       	ldd	r24, Z+1	; 0x01
    20ae:	88 23       	and	r24, r24
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    20b2:	9a c0       	rjmp	.+308    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	3d 83       	std	Y+5, r19	; 0x05
    20bc:	2c 83       	std	Y+4, r18	; 0x04
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	84 30       	cpi	r24, 0x04	; 4
    20c4:	91 05       	cpc	r25, r1
    20c6:	09 f4       	brne	.+2      	; 0x20ca <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    20c8:	5f c0       	rjmp	.+190    	; 0x2188 <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    20ca:	2c 81       	ldd	r18, Y+4	; 0x04
    20cc:	3d 81       	ldd	r19, Y+5	; 0x05
    20ce:	25 30       	cpi	r18, 0x05	; 5
    20d0:	31 05       	cpc	r19, r1
    20d2:	dc f4       	brge	.+54     	; 0x210a <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	9d 81       	ldd	r25, Y+5	; 0x05
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	91 05       	cpc	r25, r1
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    20de:	3f c0       	rjmp	.+126    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    20e0:	2c 81       	ldd	r18, Y+4	; 0x04
    20e2:	3d 81       	ldd	r19, Y+5	; 0x05
    20e4:	22 30       	cpi	r18, 0x02	; 2
    20e6:	31 05       	cpc	r19, r1
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	79 f1       	breq	.+94     	; 0x2150 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    20f2:	74 c0       	rjmp	.+232    	; 0x21dc <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    20f4:	2c 81       	ldd	r18, Y+4	; 0x04
    20f6:	3d 81       	ldd	r19, Y+5	; 0x05
    20f8:	22 30       	cpi	r18, 0x02	; 2
    20fa:	31 05       	cpc	r19, r1
    20fc:	b9 f1       	breq	.+110    	; 0x216c <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	9d 81       	ldd	r25, Y+5	; 0x05
    2102:	83 30       	cpi	r24, 0x03	; 3
    2104:	91 05       	cpc	r25, r1
    2106:	c9 f1       	breq	.+114    	; 0x217a <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    2108:	69 c0       	rjmp	.+210    	; 0x21dc <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    210a:	2c 81       	ldd	r18, Y+4	; 0x04
    210c:	3d 81       	ldd	r19, Y+5	; 0x05
    210e:	27 30       	cpi	r18, 0x07	; 7
    2110:	31 05       	cpc	r19, r1
    2112:	09 f4       	brne	.+2      	; 0x2116 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    2114:	4e c0       	rjmp	.+156    	; 0x21b2 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	9d 81       	ldd	r25, Y+5	; 0x05
    211a:	88 30       	cpi	r24, 0x08	; 8
    211c:	91 05       	cpc	r25, r1
    211e:	5c f4       	brge	.+22     	; 0x2136 <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    2120:	2c 81       	ldd	r18, Y+4	; 0x04
    2122:	3d 81       	ldd	r19, Y+5	; 0x05
    2124:	25 30       	cpi	r18, 0x05	; 5
    2126:	31 05       	cpc	r19, r1
    2128:	b1 f1       	breq	.+108    	; 0x2196 <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    212a:	8c 81       	ldd	r24, Y+4	; 0x04
    212c:	9d 81       	ldd	r25, Y+5	; 0x05
    212e:	86 30       	cpi	r24, 0x06	; 6
    2130:	91 05       	cpc	r25, r1
    2132:	c1 f1       	breq	.+112    	; 0x21a4 <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    2134:	53 c0       	rjmp	.+166    	; 0x21dc <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    2136:	2c 81       	ldd	r18, Y+4	; 0x04
    2138:	3d 81       	ldd	r19, Y+5	; 0x05
    213a:	28 30       	cpi	r18, 0x08	; 8
    213c:	31 05       	cpc	r19, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    2140:	3f c0       	rjmp	.+126    	; 0x21c0 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    2142:	8c 81       	ldd	r24, Y+4	; 0x04
    2144:	9d 81       	ldd	r25, Y+5	; 0x05
    2146:	89 30       	cpi	r24, 0x09	; 9
    2148:	91 05       	cpc	r25, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    214c:	40 c0       	rjmp	.+128    	; 0x21ce <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    214e:	46 c0       	rjmp	.+140    	; 0x21dc <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	80 81       	ld	r24, Z
    2156:	60 ec       	ldi	r22, 0xC0	; 192
    2158:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    215c:	45 c0       	rjmp	.+138    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    215e:	e9 81       	ldd	r30, Y+1	; 0x01
    2160:	fa 81       	ldd	r31, Y+2	; 0x02
    2162:	80 81       	ld	r24, Z
    2164:	69 ef       	ldi	r22, 0xF9	; 249
    2166:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    216a:	3e c0       	rjmp	.+124    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    216c:	e9 81       	ldd	r30, Y+1	; 0x01
    216e:	fa 81       	ldd	r31, Y+2	; 0x02
    2170:	80 81       	ld	r24, Z
    2172:	64 ea       	ldi	r22, 0xA4	; 164
    2174:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2178:	37 c0       	rjmp	.+110    	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    217a:	e9 81       	ldd	r30, Y+1	; 0x01
    217c:	fa 81       	ldd	r31, Y+2	; 0x02
    217e:	80 81       	ld	r24, Z
    2180:	60 eb       	ldi	r22, 0xB0	; 176
    2182:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2186:	30 c0       	rjmp	.+96     	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    2188:	e9 81       	ldd	r30, Y+1	; 0x01
    218a:	fa 81       	ldd	r31, Y+2	; 0x02
    218c:	80 81       	ld	r24, Z
    218e:	69 e9       	ldi	r22, 0x99	; 153
    2190:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    2194:	29 c0       	rjmp	.+82     	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    2196:	e9 81       	ldd	r30, Y+1	; 0x01
    2198:	fa 81       	ldd	r31, Y+2	; 0x02
    219a:	80 81       	ld	r24, Z
    219c:	62 e9       	ldi	r22, 0x92	; 146
    219e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    21a2:	22 c0       	rjmp	.+68     	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    21a4:	e9 81       	ldd	r30, Y+1	; 0x01
    21a6:	fa 81       	ldd	r31, Y+2	; 0x02
    21a8:	80 81       	ld	r24, Z
    21aa:	62 e8       	ldi	r22, 0x82	; 130
    21ac:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    21b0:	1b c0       	rjmp	.+54     	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    21b2:	e9 81       	ldd	r30, Y+1	; 0x01
    21b4:	fa 81       	ldd	r31, Y+2	; 0x02
    21b6:	80 81       	ld	r24, Z
    21b8:	68 ef       	ldi	r22, 0xF8	; 248
    21ba:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    21be:	14 c0       	rjmp	.+40     	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    21c0:	e9 81       	ldd	r30, Y+1	; 0x01
    21c2:	fa 81       	ldd	r31, Y+2	; 0x02
    21c4:	80 81       	ld	r24, Z
    21c6:	60 e8       	ldi	r22, 0x80	; 128
    21c8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    21cc:	0d c0       	rjmp	.+26     	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    21ce:	e9 81       	ldd	r30, Y+1	; 0x01
    21d0:	fa 81       	ldd	r31, Y+2	; 0x02
    21d2:	80 81       	ld	r24, Z
    21d4:	60 e9       	ldi	r22, 0x90	; 144
    21d6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
    21da:	06 c0       	rjmp	.+12     	; 0x21e8 <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	80 81       	ld	r24, Z
    21e2:	66 e8       	ldi	r22, 0x86	; 134
    21e4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
	}
}
}
    21e8:	27 96       	adiw	r28, 0x07	; 7
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <HSERVO_voidInit>:
/* 2- Function Input       -> No Thing                                                                 */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void HSERVO_voidInit(void)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
	MDIO_Error_State_SetPinDirection(PIN5,MDIO_PORTD,PIN_OUTPUT);
    2202:	85 e0       	ldi	r24, 0x05	; 5
    2204:	63 e0       	ldi	r22, 0x03	; 3
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MTIMER1_voidInit(TIMER1_FASTPWM_ICR_TOP_MODE,TIMER1_SCALER_8,OCRA_NON_INVERTING,OCRB_NON_INVERTING);
    220c:	83 e0       	ldi	r24, 0x03	; 3
    220e:	62 e0       	ldi	r22, 0x02	; 2
    2210:	42 e0       	ldi	r20, 0x02	; 2
    2212:	22 e0       	ldi	r18, 0x02	; 2
    2214:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MTIMER1_voidInit>
}
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <HSERVO_voidSetAngle>:
/* 2- Function Input       -> Servo Angle                                                              */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void HSERVO_voidSetAngle(u8 Copy_u8ServoAngle)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ServoAngle<=180 && Copy_u8ServoAngle>= 0 )
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	85 3b       	cpi	r24, 0xB5	; 181
    222e:	28 f4       	brcc	.+10     	; 0x223a <HSERVO_voidSetAngle+0x1c>
	{
		MTIMER1_voidSetOcr1b(Copy_u8ServoAngle);
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 3d 08 	call	0x107a	; 0x107a <MTIMER1_voidSetOcr1b>
	else
	{
		/*Do Nothing*/
	}

}
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <HLED_VidInit+0x6>
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    2250:	e9 81       	ldd	r30, Y+1	; 0x01
    2252:	fa 81       	ldd	r31, Y+2	; 0x02
    2254:	81 81       	ldd	r24, Z+1	; 0x01
    2256:	e9 81       	ldd	r30, Y+1	; 0x01
    2258:	fa 81       	ldd	r31, Y+2	; 0x02
    225a:	90 81       	ld	r25, Z
    225c:	69 2f       	mov	r22, r25
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <HLED_VidLed_On+0x6>
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    227c:	e9 81       	ldd	r30, Y+1	; 0x01
    227e:	fa 81       	ldd	r31, Y+2	; 0x02
    2280:	81 81       	ldd	r24, Z+1	; 0x01
    2282:	e9 81       	ldd	r30, Y+1	; 0x01
    2284:	fa 81       	ldd	r31, Y+2	; 0x02
    2286:	90 81       	ld	r25, Z
    2288:	69 2f       	mov	r22, r25
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <HLED_VidLed_Off+0x6>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    22a8:	e9 81       	ldd	r30, Y+1	; 0x01
    22aa:	fa 81       	ldd	r31, Y+2	; 0x02
    22ac:	81 81       	ldd	r24, Z+1	; 0x01
    22ae:	e9 81       	ldd	r30, Y+1	; 0x01
    22b0:	fa 81       	ldd	r31, Y+2	; 0x02
    22b2:	90 81       	ld	r25, Z
    22b4:	69 2f       	mov	r22, r25
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <HLED_VidLed_Toggle+0x6>
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    22d4:	80 91 0c 01 	lds	r24, 0x010C
    22d8:	88 23       	and	r24, r24
    22da:	71 f4       	brne	.+28     	; 0x22f8 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    22dc:	e9 81       	ldd	r30, Y+1	; 0x01
    22de:	fa 81       	ldd	r31, Y+2	; 0x02
    22e0:	81 81       	ldd	r24, Z+1	; 0x01
    22e2:	e9 81       	ldd	r30, Y+1	; 0x01
    22e4:	fa 81       	ldd	r31, Y+2	; 0x02
    22e6:	90 81       	ld	r25, Z
    22e8:	69 2f       	mov	r22, r25
    22ea:	41 e0       	ldi	r20, 0x01	; 1
    22ec:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
		Flag=1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	80 93 0c 01 	sts	0x010C, r24
    22f6:	0c c0       	rjmp	.+24     	; 0x2310 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    22f8:	e9 81       	ldd	r30, Y+1	; 0x01
    22fa:	fa 81       	ldd	r31, Y+2	; 0x02
    22fc:	81 81       	ldd	r24, Z+1	; 0x01
    22fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2300:	fa 81       	ldd	r31, Y+2	; 0x02
    2302:	90 81       	ld	r25, Z
    2304:	69 2f       	mov	r22, r25
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
		Flag=0;
    230c:	10 92 0c 01 	sts	0x010C, r1
	}
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	62 e0       	ldi	r22, 0x02	; 2
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	62 e0       	ldi	r22, 0x02	; 2
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	62 e0       	ldi	r22, 0x02	; 2
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    234a:	84 e0       	ldi	r24, 0x04	; 4
    234c:	62 e0       	ldi	r22, 0x02	; 2
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    2354:	85 e0       	ldi	r24, 0x05	; 5
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    235e:	86 e0       	ldi	r24, 0x06	; 6
    2360:	62 e0       	ldi	r22, 0x02	; 2
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    2368:	87 e0       	ldi	r24, 0x07	; 7
    236a:	62 e0       	ldi	r22, 0x02	; 2
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    2372:	83 e0       	ldi	r24, 0x03	; 3
    2374:	62 e0       	ldi	r22, 0x02	; 2
    2376:	41 e0       	ldi	r20, 0x01	; 1
    2378:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	62 e0       	ldi	r22, 0x02	; 2
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	62 e0       	ldi	r22, 0x02	; 2
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    239a:	84 e0       	ldi	r24, 0x04	; 4
    239c:	62 e0       	ldi	r22, 0x02	; 2
    239e:	41 e0       	ldi	r20, 0x01	; 1
    23a0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    23a4:	85 e0       	ldi	r24, 0x05	; 5
    23a6:	62 e0       	ldi	r22, 0x02	; 2
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    23ae:	86 e0       	ldi	r24, 0x06	; 6
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    23b8:	87 e0       	ldi	r24, 0x07	; 7
    23ba:	62 e0       	ldi	r22, 0x02	; 2
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>

}
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	63 97       	sbiw	r28, 0x13	; 19
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    23dc:	8f ef       	ldi	r24, 0xFF	; 255
    23de:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;

		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    23e0:	84 e0       	ldi	r24, 0x04	; 4
    23e2:	88 8b       	std	Y+16, r24	; 0x10
    23e4:	b5 c0       	rjmp	.+362    	; 0x2550 <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    23e6:	88 89       	ldd	r24, Y+16	; 0x10
    23e8:	62 e0       	ldi	r22, 0x02	; 2
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    23f0:	19 8a       	std	Y+17, r1	; 0x11
    23f2:	a2 c0       	rjmp	.+324    	; 0x2538 <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    23f4:	9e 01       	movw	r18, r28
    23f6:	2e 5e       	subi	r18, 0xEE	; 238
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	89 89       	ldd	r24, Y+17	; 0x11
    23fc:	62 e0       	ldi	r22, 0x02	; 2
    23fe:	a9 01       	movw	r20, r18
    2400:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    2404:	8a 89       	ldd	r24, Y+18	; 0x12
    2406:	88 23       	and	r24, r24
    2408:	09 f0       	breq	.+2      	; 0x240c <HKPD_U8GetKeyPressed+0x44>
    240a:	93 c0       	rjmp	.+294    	; 0x2532 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    240c:	88 89       	ldd	r24, Y+16	; 0x10
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	ac 01       	movw	r20, r24
    2414:	44 50       	subi	r20, 0x04	; 4
    2416:	50 40       	sbci	r21, 0x00	; 0
    2418:	89 89       	ldd	r24, Y+17	; 0x11
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	ca 01       	movw	r24, r20
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	82 0f       	add	r24, r18
    242a:	93 1f       	adc	r25, r19
    242c:	fc 01       	movw	r30, r24
    242e:	e4 50       	subi	r30, 0x04	; 4
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	8f 87       	std	Y+15, r24	; 0x0f
    2436:	08 c0       	rjmp	.+16     	; 0x2448 <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Pressd)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2438:	9e 01       	movw	r18, r28
    243a:	2e 5e       	subi	r18, 0xEE	; 238
    243c:	3f 4f       	sbci	r19, 0xFF	; 255
    243e:	89 89       	ldd	r24, Y+17	; 0x11
    2440:	62 e0       	ldi	r22, 0x02	; 2
    2442:	a9 01       	movw	r20, r18
    2444:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Pressd)*/
					while(LOC_U8PinState==0)
    2448:	8a 89       	ldd	r24, Y+18	; 0x12
    244a:	88 23       	and	r24, r24
    244c:	a9 f3       	breq	.-22     	; 0x2438 <HKPD_U8GetKeyPressed+0x70>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	a0 ea       	ldi	r26, 0xA0	; 160
    2454:	b1 e4       	ldi	r27, 0x41	; 65
    2456:	8b 87       	std	Y+11, r24	; 0x0b
    2458:	9c 87       	std	Y+12, r25	; 0x0c
    245a:	ad 87       	std	Y+13, r26	; 0x0d
    245c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a ef       	ldi	r20, 0xFA	; 250
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	8f 83       	std	Y+7, r24	; 0x07
    2478:	98 87       	std	Y+8, r25	; 0x08
    247a:	a9 87       	std	Y+9, r26	; 0x09
    247c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247e:	6f 81       	ldd	r22, Y+7	; 0x07
    2480:	78 85       	ldd	r23, Y+8	; 0x08
    2482:	89 85       	ldd	r24, Y+9	; 0x09
    2484:	9a 85       	ldd	r25, Y+10	; 0x0a
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e8       	ldi	r20, 0x80	; 128
    248c:	5f e3       	ldi	r21, 0x3F	; 63
    248e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	2c f4       	brge	.+10     	; 0x24a0 <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9e 83       	std	Y+6, r25	; 0x06
    249c:	8d 83       	std	Y+5, r24	; 0x05
    249e:	3f c0       	rjmp	.+126    	; 0x251e <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    24a0:	6f 81       	ldd	r22, Y+7	; 0x07
    24a2:	78 85       	ldd	r23, Y+8	; 0x08
    24a4:	89 85       	ldd	r24, Y+9	; 0x09
    24a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	4c f5       	brge	.+82     	; 0x250a <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <HKPD_U8GetKeyPressed+0x138>
    24e2:	88 ec       	ldi	r24, 0xC8	; 200
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <HKPD_U8GetKeyPressed+0x126>
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f7       	brne	.-38     	; 0x24e2 <HKPD_U8GetKeyPressed+0x11a>
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	9a 81       	ldd	r25, Y+2	; 0x02
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <HKPD_U8GetKeyPressed+0x162>
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2532:	89 89       	ldd	r24, Y+17	; 0x11
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	89 8b       	std	Y+17, r24	; 0x11
    2538:	89 89       	ldd	r24, Y+17	; 0x11
    253a:	84 30       	cpi	r24, 0x04	; 4
    253c:	08 f4       	brcc	.+2      	; 0x2540 <HKPD_U8GetKeyPressed+0x178>
    253e:	5a cf       	rjmp	.-332    	; 0x23f4 <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    2540:	88 89       	ldd	r24, Y+16	; 0x10
    2542:	62 e0       	ldi	r22, 0x02	; 2
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;

		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    254a:	88 89       	ldd	r24, Y+16	; 0x10
    254c:	8f 5f       	subi	r24, 0xFF	; 255
    254e:	88 8b       	std	Y+16, r24	; 0x10
    2550:	88 89       	ldd	r24, Y+16	; 0x10
    2552:	88 30       	cpi	r24, 0x08	; 8
    2554:	08 f4       	brcc	.+2      	; 0x2558 <HKPD_U8GetKeyPressed+0x190>
    2556:	47 cf       	rjmp	.-370    	; 0x23e6 <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    2558:	8f 85       	ldd	r24, Y+15	; 0x0f
    255a:	8f 3f       	cpi	r24, 0xFF	; 255
    255c:	21 f0       	breq	.+8      	; 0x2566 <HKPD_U8GetKeyPressed+0x19e>
		return LOC_U8ReturnValue;
    255e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2560:	8b 8b       	std	Y+19, r24	; 0x13




}
    2562:	8b 89       	ldd	r24, Y+19	; 0x13
    2564:	00 c0       	rjmp	.+0      	; 0x2566 <HKPD_U8GetKeyPressed+0x19e>
    2566:	63 96       	adiw	r28, 0x13	; 19
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <HDCMOTOR_voidInit>:
/* 2- Function Input       -> Address of object from DCMotor_t                                         */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void HDCMOTOR_voidInit(DCMotor_t *Copy_PstructDCMotor)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <HDCMOTOR_voidInit+0x6>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_PstructDCMotor->Copy_u8_Pin,Copy_PstructDCMotor->Copy_u8Port,PIN_OUTPUT);
    2586:	e9 81       	ldd	r30, Y+1	; 0x01
    2588:	fa 81       	ldd	r31, Y+2	; 0x02
    258a:	81 81       	ldd	r24, Z+1	; 0x01
    258c:	e9 81       	ldd	r30, Y+1	; 0x01
    258e:	fa 81       	ldd	r31, Y+2	; 0x02
    2590:	90 81       	ld	r25, Z
    2592:	69 2f       	mov	r22, r25
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <HDCMOTOR_voidMotorOn>:
/* 2- Function Input       -> Address of object from DCMotor_t                                         */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void HDCMOTOR_voidMotorOn(DCMotor_t *Copy_PstructDCMotor)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <HDCMOTOR_voidMotorOn+0x6>
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_PstructDCMotor->Copy_u8_Pin,Copy_PstructDCMotor->Copy_u8Port,PIN_HIGH);
    25b2:	e9 81       	ldd	r30, Y+1	; 0x01
    25b4:	fa 81       	ldd	r31, Y+2	; 0x02
    25b6:	81 81       	ldd	r24, Z+1	; 0x01
    25b8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ba:	fa 81       	ldd	r31, Y+2	; 0x02
    25bc:	90 81       	ld	r25, Z
    25be:	69 2f       	mov	r22, r25
    25c0:	41 e0       	ldi	r20, 0x01	; 1
    25c2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <HDCMOTOR_voidMotorOff>:
/* 2- Function Input       -> Address of object from DCMotor_t                                         */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void HDCMOTOR_voidMotorOff(DCMotor_t *Copy_PstructDCMotor)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <HDCMOTOR_voidMotorOff+0x6>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_PstructDCMotor->Copy_u8_Pin,Copy_PstructDCMotor->Copy_u8Port,PIN_LOW);
    25de:	e9 81       	ldd	r30, Y+1	; 0x01
    25e0:	fa 81       	ldd	r31, Y+2	; 0x02
    25e2:	81 81       	ldd	r24, Z+1	; 0x01
    25e4:	e9 81       	ldd	r30, Y+1	; 0x01
    25e6:	fa 81       	ldd	r31, Y+2	; 0x02
    25e8:	90 81       	ld	r25, Z
    25ea:	69 2f       	mov	r22, r25
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	6d 97       	sbiw	r28, 0x1d	; 29
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	61 e0       	ldi	r22, 0x01	; 1
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	6d 8d       	ldd	r22, Y+29	; 0x1d
    262a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	61 e0       	ldi	r22, 0x01	; 1
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e4       	ldi	r27, 0x40	; 64
    2640:	89 8f       	std	Y+25, r24	; 0x19
    2642:	9a 8f       	std	Y+26, r25	; 0x1a
    2644:	ab 8f       	std	Y+27, r26	; 0x1b
    2646:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	69 8d       	ldd	r22, Y+25	; 0x19
    264a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8d 8b       	std	Y+21, r24	; 0x15
    2662:	9e 8b       	std	Y+22, r25	; 0x16
    2664:	af 8b       	std	Y+23, r26	; 0x17
    2666:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2668:	6d 89       	ldd	r22, Y+21	; 0x15
    266a:	7e 89       	ldd	r23, Y+22	; 0x16
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	98 8d       	ldd	r25, Y+24	; 0x18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	2c f4       	brge	.+10     	; 0x268a <HCLCD_Vid8Bits_SendCommand+0x8e>
		__ticks = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9c 8b       	std	Y+20, r25	; 0x14
    2686:	8b 8b       	std	Y+19, r24	; 0x13
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <HCLCD_Vid8Bits_SendCommand+0x10c>
	else if (__tmp > 65535)
    268a:	6d 89       	ldd	r22, Y+21	; 0x15
    268c:	7e 89       	ldd	r23, Y+22	; 0x16
    268e:	8f 89       	ldd	r24, Y+23	; 0x17
    2690:	98 8d       	ldd	r25, Y+24	; 0x18
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	3f ef       	ldi	r19, 0xFF	; 255
    2696:	4f e7       	ldi	r20, 0x7F	; 127
    2698:	57 e4       	ldi	r21, 0x47	; 71
    269a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269e:	18 16       	cp	r1, r24
    26a0:	4c f5       	brge	.+82     	; 0x26f4 <HCLCD_Vid8Bits_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	69 8d       	ldd	r22, Y+25	; 0x19
    26a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9c 8b       	std	Y+20, r25	; 0x14
    26c8:	8b 8b       	std	Y+19, r24	; 0x13
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <HCLCD_Vid8Bits_SendCommand+0xee>
    26cc:	88 ec       	ldi	r24, 0xC8	; 200
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9a 8b       	std	Y+18, r25	; 0x12
    26d2:	89 8b       	std	Y+17, r24	; 0x11
    26d4:	89 89       	ldd	r24, Y+17	; 0x11
    26d6:	9a 89       	ldd	r25, Y+18	; 0x12
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <HCLCD_Vid8Bits_SendCommand+0xdc>
    26dc:	9a 8b       	std	Y+18, r25	; 0x12
    26de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	8b 89       	ldd	r24, Y+19	; 0x13
    26e2:	9c 89       	ldd	r25, Y+20	; 0x14
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	9c 8b       	std	Y+20, r25	; 0x14
    26e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	8b 89       	ldd	r24, Y+19	; 0x13
    26ec:	9c 89       	ldd	r25, Y+20	; 0x14
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	69 f7       	brne	.-38     	; 0x26cc <HCLCD_Vid8Bits_SendCommand+0xd0>
    26f2:	14 c0       	rjmp	.+40     	; 0x271c <HCLCD_Vid8Bits_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	6d 89       	ldd	r22, Y+21	; 0x15
    26f6:	7e 89       	ldd	r23, Y+22	; 0x16
    26f8:	8f 89       	ldd	r24, Y+23	; 0x17
    26fa:	98 8d       	ldd	r25, Y+24	; 0x18
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9c 8b       	std	Y+20, r25	; 0x14
    2706:	8b 8b       	std	Y+19, r24	; 0x13
    2708:	8b 89       	ldd	r24, Y+19	; 0x13
    270a:	9c 89       	ldd	r25, Y+20	; 0x14
    270c:	98 8b       	std	Y+16, r25	; 0x10
    270e:	8f 87       	std	Y+15, r24	; 0x0f
    2710:	8f 85       	ldd	r24, Y+15	; 0x0f
    2712:	98 89       	ldd	r25, Y+16	; 0x10
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <HCLCD_Vid8Bits_SendCommand+0x118>
    2718:	98 8b       	std	Y+16, r25	; 0x10
    271a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	a0 e0       	ldi	r26, 0x00	; 0
    272c:	b0 e4       	ldi	r27, 0x40	; 64
    272e:	8b 87       	std	Y+11, r24	; 0x0b
    2730:	9c 87       	std	Y+12, r25	; 0x0c
    2732:	ad 87       	std	Y+13, r26	; 0x0d
    2734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	6b 85       	ldd	r22, Y+11	; 0x0b
    2738:	7c 85       	ldd	r23, Y+12	; 0x0c
    273a:	8d 85       	ldd	r24, Y+13	; 0x0d
    273c:	9e 85       	ldd	r25, Y+14	; 0x0e
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a ef       	ldi	r20, 0xFA	; 250
    2744:	54 e4       	ldi	r21, 0x44	; 68
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8f 83       	std	Y+7, r24	; 0x07
    2750:	98 87       	std	Y+8, r25	; 0x08
    2752:	a9 87       	std	Y+9, r26	; 0x09
    2754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2756:	6f 81       	ldd	r22, Y+7	; 0x07
    2758:	78 85       	ldd	r23, Y+8	; 0x08
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <HCLCD_Vid8Bits_SendCommand+0x17c>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <HCLCD_Vid8Bits_SendCommand+0x1fa>
	else if (__tmp > 65535)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <HCLCD_Vid8Bits_SendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	6b 85       	ldd	r22, Y+11	; 0x0b
    2792:	7c 85       	ldd	r23, Y+12	; 0x0c
    2794:	8d 85       	ldd	r24, Y+13	; 0x0d
    2796:	9e 85       	ldd	r25, Y+14	; 0x0e
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <HCLCD_Vid8Bits_SendCommand+0x1dc>
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <HCLCD_Vid8Bits_SendCommand+0x1ca>
    27ca:	9c 83       	std	Y+4, r25	; 0x04
    27cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <HCLCD_Vid8Bits_SendCommand+0x1be>
    27e0:	14 c0       	rjmp	.+40     	; 0x280a <HCLCD_Vid8Bits_SendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <HCLCD_Vid8Bits_SendCommand+0x206>
    2806:	9a 83       	std	Y+2, r25	; 0x02
    2808:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	41 e0       	ldi	r20, 0x01	; 1
    2810:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    2814:	6d 96       	adiw	r28, 0x1d	; 29
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	e8 97       	sbiw	r28, 0x38	; 56
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	6f ef       	ldi	r22, 0xFF	; 255
    283e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a0 ef       	ldi	r26, 0xF0	; 240
    2866:	b1 e4       	ldi	r27, 0x41	; 65
    2868:	8d ab       	std	Y+53, r24	; 0x35
    286a:	9e ab       	std	Y+54, r25	; 0x36
    286c:	af ab       	std	Y+55, r26	; 0x37
    286e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	6d a9       	ldd	r22, Y+53	; 0x35
    2872:	7e a9       	ldd	r23, Y+54	; 0x36
    2874:	8f a9       	ldd	r24, Y+55	; 0x37
    2876:	98 ad       	ldd	r25, Y+56	; 0x38
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4a ef       	ldi	r20, 0xFA	; 250
    287e:	54 e4       	ldi	r21, 0x44	; 68
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	89 ab       	std	Y+49, r24	; 0x31
    288a:	9a ab       	std	Y+50, r25	; 0x32
    288c:	ab ab       	std	Y+51, r26	; 0x33
    288e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2890:	69 a9       	ldd	r22, Y+49	; 0x31
    2892:	7a a9       	ldd	r23, Y+50	; 0x32
    2894:	8b a9       	ldd	r24, Y+51	; 0x33
    2896:	9c a9       	ldd	r25, Y+52	; 0x34
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e8       	ldi	r20, 0x80	; 128
    289e:	5f e3       	ldi	r21, 0x3F	; 63
    28a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	2c f4       	brge	.+10     	; 0x28b2 <HCLCD_Vid8Bits_Init+0x8c>
		__ticks = 1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	98 ab       	std	Y+48, r25	; 0x30
    28ae:	8f a7       	std	Y+47, r24	; 0x2f
    28b0:	3f c0       	rjmp	.+126    	; 0x2930 <HCLCD_Vid8Bits_Init+0x10a>
	else if (__tmp > 65535)
    28b2:	69 a9       	ldd	r22, Y+49	; 0x31
    28b4:	7a a9       	ldd	r23, Y+50	; 0x32
    28b6:	8b a9       	ldd	r24, Y+51	; 0x33
    28b8:	9c a9       	ldd	r25, Y+52	; 0x34
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	3f ef       	ldi	r19, 0xFF	; 255
    28be:	4f e7       	ldi	r20, 0x7F	; 127
    28c0:	57 e4       	ldi	r21, 0x47	; 71
    28c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c6:	18 16       	cp	r1, r24
    28c8:	4c f5       	brge	.+82     	; 0x291c <HCLCD_Vid8Bits_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ca:	6d a9       	ldd	r22, Y+53	; 0x35
    28cc:	7e a9       	ldd	r23, Y+54	; 0x36
    28ce:	8f a9       	ldd	r24, Y+55	; 0x37
    28d0:	98 ad       	ldd	r25, Y+56	; 0x38
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	98 ab       	std	Y+48, r25	; 0x30
    28f0:	8f a7       	std	Y+47, r24	; 0x2f
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <HCLCD_Vid8Bits_Init+0xec>
    28f4:	88 ec       	ldi	r24, 0xC8	; 200
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9e a7       	std	Y+46, r25	; 0x2e
    28fa:	8d a7       	std	Y+45, r24	; 0x2d
    28fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    28fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <HCLCD_Vid8Bits_Init+0xda>
    2904:	9e a7       	std	Y+46, r25	; 0x2e
    2906:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2908:	8f a5       	ldd	r24, Y+47	; 0x2f
    290a:	98 a9       	ldd	r25, Y+48	; 0x30
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	98 ab       	std	Y+48, r25	; 0x30
    2910:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	8f a5       	ldd	r24, Y+47	; 0x2f
    2914:	98 a9       	ldd	r25, Y+48	; 0x30
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	69 f7       	brne	.-38     	; 0x28f4 <HCLCD_Vid8Bits_Init+0xce>
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <HCLCD_Vid8Bits_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	69 a9       	ldd	r22, Y+49	; 0x31
    291e:	7a a9       	ldd	r23, Y+50	; 0x32
    2920:	8b a9       	ldd	r24, Y+51	; 0x33
    2922:	9c a9       	ldd	r25, Y+52	; 0x34
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	98 ab       	std	Y+48, r25	; 0x30
    292e:	8f a7       	std	Y+47, r24	; 0x2f
    2930:	8f a5       	ldd	r24, Y+47	; 0x2f
    2932:	98 a9       	ldd	r25, Y+48	; 0x30
    2934:	9c a7       	std	Y+44, r25	; 0x2c
    2936:	8b a7       	std	Y+43, r24	; 0x2b
    2938:	8b a5       	ldd	r24, Y+43	; 0x2b
    293a:	9c a5       	ldd	r25, Y+44	; 0x2c
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <HCLCD_Vid8Bits_Init+0x116>
    2940:	9c a7       	std	Y+44, r25	; 0x2c
    2942:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    2944:	88 e2       	ldi	r24, 0x28	; 40
    2946:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 e8       	ldi	r26, 0x80	; 128
    2950:	bf e3       	ldi	r27, 0x3F	; 63
    2952:	8f a3       	std	Y+39, r24	; 0x27
    2954:	98 a7       	std	Y+40, r25	; 0x28
    2956:	a9 a7       	std	Y+41, r26	; 0x29
    2958:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295a:	6f a1       	ldd	r22, Y+39	; 0x27
    295c:	78 a5       	ldd	r23, Y+40	; 0x28
    295e:	89 a5       	ldd	r24, Y+41	; 0x29
    2960:	9a a5       	ldd	r25, Y+42	; 0x2a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	4a ef       	ldi	r20, 0xFA	; 250
    2968:	54 e4       	ldi	r21, 0x44	; 68
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	8b a3       	std	Y+35, r24	; 0x23
    2974:	9c a3       	std	Y+36, r25	; 0x24
    2976:	ad a3       	std	Y+37, r26	; 0x25
    2978:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    297a:	6b a1       	ldd	r22, Y+35	; 0x23
    297c:	7c a1       	ldd	r23, Y+36	; 0x24
    297e:	8d a1       	ldd	r24, Y+37	; 0x25
    2980:	9e a1       	ldd	r25, Y+38	; 0x26
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e8       	ldi	r20, 0x80	; 128
    2988:	5f e3       	ldi	r21, 0x3F	; 63
    298a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    298e:	88 23       	and	r24, r24
    2990:	2c f4       	brge	.+10     	; 0x299c <HCLCD_Vid8Bits_Init+0x176>
		__ticks = 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9a a3       	std	Y+34, r25	; 0x22
    2998:	89 a3       	std	Y+33, r24	; 0x21
    299a:	3f c0       	rjmp	.+126    	; 0x2a1a <HCLCD_Vid8Bits_Init+0x1f4>
	else if (__tmp > 65535)
    299c:	6b a1       	ldd	r22, Y+35	; 0x23
    299e:	7c a1       	ldd	r23, Y+36	; 0x24
    29a0:	8d a1       	ldd	r24, Y+37	; 0x25
    29a2:	9e a1       	ldd	r25, Y+38	; 0x26
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	3f ef       	ldi	r19, 0xFF	; 255
    29a8:	4f e7       	ldi	r20, 0x7F	; 127
    29aa:	57 e4       	ldi	r21, 0x47	; 71
    29ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b0:	18 16       	cp	r1, r24
    29b2:	4c f5       	brge	.+82     	; 0x2a06 <HCLCD_Vid8Bits_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b4:	6f a1       	ldd	r22, Y+39	; 0x27
    29b6:	78 a5       	ldd	r23, Y+40	; 0x28
    29b8:	89 a5       	ldd	r24, Y+41	; 0x29
    29ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e2       	ldi	r20, 0x20	; 32
    29c2:	51 e4       	ldi	r21, 0x41	; 65
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
    29dc:	0f c0       	rjmp	.+30     	; 0x29fc <HCLCD_Vid8Bits_Init+0x1d6>
    29de:	88 ec       	ldi	r24, 0xC8	; 200
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	98 a3       	std	Y+32, r25	; 0x20
    29e4:	8f 8f       	std	Y+31, r24	; 0x1f
    29e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e8:	98 a1       	ldd	r25, Y+32	; 0x20
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <HCLCD_Vid8Bits_Init+0x1c4>
    29ee:	98 a3       	std	Y+32, r25	; 0x20
    29f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	9a a1       	ldd	r25, Y+34	; 0x22
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	9a a3       	std	Y+34, r25	; 0x22
    29fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fc:	89 a1       	ldd	r24, Y+33	; 0x21
    29fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	69 f7       	brne	.-38     	; 0x29de <HCLCD_Vid8Bits_Init+0x1b8>
    2a04:	14 c0       	rjmp	.+40     	; 0x2a2e <HCLCD_Vid8Bits_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a06:	6b a1       	ldd	r22, Y+35	; 0x23
    2a08:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9a a3       	std	Y+34, r25	; 0x22
    2a18:	89 a3       	std	Y+33, r24	; 0x21
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a20:	8d 8f       	std	Y+29, r24	; 0x1d
    2a22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <HCLCD_Vid8Bits_Init+0x200>
    2a2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a2c:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    2a2e:	8c e0       	ldi	r24, 0x0C	; 12
    2a30:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e8       	ldi	r26, 0x80	; 128
    2a3a:	bf e3       	ldi	r27, 0x3F	; 63
    2a3c:	89 8f       	std	Y+25, r24	; 0x19
    2a3e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a40:	ab 8f       	std	Y+27, r26	; 0x1b
    2a42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	69 8d       	ldd	r22, Y+25	; 0x19
    2a46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4a ef       	ldi	r20, 0xFA	; 250
    2a52:	54 e4       	ldi	r21, 0x44	; 68
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	8d 8b       	std	Y+21, r24	; 0x15
    2a5e:	9e 8b       	std	Y+22, r25	; 0x16
    2a60:	af 8b       	std	Y+23, r26	; 0x17
    2a62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a64:	6d 89       	ldd	r22, Y+21	; 0x15
    2a66:	7e 89       	ldd	r23, Y+22	; 0x16
    2a68:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <HCLCD_Vid8Bits_Init+0x260>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9c 8b       	std	Y+20, r25	; 0x14
    2a82:	8b 8b       	std	Y+19, r24	; 0x13
    2a84:	3f c0       	rjmp	.+126    	; 0x2b04 <HCLCD_Vid8Bits_Init+0x2de>
	else if (__tmp > 65535)
    2a86:	6d 89       	ldd	r22, Y+21	; 0x15
    2a88:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	4c f5       	brge	.+82     	; 0x2af0 <HCLCD_Vid8Bits_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e2       	ldi	r20, 0x20	; 32
    2aac:	51 e4       	ldi	r21, 0x41	; 65
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9c 8b       	std	Y+20, r25	; 0x14
    2ac4:	8b 8b       	std	Y+19, r24	; 0x13
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <HCLCD_Vid8Bits_Init+0x2c0>
    2ac8:	88 ec       	ldi	r24, 0xC8	; 200
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9a 8b       	std	Y+18, r25	; 0x12
    2ace:	89 8b       	std	Y+17, r24	; 0x11
    2ad0:	89 89       	ldd	r24, Y+17	; 0x11
    2ad2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <HCLCD_Vid8Bits_Init+0x2ae>
    2ad8:	9a 8b       	std	Y+18, r25	; 0x12
    2ada:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2adc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ade:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9c 8b       	std	Y+20, r25	; 0x14
    2ae4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	69 f7       	brne	.-38     	; 0x2ac8 <HCLCD_Vid8Bits_Init+0x2a2>
    2aee:	14 c0       	rjmp	.+40     	; 0x2b18 <HCLCD_Vid8Bits_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	6d 89       	ldd	r22, Y+21	; 0x15
    2af2:	7e 89       	ldd	r23, Y+22	; 0x16
    2af4:	8f 89       	ldd	r24, Y+23	; 0x17
    2af6:	98 8d       	ldd	r25, Y+24	; 0x18
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9c 8b       	std	Y+20, r25	; 0x14
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	8b 89       	ldd	r24, Y+19	; 0x13
    2b06:	9c 89       	ldd	r25, Y+20	; 0x14
    2b08:	98 8b       	std	Y+16, r25	; 0x10
    2b0a:	8f 87       	std	Y+15, r24	; 0x0f
    2b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0e:	98 89       	ldd	r25, Y+16	; 0x10
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <HCLCD_Vid8Bits_Init+0x2ea>
    2b14:	98 8b       	std	Y+16, r25	; 0x10
    2b16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	a0 e0       	ldi	r26, 0x00	; 0
    2b24:	b0 e4       	ldi	r27, 0x40	; 64
    2b26:	8b 87       	std	Y+11, r24	; 0x0b
    2b28:	9c 87       	std	Y+12, r25	; 0x0c
    2b2a:	ad 87       	std	Y+13, r26	; 0x0d
    2b2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	4a ef       	ldi	r20, 0xFA	; 250
    2b3c:	54 e4       	ldi	r21, 0x44	; 68
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	8f 83       	std	Y+7, r24	; 0x07
    2b48:	98 87       	std	Y+8, r25	; 0x08
    2b4a:	a9 87       	std	Y+9, r26	; 0x09
    2b4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b50:	78 85       	ldd	r23, Y+8	; 0x08
    2b52:	89 85       	ldd	r24, Y+9	; 0x09
    2b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	40 e8       	ldi	r20, 0x80	; 128
    2b5c:	5f e3       	ldi	r21, 0x3F	; 63
    2b5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b62:	88 23       	and	r24, r24
    2b64:	2c f4       	brge	.+10     	; 0x2b70 <HCLCD_Vid8Bits_Init+0x34a>
		__ticks = 1;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9e 83       	std	Y+6, r25	; 0x06
    2b6c:	8d 83       	std	Y+5, r24	; 0x05
    2b6e:	3f c0       	rjmp	.+126    	; 0x2bee <HCLCD_Vid8Bits_Init+0x3c8>
	else if (__tmp > 65535)
    2b70:	6f 81       	ldd	r22, Y+7	; 0x07
    2b72:	78 85       	ldd	r23, Y+8	; 0x08
    2b74:	89 85       	ldd	r24, Y+9	; 0x09
    2b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	3f ef       	ldi	r19, 0xFF	; 255
    2b7c:	4f e7       	ldi	r20, 0x7F	; 127
    2b7e:	57 e4       	ldi	r21, 0x47	; 71
    2b80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b84:	18 16       	cp	r1, r24
    2b86:	4c f5       	brge	.+82     	; 0x2bda <HCLCD_Vid8Bits_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e2       	ldi	r20, 0x20	; 32
    2b96:	51 e4       	ldi	r21, 0x41	; 65
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9e 83       	std	Y+6, r25	; 0x06
    2bae:	8d 83       	std	Y+5, r24	; 0x05
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <HCLCD_Vid8Bits_Init+0x3aa>
    2bb2:	88 ec       	ldi	r24, 0xC8	; 200
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9c 83       	std	Y+4, r25	; 0x04
    2bb8:	8b 83       	std	Y+3, r24	; 0x03
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <HCLCD_Vid8Bits_Init+0x398>
    2bc2:	9c 83       	std	Y+4, r25	; 0x04
    2bc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	9e 83       	std	Y+6, r25	; 0x06
    2bce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	69 f7       	brne	.-38     	; 0x2bb2 <HCLCD_Vid8Bits_Init+0x38c>
    2bd8:	14 c0       	rjmp	.+40     	; 0x2c02 <HCLCD_Vid8Bits_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bda:	6f 81       	ldd	r22, Y+7	; 0x07
    2bdc:	78 85       	ldd	r23, Y+8	; 0x08
    2bde:	89 85       	ldd	r24, Y+9	; 0x09
    2be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9e 83       	std	Y+6, r25	; 0x06
    2bec:	8d 83       	std	Y+5, r24	; 0x05
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	89 83       	std	Y+1, r24	; 0x01
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <HCLCD_Vid8Bits_Init+0x3d4>
    2bfe:	9a 83       	std	Y+2, r25	; 0x02
    2c00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2c02:	86 e0       	ldi	r24, 0x06	; 6
    2c04:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
}
    2c08:	e8 96       	adiw	r28, 0x38	; 56
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	6d 97       	sbiw	r28, 0x1d	; 29
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2c48:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2c4c:	82 e0       	ldi	r24, 0x02	; 2
    2c4e:	61 e0       	ldi	r22, 0x01	; 1
    2c50:	41 e0       	ldi	r20, 0x01	; 1
    2c52:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	a0 e0       	ldi	r26, 0x00	; 0
    2c5c:	b0 e4       	ldi	r27, 0x40	; 64
    2c5e:	89 8f       	std	Y+25, r24	; 0x19
    2c60:	9a 8f       	std	Y+26, r25	; 0x1a
    2c62:	ab 8f       	std	Y+27, r26	; 0x1b
    2c64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c66:	69 8d       	ldd	r22, Y+25	; 0x19
    2c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a ef       	ldi	r20, 0xFA	; 250
    2c74:	54 e4       	ldi	r21, 0x44	; 68
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	8d 8b       	std	Y+21, r24	; 0x15
    2c80:	9e 8b       	std	Y+22, r25	; 0x16
    2c82:	af 8b       	std	Y+23, r26	; 0x17
    2c84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c86:	6d 89       	ldd	r22, Y+21	; 0x15
    2c88:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e8       	ldi	r20, 0x80	; 128
    2c94:	5f e3       	ldi	r21, 0x3F	; 63
    2c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c9a:	88 23       	and	r24, r24
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
		__ticks = 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9c 8b       	std	Y+20, r25	; 0x14
    2ca4:	8b 8b       	std	Y+19, r24	; 0x13
    2ca6:	3f c0       	rjmp	.+126    	; 0x2d26 <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
	else if (__tmp > 65535)
    2ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    2caa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cac:	8f 89       	ldd	r24, Y+23	; 0x17
    2cae:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	3f ef       	ldi	r19, 0xFF	; 255
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	57 e4       	ldi	r21, 0x47	; 71
    2cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	4c f5       	brge	.+82     	; 0x2d12 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc0:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e2       	ldi	r20, 0x20	; 32
    2cce:	51 e4       	ldi	r21, 0x41	; 65
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9c 8b       	std	Y+20, r25	; 0x14
    2ce6:	8b 8b       	std	Y+19, r24	; 0x13
    2ce8:	0f c0       	rjmp	.+30     	; 0x2d08 <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2cea:	88 ec       	ldi	r24, 0xC8	; 200
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	9a 8b       	std	Y+18, r25	; 0x12
    2cf0:	89 8b       	std	Y+17, r24	; 0x11
    2cf2:	89 89       	ldd	r24, Y+17	; 0x11
    2cf4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2cfa:	9a 8b       	std	Y+18, r25	; 0x12
    2cfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2d00:	9c 89       	ldd	r25, Y+20	; 0x14
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	9c 8b       	std	Y+20, r25	; 0x14
    2d06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d08:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	69 f7       	brne	.-38     	; 0x2cea <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2d10:	14 c0       	rjmp	.+40     	; 0x2d3a <HCLCD_Vid8Bits_DispalyCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d12:	6d 89       	ldd	r22, Y+21	; 0x15
    2d14:	7e 89       	ldd	r23, Y+22	; 0x16
    2d16:	8f 89       	ldd	r24, Y+23	; 0x17
    2d18:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9c 8b       	std	Y+20, r25	; 0x14
    2d24:	8b 8b       	std	Y+19, r24	; 0x13
    2d26:	8b 89       	ldd	r24, Y+19	; 0x13
    2d28:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2a:	98 8b       	std	Y+16, r25	; 0x10
    2d2c:	8f 87       	std	Y+15, r24	; 0x0f
    2d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d30:	98 89       	ldd	r25, Y+16	; 0x10
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2d36:	98 8b       	std	Y+16, r25	; 0x10
    2d38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	61 e0       	ldi	r22, 0x01	; 1
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	a0 e0       	ldi	r26, 0x00	; 0
    2d4a:	b0 e4       	ldi	r27, 0x40	; 64
    2d4c:	8b 87       	std	Y+11, r24	; 0x0b
    2d4e:	9c 87       	std	Y+12, r25	; 0x0c
    2d50:	ad 87       	std	Y+13, r26	; 0x0d
    2d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	4a ef       	ldi	r20, 0xFA	; 250
    2d62:	54 e4       	ldi	r21, 0x44	; 68
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	8f 83       	std	Y+7, r24	; 0x07
    2d6e:	98 87       	std	Y+8, r25	; 0x08
    2d70:	a9 87       	std	Y+9, r26	; 0x09
    2d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d74:	6f 81       	ldd	r22, Y+7	; 0x07
    2d76:	78 85       	ldd	r23, Y+8	; 0x08
    2d78:	89 85       	ldd	r24, Y+9	; 0x09
    2d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	2c f4       	brge	.+10     	; 0x2d96 <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
		__ticks = 1;
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	9e 83       	std	Y+6, r25	; 0x06
    2d92:	8d 83       	std	Y+5, r24	; 0x05
    2d94:	3f c0       	rjmp	.+126    	; 0x2e14 <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
	else if (__tmp > 65535)
    2d96:	6f 81       	ldd	r22, Y+7	; 0x07
    2d98:	78 85       	ldd	r23, Y+8	; 0x08
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	3f ef       	ldi	r19, 0xFF	; 255
    2da2:	4f e7       	ldi	r20, 0x7F	; 127
    2da4:	57 e4       	ldi	r21, 0x47	; 71
    2da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2daa:	18 16       	cp	r1, r24
    2dac:	4c f5       	brge	.+82     	; 0x2e00 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e2       	ldi	r20, 0x20	; 32
    2dbc:	51 e4       	ldi	r21, 0x41	; 65
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
    2dd6:	0f c0       	rjmp	.+30     	; 0x2df6 <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2dd8:	88 ec       	ldi	r24, 0xC8	; 200
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	9c 83       	std	Y+4, r25	; 0x04
    2dde:	8b 83       	std	Y+3, r24	; 0x03
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	9c 81       	ldd	r25, Y+4	; 0x04
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	9e 83       	std	Y+6, r25	; 0x06
    2df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df6:	8d 81       	ldd	r24, Y+5	; 0x05
    2df8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	69 f7       	brne	.-38     	; 0x2dd8 <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2dfe:	14 c0       	rjmp	.+40     	; 0x2e28 <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e00:	6f 81       	ldd	r22, Y+7	; 0x07
    2e02:	78 85       	ldd	r23, Y+8	; 0x08
    2e04:	89 85       	ldd	r24, Y+9	; 0x09
    2e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
    2e14:	8d 81       	ldd	r24, Y+5	; 0x05
    2e16:	9e 81       	ldd	r25, Y+6	; 0x06
    2e18:	9a 83       	std	Y+2, r25	; 0x02
    2e1a:	89 83       	std	Y+1, r24	; 0x01
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2e24:	9a 83       	std	Y+2, r25	; 0x02
    2e26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	61 e0       	ldi	r22, 0x01	; 1
    2e2c:	41 e0       	ldi	r20, 0x01	; 1
    2e2e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    2e32:	6d 96       	adiw	r28, 0x1d	; 29
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <HCLCD_Vid8Bits_DisplayString+0x6>
    2e4a:	0f 92       	push	r0
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	9b 83       	std	Y+3, r25	; 0x03
    2e52:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2e54:	19 82       	std	Y+1, r1	; 0x01
    2e56:	0e c0       	rjmp	.+28     	; 0x2e74 <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	fc 01       	movw	r30, r24
    2e64:	e2 0f       	add	r30, r18
    2e66:	f3 1f       	adc	r31, r19
    2e68:	80 81       	ld	r24, Z
    2e6a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e2 0f       	add	r30, r18
    2e82:	f3 1f       	adc	r31, r19
    2e84:	80 81       	ld	r24, Z
    2e86:	88 23       	and	r24, r24
    2e88:	39 f7       	brne	.-50     	; 0x2e58 <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	60 97       	sbiw	r28, 0x10	; 16
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	6d 87       	std	Y+13, r22	; 0x0d
    2eb0:	7e 87       	std	Y+14, r23	; 0x0e
    2eb2:	8f 87       	std	Y+15, r24	; 0x0f
    2eb4:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2eb6:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebc:	af 85       	ldd	r26, Y+15	; 0x0f
    2ebe:	b8 89       	ldd	r27, Y+16	; 0x10
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	a1 05       	cpc	r26, r1
    2ec4:	b1 05       	cpc	r27, r1
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2ec8:	4f c0       	rjmp	.+158    	; 0x2f68 <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2eca:	2d c0       	rjmp	.+90     	; 0x2f26 <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	08 2f       	mov	r16, r24
    2ed0:	10 e0       	ldi	r17, 0x00	; 0
    2ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed6:	af 85       	ldd	r26, Y+15	; 0x0f
    2ed8:	b8 89       	ldd	r27, Y+16	; 0x10
    2eda:	2a e0       	ldi	r18, 0x0A	; 10
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e0       	ldi	r20, 0x00	; 0
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 9d 2b 	call	0x573a	; 0x573a <__udivmodsi4>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	28 2f       	mov	r18, r24
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	03 96       	adiw	r24, 0x03	; 3
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	e0 0f       	add	r30, r16
    2ef8:	f1 1f       	adc	r31, r17
    2efa:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2efc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f00:	af 85       	ldd	r26, Y+15	; 0x0f
    2f02:	b8 89       	ldd	r27, Y+16	; 0x10
    2f04:	2a e0       	ldi	r18, 0x0A	; 10
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	50 e0       	ldi	r21, 0x00	; 0
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 9d 2b 	call	0x573a	; 0x573a <__udivmodsi4>
    2f14:	da 01       	movw	r26, r20
    2f16:	c9 01       	movw	r24, r18
    2f18:	8d 87       	std	Y+13, r24	; 0x0d
    2f1a:	9e 87       	std	Y+14, r25	; 0x0e
    2f1c:	af 87       	std	Y+15, r26	; 0x0f
    2f1e:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	8f 5f       	subi	r24, 0xFF	; 255
    2f24:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2a:	af 85       	ldd	r26, Y+15	; 0x0f
    2f2c:	b8 89       	ldd	r27, Y+16	; 0x10
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	a1 05       	cpc	r26, r1
    2f32:	b1 05       	cpc	r27, r1
    2f34:	59 f6       	brne	.-106    	; 0x2ecc <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	81 50       	subi	r24, 0x01	; 1
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	11 c0       	rjmp	.+34     	; 0x2f60 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	28 2f       	mov	r18, r24
    2f42:	33 27       	eor	r19, r19
    2f44:	27 fd       	sbrc	r18, 7
    2f46:	30 95       	com	r19
    2f48:	ce 01       	movw	r24, r28
    2f4a:	03 96       	adiw	r24, 0x03	; 3
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	e2 0f       	add	r30, r18
    2f50:	f3 1f       	adc	r31, r19
    2f52:	80 81       	ld	r24, Z
    2f54:	80 5d       	subi	r24, 0xD0	; 208
    2f56:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	81 50       	subi	r24, 0x01	; 1
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	88 23       	and	r24, r24
    2f64:	64 f7       	brge	.-40     	; 0x2f3e <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2f66:	03 c0       	rjmp	.+6      	; 0x2f6e <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2f68:	80 e3       	ldi	r24, 0x30	; 48
    2f6a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2f6e:	60 96       	adiw	r28, 0x10	; 16
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	08 95       	ret

00002f84 <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	00 d0       	rcall	.+0      	; 0x2f8a <HCLCD_Vid8Bits_SetPosition+0x6>
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	81 30       	cpi	r24, 0x01	; 1
    2f96:	41 f4       	brne	.+16     	; 0x2fa8 <HCLCD_Vid8Bits_SetPosition+0x24>
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	80 31       	cpi	r24, 0x10	; 16
    2f9c:	28 f4       	brcc	.+10     	; 0x2fa8 <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	80 58       	subi	r24, 0x80	; 128
    2fa2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    2fa6:	0a c0       	rjmp	.+20     	; 0x2fbc <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	82 30       	cpi	r24, 0x02	; 2
    2fac:	39 f4       	brne	.+14     	; 0x2fbc <HCLCD_Vid8Bits_SetPosition+0x38>
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	80 31       	cpi	r24, 0x10	; 16
    2fb2:	20 f4       	brcc	.+8      	; 0x2fbc <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	80 54       	subi	r24, 0x40	; 64
    2fb8:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
    2fd4:	7c 83       	std	Y+4, r23	; 0x04
    2fd6:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	88 30       	cpi	r24, 0x08	; 8
    2fdc:	f8 f4       	brcc	.+62     	; 0x301c <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	88 2f       	mov	r24, r24
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	08 96       	adiw	r24, 0x08	; 8
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2ff6:	19 82       	std	Y+1, r1	; 0x01
    2ff8:	0e c0       	rjmp	.+28     	; 0x3016 <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	9c 81       	ldd	r25, Y+4	; 0x04
    3004:	fc 01       	movw	r30, r24
    3006:	e2 0f       	add	r30, r18
    3008:	f3 1f       	adc	r31, r19
    300a:	80 81       	ld	r24, Z
    300c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	8f 5f       	subi	r24, 0xFF	; 255
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	88 30       	cpi	r24, 0x08	; 8
    301a:	78 f3       	brcs	.-34     	; 0x2ffa <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	08 95       	ret

0000302a <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	2e 97       	sbiw	r28, 0x0e	; 14
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	f8 94       	cli
    3038:	de bf       	out	0x3e, r29	; 62
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	a0 e0       	ldi	r26, 0x00	; 0
    304a:	b0 e4       	ldi	r27, 0x40	; 64
    304c:	8b 87       	std	Y+11, r24	; 0x0b
    304e:	9c 87       	std	Y+12, r25	; 0x0c
    3050:	ad 87       	std	Y+13, r26	; 0x0d
    3052:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3054:	6b 85       	ldd	r22, Y+11	; 0x0b
    3056:	7c 85       	ldd	r23, Y+12	; 0x0c
    3058:	8d 85       	ldd	r24, Y+13	; 0x0d
    305a:	9e 85       	ldd	r25, Y+14	; 0x0e
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a ef       	ldi	r20, 0xFA	; 250
    3062:	54 e4       	ldi	r21, 0x44	; 68
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	8f 83       	std	Y+7, r24	; 0x07
    306e:	98 87       	std	Y+8, r25	; 0x08
    3070:	a9 87       	std	Y+9, r26	; 0x09
    3072:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3074:	6f 81       	ldd	r22, Y+7	; 0x07
    3076:	78 85       	ldd	r23, Y+8	; 0x08
    3078:	89 85       	ldd	r24, Y+9	; 0x09
    307a:	9a 85       	ldd	r25, Y+10	; 0x0a
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	2c f4       	brge	.+10     	; 0x3096 <HCLCD_Vid8Bits_ClearScreen+0x6c>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9e 83       	std	Y+6, r25	; 0x06
    3092:	8d 83       	std	Y+5, r24	; 0x05
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <HCLCD_Vid8Bits_ClearScreen+0xea>
	else if (__tmp > 65535)
    3096:	6f 81       	ldd	r22, Y+7	; 0x07
    3098:	78 85       	ldd	r23, Y+8	; 0x08
    309a:	89 85       	ldd	r24, Y+9	; 0x09
    309c:	9a 85       	ldd	r25, Y+10	; 0x0a
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	3f ef       	ldi	r19, 0xFF	; 255
    30a2:	4f e7       	ldi	r20, 0x7F	; 127
    30a4:	57 e4       	ldi	r21, 0x47	; 71
    30a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30aa:	18 16       	cp	r1, r24
    30ac:	4c f5       	brge	.+82     	; 0x3100 <HCLCD_Vid8Bits_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <HCLCD_Vid8Bits_ClearScreen+0xcc>
    30d8:	88 ec       	ldi	r24, 0xC8	; 200
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	9c 81       	ldd	r25, Y+4	; 0x04
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <HCLCD_Vid8Bits_ClearScreen+0xba>
    30e8:	9c 83       	std	Y+4, r25	; 0x04
    30ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	9e 81       	ldd	r25, Y+6	; 0x06
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <HCLCD_Vid8Bits_ClearScreen+0xae>
    30fe:	14 c0       	rjmp	.+40     	; 0x3128 <HCLCD_Vid8Bits_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9e 83       	std	Y+6, r25	; 0x06
    3112:	8d 83       	std	Y+5, r24	; 0x05
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	9e 81       	ldd	r25, Y+6	; 0x06
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	9a 81       	ldd	r25, Y+2	; 0x02
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3128:	2e 96       	adiw	r28, 0x0e	; 14
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	60 97       	sbiw	r28, 0x10	; 16
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3150:	1f 86       	std	Y+15, r1	; 0x0f
    3152:	78 c0       	rjmp	.+240    	; 0x3244 <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3154:	88 e1       	ldi	r24, 0x18	; 24
    3156:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	a6 e9       	ldi	r26, 0x96	; 150
    3160:	b3 e4       	ldi	r27, 0x43	; 67
    3162:	8b 87       	std	Y+11, r24	; 0x0b
    3164:	9c 87       	std	Y+12, r25	; 0x0c
    3166:	ad 87       	std	Y+13, r26	; 0x0d
    3168:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316a:	6b 85       	ldd	r22, Y+11	; 0x0b
    316c:	7c 85       	ldd	r23, Y+12	; 0x0c
    316e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3170:	9e 85       	ldd	r25, Y+14	; 0x0e
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	4a ef       	ldi	r20, 0xFA	; 250
    3178:	54 e4       	ldi	r21, 0x44	; 68
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	8f 83       	std	Y+7, r24	; 0x07
    3184:	98 87       	std	Y+8, r25	; 0x08
    3186:	a9 87       	std	Y+9, r26	; 0x09
    3188:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    318a:	6f 81       	ldd	r22, Y+7	; 0x07
    318c:	78 85       	ldd	r23, Y+8	; 0x08
    318e:	89 85       	ldd	r24, Y+9	; 0x09
    3190:	9a 85       	ldd	r25, Y+10	; 0x0a
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	40 e8       	ldi	r20, 0x80	; 128
    3198:	5f e3       	ldi	r21, 0x3F	; 63
    319a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    319e:	88 23       	and	r24, r24
    31a0:	2c f4       	brge	.+10     	; 0x31ac <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
		__ticks = 1;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	9e 83       	std	Y+6, r25	; 0x06
    31a8:	8d 83       	std	Y+5, r24	; 0x05
    31aa:	3f c0       	rjmp	.+126    	; 0x322a <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
	else if (__tmp > 65535)
    31ac:	6f 81       	ldd	r22, Y+7	; 0x07
    31ae:	78 85       	ldd	r23, Y+8	; 0x08
    31b0:	89 85       	ldd	r24, Y+9	; 0x09
    31b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	3f ef       	ldi	r19, 0xFF	; 255
    31b8:	4f e7       	ldi	r20, 0x7F	; 127
    31ba:	57 e4       	ldi	r21, 0x47	; 71
    31bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c0:	18 16       	cp	r1, r24
    31c2:	4c f5       	brge	.+82     	; 0x3216 <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e2       	ldi	r20, 0x20	; 32
    31d2:	51 e4       	ldi	r21, 0x41	; 65
    31d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	bc 01       	movw	r22, r24
    31de:	cd 01       	movw	r24, r26
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	9e 83       	std	Y+6, r25	; 0x06
    31ea:	8d 83       	std	Y+5, r24	; 0x05
    31ec:	0f c0       	rjmp	.+30     	; 0x320c <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    31ee:	88 ec       	ldi	r24, 0xC8	; 200
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9c 83       	std	Y+4, r25	; 0x04
    31f4:	8b 83       	std	Y+3, r24	; 0x03
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	9c 81       	ldd	r25, Y+4	; 0x04
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	f1 f7       	brne	.-4      	; 0x31fa <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    31fe:	9c 83       	std	Y+4, r25	; 0x04
    3200:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	9e 81       	ldd	r25, Y+6	; 0x06
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	9e 81       	ldd	r25, Y+6	; 0x06
    3210:	00 97       	sbiw	r24, 0x00	; 0
    3212:	69 f7       	brne	.-38     	; 0x31ee <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    3214:	14 c0       	rjmp	.+40     	; 0x323e <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3216:	6f 81       	ldd	r22, Y+7	; 0x07
    3218:	78 85       	ldd	r23, Y+8	; 0x08
    321a:	89 85       	ldd	r24, Y+9	; 0x09
    321c:	9a 85       	ldd	r25, Y+10	; 0x0a
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	9e 83       	std	Y+6, r25	; 0x06
    3228:	8d 83       	std	Y+5, r24	; 0x05
    322a:	8d 81       	ldd	r24, Y+5	; 0x05
    322c:	9e 81       	ldd	r25, Y+6	; 0x06
    322e:	9a 83       	std	Y+2, r25	; 0x02
    3230:	89 83       	std	Y+1, r24	; 0x01
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	9a 81       	ldd	r25, Y+2	; 0x02
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	f1 f7       	brne	.-4      	; 0x3236 <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    323a:	9a 83       	std	Y+2, r25	; 0x02
    323c:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    323e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3240:	8f 5f       	subi	r24, 0xFF	; 255
    3242:	8f 87       	std	Y+15, r24	; 0x0f
    3244:	9f 85       	ldd	r25, Y+15	; 0x0f
    3246:	88 89       	ldd	r24, Y+16	; 0x10
    3248:	98 17       	cp	r25, r24
    324a:	08 f4       	brcc	.+2      	; 0x324e <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    324c:	83 cf       	rjmp	.-250    	; 0x3154 <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    324e:	60 96       	adiw	r28, 0x10	; 16
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	08 95       	ret

00003260 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	60 97       	sbiw	r28, 0x10	; 16
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3276:	1f 86       	std	Y+15, r1	; 0x0f
    3278:	78 c0       	rjmp	.+240    	; 0x336a <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    327a:	8c e1       	ldi	r24, 0x1C	; 28
    327c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	a6 e9       	ldi	r26, 0x96	; 150
    3286:	b3 e4       	ldi	r27, 0x43	; 67
    3288:	8b 87       	std	Y+11, r24	; 0x0b
    328a:	9c 87       	std	Y+12, r25	; 0x0c
    328c:	ad 87       	std	Y+13, r26	; 0x0d
    328e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3290:	6b 85       	ldd	r22, Y+11	; 0x0b
    3292:	7c 85       	ldd	r23, Y+12	; 0x0c
    3294:	8d 85       	ldd	r24, Y+13	; 0x0d
    3296:	9e 85       	ldd	r25, Y+14	; 0x0e
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	4a ef       	ldi	r20, 0xFA	; 250
    329e:	54 e4       	ldi	r21, 0x44	; 68
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	8f 83       	std	Y+7, r24	; 0x07
    32aa:	98 87       	std	Y+8, r25	; 0x08
    32ac:	a9 87       	std	Y+9, r26	; 0x09
    32ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e8       	ldi	r20, 0x80	; 128
    32be:	5f e3       	ldi	r21, 0x3F	; 63
    32c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c4:	88 23       	and	r24, r24
    32c6:	2c f4       	brge	.+10     	; 0x32d2 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
		__ticks = 1;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	9e 83       	std	Y+6, r25	; 0x06
    32ce:	8d 83       	std	Y+5, r24	; 0x05
    32d0:	3f c0       	rjmp	.+126    	; 0x3350 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
	else if (__tmp > 65535)
    32d2:	6f 81       	ldd	r22, Y+7	; 0x07
    32d4:	78 85       	ldd	r23, Y+8	; 0x08
    32d6:	89 85       	ldd	r24, Y+9	; 0x09
    32d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	3f ef       	ldi	r19, 0xFF	; 255
    32de:	4f e7       	ldi	r20, 0x7F	; 127
    32e0:	57 e4       	ldi	r21, 0x47	; 71
    32e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e6:	18 16       	cp	r1, r24
    32e8:	4c f5       	brge	.+82     	; 0x333c <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	40 e2       	ldi	r20, 0x20	; 32
    32f8:	51 e4       	ldi	r21, 0x41	; 65
    32fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	8d 83       	std	Y+5, r24	; 0x05
    3312:	0f c0       	rjmp	.+30     	; 0x3332 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    3314:	88 ec       	ldi	r24, 0xC8	; 200
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	9c 83       	std	Y+4, r25	; 0x04
    331a:	8b 83       	std	Y+3, r24	; 0x03
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	9c 81       	ldd	r25, Y+4	; 0x04
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    3324:	9c 83       	std	Y+4, r25	; 0x04
    3326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
    332a:	9e 81       	ldd	r25, Y+6	; 0x06
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	9e 83       	std	Y+6, r25	; 0x06
    3330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	69 f7       	brne	.-38     	; 0x3314 <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    333a:	14 c0       	rjmp	.+40     	; 0x3364 <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333c:	6f 81       	ldd	r22, Y+7	; 0x07
    333e:	78 85       	ldd	r23, Y+8	; 0x08
    3340:	89 85       	ldd	r24, Y+9	; 0x09
    3342:	9a 85       	ldd	r25, Y+10	; 0x0a
    3344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	9e 83       	std	Y+6, r25	; 0x06
    334e:	8d 83       	std	Y+5, r24	; 0x05
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	9a 81       	ldd	r25, Y+2	; 0x02
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    3360:	9a 83       	std	Y+2, r25	; 0x02
    3362:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3364:	8f 85       	ldd	r24, Y+15	; 0x0f
    3366:	8f 5f       	subi	r24, 0xFF	; 255
    3368:	8f 87       	std	Y+15, r24	; 0x0f
    336a:	9f 85       	ldd	r25, Y+15	; 0x0f
    336c:	88 89       	ldd	r24, Y+16	; 0x10
    336e:	98 17       	cp	r25, r24
    3370:	08 f4       	brcc	.+2      	; 0x3374 <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    3372:	83 cf       	rjmp	.-250    	; 0x327a <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3374:	60 96       	adiw	r28, 0x10	; 16
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	60 97       	sbiw	r28, 0x10	; 16
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    339c:	1f 86       	std	Y+15, r1	; 0x0f
    339e:	78 c0       	rjmp	.+240    	; 0x3490 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    33a0:	80 e1       	ldi	r24, 0x10	; 16
    33a2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a6 e9       	ldi	r26, 0x96	; 150
    33ac:	b3 e4       	ldi	r27, 0x43	; 67
    33ae:	8b 87       	std	Y+11, r24	; 0x0b
    33b0:	9c 87       	std	Y+12, r25	; 0x0c
    33b2:	ad 87       	std	Y+13, r26	; 0x0d
    33b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    33bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	4a ef       	ldi	r20, 0xFA	; 250
    33c4:	54 e4       	ldi	r21, 0x44	; 68
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	8f 83       	std	Y+7, r24	; 0x07
    33d0:	98 87       	std	Y+8, r25	; 0x08
    33d2:	a9 87       	std	Y+9, r26	; 0x09
    33d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d6:	6f 81       	ldd	r22, Y+7	; 0x07
    33d8:	78 85       	ldd	r23, Y+8	; 0x08
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e8       	ldi	r20, 0x80	; 128
    33e4:	5f e3       	ldi	r21, 0x3F	; 63
    33e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ea:	88 23       	and	r24, r24
    33ec:	2c f4       	brge	.+10     	; 0x33f8 <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
		__ticks = 1;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	9e 83       	std	Y+6, r25	; 0x06
    33f4:	8d 83       	std	Y+5, r24	; 0x05
    33f6:	3f c0       	rjmp	.+126    	; 0x3476 <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
	else if (__tmp > 65535)
    33f8:	6f 81       	ldd	r22, Y+7	; 0x07
    33fa:	78 85       	ldd	r23, Y+8	; 0x08
    33fc:	89 85       	ldd	r24, Y+9	; 0x09
    33fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	3f ef       	ldi	r19, 0xFF	; 255
    3404:	4f e7       	ldi	r20, 0x7F	; 127
    3406:	57 e4       	ldi	r21, 0x47	; 71
    3408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340c:	18 16       	cp	r1, r24
    340e:	4c f5       	brge	.+82     	; 0x3462 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3410:	6b 85       	ldd	r22, Y+11	; 0x0b
    3412:	7c 85       	ldd	r23, Y+12	; 0x0c
    3414:	8d 85       	ldd	r24, Y+13	; 0x0d
    3416:	9e 85       	ldd	r25, Y+14	; 0x0e
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e2       	ldi	r20, 0x20	; 32
    341e:	51 e4       	ldi	r21, 0x41	; 65
    3420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	bc 01       	movw	r22, r24
    342a:	cd 01       	movw	r24, r26
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
    3438:	0f c0       	rjmp	.+30     	; 0x3458 <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    343a:	88 ec       	ldi	r24, 0xC8	; 200
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9c 83       	std	Y+4, r25	; 0x04
    3440:	8b 83       	std	Y+3, r24	; 0x03
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    344a:	9c 83       	std	Y+4, r25	; 0x04
    344c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344e:	8d 81       	ldd	r24, Y+5	; 0x05
    3450:	9e 81       	ldd	r25, Y+6	; 0x06
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	9e 83       	std	Y+6, r25	; 0x06
    3456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3458:	8d 81       	ldd	r24, Y+5	; 0x05
    345a:	9e 81       	ldd	r25, Y+6	; 0x06
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	69 f7       	brne	.-38     	; 0x343a <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    3460:	14 c0       	rjmp	.+40     	; 0x348a <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3462:	6f 81       	ldd	r22, Y+7	; 0x07
    3464:	78 85       	ldd	r23, Y+8	; 0x08
    3466:	89 85       	ldd	r24, Y+9	; 0x09
    3468:	9a 85       	ldd	r25, Y+10	; 0x0a
    346a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	9e 83       	std	Y+6, r25	; 0x06
    3474:	8d 83       	std	Y+5, r24	; 0x05
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	9a 83       	std	Y+2, r25	; 0x02
    347c:	89 83       	std	Y+1, r24	; 0x01
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    3486:	9a 83       	std	Y+2, r25	; 0x02
    3488:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    348a:	8f 85       	ldd	r24, Y+15	; 0x0f
    348c:	8f 5f       	subi	r24, 0xFF	; 255
    348e:	8f 87       	std	Y+15, r24	; 0x0f
    3490:	9f 85       	ldd	r25, Y+15	; 0x0f
    3492:	88 89       	ldd	r24, Y+16	; 0x10
    3494:	98 17       	cp	r25, r24
    3496:	08 f4       	brcc	.+2      	; 0x349a <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    3498:	83 cf       	rjmp	.-250    	; 0x33a0 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    349a:	60 96       	adiw	r28, 0x10	; 16
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
    34b4:	60 97       	sbiw	r28, 0x10	; 16
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	cd bf       	out	0x3d, r28	; 61
    34c0:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    34c2:	1f 86       	std	Y+15, r1	; 0x0f
    34c4:	78 c0       	rjmp	.+240    	; 0x35b6 <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    34c6:	84 e1       	ldi	r24, 0x14	; 20
    34c8:	0e 94 fe 12 	call	0x25fc	; 0x25fc <HCLCD_Vid8Bits_SendCommand>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a6 e9       	ldi	r26, 0x96	; 150
    34d2:	b3 e4       	ldi	r27, 0x43	; 67
    34d4:	8b 87       	std	Y+11, r24	; 0x0b
    34d6:	9c 87       	std	Y+12, r25	; 0x0c
    34d8:	ad 87       	std	Y+13, r26	; 0x0d
    34da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34de:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	4a ef       	ldi	r20, 0xFA	; 250
    34ea:	54 e4       	ldi	r21, 0x44	; 68
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	8f 83       	std	Y+7, r24	; 0x07
    34f6:	98 87       	std	Y+8, r25	; 0x08
    34f8:	a9 87       	std	Y+9, r26	; 0x09
    34fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34fc:	6f 81       	ldd	r22, Y+7	; 0x07
    34fe:	78 85       	ldd	r23, Y+8	; 0x08
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e8       	ldi	r20, 0x80	; 128
    350a:	5f e3       	ldi	r21, 0x3F	; 63
    350c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3510:	88 23       	and	r24, r24
    3512:	2c f4       	brge	.+10     	; 0x351e <HCLCD_Vid8Bits_CursorShiftRight+0x72>
		__ticks = 1;
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9e 83       	std	Y+6, r25	; 0x06
    351a:	8d 83       	std	Y+5, r24	; 0x05
    351c:	3f c0       	rjmp	.+126    	; 0x359c <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
	else if (__tmp > 65535)
    351e:	6f 81       	ldd	r22, Y+7	; 0x07
    3520:	78 85       	ldd	r23, Y+8	; 0x08
    3522:	89 85       	ldd	r24, Y+9	; 0x09
    3524:	9a 85       	ldd	r25, Y+10	; 0x0a
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	3f ef       	ldi	r19, 0xFF	; 255
    352a:	4f e7       	ldi	r20, 0x7F	; 127
    352c:	57 e4       	ldi	r21, 0x47	; 71
    352e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3532:	18 16       	cp	r1, r24
    3534:	4c f5       	brge	.+82     	; 0x3588 <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3536:	6b 85       	ldd	r22, Y+11	; 0x0b
    3538:	7c 85       	ldd	r23, Y+12	; 0x0c
    353a:	8d 85       	ldd	r24, Y+13	; 0x0d
    353c:	9e 85       	ldd	r25, Y+14	; 0x0e
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e2       	ldi	r20, 0x20	; 32
    3544:	51 e4       	ldi	r21, 0x41	; 65
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	bc 01       	movw	r22, r24
    3550:	cd 01       	movw	r24, r26
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9e 83       	std	Y+6, r25	; 0x06
    355c:	8d 83       	std	Y+5, r24	; 0x05
    355e:	0f c0       	rjmp	.+30     	; 0x357e <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    3560:	88 ec       	ldi	r24, 0xC8	; 200
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9c 83       	std	Y+4, r25	; 0x04
    3566:	8b 83       	std	Y+3, r24	; 0x03
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	9c 81       	ldd	r25, Y+4	; 0x04
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    3570:	9c 83       	std	Y+4, r25	; 0x04
    3572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3574:	8d 81       	ldd	r24, Y+5	; 0x05
    3576:	9e 81       	ldd	r25, Y+6	; 0x06
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	69 f7       	brne	.-38     	; 0x3560 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    3586:	14 c0       	rjmp	.+40     	; 0x35b0 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3588:	6f 81       	ldd	r22, Y+7	; 0x07
    358a:	78 85       	ldd	r23, Y+8	; 0x08
    358c:	89 85       	ldd	r24, Y+9	; 0x09
    358e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9e 83       	std	Y+6, r25	; 0x06
    359a:	8d 83       	std	Y+5, r24	; 0x05
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	9a 83       	std	Y+2, r25	; 0x02
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	9a 81       	ldd	r25, Y+2	; 0x02
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    35ac:	9a 83       	std	Y+2, r25	; 0x02
    35ae:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    35b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b2:	8f 5f       	subi	r24, 0xFF	; 255
    35b4:	8f 87       	std	Y+15, r24	; 0x0f
    35b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    35b8:	88 89       	ldd	r24, Y+16	; 0x10
    35ba:	98 17       	cp	r25, r24
    35bc:	08 f4       	brcc	.+2      	; 0x35c0 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    35be:	83 cf       	rjmp	.-250    	; 0x34c6 <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    35c0:	60 96       	adiw	r28, 0x10	; 16
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	cf 91       	pop	r28
    35ce:	df 91       	pop	r29
    35d0:	08 95       	ret

000035d2 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    35da:	2f 97       	sbiw	r28, 0x0f	; 15
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	61 e0       	ldi	r22, 0x01	; 1
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	61 e0       	ldi	r22, 0x01	; 1
    35f6:	40 e0       	ldi	r20, 0x00	; 0
    35f8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    35fc:	84 e0       	ldi	r24, 0x04	; 4
    35fe:	61 e0       	ldi	r22, 0x01	; 1
    3600:	4f 85       	ldd	r20, Y+15	; 0x0f
    3602:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3606:	82 e0       	ldi	r24, 0x02	; 2
    3608:	61 e0       	ldi	r22, 0x01	; 1
    360a:	41 e0       	ldi	r20, 0x01	; 1
    360c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	a0 e0       	ldi	r26, 0x00	; 0
    3616:	b0 e4       	ldi	r27, 0x40	; 64
    3618:	8b 87       	std	Y+11, r24	; 0x0b
    361a:	9c 87       	std	Y+12, r25	; 0x0c
    361c:	ad 87       	std	Y+13, r26	; 0x0d
    361e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3620:	6b 85       	ldd	r22, Y+11	; 0x0b
    3622:	7c 85       	ldd	r23, Y+12	; 0x0c
    3624:	8d 85       	ldd	r24, Y+13	; 0x0d
    3626:	9e 85       	ldd	r25, Y+14	; 0x0e
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	4a ef       	ldi	r20, 0xFA	; 250
    362e:	54 e4       	ldi	r21, 0x44	; 68
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	8f 83       	std	Y+7, r24	; 0x07
    363a:	98 87       	std	Y+8, r25	; 0x08
    363c:	a9 87       	std	Y+9, r26	; 0x09
    363e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3640:	6f 81       	ldd	r22, Y+7	; 0x07
    3642:	78 85       	ldd	r23, Y+8	; 0x08
    3644:	89 85       	ldd	r24, Y+9	; 0x09
    3646:	9a 85       	ldd	r25, Y+10	; 0x0a
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	40 e8       	ldi	r20, 0x80	; 128
    364e:	5f e3       	ldi	r21, 0x3F	; 63
    3650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3654:	88 23       	and	r24, r24
    3656:	2c f4       	brge	.+10     	; 0x3662 <HCLCD_Vid4Bits_SendCommand+0x90>
		__ticks = 1;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9e 83       	std	Y+6, r25	; 0x06
    365e:	8d 83       	std	Y+5, r24	; 0x05
    3660:	3f c0       	rjmp	.+126    	; 0x36e0 <HCLCD_Vid4Bits_SendCommand+0x10e>
	else if (__tmp > 65535)
    3662:	6f 81       	ldd	r22, Y+7	; 0x07
    3664:	78 85       	ldd	r23, Y+8	; 0x08
    3666:	89 85       	ldd	r24, Y+9	; 0x09
    3668:	9a 85       	ldd	r25, Y+10	; 0x0a
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	3f ef       	ldi	r19, 0xFF	; 255
    366e:	4f e7       	ldi	r20, 0x7F	; 127
    3670:	57 e4       	ldi	r21, 0x47	; 71
    3672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3676:	18 16       	cp	r1, r24
    3678:	4c f5       	brge	.+82     	; 0x36cc <HCLCD_Vid4Bits_SendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367a:	6b 85       	ldd	r22, Y+11	; 0x0b
    367c:	7c 85       	ldd	r23, Y+12	; 0x0c
    367e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3680:	9e 85       	ldd	r25, Y+14	; 0x0e
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	40 e2       	ldi	r20, 0x20	; 32
    3688:	51 e4       	ldi	r21, 0x41	; 65
    368a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	bc 01       	movw	r22, r24
    3694:	cd 01       	movw	r24, r26
    3696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	0f c0       	rjmp	.+30     	; 0x36c2 <HCLCD_Vid4Bits_SendCommand+0xf0>
    36a4:	88 ec       	ldi	r24, 0xC8	; 200
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9c 83       	std	Y+4, r25	; 0x04
    36aa:	8b 83       	std	Y+3, r24	; 0x03
    36ac:	8b 81       	ldd	r24, Y+3	; 0x03
    36ae:	9c 81       	ldd	r25, Y+4	; 0x04
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <HCLCD_Vid4Bits_SendCommand+0xde>
    36b4:	9c 83       	std	Y+4, r25	; 0x04
    36b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ba:	9e 81       	ldd	r25, Y+6	; 0x06
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	9e 83       	std	Y+6, r25	; 0x06
    36c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	00 97       	sbiw	r24, 0x00	; 0
    36c8:	69 f7       	brne	.-38     	; 0x36a4 <HCLCD_Vid4Bits_SendCommand+0xd2>
    36ca:	14 c0       	rjmp	.+40     	; 0x36f4 <HCLCD_Vid4Bits_SendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36cc:	6f 81       	ldd	r22, Y+7	; 0x07
    36ce:	78 85       	ldd	r23, Y+8	; 0x08
    36d0:	89 85       	ldd	r24, Y+9	; 0x09
    36d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	9e 83       	std	Y+6, r25	; 0x06
    36de:	8d 83       	std	Y+5, r24	; 0x05
    36e0:	8d 81       	ldd	r24, Y+5	; 0x05
    36e2:	9e 81       	ldd	r25, Y+6	; 0x06
    36e4:	9a 83       	std	Y+2, r25	; 0x02
    36e6:	89 83       	std	Y+1, r24	; 0x01
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	9a 81       	ldd	r25, Y+2	; 0x02
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	f1 f7       	brne	.-4      	; 0x36ec <HCLCD_Vid4Bits_SendCommand+0x11a>
    36f0:	9a 83       	std	Y+2, r25	; 0x02
    36f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    36f4:	82 e0       	ldi	r24, 0x02	; 2
    36f6:	61 e0       	ldi	r22, 0x01	; 1
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    36fe:	2f 96       	adiw	r28, 0x0f	; 15
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

00003710 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	e9 97       	sbiw	r28, 0x39	; 57
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	f8 94       	cli
    371e:	de bf       	out	0x3e, r29	; 62
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3724:	87 e0       	ldi	r24, 0x07	; 7
    3726:	89 af       	std	Y+57, r24	; 0x39
    3728:	08 c0       	rjmp	.+16     	; 0x373a <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    372a:	89 ad       	ldd	r24, Y+57	; 0x39
    372c:	61 e0       	ldi	r22, 0x01	; 1
    372e:	41 e0       	ldi	r20, 0x01	; 1
    3730:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    3734:	89 ad       	ldd	r24, Y+57	; 0x39
    3736:	81 50       	subi	r24, 0x01	; 1
    3738:	89 af       	std	Y+57, r24	; 0x39
    373a:	89 ad       	ldd	r24, Y+57	; 0x39
    373c:	84 30       	cpi	r24, 0x04	; 4
    373e:	ac f7       	brge	.-22     	; 0x372a <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	61 e0       	ldi	r22, 0x01	; 1
    3744:	41 e0       	ldi	r20, 0x01	; 1
    3746:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	61 e0       	ldi	r22, 0x01	; 1
    374e:	41 e0       	ldi	r20, 0x01	; 1
    3750:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	61 e0       	ldi	r22, 0x01	; 1
    3758:	41 e0       	ldi	r20, 0x01	; 1
    375a:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	a0 ef       	ldi	r26, 0xF0	; 240
    3764:	b1 e4       	ldi	r27, 0x41	; 65
    3766:	8d ab       	std	Y+53, r24	; 0x35
    3768:	9e ab       	std	Y+54, r25	; 0x36
    376a:	af ab       	std	Y+55, r26	; 0x37
    376c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376e:	6d a9       	ldd	r22, Y+53	; 0x35
    3770:	7e a9       	ldd	r23, Y+54	; 0x36
    3772:	8f a9       	ldd	r24, Y+55	; 0x37
    3774:	98 ad       	ldd	r25, Y+56	; 0x38
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	4a ef       	ldi	r20, 0xFA	; 250
    377c:	54 e4       	ldi	r21, 0x44	; 68
    377e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	89 ab       	std	Y+49, r24	; 0x31
    3788:	9a ab       	std	Y+50, r25	; 0x32
    378a:	ab ab       	std	Y+51, r26	; 0x33
    378c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    378e:	69 a9       	ldd	r22, Y+49	; 0x31
    3790:	7a a9       	ldd	r23, Y+50	; 0x32
    3792:	8b a9       	ldd	r24, Y+51	; 0x33
    3794:	9c a9       	ldd	r25, Y+52	; 0x34
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	40 e8       	ldi	r20, 0x80	; 128
    379c:	5f e3       	ldi	r21, 0x3F	; 63
    379e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a2:	88 23       	and	r24, r24
    37a4:	2c f4       	brge	.+10     	; 0x37b0 <HCLCD_Vid4Bits_Init+0xa0>
		__ticks = 1;
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	98 ab       	std	Y+48, r25	; 0x30
    37ac:	8f a7       	std	Y+47, r24	; 0x2f
    37ae:	3f c0       	rjmp	.+126    	; 0x382e <HCLCD_Vid4Bits_Init+0x11e>
	else if (__tmp > 65535)
    37b0:	69 a9       	ldd	r22, Y+49	; 0x31
    37b2:	7a a9       	ldd	r23, Y+50	; 0x32
    37b4:	8b a9       	ldd	r24, Y+51	; 0x33
    37b6:	9c a9       	ldd	r25, Y+52	; 0x34
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	3f ef       	ldi	r19, 0xFF	; 255
    37bc:	4f e7       	ldi	r20, 0x7F	; 127
    37be:	57 e4       	ldi	r21, 0x47	; 71
    37c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c4:	18 16       	cp	r1, r24
    37c6:	4c f5       	brge	.+82     	; 0x381a <HCLCD_Vid4Bits_Init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c8:	6d a9       	ldd	r22, Y+53	; 0x35
    37ca:	7e a9       	ldd	r23, Y+54	; 0x36
    37cc:	8f a9       	ldd	r24, Y+55	; 0x37
    37ce:	98 ad       	ldd	r25, Y+56	; 0x38
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	40 e2       	ldi	r20, 0x20	; 32
    37d6:	51 e4       	ldi	r21, 0x41	; 65
    37d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	bc 01       	movw	r22, r24
    37e2:	cd 01       	movw	r24, r26
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	98 ab       	std	Y+48, r25	; 0x30
    37ee:	8f a7       	std	Y+47, r24	; 0x2f
    37f0:	0f c0       	rjmp	.+30     	; 0x3810 <HCLCD_Vid4Bits_Init+0x100>
    37f2:	88 ec       	ldi	r24, 0xC8	; 200
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	9e a7       	std	Y+46, r25	; 0x2e
    37f8:	8d a7       	std	Y+45, r24	; 0x2d
    37fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    37fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <HCLCD_Vid4Bits_Init+0xee>
    3802:	9e a7       	std	Y+46, r25	; 0x2e
    3804:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3806:	8f a5       	ldd	r24, Y+47	; 0x2f
    3808:	98 a9       	ldd	r25, Y+48	; 0x30
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	98 ab       	std	Y+48, r25	; 0x30
    380e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3810:	8f a5       	ldd	r24, Y+47	; 0x2f
    3812:	98 a9       	ldd	r25, Y+48	; 0x30
    3814:	00 97       	sbiw	r24, 0x00	; 0
    3816:	69 f7       	brne	.-38     	; 0x37f2 <HCLCD_Vid4Bits_Init+0xe2>
    3818:	14 c0       	rjmp	.+40     	; 0x3842 <HCLCD_Vid4Bits_Init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381a:	69 a9       	ldd	r22, Y+49	; 0x31
    381c:	7a a9       	ldd	r23, Y+50	; 0x32
    381e:	8b a9       	ldd	r24, Y+51	; 0x33
    3820:	9c a9       	ldd	r25, Y+52	; 0x34
    3822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	98 ab       	std	Y+48, r25	; 0x30
    382c:	8f a7       	std	Y+47, r24	; 0x2f
    382e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3830:	98 a9       	ldd	r25, Y+48	; 0x30
    3832:	9c a7       	std	Y+44, r25	; 0x2c
    3834:	8b a7       	std	Y+43, r24	; 0x2b
    3836:	8b a5       	ldd	r24, Y+43	; 0x2b
    3838:	9c a5       	ldd	r25, Y+44	; 0x2c
    383a:	01 97       	sbiw	r24, 0x01	; 1
    383c:	f1 f7       	brne	.-4      	; 0x383a <HCLCD_Vid4Bits_Init+0x12a>
    383e:	9c a7       	std	Y+44, r25	; 0x2c
    3840:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3842:	82 e0       	ldi	r24, 0x02	; 2
    3844:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    3848:	82 e0       	ldi	r24, 0x02	; 2
    384a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    384e:	88 e2       	ldi	r24, 0x28	; 40
    3850:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	a0 e8       	ldi	r26, 0x80	; 128
    385a:	bf e3       	ldi	r27, 0x3F	; 63
    385c:	8f a3       	std	Y+39, r24	; 0x27
    385e:	98 a7       	std	Y+40, r25	; 0x28
    3860:	a9 a7       	std	Y+41, r26	; 0x29
    3862:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3864:	6f a1       	ldd	r22, Y+39	; 0x27
    3866:	78 a5       	ldd	r23, Y+40	; 0x28
    3868:	89 a5       	ldd	r24, Y+41	; 0x29
    386a:	9a a5       	ldd	r25, Y+42	; 0x2a
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	4a ef       	ldi	r20, 0xFA	; 250
    3872:	54 e4       	ldi	r21, 0x44	; 68
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	8b a3       	std	Y+35, r24	; 0x23
    387e:	9c a3       	std	Y+36, r25	; 0x24
    3880:	ad a3       	std	Y+37, r26	; 0x25
    3882:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3884:	6b a1       	ldd	r22, Y+35	; 0x23
    3886:	7c a1       	ldd	r23, Y+36	; 0x24
    3888:	8d a1       	ldd	r24, Y+37	; 0x25
    388a:	9e a1       	ldd	r25, Y+38	; 0x26
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 e8       	ldi	r20, 0x80	; 128
    3892:	5f e3       	ldi	r21, 0x3F	; 63
    3894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3898:	88 23       	and	r24, r24
    389a:	2c f4       	brge	.+10     	; 0x38a6 <HCLCD_Vid4Bits_Init+0x196>
		__ticks = 1;
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	9a a3       	std	Y+34, r25	; 0x22
    38a2:	89 a3       	std	Y+33, r24	; 0x21
    38a4:	3f c0       	rjmp	.+126    	; 0x3924 <HCLCD_Vid4Bits_Init+0x214>
	else if (__tmp > 65535)
    38a6:	6b a1       	ldd	r22, Y+35	; 0x23
    38a8:	7c a1       	ldd	r23, Y+36	; 0x24
    38aa:	8d a1       	ldd	r24, Y+37	; 0x25
    38ac:	9e a1       	ldd	r25, Y+38	; 0x26
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	3f ef       	ldi	r19, 0xFF	; 255
    38b2:	4f e7       	ldi	r20, 0x7F	; 127
    38b4:	57 e4       	ldi	r21, 0x47	; 71
    38b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ba:	18 16       	cp	r1, r24
    38bc:	4c f5       	brge	.+82     	; 0x3910 <HCLCD_Vid4Bits_Init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38be:	6f a1       	ldd	r22, Y+39	; 0x27
    38c0:	78 a5       	ldd	r23, Y+40	; 0x28
    38c2:	89 a5       	ldd	r24, Y+41	; 0x29
    38c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e2       	ldi	r20, 0x20	; 32
    38cc:	51 e4       	ldi	r21, 0x41	; 65
    38ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	bc 01       	movw	r22, r24
    38d8:	cd 01       	movw	r24, r26
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9a a3       	std	Y+34, r25	; 0x22
    38e4:	89 a3       	std	Y+33, r24	; 0x21
    38e6:	0f c0       	rjmp	.+30     	; 0x3906 <HCLCD_Vid4Bits_Init+0x1f6>
    38e8:	88 ec       	ldi	r24, 0xC8	; 200
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	98 a3       	std	Y+32, r25	; 0x20
    38ee:	8f 8f       	std	Y+31, r24	; 0x1f
    38f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f2:	98 a1       	ldd	r25, Y+32	; 0x20
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <HCLCD_Vid4Bits_Init+0x1e4>
    38f8:	98 a3       	std	Y+32, r25	; 0x20
    38fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38fc:	89 a1       	ldd	r24, Y+33	; 0x21
    38fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	9a a3       	std	Y+34, r25	; 0x22
    3904:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3906:	89 a1       	ldd	r24, Y+33	; 0x21
    3908:	9a a1       	ldd	r25, Y+34	; 0x22
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	69 f7       	brne	.-38     	; 0x38e8 <HCLCD_Vid4Bits_Init+0x1d8>
    390e:	14 c0       	rjmp	.+40     	; 0x3938 <HCLCD_Vid4Bits_Init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3910:	6b a1       	ldd	r22, Y+35	; 0x23
    3912:	7c a1       	ldd	r23, Y+36	; 0x24
    3914:	8d a1       	ldd	r24, Y+37	; 0x25
    3916:	9e a1       	ldd	r25, Y+38	; 0x26
    3918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	9a a3       	std	Y+34, r25	; 0x22
    3922:	89 a3       	std	Y+33, r24	; 0x21
    3924:	89 a1       	ldd	r24, Y+33	; 0x21
    3926:	9a a1       	ldd	r25, Y+34	; 0x22
    3928:	9e 8f       	std	Y+30, r25	; 0x1e
    392a:	8d 8f       	std	Y+29, r24	; 0x1d
    392c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    392e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <HCLCD_Vid4Bits_Init+0x220>
    3934:	9e 8f       	std	Y+30, r25	; 0x1e
    3936:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    393e:	8c e0       	ldi	r24, 0x0C	; 12
    3940:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	a0 e8       	ldi	r26, 0x80	; 128
    394a:	bf e3       	ldi	r27, 0x3F	; 63
    394c:	89 8f       	std	Y+25, r24	; 0x19
    394e:	9a 8f       	std	Y+26, r25	; 0x1a
    3950:	ab 8f       	std	Y+27, r26	; 0x1b
    3952:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3954:	69 8d       	ldd	r22, Y+25	; 0x19
    3956:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    395a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	4a ef       	ldi	r20, 0xFA	; 250
    3962:	54 e4       	ldi	r21, 0x44	; 68
    3964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	8d 8b       	std	Y+21, r24	; 0x15
    396e:	9e 8b       	std	Y+22, r25	; 0x16
    3970:	af 8b       	std	Y+23, r26	; 0x17
    3972:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3974:	6d 89       	ldd	r22, Y+21	; 0x15
    3976:	7e 89       	ldd	r23, Y+22	; 0x16
    3978:	8f 89       	ldd	r24, Y+23	; 0x17
    397a:	98 8d       	ldd	r25, Y+24	; 0x18
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e8       	ldi	r20, 0x80	; 128
    3982:	5f e3       	ldi	r21, 0x3F	; 63
    3984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3988:	88 23       	and	r24, r24
    398a:	2c f4       	brge	.+10     	; 0x3996 <HCLCD_Vid4Bits_Init+0x286>
		__ticks = 1;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9c 8b       	std	Y+20, r25	; 0x14
    3992:	8b 8b       	std	Y+19, r24	; 0x13
    3994:	3f c0       	rjmp	.+126    	; 0x3a14 <HCLCD_Vid4Bits_Init+0x304>
	else if (__tmp > 65535)
    3996:	6d 89       	ldd	r22, Y+21	; 0x15
    3998:	7e 89       	ldd	r23, Y+22	; 0x16
    399a:	8f 89       	ldd	r24, Y+23	; 0x17
    399c:	98 8d       	ldd	r25, Y+24	; 0x18
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	3f ef       	ldi	r19, 0xFF	; 255
    39a2:	4f e7       	ldi	r20, 0x7F	; 127
    39a4:	57 e4       	ldi	r21, 0x47	; 71
    39a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39aa:	18 16       	cp	r1, r24
    39ac:	4c f5       	brge	.+82     	; 0x3a00 <HCLCD_Vid4Bits_Init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ae:	69 8d       	ldd	r22, Y+25	; 0x19
    39b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e2       	ldi	r20, 0x20	; 32
    39bc:	51 e4       	ldi	r21, 0x41	; 65
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	9c 8b       	std	Y+20, r25	; 0x14
    39d4:	8b 8b       	std	Y+19, r24	; 0x13
    39d6:	0f c0       	rjmp	.+30     	; 0x39f6 <HCLCD_Vid4Bits_Init+0x2e6>
    39d8:	88 ec       	ldi	r24, 0xC8	; 200
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9a 8b       	std	Y+18, r25	; 0x12
    39de:	89 8b       	std	Y+17, r24	; 0x11
    39e0:	89 89       	ldd	r24, Y+17	; 0x11
    39e2:	9a 89       	ldd	r25, Y+18	; 0x12
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <HCLCD_Vid4Bits_Init+0x2d4>
    39e8:	9a 8b       	std	Y+18, r25	; 0x12
    39ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ec:	8b 89       	ldd	r24, Y+19	; 0x13
    39ee:	9c 89       	ldd	r25, Y+20	; 0x14
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	9c 8b       	std	Y+20, r25	; 0x14
    39f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f6:	8b 89       	ldd	r24, Y+19	; 0x13
    39f8:	9c 89       	ldd	r25, Y+20	; 0x14
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	69 f7       	brne	.-38     	; 0x39d8 <HCLCD_Vid4Bits_Init+0x2c8>
    39fe:	14 c0       	rjmp	.+40     	; 0x3a28 <HCLCD_Vid4Bits_Init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a00:	6d 89       	ldd	r22, Y+21	; 0x15
    3a02:	7e 89       	ldd	r23, Y+22	; 0x16
    3a04:	8f 89       	ldd	r24, Y+23	; 0x17
    3a06:	98 8d       	ldd	r25, Y+24	; 0x18
    3a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	9c 8b       	std	Y+20, r25	; 0x14
    3a12:	8b 8b       	std	Y+19, r24	; 0x13
    3a14:	8b 89       	ldd	r24, Y+19	; 0x13
    3a16:	9c 89       	ldd	r25, Y+20	; 0x14
    3a18:	98 8b       	std	Y+16, r25	; 0x10
    3a1a:	8f 87       	std	Y+15, r24	; 0x0f
    3a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a1e:	98 89       	ldd	r25, Y+16	; 0x10
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	f1 f7       	brne	.-4      	; 0x3a20 <HCLCD_Vid4Bits_Init+0x310>
    3a24:	98 8b       	std	Y+16, r25	; 0x10
    3a26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	a0 e0       	ldi	r26, 0x00	; 0
    3a3a:	b0 e4       	ldi	r27, 0x40	; 64
    3a3c:	8b 87       	std	Y+11, r24	; 0x0b
    3a3e:	9c 87       	std	Y+12, r25	; 0x0c
    3a40:	ad 87       	std	Y+13, r26	; 0x0d
    3a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	4a ef       	ldi	r20, 0xFA	; 250
    3a52:	54 e4       	ldi	r21, 0x44	; 68
    3a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	8f 83       	std	Y+7, r24	; 0x07
    3a5e:	98 87       	std	Y+8, r25	; 0x08
    3a60:	a9 87       	std	Y+9, r26	; 0x09
    3a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a64:	6f 81       	ldd	r22, Y+7	; 0x07
    3a66:	78 85       	ldd	r23, Y+8	; 0x08
    3a68:	89 85       	ldd	r24, Y+9	; 0x09
    3a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	40 e8       	ldi	r20, 0x80	; 128
    3a72:	5f e3       	ldi	r21, 0x3F	; 63
    3a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a78:	88 23       	and	r24, r24
    3a7a:	2c f4       	brge	.+10     	; 0x3a86 <HCLCD_Vid4Bits_Init+0x376>
		__ticks = 1;
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	9e 83       	std	Y+6, r25	; 0x06
    3a82:	8d 83       	std	Y+5, r24	; 0x05
    3a84:	3f c0       	rjmp	.+126    	; 0x3b04 <HCLCD_Vid4Bits_Init+0x3f4>
	else if (__tmp > 65535)
    3a86:	6f 81       	ldd	r22, Y+7	; 0x07
    3a88:	78 85       	ldd	r23, Y+8	; 0x08
    3a8a:	89 85       	ldd	r24, Y+9	; 0x09
    3a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	3f ef       	ldi	r19, 0xFF	; 255
    3a92:	4f e7       	ldi	r20, 0x7F	; 127
    3a94:	57 e4       	ldi	r21, 0x47	; 71
    3a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a9a:	18 16       	cp	r1, r24
    3a9c:	4c f5       	brge	.+82     	; 0x3af0 <HCLCD_Vid4Bits_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e2       	ldi	r20, 0x20	; 32
    3aac:	51 e4       	ldi	r21, 0x41	; 65
    3aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	bc 01       	movw	r22, r24
    3ab8:	cd 01       	movw	r24, r26
    3aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	9e 83       	std	Y+6, r25	; 0x06
    3ac4:	8d 83       	std	Y+5, r24	; 0x05
    3ac6:	0f c0       	rjmp	.+30     	; 0x3ae6 <HCLCD_Vid4Bits_Init+0x3d6>
    3ac8:	88 ec       	ldi	r24, 0xC8	; 200
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	9c 83       	std	Y+4, r25	; 0x04
    3ace:	8b 83       	std	Y+3, r24	; 0x03
    3ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	f1 f7       	brne	.-4      	; 0x3ad4 <HCLCD_Vid4Bits_Init+0x3c4>
    3ad8:	9c 83       	std	Y+4, r25	; 0x04
    3ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3adc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ade:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	9e 83       	std	Y+6, r25	; 0x06
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aea:	00 97       	sbiw	r24, 0x00	; 0
    3aec:	69 f7       	brne	.-38     	; 0x3ac8 <HCLCD_Vid4Bits_Init+0x3b8>
    3aee:	14 c0       	rjmp	.+40     	; 0x3b18 <HCLCD_Vid4Bits_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af0:	6f 81       	ldd	r22, Y+7	; 0x07
    3af2:	78 85       	ldd	r23, Y+8	; 0x08
    3af4:	89 85       	ldd	r24, Y+9	; 0x09
    3af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	9e 83       	std	Y+6, r25	; 0x06
    3b02:	8d 83       	std	Y+5, r24	; 0x05
    3b04:	8d 81       	ldd	r24, Y+5	; 0x05
    3b06:	9e 81       	ldd	r25, Y+6	; 0x06
    3b08:	9a 83       	std	Y+2, r25	; 0x02
    3b0a:	89 83       	std	Y+1, r24	; 0x01
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <HCLCD_Vid4Bits_Init+0x400>
    3b14:	9a 83       	std	Y+2, r25	; 0x02
    3b16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    3b1e:	86 e0       	ldi	r24, 0x06	; 6
    3b20:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
}
    3b24:	e9 96       	adiw	r28, 0x39	; 57
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	08 95       	ret

00003b36 <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    3b36:	df 93       	push	r29
    3b38:	cf 93       	push	r28
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	2f 97       	sbiw	r28, 0x0f	; 15
    3b40:	0f b6       	in	r0, 0x3f	; 63
    3b42:	f8 94       	cli
    3b44:	de bf       	out	0x3e, r29	; 62
    3b46:	0f be       	out	0x3f, r0	; 63
    3b48:	cd bf       	out	0x3d, r28	; 61
    3b4a:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	61 e0       	ldi	r22, 0x01	; 1
    3b50:	41 e0       	ldi	r20, 0x01	; 1
    3b52:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	61 e0       	ldi	r22, 0x01	; 1
    3b5a:	40 e0       	ldi	r20, 0x00	; 0
    3b5c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    3b60:	84 e0       	ldi	r24, 0x04	; 4
    3b62:	61 e0       	ldi	r22, 0x01	; 1
    3b64:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b66:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3b6a:	82 e0       	ldi	r24, 0x02	; 2
    3b6c:	61 e0       	ldi	r22, 0x01	; 1
    3b6e:	41 e0       	ldi	r20, 0x01	; 1
    3b70:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	a0 e0       	ldi	r26, 0x00	; 0
    3b7a:	b0 e4       	ldi	r27, 0x40	; 64
    3b7c:	8b 87       	std	Y+11, r24	; 0x0b
    3b7e:	9c 87       	std	Y+12, r25	; 0x0c
    3b80:	ad 87       	std	Y+13, r26	; 0x0d
    3b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	4a ef       	ldi	r20, 0xFA	; 250
    3b92:	54 e4       	ldi	r21, 0x44	; 68
    3b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	8f 83       	std	Y+7, r24	; 0x07
    3b9e:	98 87       	std	Y+8, r25	; 0x08
    3ba0:	a9 87       	std	Y+9, r26	; 0x09
    3ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba6:	78 85       	ldd	r23, Y+8	; 0x08
    3ba8:	89 85       	ldd	r24, Y+9	; 0x09
    3baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	40 e8       	ldi	r20, 0x80	; 128
    3bb2:	5f e3       	ldi	r21, 0x3F	; 63
    3bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bb8:	88 23       	and	r24, r24
    3bba:	2c f4       	brge	.+10     	; 0x3bc6 <HCLCD_VidWriteChar_4Bits+0x90>
		__ticks = 1;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	9e 83       	std	Y+6, r25	; 0x06
    3bc2:	8d 83       	std	Y+5, r24	; 0x05
    3bc4:	3f c0       	rjmp	.+126    	; 0x3c44 <HCLCD_VidWriteChar_4Bits+0x10e>
	else if (__tmp > 65535)
    3bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc8:	78 85       	ldd	r23, Y+8	; 0x08
    3bca:	89 85       	ldd	r24, Y+9	; 0x09
    3bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	3f ef       	ldi	r19, 0xFF	; 255
    3bd2:	4f e7       	ldi	r20, 0x7F	; 127
    3bd4:	57 e4       	ldi	r21, 0x47	; 71
    3bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bda:	18 16       	cp	r1, r24
    3bdc:	4c f5       	brge	.+82     	; 0x3c30 <HCLCD_VidWriteChar_4Bits+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e2       	ldi	r20, 0x20	; 32
    3bec:	51 e4       	ldi	r21, 0x41	; 65
    3bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	bc 01       	movw	r22, r24
    3bf8:	cd 01       	movw	r24, r26
    3bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	9e 83       	std	Y+6, r25	; 0x06
    3c04:	8d 83       	std	Y+5, r24	; 0x05
    3c06:	0f c0       	rjmp	.+30     	; 0x3c26 <HCLCD_VidWriteChar_4Bits+0xf0>
    3c08:	88 ec       	ldi	r24, 0xC8	; 200
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	9c 83       	std	Y+4, r25	; 0x04
    3c0e:	8b 83       	std	Y+3, r24	; 0x03
    3c10:	8b 81       	ldd	r24, Y+3	; 0x03
    3c12:	9c 81       	ldd	r25, Y+4	; 0x04
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	f1 f7       	brne	.-4      	; 0x3c14 <HCLCD_VidWriteChar_4Bits+0xde>
    3c18:	9c 83       	std	Y+4, r25	; 0x04
    3c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	9e 83       	std	Y+6, r25	; 0x06
    3c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c26:	8d 81       	ldd	r24, Y+5	; 0x05
    3c28:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2a:	00 97       	sbiw	r24, 0x00	; 0
    3c2c:	69 f7       	brne	.-38     	; 0x3c08 <HCLCD_VidWriteChar_4Bits+0xd2>
    3c2e:	14 c0       	rjmp	.+40     	; 0x3c58 <HCLCD_VidWriteChar_4Bits+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c30:	6f 81       	ldd	r22, Y+7	; 0x07
    3c32:	78 85       	ldd	r23, Y+8	; 0x08
    3c34:	89 85       	ldd	r24, Y+9	; 0x09
    3c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	9e 83       	std	Y+6, r25	; 0x06
    3c42:	8d 83       	std	Y+5, r24	; 0x05
    3c44:	8d 81       	ldd	r24, Y+5	; 0x05
    3c46:	9e 81       	ldd	r25, Y+6	; 0x06
    3c48:	9a 83       	std	Y+2, r25	; 0x02
    3c4a:	89 83       	std	Y+1, r24	; 0x01
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	f1 f7       	brne	.-4      	; 0x3c50 <HCLCD_VidWriteChar_4Bits+0x11a>
    3c54:	9a 83       	std	Y+2, r25	; 0x02
    3c56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3c58:	82 e0       	ldi	r24, 0x02	; 2
    3c5a:	61 e0       	ldi	r22, 0x01	; 1
    3c5c:	40 e0       	ldi	r20, 0x00	; 0
    3c5e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    3c62:	2f 96       	adiw	r28, 0x0f	; 15
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	cf 91       	pop	r28
    3c70:	df 91       	pop	r29
    3c72:	08 95       	ret

00003c74 <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3c74:	df 93       	push	r29
    3c76:	cf 93       	push	r28
    3c78:	0f 92       	push	r0
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3c80:	89 81       	ldd	r24, Y+1	; 0x01
    3c82:	82 95       	swap	r24
    3c84:	8f 70       	andi	r24, 0x0F	; 15
    3c86:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3c8a:	89 81       	ldd	r24, Y+1	; 0x01
    3c8c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <HCLCD_VidWriteChar_4Bits>
}
    3c90:	0f 90       	pop	r0
    3c92:	cf 91       	pop	r28
    3c94:	df 91       	pop	r29
    3c96:	08 95       	ret

00003c98 <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3c98:	df 93       	push	r29
    3c9a:	cf 93       	push	r28
    3c9c:	00 d0       	rcall	.+0      	; 0x3c9e <HCLCD_Vid4Bits_DisplayString+0x6>
    3c9e:	0f 92       	push	r0
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	9b 83       	std	Y+3, r25	; 0x03
    3ca6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3ca8:	19 82       	std	Y+1, r1	; 0x01
    3caa:	0e c0       	rjmp	.+28     	; 0x3cc8 <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3cac:	89 81       	ldd	r24, Y+1	; 0x01
    3cae:	28 2f       	mov	r18, r24
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	e2 0f       	add	r30, r18
    3cba:	f3 1f       	adc	r31, r19
    3cbc:	80 81       	ld	r24, Z
    3cbe:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	8f 5f       	subi	r24, 0xFF	; 255
    3cc6:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	28 2f       	mov	r18, r24
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	e2 0f       	add	r30, r18
    3cd6:	f3 1f       	adc	r31, r19
    3cd8:	80 81       	ld	r24, Z
    3cda:	88 23       	and	r24, r24
    3cdc:	39 f7       	brne	.-50     	; 0x3cac <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3cde:	0f 90       	pop	r0
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	cf 91       	pop	r28
    3ce6:	df 91       	pop	r29
    3ce8:	08 95       	ret

00003cea <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	df 93       	push	r29
    3cf0:	cf 93       	push	r28
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	60 97       	sbiw	r28, 0x10	; 16
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	6d 87       	std	Y+13, r22	; 0x0d
    3d04:	7e 87       	std	Y+14, r23	; 0x0e
    3d06:	8f 87       	std	Y+15, r24	; 0x0f
    3d08:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3d0a:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d10:	af 85       	ldd	r26, Y+15	; 0x0f
    3d12:	b8 89       	ldd	r27, Y+16	; 0x10
    3d14:	00 97       	sbiw	r24, 0x00	; 0
    3d16:	a1 05       	cpc	r26, r1
    3d18:	b1 05       	cpc	r27, r1
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3d1c:	4f c0       	rjmp	.+158    	; 0x3dbc <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3d1e:	2d c0       	rjmp	.+90     	; 0x3d7a <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	08 2f       	mov	r16, r24
    3d24:	10 e0       	ldi	r17, 0x00	; 0
    3d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2a:	af 85       	ldd	r26, Y+15	; 0x0f
    3d2c:	b8 89       	ldd	r27, Y+16	; 0x10
    3d2e:	2a e0       	ldi	r18, 0x0A	; 10
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	40 e0       	ldi	r20, 0x00	; 0
    3d34:	50 e0       	ldi	r21, 0x00	; 0
    3d36:	bc 01       	movw	r22, r24
    3d38:	cd 01       	movw	r24, r26
    3d3a:	0e 94 9d 2b 	call	0x573a	; 0x573a <__udivmodsi4>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	28 2f       	mov	r18, r24
    3d44:	ce 01       	movw	r24, r28
    3d46:	03 96       	adiw	r24, 0x03	; 3
    3d48:	fc 01       	movw	r30, r24
    3d4a:	e0 0f       	add	r30, r16
    3d4c:	f1 1f       	adc	r31, r17
    3d4e:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d54:	af 85       	ldd	r26, Y+15	; 0x0f
    3d56:	b8 89       	ldd	r27, Y+16	; 0x10
    3d58:	2a e0       	ldi	r18, 0x0A	; 10
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	40 e0       	ldi	r20, 0x00	; 0
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 9d 2b 	call	0x573a	; 0x573a <__udivmodsi4>
    3d68:	da 01       	movw	r26, r20
    3d6a:	c9 01       	movw	r24, r18
    3d6c:	8d 87       	std	Y+13, r24	; 0x0d
    3d6e:	9e 87       	std	Y+14, r25	; 0x0e
    3d70:	af 87       	std	Y+15, r26	; 0x0f
    3d72:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3d74:	8a 81       	ldd	r24, Y+2	; 0x02
    3d76:	8f 5f       	subi	r24, 0xFF	; 255
    3d78:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7e:	af 85       	ldd	r26, Y+15	; 0x0f
    3d80:	b8 89       	ldd	r27, Y+16	; 0x10
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	a1 05       	cpc	r26, r1
    3d86:	b1 05       	cpc	r27, r1
    3d88:	59 f6       	brne	.-106    	; 0x3d20 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8c:	81 50       	subi	r24, 0x01	; 1
    3d8e:	89 83       	std	Y+1, r24	; 0x01
    3d90:	11 c0       	rjmp	.+34     	; 0x3db4 <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	28 2f       	mov	r18, r24
    3d96:	33 27       	eor	r19, r19
    3d98:	27 fd       	sbrc	r18, 7
    3d9a:	30 95       	com	r19
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	03 96       	adiw	r24, 0x03	; 3
    3da0:	fc 01       	movw	r30, r24
    3da2:	e2 0f       	add	r30, r18
    3da4:	f3 1f       	adc	r31, r19
    3da6:	80 81       	ld	r24, Z
    3da8:	80 5d       	subi	r24, 0xD0	; 208
    3daa:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	81 50       	subi	r24, 0x01	; 1
    3db2:	89 83       	std	Y+1, r24	; 0x01
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	88 23       	and	r24, r24
    3db8:	64 f7       	brge	.-40     	; 0x3d92 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3dba:	03 c0       	rjmp	.+6      	; 0x3dc2 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3dbc:	80 e3       	ldi	r24, 0x30	; 48
    3dbe:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3dc2:	60 96       	adiw	r28, 0x10	; 16
    3dc4:	0f b6       	in	r0, 0x3f	; 63
    3dc6:	f8 94       	cli
    3dc8:	de bf       	out	0x3e, r29	; 62
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	cd bf       	out	0x3d, r28	; 61
    3dce:	cf 91       	pop	r28
    3dd0:	df 91       	pop	r29
    3dd2:	1f 91       	pop	r17
    3dd4:	0f 91       	pop	r16
    3dd6:	08 95       	ret

00003dd8 <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3dd8:	df 93       	push	r29
    3dda:	cf 93       	push	r28
    3ddc:	00 d0       	rcall	.+0      	; 0x3dde <HCLCD_Vid4Bits_SetPosition+0x6>
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	89 83       	std	Y+1, r24	; 0x01
    3de4:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	81 30       	cpi	r24, 0x01	; 1
    3dea:	b9 f4       	brne	.+46     	; 0x3e1a <HCLCD_Vid4Bits_SetPosition+0x42>
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	80 31       	cpi	r24, 0x10	; 16
    3df0:	a0 f4       	brcc	.+40     	; 0x3e1a <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3df2:	8a 81       	ldd	r24, Y+2	; 0x02
    3df4:	88 2f       	mov	r24, r24
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	80 58       	subi	r24, 0x80	; 128
    3dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfc:	95 95       	asr	r25
    3dfe:	87 95       	ror	r24
    3e00:	95 95       	asr	r25
    3e02:	87 95       	ror	r24
    3e04:	95 95       	asr	r25
    3e06:	87 95       	ror	r24
    3e08:	95 95       	asr	r25
    3e0a:	87 95       	ror	r24
    3e0c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3e10:	8a 81       	ldd	r24, Y+2	; 0x02
    3e12:	80 58       	subi	r24, 0x80	; 128
    3e14:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    3e18:	19 c0       	rjmp	.+50     	; 0x3e4c <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	82 30       	cpi	r24, 0x02	; 2
    3e1e:	b1 f4       	brne	.+44     	; 0x3e4c <HCLCD_Vid4Bits_SetPosition+0x74>
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	80 31       	cpi	r24, 0x10	; 16
    3e24:	98 f4       	brcc	.+38     	; 0x3e4c <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3e26:	8a 81       	ldd	r24, Y+2	; 0x02
    3e28:	88 2f       	mov	r24, r24
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	80 54       	subi	r24, 0x40	; 64
    3e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e30:	95 95       	asr	r25
    3e32:	87 95       	ror	r24
    3e34:	95 95       	asr	r25
    3e36:	87 95       	ror	r24
    3e38:	95 95       	asr	r25
    3e3a:	87 95       	ror	r24
    3e3c:	95 95       	asr	r25
    3e3e:	87 95       	ror	r24
    3e40:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3e44:	8a 81       	ldd	r24, Y+2	; 0x02
    3e46:	80 54       	subi	r24, 0x40	; 64
    3e48:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	cf 91       	pop	r28
    3e52:	df 91       	pop	r29
    3e54:	08 95       	ret

00003e56 <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3e56:	df 93       	push	r29
    3e58:	cf 93       	push	r28
    3e5a:	00 d0       	rcall	.+0      	; 0x3e5c <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3e5c:	00 d0       	rcall	.+0      	; 0x3e5e <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	8a 83       	std	Y+2, r24	; 0x02
    3e64:	7c 83       	std	Y+4, r23	; 0x04
    3e66:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3e68:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6a:	88 30       	cpi	r24, 0x08	; 8
    3e6c:	98 f5       	brcc	.+102    	; 0x3ed4 <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e70:	88 2f       	mov	r24, r24
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	08 96       	adiw	r24, 0x08	; 8
    3e76:	88 0f       	add	r24, r24
    3e78:	99 1f       	adc	r25, r25
    3e7a:	88 0f       	add	r24, r24
    3e7c:	99 1f       	adc	r25, r25
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	95 95       	asr	r25
    3e84:	87 95       	ror	r24
    3e86:	95 95       	asr	r25
    3e88:	87 95       	ror	r24
    3e8a:	95 95       	asr	r25
    3e8c:	87 95       	ror	r24
    3e8e:	95 95       	asr	r25
    3e90:	87 95       	ror	r24
    3e92:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3e96:	8a 81       	ldd	r24, Y+2	; 0x02
    3e98:	88 2f       	mov	r24, r24
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	08 96       	adiw	r24, 0x08	; 8
    3e9e:	88 0f       	add	r24, r24
    3ea0:	99 1f       	adc	r25, r25
    3ea2:	88 0f       	add	r24, r24
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	88 0f       	add	r24, r24
    3ea8:	99 1f       	adc	r25, r25
    3eaa:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3eae:	19 82       	std	Y+1, r1	; 0x01
    3eb0:	0e c0       	rjmp	.+28     	; 0x3ece <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3eb2:	89 81       	ldd	r24, Y+1	; 0x01
    3eb4:	28 2f       	mov	r18, r24
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eba:	9c 81       	ldd	r25, Y+4	; 0x04
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	e2 0f       	add	r30, r18
    3ec0:	f3 1f       	adc	r31, r19
    3ec2:	80 81       	ld	r24, Z
    3ec4:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	8f 5f       	subi	r24, 0xFF	; 255
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	88 30       	cpi	r24, 0x08	; 8
    3ed2:	78 f3       	brcs	.-34     	; 0x3eb2 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	cf 91       	pop	r28
    3ede:	df 91       	pop	r29
    3ee0:	08 95       	ret

00003ee2 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3ee2:	df 93       	push	r29
    3ee4:	cf 93       	push	r28
    3ee6:	cd b7       	in	r28, 0x3d	; 61
    3ee8:	de b7       	in	r29, 0x3e	; 62
    3eea:	2e 97       	sbiw	r28, 0x0e	; 14
    3eec:	0f b6       	in	r0, 0x3f	; 63
    3eee:	f8 94       	cli
    3ef0:	de bf       	out	0x3e, r29	; 62
    3ef2:	0f be       	out	0x3f, r0	; 63
    3ef4:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	a0 e0       	ldi	r26, 0x00	; 0
    3f08:	b0 e4       	ldi	r27, 0x40	; 64
    3f0a:	8b 87       	std	Y+11, r24	; 0x0b
    3f0c:	9c 87       	std	Y+12, r25	; 0x0c
    3f0e:	ad 87       	std	Y+13, r26	; 0x0d
    3f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	4a ef       	ldi	r20, 0xFA	; 250
    3f20:	54 e4       	ldi	r21, 0x44	; 68
    3f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	8f 83       	std	Y+7, r24	; 0x07
    3f2c:	98 87       	std	Y+8, r25	; 0x08
    3f2e:	a9 87       	std	Y+9, r26	; 0x09
    3f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f32:	6f 81       	ldd	r22, Y+7	; 0x07
    3f34:	78 85       	ldd	r23, Y+8	; 0x08
    3f36:	89 85       	ldd	r24, Y+9	; 0x09
    3f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	40 e8       	ldi	r20, 0x80	; 128
    3f40:	5f e3       	ldi	r21, 0x3F	; 63
    3f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f46:	88 23       	and	r24, r24
    3f48:	2c f4       	brge	.+10     	; 0x3f54 <HCLCD_Vid4Bits_ClearScreen+0x72>
		__ticks = 1;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	9e 83       	std	Y+6, r25	; 0x06
    3f50:	8d 83       	std	Y+5, r24	; 0x05
    3f52:	3f c0       	rjmp	.+126    	; 0x3fd2 <HCLCD_Vid4Bits_ClearScreen+0xf0>
	else if (__tmp > 65535)
    3f54:	6f 81       	ldd	r22, Y+7	; 0x07
    3f56:	78 85       	ldd	r23, Y+8	; 0x08
    3f58:	89 85       	ldd	r24, Y+9	; 0x09
    3f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	3f ef       	ldi	r19, 0xFF	; 255
    3f60:	4f e7       	ldi	r20, 0x7F	; 127
    3f62:	57 e4       	ldi	r21, 0x47	; 71
    3f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f68:	18 16       	cp	r1, r24
    3f6a:	4c f5       	brge	.+82     	; 0x3fbe <HCLCD_Vid4Bits_ClearScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	40 e2       	ldi	r20, 0x20	; 32
    3f7a:	51 e4       	ldi	r21, 0x41	; 65
    3f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	bc 01       	movw	r22, r24
    3f86:	cd 01       	movw	r24, r26
    3f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	9e 83       	std	Y+6, r25	; 0x06
    3f92:	8d 83       	std	Y+5, r24	; 0x05
    3f94:	0f c0       	rjmp	.+30     	; 0x3fb4 <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3f96:	88 ec       	ldi	r24, 0xC8	; 200
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	9c 83       	std	Y+4, r25	; 0x04
    3f9c:	8b 83       	std	Y+3, r24	; 0x03
    3f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	f1 f7       	brne	.-4      	; 0x3fa2 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3fa6:	9c 83       	std	Y+4, r25	; 0x04
    3fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3faa:	8d 81       	ldd	r24, Y+5	; 0x05
    3fac:	9e 81       	ldd	r25, Y+6	; 0x06
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	9e 83       	std	Y+6, r25	; 0x06
    3fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	69 f7       	brne	.-38     	; 0x3f96 <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3fbc:	14 c0       	rjmp	.+40     	; 0x3fe6 <HCLCD_Vid4Bits_ClearScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc0:	78 85       	ldd	r23, Y+8	; 0x08
    3fc2:	89 85       	ldd	r24, Y+9	; 0x09
    3fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fca:	dc 01       	movw	r26, r24
    3fcc:	cb 01       	movw	r24, r22
    3fce:	9e 83       	std	Y+6, r25	; 0x06
    3fd0:	8d 83       	std	Y+5, r24	; 0x05
    3fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd6:	9a 83       	std	Y+2, r25	; 0x02
    3fd8:	89 83       	std	Y+1, r24	; 0x01
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
    3fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f7       	brne	.-4      	; 0x3fde <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3fe2:	9a 83       	std	Y+2, r25	; 0x02
    3fe4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3fe6:	2e 96       	adiw	r28, 0x0e	; 14
    3fe8:	0f b6       	in	r0, 0x3f	; 63
    3fea:	f8 94       	cli
    3fec:	de bf       	out	0x3e, r29	; 62
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	cd bf       	out	0x3d, r28	; 61
    3ff2:	cf 91       	pop	r28
    3ff4:	df 91       	pop	r29
    3ff6:	08 95       	ret

00003ff8 <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3ff8:	df 93       	push	r29
    3ffa:	cf 93       	push	r28
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	60 97       	sbiw	r28, 0x10	; 16
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	cd bf       	out	0x3d, r28	; 61
    400c:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    400e:	1f 86       	std	Y+15, r1	; 0x0f
    4010:	7b c0       	rjmp	.+246    	; 0x4108 <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    4018:	88 e1       	ldi	r24, 0x18	; 24
    401a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	a6 e9       	ldi	r26, 0x96	; 150
    4024:	b3 e4       	ldi	r27, 0x43	; 67
    4026:	8b 87       	std	Y+11, r24	; 0x0b
    4028:	9c 87       	std	Y+12, r25	; 0x0c
    402a:	ad 87       	std	Y+13, r26	; 0x0d
    402c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    402e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4030:	7c 85       	ldd	r23, Y+12	; 0x0c
    4032:	8d 85       	ldd	r24, Y+13	; 0x0d
    4034:	9e 85       	ldd	r25, Y+14	; 0x0e
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	4a ef       	ldi	r20, 0xFA	; 250
    403c:	54 e4       	ldi	r21, 0x44	; 68
    403e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	8f 83       	std	Y+7, r24	; 0x07
    4048:	98 87       	std	Y+8, r25	; 0x08
    404a:	a9 87       	std	Y+9, r26	; 0x09
    404c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    404e:	6f 81       	ldd	r22, Y+7	; 0x07
    4050:	78 85       	ldd	r23, Y+8	; 0x08
    4052:	89 85       	ldd	r24, Y+9	; 0x09
    4054:	9a 85       	ldd	r25, Y+10	; 0x0a
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	40 e8       	ldi	r20, 0x80	; 128
    405c:	5f e3       	ldi	r21, 0x3F	; 63
    405e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4062:	88 23       	and	r24, r24
    4064:	2c f4       	brge	.+10     	; 0x4070 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
		__ticks = 1;
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	9e 83       	std	Y+6, r25	; 0x06
    406c:	8d 83       	std	Y+5, r24	; 0x05
    406e:	3f c0       	rjmp	.+126    	; 0x40ee <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
	else if (__tmp > 65535)
    4070:	6f 81       	ldd	r22, Y+7	; 0x07
    4072:	78 85       	ldd	r23, Y+8	; 0x08
    4074:	89 85       	ldd	r24, Y+9	; 0x09
    4076:	9a 85       	ldd	r25, Y+10	; 0x0a
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	3f ef       	ldi	r19, 0xFF	; 255
    407c:	4f e7       	ldi	r20, 0x7F	; 127
    407e:	57 e4       	ldi	r21, 0x47	; 71
    4080:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4084:	18 16       	cp	r1, r24
    4086:	4c f5       	brge	.+82     	; 0x40da <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4088:	6b 85       	ldd	r22, Y+11	; 0x0b
    408a:	7c 85       	ldd	r23, Y+12	; 0x0c
    408c:	8d 85       	ldd	r24, Y+13	; 0x0d
    408e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	40 e2       	ldi	r20, 0x20	; 32
    4096:	51 e4       	ldi	r21, 0x41	; 65
    4098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	bc 01       	movw	r22, r24
    40a2:	cd 01       	movw	r24, r26
    40a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	9e 83       	std	Y+6, r25	; 0x06
    40ae:	8d 83       	std	Y+5, r24	; 0x05
    40b0:	0f c0       	rjmp	.+30     	; 0x40d0 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    40b2:	88 ec       	ldi	r24, 0xC8	; 200
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	9c 83       	std	Y+4, r25	; 0x04
    40b8:	8b 83       	std	Y+3, r24	; 0x03
    40ba:	8b 81       	ldd	r24, Y+3	; 0x03
    40bc:	9c 81       	ldd	r25, Y+4	; 0x04
    40be:	01 97       	sbiw	r24, 0x01	; 1
    40c0:	f1 f7       	brne	.-4      	; 0x40be <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    40c2:	9c 83       	std	Y+4, r25	; 0x04
    40c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c6:	8d 81       	ldd	r24, Y+5	; 0x05
    40c8:	9e 81       	ldd	r25, Y+6	; 0x06
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	9e 83       	std	Y+6, r25	; 0x06
    40ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d0:	8d 81       	ldd	r24, Y+5	; 0x05
    40d2:	9e 81       	ldd	r25, Y+6	; 0x06
    40d4:	00 97       	sbiw	r24, 0x00	; 0
    40d6:	69 f7       	brne	.-38     	; 0x40b2 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    40d8:	14 c0       	rjmp	.+40     	; 0x4102 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40da:	6f 81       	ldd	r22, Y+7	; 0x07
    40dc:	78 85       	ldd	r23, Y+8	; 0x08
    40de:	89 85       	ldd	r24, Y+9	; 0x09
    40e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e6:	dc 01       	movw	r26, r24
    40e8:	cb 01       	movw	r24, r22
    40ea:	9e 83       	std	Y+6, r25	; 0x06
    40ec:	8d 83       	std	Y+5, r24	; 0x05
    40ee:	8d 81       	ldd	r24, Y+5	; 0x05
    40f0:	9e 81       	ldd	r25, Y+6	; 0x06
    40f2:	9a 83       	std	Y+2, r25	; 0x02
    40f4:	89 83       	std	Y+1, r24	; 0x01
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	9a 81       	ldd	r25, Y+2	; 0x02
    40fa:	01 97       	sbiw	r24, 0x01	; 1
    40fc:	f1 f7       	brne	.-4      	; 0x40fa <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    40fe:	9a 83       	std	Y+2, r25	; 0x02
    4100:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4102:	8f 85       	ldd	r24, Y+15	; 0x0f
    4104:	8f 5f       	subi	r24, 0xFF	; 255
    4106:	8f 87       	std	Y+15, r24	; 0x0f
    4108:	9f 85       	ldd	r25, Y+15	; 0x0f
    410a:	88 89       	ldd	r24, Y+16	; 0x10
    410c:	98 17       	cp	r25, r24
    410e:	08 f4       	brcc	.+2      	; 0x4112 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    4110:	80 cf       	rjmp	.-256    	; 0x4012 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    4112:	60 96       	adiw	r28, 0x10	; 16
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	cf 91       	pop	r28
    4120:	df 91       	pop	r29
    4122:	08 95       	ret

00004124 <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    4124:	df 93       	push	r29
    4126:	cf 93       	push	r28
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	60 97       	sbiw	r28, 0x10	; 16
    412e:	0f b6       	in	r0, 0x3f	; 63
    4130:	f8 94       	cli
    4132:	de bf       	out	0x3e, r29	; 62
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	cd bf       	out	0x3d, r28	; 61
    4138:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    413a:	1f 86       	std	Y+15, r1	; 0x0f
    413c:	7b c0       	rjmp	.+246    	; 0x4234 <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    4144:	8c e1       	ldi	r24, 0x1C	; 28
    4146:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	a6 e9       	ldi	r26, 0x96	; 150
    4150:	b3 e4       	ldi	r27, 0x43	; 67
    4152:	8b 87       	std	Y+11, r24	; 0x0b
    4154:	9c 87       	std	Y+12, r25	; 0x0c
    4156:	ad 87       	std	Y+13, r26	; 0x0d
    4158:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415a:	6b 85       	ldd	r22, Y+11	; 0x0b
    415c:	7c 85       	ldd	r23, Y+12	; 0x0c
    415e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4160:	9e 85       	ldd	r25, Y+14	; 0x0e
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	4a ef       	ldi	r20, 0xFA	; 250
    4168:	54 e4       	ldi	r21, 0x44	; 68
    416a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	8f 83       	std	Y+7, r24	; 0x07
    4174:	98 87       	std	Y+8, r25	; 0x08
    4176:	a9 87       	std	Y+9, r26	; 0x09
    4178:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    417a:	6f 81       	ldd	r22, Y+7	; 0x07
    417c:	78 85       	ldd	r23, Y+8	; 0x08
    417e:	89 85       	ldd	r24, Y+9	; 0x09
    4180:	9a 85       	ldd	r25, Y+10	; 0x0a
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e8       	ldi	r20, 0x80	; 128
    4188:	5f e3       	ldi	r21, 0x3F	; 63
    418a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    418e:	88 23       	and	r24, r24
    4190:	2c f4       	brge	.+10     	; 0x419c <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
		__ticks = 1;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	9e 83       	std	Y+6, r25	; 0x06
    4198:	8d 83       	std	Y+5, r24	; 0x05
    419a:	3f c0       	rjmp	.+126    	; 0x421a <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
	else if (__tmp > 65535)
    419c:	6f 81       	ldd	r22, Y+7	; 0x07
    419e:	78 85       	ldd	r23, Y+8	; 0x08
    41a0:	89 85       	ldd	r24, Y+9	; 0x09
    41a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	3f ef       	ldi	r19, 0xFF	; 255
    41a8:	4f e7       	ldi	r20, 0x7F	; 127
    41aa:	57 e4       	ldi	r21, 0x47	; 71
    41ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41b0:	18 16       	cp	r1, r24
    41b2:	4c f5       	brge	.+82     	; 0x4206 <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	40 e2       	ldi	r20, 0x20	; 32
    41c2:	51 e4       	ldi	r21, 0x41	; 65
    41c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	bc 01       	movw	r22, r24
    41ce:	cd 01       	movw	r24, r26
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	9e 83       	std	Y+6, r25	; 0x06
    41da:	8d 83       	std	Y+5, r24	; 0x05
    41dc:	0f c0       	rjmp	.+30     	; 0x41fc <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    41de:	88 ec       	ldi	r24, 0xC8	; 200
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	9c 83       	std	Y+4, r25	; 0x04
    41e4:	8b 83       	std	Y+3, r24	; 0x03
    41e6:	8b 81       	ldd	r24, Y+3	; 0x03
    41e8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    41ee:	9c 83       	std	Y+4, r25	; 0x04
    41f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f2:	8d 81       	ldd	r24, Y+5	; 0x05
    41f4:	9e 81       	ldd	r25, Y+6	; 0x06
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	9e 83       	std	Y+6, r25	; 0x06
    41fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41fc:	8d 81       	ldd	r24, Y+5	; 0x05
    41fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4200:	00 97       	sbiw	r24, 0x00	; 0
    4202:	69 f7       	brne	.-38     	; 0x41de <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    4204:	14 c0       	rjmp	.+40     	; 0x422e <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4206:	6f 81       	ldd	r22, Y+7	; 0x07
    4208:	78 85       	ldd	r23, Y+8	; 0x08
    420a:	89 85       	ldd	r24, Y+9	; 0x09
    420c:	9a 85       	ldd	r25, Y+10	; 0x0a
    420e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	9e 83       	std	Y+6, r25	; 0x06
    4218:	8d 83       	std	Y+5, r24	; 0x05
    421a:	8d 81       	ldd	r24, Y+5	; 0x05
    421c:	9e 81       	ldd	r25, Y+6	; 0x06
    421e:	9a 83       	std	Y+2, r25	; 0x02
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    422a:	9a 83       	std	Y+2, r25	; 0x02
    422c:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    422e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4230:	8f 5f       	subi	r24, 0xFF	; 255
    4232:	8f 87       	std	Y+15, r24	; 0x0f
    4234:	9f 85       	ldd	r25, Y+15	; 0x0f
    4236:	88 89       	ldd	r24, Y+16	; 0x10
    4238:	98 17       	cp	r25, r24
    423a:	08 f4       	brcc	.+2      	; 0x423e <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    423c:	80 cf       	rjmp	.-256    	; 0x413e <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    423e:	60 96       	adiw	r28, 0x10	; 16
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	f8 94       	cli
    4244:	de bf       	out	0x3e, r29	; 62
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	cd bf       	out	0x3d, r28	; 61
    424a:	cf 91       	pop	r28
    424c:	df 91       	pop	r29
    424e:	08 95       	ret

00004250 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    4250:	df 93       	push	r29
    4252:	cf 93       	push	r28
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	60 97       	sbiw	r28, 0x10	; 16
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4266:	1f 86       	std	Y+15, r1	; 0x0f
    4268:	7b c0       	rjmp	.+246    	; 0x4360 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    4270:	80 e1       	ldi	r24, 0x10	; 16
    4272:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	a6 e9       	ldi	r26, 0x96	; 150
    427c:	b3 e4       	ldi	r27, 0x43	; 67
    427e:	8b 87       	std	Y+11, r24	; 0x0b
    4280:	9c 87       	std	Y+12, r25	; 0x0c
    4282:	ad 87       	std	Y+13, r26	; 0x0d
    4284:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4286:	6b 85       	ldd	r22, Y+11	; 0x0b
    4288:	7c 85       	ldd	r23, Y+12	; 0x0c
    428a:	8d 85       	ldd	r24, Y+13	; 0x0d
    428c:	9e 85       	ldd	r25, Y+14	; 0x0e
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	4a ef       	ldi	r20, 0xFA	; 250
    4294:	54 e4       	ldi	r21, 0x44	; 68
    4296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429a:	dc 01       	movw	r26, r24
    429c:	cb 01       	movw	r24, r22
    429e:	8f 83       	std	Y+7, r24	; 0x07
    42a0:	98 87       	std	Y+8, r25	; 0x08
    42a2:	a9 87       	std	Y+9, r26	; 0x09
    42a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42a6:	6f 81       	ldd	r22, Y+7	; 0x07
    42a8:	78 85       	ldd	r23, Y+8	; 0x08
    42aa:	89 85       	ldd	r24, Y+9	; 0x09
    42ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	40 e8       	ldi	r20, 0x80	; 128
    42b4:	5f e3       	ldi	r21, 0x3F	; 63
    42b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42ba:	88 23       	and	r24, r24
    42bc:	2c f4       	brge	.+10     	; 0x42c8 <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
		__ticks = 1;
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	9e 83       	std	Y+6, r25	; 0x06
    42c4:	8d 83       	std	Y+5, r24	; 0x05
    42c6:	3f c0       	rjmp	.+126    	; 0x4346 <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
	else if (__tmp > 65535)
    42c8:	6f 81       	ldd	r22, Y+7	; 0x07
    42ca:	78 85       	ldd	r23, Y+8	; 0x08
    42cc:	89 85       	ldd	r24, Y+9	; 0x09
    42ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	3f ef       	ldi	r19, 0xFF	; 255
    42d4:	4f e7       	ldi	r20, 0x7F	; 127
    42d6:	57 e4       	ldi	r21, 0x47	; 71
    42d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42dc:	18 16       	cp	r1, r24
    42de:	4c f5       	brge	.+82     	; 0x4332 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	40 e2       	ldi	r20, 0x20	; 32
    42ee:	51 e4       	ldi	r21, 0x41	; 65
    42f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	bc 01       	movw	r22, r24
    42fa:	cd 01       	movw	r24, r26
    42fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	9e 83       	std	Y+6, r25	; 0x06
    4306:	8d 83       	std	Y+5, r24	; 0x05
    4308:	0f c0       	rjmp	.+30     	; 0x4328 <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    430a:	88 ec       	ldi	r24, 0xC8	; 200
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	9c 83       	std	Y+4, r25	; 0x04
    4310:	8b 83       	std	Y+3, r24	; 0x03
    4312:	8b 81       	ldd	r24, Y+3	; 0x03
    4314:	9c 81       	ldd	r25, Y+4	; 0x04
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	f1 f7       	brne	.-4      	; 0x4316 <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    431a:	9c 83       	std	Y+4, r25	; 0x04
    431c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    431e:	8d 81       	ldd	r24, Y+5	; 0x05
    4320:	9e 81       	ldd	r25, Y+6	; 0x06
    4322:	01 97       	sbiw	r24, 0x01	; 1
    4324:	9e 83       	std	Y+6, r25	; 0x06
    4326:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4328:	8d 81       	ldd	r24, Y+5	; 0x05
    432a:	9e 81       	ldd	r25, Y+6	; 0x06
    432c:	00 97       	sbiw	r24, 0x00	; 0
    432e:	69 f7       	brne	.-38     	; 0x430a <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    4330:	14 c0       	rjmp	.+40     	; 0x435a <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4332:	6f 81       	ldd	r22, Y+7	; 0x07
    4334:	78 85       	ldd	r23, Y+8	; 0x08
    4336:	89 85       	ldd	r24, Y+9	; 0x09
    4338:	9a 85       	ldd	r25, Y+10	; 0x0a
    433a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433e:	dc 01       	movw	r26, r24
    4340:	cb 01       	movw	r24, r22
    4342:	9e 83       	std	Y+6, r25	; 0x06
    4344:	8d 83       	std	Y+5, r24	; 0x05
    4346:	8d 81       	ldd	r24, Y+5	; 0x05
    4348:	9e 81       	ldd	r25, Y+6	; 0x06
    434a:	9a 83       	std	Y+2, r25	; 0x02
    434c:	89 83       	std	Y+1, r24	; 0x01
    434e:	89 81       	ldd	r24, Y+1	; 0x01
    4350:	9a 81       	ldd	r25, Y+2	; 0x02
    4352:	01 97       	sbiw	r24, 0x01	; 1
    4354:	f1 f7       	brne	.-4      	; 0x4352 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    4356:	9a 83       	std	Y+2, r25	; 0x02
    4358:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    435a:	8f 85       	ldd	r24, Y+15	; 0x0f
    435c:	8f 5f       	subi	r24, 0xFF	; 255
    435e:	8f 87       	std	Y+15, r24	; 0x0f
    4360:	9f 85       	ldd	r25, Y+15	; 0x0f
    4362:	88 89       	ldd	r24, Y+16	; 0x10
    4364:	98 17       	cp	r25, r24
    4366:	08 f4       	brcc	.+2      	; 0x436a <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    4368:	80 cf       	rjmp	.-256    	; 0x426a <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    436a:	60 96       	adiw	r28, 0x10	; 16
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	f8 94       	cli
    4370:	de bf       	out	0x3e, r29	; 62
    4372:	0f be       	out	0x3f, r0	; 63
    4374:	cd bf       	out	0x3d, r28	; 61
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	08 95       	ret

0000437c <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    437c:	df 93       	push	r29
    437e:	cf 93       	push	r28
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
    4384:	60 97       	sbiw	r28, 0x10	; 16
    4386:	0f b6       	in	r0, 0x3f	; 63
    4388:	f8 94       	cli
    438a:	de bf       	out	0x3e, r29	; 62
    438c:	0f be       	out	0x3f, r0	; 63
    438e:	cd bf       	out	0x3d, r28	; 61
    4390:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4392:	1f 86       	std	Y+15, r1	; 0x0f
    4394:	7b c0       	rjmp	.+246    	; 0x448c <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    439c:	84 e1       	ldi	r24, 0x14	; 20
    439e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <HCLCD_Vid4Bits_SendCommand>
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	a6 e9       	ldi	r26, 0x96	; 150
    43a8:	b3 e4       	ldi	r27, 0x43	; 67
    43aa:	8b 87       	std	Y+11, r24	; 0x0b
    43ac:	9c 87       	std	Y+12, r25	; 0x0c
    43ae:	ad 87       	std	Y+13, r26	; 0x0d
    43b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	4a ef       	ldi	r20, 0xFA	; 250
    43c0:	54 e4       	ldi	r21, 0x44	; 68
    43c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	8f 83       	std	Y+7, r24	; 0x07
    43cc:	98 87       	std	Y+8, r25	; 0x08
    43ce:	a9 87       	std	Y+9, r26	; 0x09
    43d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43d2:	6f 81       	ldd	r22, Y+7	; 0x07
    43d4:	78 85       	ldd	r23, Y+8	; 0x08
    43d6:	89 85       	ldd	r24, Y+9	; 0x09
    43d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	40 e8       	ldi	r20, 0x80	; 128
    43e0:	5f e3       	ldi	r21, 0x3F	; 63
    43e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43e6:	88 23       	and	r24, r24
    43e8:	2c f4       	brge	.+10     	; 0x43f4 <HCLCD_Vid4Bits_CursorShiftRight+0x78>
		__ticks = 1;
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	9e 83       	std	Y+6, r25	; 0x06
    43f0:	8d 83       	std	Y+5, r24	; 0x05
    43f2:	3f c0       	rjmp	.+126    	; 0x4472 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
	else if (__tmp > 65535)
    43f4:	6f 81       	ldd	r22, Y+7	; 0x07
    43f6:	78 85       	ldd	r23, Y+8	; 0x08
    43f8:	89 85       	ldd	r24, Y+9	; 0x09
    43fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	3f ef       	ldi	r19, 0xFF	; 255
    4400:	4f e7       	ldi	r20, 0x7F	; 127
    4402:	57 e4       	ldi	r21, 0x47	; 71
    4404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4408:	18 16       	cp	r1, r24
    440a:	4c f5       	brge	.+82     	; 0x445e <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    440c:	6b 85       	ldd	r22, Y+11	; 0x0b
    440e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4410:	8d 85       	ldd	r24, Y+13	; 0x0d
    4412:	9e 85       	ldd	r25, Y+14	; 0x0e
    4414:	20 e0       	ldi	r18, 0x00	; 0
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	40 e2       	ldi	r20, 0x20	; 32
    441a:	51 e4       	ldi	r21, 0x41	; 65
    441c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	bc 01       	movw	r22, r24
    4426:	cd 01       	movw	r24, r26
    4428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	9e 83       	std	Y+6, r25	; 0x06
    4432:	8d 83       	std	Y+5, r24	; 0x05
    4434:	0f c0       	rjmp	.+30     	; 0x4454 <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    4436:	88 ec       	ldi	r24, 0xC8	; 200
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	9c 83       	std	Y+4, r25	; 0x04
    443c:	8b 83       	std	Y+3, r24	; 0x03
    443e:	8b 81       	ldd	r24, Y+3	; 0x03
    4440:	9c 81       	ldd	r25, Y+4	; 0x04
    4442:	01 97       	sbiw	r24, 0x01	; 1
    4444:	f1 f7       	brne	.-4      	; 0x4442 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    4446:	9c 83       	std	Y+4, r25	; 0x04
    4448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    444a:	8d 81       	ldd	r24, Y+5	; 0x05
    444c:	9e 81       	ldd	r25, Y+6	; 0x06
    444e:	01 97       	sbiw	r24, 0x01	; 1
    4450:	9e 83       	std	Y+6, r25	; 0x06
    4452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4454:	8d 81       	ldd	r24, Y+5	; 0x05
    4456:	9e 81       	ldd	r25, Y+6	; 0x06
    4458:	00 97       	sbiw	r24, 0x00	; 0
    445a:	69 f7       	brne	.-38     	; 0x4436 <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    445c:	14 c0       	rjmp	.+40     	; 0x4486 <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    445e:	6f 81       	ldd	r22, Y+7	; 0x07
    4460:	78 85       	ldd	r23, Y+8	; 0x08
    4462:	89 85       	ldd	r24, Y+9	; 0x09
    4464:	9a 85       	ldd	r25, Y+10	; 0x0a
    4466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	9e 83       	std	Y+6, r25	; 0x06
    4470:	8d 83       	std	Y+5, r24	; 0x05
    4472:	8d 81       	ldd	r24, Y+5	; 0x05
    4474:	9e 81       	ldd	r25, Y+6	; 0x06
    4476:	9a 83       	std	Y+2, r25	; 0x02
    4478:	89 83       	std	Y+1, r24	; 0x01
    447a:	89 81       	ldd	r24, Y+1	; 0x01
    447c:	9a 81       	ldd	r25, Y+2	; 0x02
    447e:	01 97       	sbiw	r24, 0x01	; 1
    4480:	f1 f7       	brne	.-4      	; 0x447e <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    4482:	9a 83       	std	Y+2, r25	; 0x02
    4484:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4486:	8f 85       	ldd	r24, Y+15	; 0x0f
    4488:	8f 5f       	subi	r24, 0xFF	; 255
    448a:	8f 87       	std	Y+15, r24	; 0x0f
    448c:	9f 85       	ldd	r25, Y+15	; 0x0f
    448e:	88 89       	ldd	r24, Y+16	; 0x10
    4490:	98 17       	cp	r25, r24
    4492:	08 f4       	brcc	.+2      	; 0x4496 <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    4494:	80 cf       	rjmp	.-256    	; 0x4396 <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    4496:	60 96       	adiw	r28, 0x10	; 16
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	f8 94       	cli
    449c:	de bf       	out	0x3e, r29	; 62
    449e:	0f be       	out	0x3f, r0	; 63
    44a0:	cd bf       	out	0x3d, r28	; 61
    44a2:	cf 91       	pop	r28
    44a4:	df 91       	pop	r29
    44a6:	08 95       	ret

000044a8 <HBUZZER_voidInit>:
/* 2- Function Input       -> Address of object from Buzzer_t                                          */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void HBUZZER_voidInit(Buzzer_t *Copy_PstructBuzzer)
{
    44a8:	df 93       	push	r29
    44aa:	cf 93       	push	r28
    44ac:	00 d0       	rcall	.+0      	; 0x44ae <HBUZZER_voidInit+0x6>
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
    44b2:	9a 83       	std	Y+2, r25	; 0x02
    44b4:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_PstructBuzzer->Copy_u8_Pin,Copy_PstructBuzzer->Copy_u8Port,PIN_OUTPUT);
    44b6:	e9 81       	ldd	r30, Y+1	; 0x01
    44b8:	fa 81       	ldd	r31, Y+2	; 0x02
    44ba:	81 81       	ldd	r24, Z+1	; 0x01
    44bc:	e9 81       	ldd	r30, Y+1	; 0x01
    44be:	fa 81       	ldd	r31, Y+2	; 0x02
    44c0:	90 81       	ld	r25, Z
    44c2:	69 2f       	mov	r22, r25
    44c4:	41 e0       	ldi	r20, 0x01	; 1
    44c6:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinDirection>
}
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	cf 91       	pop	r28
    44d0:	df 91       	pop	r29
    44d2:	08 95       	ret

000044d4 <HBUZZER_voidBuzzerOn>:
/* 2- Function Input       -> Address of object from Buzzer_t                                          */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void HBUZZER_voidBuzzerOn(Buzzer_t *Copy_PstructBuzzer)
{
    44d4:	df 93       	push	r29
    44d6:	cf 93       	push	r28
    44d8:	00 d0       	rcall	.+0      	; 0x44da <HBUZZER_voidBuzzerOn+0x6>
    44da:	cd b7       	in	r28, 0x3d	; 61
    44dc:	de b7       	in	r29, 0x3e	; 62
    44de:	9a 83       	std	Y+2, r25	; 0x02
    44e0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_PstructBuzzer->Copy_u8_Pin,Copy_PstructBuzzer->Copy_u8Port,PIN_HIGH);
    44e2:	e9 81       	ldd	r30, Y+1	; 0x01
    44e4:	fa 81       	ldd	r31, Y+2	; 0x02
    44e6:	81 81       	ldd	r24, Z+1	; 0x01
    44e8:	e9 81       	ldd	r30, Y+1	; 0x01
    44ea:	fa 81       	ldd	r31, Y+2	; 0x02
    44ec:	90 81       	ld	r25, Z
    44ee:	69 2f       	mov	r22, r25
    44f0:	41 e0       	ldi	r20, 0x01	; 1
    44f2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	cf 91       	pop	r28
    44fc:	df 91       	pop	r29
    44fe:	08 95       	ret

00004500 <HBUZZER_voidBuzzerOff>:
/* 2- Function Input       -> Address of object from Buzzer_t                                          */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void HBUZZER_voidBuzzerOff(Buzzer_t* Copy_PstructBuzzer)
{
    4500:	df 93       	push	r29
    4502:	cf 93       	push	r28
    4504:	00 d0       	rcall	.+0      	; 0x4506 <HBUZZER_voidBuzzerOff+0x6>
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	9a 83       	std	Y+2, r25	; 0x02
    450c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_PstructBuzzer->Copy_u8_Pin,Copy_PstructBuzzer->Copy_u8Port,PIN_LOW);
    450e:	e9 81       	ldd	r30, Y+1	; 0x01
    4510:	fa 81       	ldd	r31, Y+2	; 0x02
    4512:	81 81       	ldd	r24, Z+1	; 0x01
    4514:	e9 81       	ldd	r30, Y+1	; 0x01
    4516:	fa 81       	ldd	r31, Y+2	; 0x02
    4518:	90 81       	ld	r25, Z
    451a:	69 2f       	mov	r22, r25
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <MDIO_Error_State_SetPinValue>
}
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	cf 91       	pop	r28
    4528:	df 91       	pop	r29
    452a:	08 95       	ret

0000452c <main>:
/*******************************************************************************************************/
/*                                    Beginning of the System                                          */
/*******************************************************************************************************/

int main(void)
{
    452c:	df 93       	push	r29
    452e:	cf 93       	push	r28
    4530:	cd b7       	in	r28, 0x3d	; 61
    4532:	de b7       	in	r29, 0x3e	; 62
    4534:	2b 97       	sbiw	r28, 0x0b	; 11
    4536:	0f b6       	in	r0, 0x3f	; 63
    4538:	f8 94       	cli
    453a:	de bf       	out	0x3e, r29	; 62
    453c:	0f be       	out	0x3f, r0	; 63
    453e:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************************************/
	/*                                         1- Buzzer Hardware Connections                              */
	/*******************************************************************************************************/


	Buzzer_t        LOC_SturctBuzzer_1  ={HBUZZER_PORTA,PIN7}                  ;
    4540:	18 86       	std	Y+8, r1	; 0x08
    4542:	87 e0       	ldi	r24, 0x07	; 7
    4544:	89 87       	std	Y+9, r24	; 0x09
	/*                                         2- DC Motor Hardware Connections                            */
	/*-----------------------------------------------------------------------------------------------------*/
	/* DC Motor is connected with special HW pin OC0 to control its speed by PWM generated on this pin     */
	/*******************************************************************************************************/

	DCMotor_t       LOC_StructMotor_1   ={HLED_PORTB,PIN3}                     ;     //Hardware Interface--> OC0
    4546:	81 e0       	ldi	r24, 0x01	; 1
    4548:	8a 87       	std	Y+10, r24	; 0x0a
    454a:	83 e0       	ldi	r24, 0x03	; 3
    454c:	8b 87       	std	Y+11, r24	; 0x0b

	/*******************************************************************************************************/
	/*                                         3- Counter Delay For Buzzer                                 */
	/*******************************************************************************************************/

	u16 LOC_u16Counter   = ZERO                                                ;
    454e:	1f 82       	std	Y+7, r1	; 0x07
    4550:	1e 82       	std	Y+6, r1	; 0x06

	/*******************************************************************************************************/
	/*                                         4- Time out for Door open                                   */
	/*******************************************************************************************************/

	u16 LOC_u16DoorTimeOut = ZERO                                              ;
    4552:	1d 82       	std	Y+5, r1	; 0x05
    4554:	1c 82       	std	Y+4, r1	; 0x04

	/*******************************************************************************************************/
	/*                                         5-  Local_u8Key                                             */
	/*******************************************************************************************************/

	u8 Local_u8Key   =  NOT_PRESSED                                            ;
    4556:	8f ef       	ldi	r24, 0xFF	; 255
    4558:	8b 83       	std	Y+3, r24	; 0x03
	/*******************************************************************************************************/
	/*                                         6-  LOC_u16Counter2                                             */
	/*******************************************************************************************************/


	u16 LOC_u16Counter2  = ZERO ;
    455a:	1a 82       	std	Y+2, r1	; 0x02
    455c:	19 82       	std	Y+1, r1	; 0x01

	/*******************************************************************************************************/
	/*                                         1- Initialize LEDs Direction                                */
	/*******************************************************************************************************/

	HLED_VidInit(&LOC_SturctLED_1)                                     ;
    455e:	8d e0       	ldi	r24, 0x0D	; 13
    4560:	91 e0       	ldi	r25, 0x01	; 1
    4562:	0e 94 21 11 	call	0x2242	; 0x2242 <HLED_VidInit>
	HLED_VidInit(&LOC_SturctLED_2)                                     ;
    4566:	83 ef       	ldi	r24, 0xF3	; 243
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	0e 94 21 11 	call	0x2242	; 0x2242 <HLED_VidInit>
	HLED_VidInit(&LOC_SturctLED_3)                                     ;
    456e:	85 ef       	ldi	r24, 0xF5	; 245
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	0e 94 21 11 	call	0x2242	; 0x2242 <HLED_VidInit>
	HLED_VidInit(&LOC_SturctLED_4)                                     ;
    4576:	87 ef       	ldi	r24, 0xF7	; 247
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	0e 94 21 11 	call	0x2242	; 0x2242 <HLED_VidInit>
	HLED_VidInit(&LOC_SturctLED_5)                                     ;
    457e:	89 ef       	ldi	r24, 0xF9	; 249
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 21 11 	call	0x2242	; 0x2242 <HLED_VidInit>

	/*******************************************************************************************************/
	/*                                   2- Initialize Buzzer Direction,initial value                      */
	/*******************************************************************************************************/

	HBUZZER_voidInit(&LOC_SturctBuzzer_1)                              ;
    4586:	ce 01       	movw	r24, r28
    4588:	08 96       	adiw	r24, 0x08	; 8
    458a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <HBUZZER_voidInit>

	/*******************************************************************************************************/
	/*                                       3- Initialize Motor                                           */
	/*******************************************************************************************************/

	HDCMOTOR_voidInit(&LOC_StructMotor_1)                              ;
    458e:	ce 01       	movw	r24, r28
    4590:	0a 96       	adiw	r24, 0x0a	; 10
    4592:	0e 94 bc 12 	call	0x2578	; 0x2578 <HDCMOTOR_voidInit>
	/*	                            Set CTC Value 127 -->DutyCycle=50%                                     */
	/*                              Set CTC Value 63-->DutyCycle  =25%                                     */
	/*                              Set CTC Value 0 -->DutyCycle  =0%                                      */
	/*******************************************************************************************************/

	MTIMER0_VidInit()                                                  ;
    4596:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTIMER0_VidInit>

	/*                             Set CTC Value 0 -->DutyCycle= 0%                                       */
	APP_voidFanControl()                                               ;
    459a:	0e 94 08 2a 	call	0x5410	; 0x5410 <APP_voidFanControl>
	/*-----------------------------------------------------------------------------------------------------*/
	/*Note:                                                                                                */
	/* Servo Pin interfaced with OC1A                                                                      */
	/*******************************************************************************************************/

	HSERVO_voidInit() ;
    459e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <HSERVO_voidInit>

	/*******************************************************************************************************/
	/*                                       7-  ADC Initialization                                        */
	/*******************************************************************************************************/

	MADC_VidInit()                                                     ;
    45a2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <MADC_VidInit>

	/*******************************************************************************************************/
	/*                                       8-  LCD Initialization                                        */
	/*******************************************************************************************************/

	HCLCD_Vid4Bits_Init()                                              ;
    45a6:	0e 94 88 1b 	call	0x3710	; 0x3710 <HCLCD_Vid4Bits_Init>

	/*******************************************************************************************************/
	/*                                       9-  KeyPad Initialization                                     */
	/*******************************************************************************************************/

	HKPD_VidInit()                                                   ;
    45aa:	0e 94 8d 11 	call	0x231a	; 0x231a <HKPD_VidInit>
		/*******************************************************************************************************/

		/*#####################################################################################################*/
		/*#####################################################################################################*/

		APP_voidDisplayTemperature   ();
    45ae:	0e 94 14 2b 	call	0x5628	; 0x5628 <APP_voidDisplayTemperature>

		APP_voidDisplayLightIntensity();
    45b2:	0e 94 47 2b 	call	0x568e	; 0x568e <APP_voidDisplayLightIntensity>



		for(LOC_u16Counter2= ZERO ; LOC_u16Counter2<COUNTER2_MAX ;LOC_u16Counter2++)
    45b6:	1a 82       	std	Y+2, r1	; 0x02
    45b8:	19 82       	std	Y+1, r1	; 0x01
    45ba:	0d c0       	rjmp	.+26     	; 0x45d6 <main+0xaa>
		{
			Local_u8Key = HKPD_U8GetKeyPressed();
    45bc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <HKPD_U8GetKeyPressed>
    45c0:	8b 83       	std	Y+3, r24	; 0x03
			if(Local_u8Key != NOT_PRESSED)
    45c2:	8b 81       	ldd	r24, Y+3	; 0x03
    45c4:	8f 3f       	cpi	r24, 0xFF	; 255
    45c6:	11 f0       	breq	.+4      	; 0x45cc <main+0xa0>
			{
				/* Key is Pressed */
				/* Calls a Functions that Enters a Login System */
				App_voidSystemLogin() ;
    45c8:	0e 94 95 23 	call	0x472a	; 0x472a <App_voidSystemLogin>

		APP_voidDisplayLightIntensity();



		for(LOC_u16Counter2= ZERO ; LOC_u16Counter2<COUNTER2_MAX ;LOC_u16Counter2++)
    45cc:	89 81       	ldd	r24, Y+1	; 0x01
    45ce:	9a 81       	ldd	r25, Y+2	; 0x02
    45d0:	01 96       	adiw	r24, 0x01	; 1
    45d2:	9a 83       	std	Y+2, r25	; 0x02
    45d4:	89 83       	std	Y+1, r24	; 0x01
    45d6:	89 81       	ldd	r24, Y+1	; 0x01
    45d8:	9a 81       	ldd	r25, Y+2	; 0x02
    45da:	23 e0       	ldi	r18, 0x03	; 3
    45dc:	88 3e       	cpi	r24, 0xE8	; 232
    45de:	92 07       	cpc	r25, r18
    45e0:	68 f3       	brcs	.-38     	; 0x45bc <main+0x90>
			{
				/*Do Nothing*/
			}
		}

		if(Global_u8ServoFlag == ACTIVE)
    45e2:	80 91 11 01 	lds	r24, 0x0111
    45e6:	81 30       	cpi	r24, 0x01	; 1
    45e8:	31 f4       	brne	.+12     	; 0x45f6 <main+0xca>
		{
			//Servo_ON()
			HSERVO_voidSetAngle(DOOR_OPEN);
    45ea:	84 eb       	ldi	r24, 0xB4	; 180
    45ec:	0e 94 0f 11 	call	0x221e	; 0x221e <HSERVO_voidSetAngle>
			Global_u8ServoFlag = DEACTIVE ;
    45f0:	10 92 11 01 	sts	0x0111, r1
    45f4:	0f c0       	rjmp	.+30     	; 0x4614 <main+0xe8>
		}
		else
		{
			LOC_u16DoorTimeOut++ ;
    45f6:	8c 81       	ldd	r24, Y+4	; 0x04
    45f8:	9d 81       	ldd	r25, Y+5	; 0x05
    45fa:	01 96       	adiw	r24, 0x01	; 1
    45fc:	9d 83       	std	Y+5, r25	; 0x05
    45fe:	8c 83       	std	Y+4, r24	; 0x04
			if(LOC_u16DoorTimeOut==MAX_COUNT)
    4600:	8c 81       	ldd	r24, Y+4	; 0x04
    4602:	9d 81       	ldd	r25, Y+5	; 0x05
    4604:	84 31       	cpi	r24, 0x14	; 20
    4606:	91 05       	cpc	r25, r1
    4608:	29 f4       	brne	.+10     	; 0x4614 <main+0xe8>
			{
				HSERVO_voidSetAngle(DOOR_CLOSED);
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	0e 94 0f 11 	call	0x221e	; 0x221e <HSERVO_voidSetAngle>
				LOC_u16DoorTimeOut = ZERO ;
    4610:	1d 82       	std	Y+5, r1	; 0x05
    4612:	1c 82       	std	Y+4, r1	; 0x04
			}
			/*Do Nothing*/
		}
		if(Global_u8BuzzerFlag == ACTIVE)
    4614:	80 91 10 01 	lds	r24, 0x0110
    4618:	81 30       	cpi	r24, 0x01	; 1
    461a:	b1 f4       	brne	.+44     	; 0x4648 <main+0x11c>
		{
			LOC_u16Counter++ ;
    461c:	8e 81       	ldd	r24, Y+6	; 0x06
    461e:	9f 81       	ldd	r25, Y+7	; 0x07
    4620:	01 96       	adiw	r24, 0x01	; 1
    4622:	9f 83       	std	Y+7, r25	; 0x07
    4624:	8e 83       	std	Y+6, r24	; 0x06
			HBUZZER_voidBuzzerOn(&LOC_SturctBuzzer_1);
    4626:	ce 01       	movw	r24, r28
    4628:	08 96       	adiw	r24, 0x08	; 8
    462a:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <HBUZZER_voidBuzzerOn>
			if(LOC_u16Counter == MAX_COUNT)
    462e:	8e 81       	ldd	r24, Y+6	; 0x06
    4630:	9f 81       	ldd	r25, Y+7	; 0x07
    4632:	84 31       	cpi	r24, 0x14	; 20
    4634:	91 05       	cpc	r25, r1
    4636:	41 f4       	brne	.+16     	; 0x4648 <main+0x11c>
			{
				Global_u8BuzzerFlag = DEACTIVE ;
    4638:	10 92 10 01 	sts	0x0110, r1
				HBUZZER_voidBuzzerOff(&LOC_SturctBuzzer_1);
    463c:	ce 01       	movw	r24, r28
    463e:	08 96       	adiw	r24, 0x08	; 8
    4640:	0e 94 80 22 	call	0x4500	; 0x4500 <HBUZZER_voidBuzzerOff>
				LOC_u16Counter = ZERO ;
    4644:	1f 82       	std	Y+7, r1	; 0x07
    4646:	1e 82       	std	Y+6, r1	; 0x06
		else
		{
			/*Do Nothing*/
		}
		/*MOTOR Control*/
		APP_voidFanControl();
    4648:	0e 94 08 2a 	call	0x5410	; 0x5410 <APP_voidFanControl>
		/*Light Control */
    	APP_voidLightControl();
    464c:	0e 94 13 2a 	call	0x5426	; 0x5426 <APP_voidLightControl>
    4650:	ae cf       	rjmp	.-164    	; 0x45ae <main+0x82>

00004652 <App_voidReadTemp>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void App_voidReadTemp(void)
{
    4652:	df 93       	push	r29
    4654:	cf 93       	push	r28
    4656:	00 d0       	rcall	.+0      	; 0x4658 <App_voidReadTemp+0x6>
    4658:	00 d0       	rcall	.+0      	; 0x465a <App_voidReadTemp+0x8>
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
	/*Set Algorithm*/
	/*******************************************************************************************************/
	/*                                     Local Variables Initialization                                  */
	/*******************************************************************************************************/

	u16 Local_u16Digital_Value = ZERO  ;
    465e:	1c 82       	std	Y+4, r1	; 0x04
    4660:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16Analog_value  = ZERO  ;
    4662:	1a 82       	std	Y+2, r1	; 0x02
    4664:	19 82       	std	Y+1, r1	; 0x01

	/*******************************************************************************************************/
	/*                                         Calculate Temperature                                       */
	/*******************************************************************************************************/

	Local_u16Digital_Value = MADC_u16ADC_StartConversion(CHANNEL_4);         /*     Get ADC Reading          */
    4666:	84 e0       	ldi	r24, 0x04	; 4
    4668:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <MADC_u16ADC_StartConversion>
    466c:	9c 83       	std	Y+4, r25	; 0x04
    466e:	8b 83       	std	Y+3, r24	; 0x03
	Local_u16Analog_value = (u16)((Local_u16Digital_Value*5000UL)/1024);     /*     Read Analog Voltage      */
    4670:	8b 81       	ldd	r24, Y+3	; 0x03
    4672:	9c 81       	ldd	r25, Y+4	; 0x04
    4674:	cc 01       	movw	r24, r24
    4676:	a0 e0       	ldi	r26, 0x00	; 0
    4678:	b0 e0       	ldi	r27, 0x00	; 0
    467a:	28 e8       	ldi	r18, 0x88	; 136
    467c:	33 e1       	ldi	r19, 0x13	; 19
    467e:	40 e0       	ldi	r20, 0x00	; 0
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	bc 01       	movw	r22, r24
    4684:	cd 01       	movw	r24, r26
    4686:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <__mulsi3>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	07 2e       	mov	r0, r23
    4690:	7a e0       	ldi	r23, 0x0A	; 10
    4692:	b6 95       	lsr	r27
    4694:	a7 95       	ror	r26
    4696:	97 95       	ror	r25
    4698:	87 95       	ror	r24
    469a:	7a 95       	dec	r23
    469c:	d1 f7       	brne	.-12     	; 0x4692 <App_voidReadTemp+0x40>
    469e:	70 2d       	mov	r23, r0
    46a0:	9a 83       	std	Y+2, r25	; 0x02
    46a2:	89 83       	std	Y+1, r24	; 0x01
	Global_u8Temerature_dec = (Local_u16Analog_value % 10);
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	9a 81       	ldd	r25, Y+2	; 0x02
    46a8:	2a e0       	ldi	r18, 0x0A	; 10
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	b9 01       	movw	r22, r18
    46ae:	0e 94 89 2b 	call	0x5712	; 0x5712 <__udivmodhi4>
    46b2:	80 93 13 01 	sts	0x0113, r24
	Global_u8Temerature = (Local_u16Analog_value/10);                        /*     Calculate Temperature    */
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ba:	2a e0       	ldi	r18, 0x0A	; 10
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	b9 01       	movw	r22, r18
    46c0:	0e 94 89 2b 	call	0x5712	; 0x5712 <__udivmodhi4>
    46c4:	cb 01       	movw	r24, r22
    46c6:	80 93 12 01 	sts	0x0112, r24
}
    46ca:	0f 90       	pop	r0
    46cc:	0f 90       	pop	r0
    46ce:	0f 90       	pop	r0
    46d0:	0f 90       	pop	r0
    46d2:	cf 91       	pop	r28
    46d4:	df 91       	pop	r29
    46d6:	08 95       	ret

000046d8 <App_voidReadLight>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void App_voidReadLight(void)
{
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	00 d0       	rcall	.+0      	; 0x46de <App_voidReadLight+0x6>
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62

	/*******************************************************************************************************/
	/*                                         Calculate Light Intensity                                   */
	/*******************************************************************************************************/

	Local_u16Digital_Value1 = MADC_u16ADC_StartConversion(CHANNEL_1);           /* Getting ADC Reading from the LDR       */
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <MADC_u16ADC_StartConversion>
    46e8:	9a 83       	std	Y+2, r25	; 0x02
    46ea:	89 83       	std	Y+1, r24	; 0x01
	/* Calculating the Light Intensity Percent  */
	Global_u8LightPercent = (u16)((Local_u16Digital_Value1*100UL)/1024);        /* Converting The Reading into Percentage */
    46ec:	89 81       	ldd	r24, Y+1	; 0x01
    46ee:	9a 81       	ldd	r25, Y+2	; 0x02
    46f0:	cc 01       	movw	r24, r24
    46f2:	a0 e0       	ldi	r26, 0x00	; 0
    46f4:	b0 e0       	ldi	r27, 0x00	; 0
    46f6:	24 e6       	ldi	r18, 0x64	; 100
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	40 e0       	ldi	r20, 0x00	; 0
    46fc:	50 e0       	ldi	r21, 0x00	; 0
    46fe:	bc 01       	movw	r22, r24
    4700:	cd 01       	movw	r24, r26
    4702:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <__mulsi3>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	07 2e       	mov	r0, r23
    470c:	7a e0       	ldi	r23, 0x0A	; 10
    470e:	b6 95       	lsr	r27
    4710:	a7 95       	ror	r26
    4712:	97 95       	ror	r25
    4714:	87 95       	ror	r24
    4716:	7a 95       	dec	r23
    4718:	d1 f7       	brne	.-12     	; 0x470e <App_voidReadLight+0x36>
    471a:	70 2d       	mov	r23, r0
    471c:	80 93 14 01 	sts	0x0114, r24

}
    4720:	0f 90       	pop	r0
    4722:	0f 90       	pop	r0
    4724:	cf 91       	pop	r28
    4726:	df 91       	pop	r29
    4728:	08 95       	ret

0000472a <App_voidSystemLogin>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void App_voidSystemLogin(void)
{
    472a:	0f 93       	push	r16
    472c:	1f 93       	push	r17
    472e:	df 93       	push	r29
    4730:	cf 93       	push	r28
    4732:	cd b7       	in	r28, 0x3d	; 61
    4734:	de b7       	in	r29, 0x3e	; 62
    4736:	cd 56       	subi	r28, 0x6D	; 109
    4738:	d0 40       	sbci	r29, 0x00	; 0
    473a:	0f b6       	in	r0, 0x3f	; 63
    473c:	f8 94       	cli
    473e:	de bf       	out	0x3e, r29	; 62
    4740:	0f be       	out	0x3f, r0	; 63
    4742:	cd bf       	out	0x3d, r28	; 61
	/*******************************************************************************************************/

	/*******************************************************************************************************/
	/*                                     Local Variables Initialization                                  */
	/*******************************************************************************************************/
	u8  Local_u8Key        = NOT_PRESSED      ;
    4744:	fe 01       	movw	r30, r28
    4746:	e5 59       	subi	r30, 0x95	; 149
    4748:	ff 4f       	sbci	r31, 0xFF	; 255
    474a:	8f ef       	ldi	r24, 0xFF	; 255
    474c:	80 83       	st	Z, r24
	u8  Local_u8Counter    = ZERO             ;
    474e:	fe 01       	movw	r30, r28
    4750:	e6 59       	subi	r30, 0x96	; 150
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	10 82       	st	Z, r1
	u8  Local_u8Counter2   = ZERO             ;
    4756:	fe 01       	movw	r30, r28
    4758:	e7 59       	subi	r30, 0x97	; 151
    475a:	ff 4f       	sbci	r31, 0xFF	; 255
    475c:	10 82       	st	Z, r1
	u16 Local_u16value     = ZERO             ;
    475e:	fe 01       	movw	r30, r28
    4760:	e9 59       	subi	r30, 0x99	; 153
    4762:	ff 4f       	sbci	r31, 0xFF	; 255
    4764:	11 82       	std	Z+1, r1	; 0x01
    4766:	10 82       	st	Z, r1
	u16 Local_Num1         = ZERO             ;
    4768:	fe 01       	movw	r30, r28
    476a:	eb 59       	subi	r30, 0x9B	; 155
    476c:	ff 4f       	sbci	r31, 0xFF	; 255
    476e:	11 82       	std	Z+1, r1	; 0x01
    4770:	10 82       	st	Z, r1
	u16 Local_u16Password  = PASSWORD_CORRECT ;
    4772:	fe 01       	movw	r30, r28
    4774:	ed 59       	subi	r30, 0x9D	; 157
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	88 e4       	ldi	r24, 0x48	; 72
    477a:	91 e2       	ldi	r25, 0x21	; 33
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	80 83       	st	Z, r24


	HCLCD_Vid4Bits_ClearScreen();
    4780:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Vid4Bits_ClearScreen>
	HCLCD_Vid4Bits_DisplayString("Enter Passcode :");       /* Asking User to Enter Password */
    4784:	80 e6       	ldi	r24, 0x60	; 96
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,4);
    478c:	82 e0       	ldi	r24, 0x02	; 2
    478e:	64 e0       	ldi	r22, 0x04	; 4
    4790:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <HCLCD_Vid4Bits_SetPosition>
	while(1)
	{
		Local_u8Key = HKPD_U8GetKeyPressed();             /* Checks if The Key is Pressed  */
    4794:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <HKPD_U8GetKeyPressed>
    4798:	fe 01       	movw	r30, r28
    479a:	e5 59       	subi	r30, 0x95	; 149
    479c:	ff 4f       	sbci	r31, 0xFF	; 255
    479e:	80 83       	st	Z, r24

		if(Local_u8Key != NOT_PRESSED)                 /* if Key is Pressed */
    47a0:	fe 01       	movw	r30, r28
    47a2:	e5 59       	subi	r30, 0x95	; 149
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	80 81       	ld	r24, Z
    47a8:	8f 3f       	cpi	r24, 0xFF	; 255
    47aa:	a1 f3       	breq	.-24     	; 0x4794 <App_voidSystemLogin+0x6a>
		{
			if(Local_u8Counter<4)                      /* wait 4 digit  display on LCD */
    47ac:	fe 01       	movw	r30, r28
    47ae:	e6 59       	subi	r30, 0x96	; 150
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	80 81       	ld	r24, Z
    47b4:	84 30       	cpi	r24, 0x04	; 4
    47b6:	08 f0       	brcs	.+2      	; 0x47ba <App_voidSystemLogin+0x90>
    47b8:	7d c3       	rjmp	.+1786   	; 0x4eb4 <App_voidSystemLogin+0x78a>
			{
				Local_u8Counter++;
    47ba:	de 01       	movw	r26, r28
    47bc:	a6 59       	subi	r26, 0x96	; 150
    47be:	bf 4f       	sbci	r27, 0xFF	; 255
    47c0:	fe 01       	movw	r30, r28
    47c2:	e6 59       	subi	r30, 0x96	; 150
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 81       	ld	r24, Z
    47c8:	8f 5f       	subi	r24, 0xFF	; 255
    47ca:	8c 93       	st	X, r24

				switch(Local_u8Key)
    47cc:	fe 01       	movw	r30, r28
    47ce:	e5 59       	subi	r30, 0x95	; 149
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	80 81       	ld	r24, Z
    47d4:	28 2f       	mov	r18, r24
    47d6:	30 e0       	ldi	r19, 0x00	; 0
    47d8:	ae 96       	adiw	r28, 0x2e	; 46
    47da:	3f af       	std	Y+63, r19	; 0x3f
    47dc:	2e af       	std	Y+62, r18	; 0x3e
    47de:	ae 97       	sbiw	r28, 0x2e	; 46
    47e0:	ae 96       	adiw	r28, 0x2e	; 46
    47e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    47e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    47e6:	ae 97       	sbiw	r28, 0x2e	; 46
    47e8:	84 33       	cpi	r24, 0x34	; 52
    47ea:	91 05       	cpc	r25, r1
    47ec:	09 f4       	brne	.+2      	; 0x47f0 <App_voidSystemLogin+0xc6>
    47ee:	f7 c0       	rjmp	.+494    	; 0x49de <App_voidSystemLogin+0x2b4>
    47f0:	ae 96       	adiw	r28, 0x2e	; 46
    47f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    47f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    47f6:	ae 97       	sbiw	r28, 0x2e	; 46
    47f8:	e5 33       	cpi	r30, 0x35	; 53
    47fa:	f1 05       	cpc	r31, r1
    47fc:	4c f5       	brge	.+82     	; 0x4850 <App_voidSystemLogin+0x126>
    47fe:	ae 96       	adiw	r28, 0x2e	; 46
    4800:	2e ad       	ldd	r18, Y+62	; 0x3e
    4802:	3f ad       	ldd	r19, Y+63	; 0x3f
    4804:	ae 97       	sbiw	r28, 0x2e	; 46
    4806:	21 33       	cpi	r18, 0x31	; 49
    4808:	31 05       	cpc	r19, r1
    480a:	09 f4       	brne	.+2      	; 0x480e <App_voidSystemLogin+0xe4>
    480c:	76 c0       	rjmp	.+236    	; 0x48fa <App_voidSystemLogin+0x1d0>
    480e:	ae 96       	adiw	r28, 0x2e	; 46
    4810:	8e ad       	ldd	r24, Y+62	; 0x3e
    4812:	9f ad       	ldd	r25, Y+63	; 0x3f
    4814:	ae 97       	sbiw	r28, 0x2e	; 46
    4816:	82 33       	cpi	r24, 0x32	; 50
    4818:	91 05       	cpc	r25, r1
    481a:	4c f4       	brge	.+18     	; 0x482e <App_voidSystemLogin+0x104>
    481c:	ae 96       	adiw	r28, 0x2e	; 46
    481e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4820:	ff ad       	ldd	r31, Y+63	; 0x3f
    4822:	ae 97       	sbiw	r28, 0x2e	; 46
    4824:	e0 33       	cpi	r30, 0x30	; 48
    4826:	f1 05       	cpc	r31, r1
    4828:	09 f4       	brne	.+2      	; 0x482c <App_voidSystemLogin+0x102>
    482a:	43 c0       	rjmp	.+134    	; 0x48b2 <App_voidSystemLogin+0x188>
    482c:	bc c1       	rjmp	.+888    	; 0x4ba6 <App_voidSystemLogin+0x47c>
    482e:	ae 96       	adiw	r28, 0x2e	; 46
    4830:	2e ad       	ldd	r18, Y+62	; 0x3e
    4832:	3f ad       	ldd	r19, Y+63	; 0x3f
    4834:	ae 97       	sbiw	r28, 0x2e	; 46
    4836:	22 33       	cpi	r18, 0x32	; 50
    4838:	31 05       	cpc	r19, r1
    483a:	09 f4       	brne	.+2      	; 0x483e <App_voidSystemLogin+0x114>
    483c:	84 c0       	rjmp	.+264    	; 0x4946 <App_voidSystemLogin+0x21c>
    483e:	ae 96       	adiw	r28, 0x2e	; 46
    4840:	8e ad       	ldd	r24, Y+62	; 0x3e
    4842:	9f ad       	ldd	r25, Y+63	; 0x3f
    4844:	ae 97       	sbiw	r28, 0x2e	; 46
    4846:	83 33       	cpi	r24, 0x33	; 51
    4848:	91 05       	cpc	r25, r1
    484a:	09 f4       	brne	.+2      	; 0x484e <App_voidSystemLogin+0x124>
    484c:	a2 c0       	rjmp	.+324    	; 0x4992 <App_voidSystemLogin+0x268>
    484e:	ab c1       	rjmp	.+854    	; 0x4ba6 <App_voidSystemLogin+0x47c>
    4850:	ae 96       	adiw	r28, 0x2e	; 46
    4852:	ee ad       	ldd	r30, Y+62	; 0x3e
    4854:	ff ad       	ldd	r31, Y+63	; 0x3f
    4856:	ae 97       	sbiw	r28, 0x2e	; 46
    4858:	e7 33       	cpi	r30, 0x37	; 55
    485a:	f1 05       	cpc	r31, r1
    485c:	09 f4       	brne	.+2      	; 0x4860 <App_voidSystemLogin+0x136>
    485e:	31 c1       	rjmp	.+610    	; 0x4ac2 <App_voidSystemLogin+0x398>
    4860:	ae 96       	adiw	r28, 0x2e	; 46
    4862:	2e ad       	ldd	r18, Y+62	; 0x3e
    4864:	3f ad       	ldd	r19, Y+63	; 0x3f
    4866:	ae 97       	sbiw	r28, 0x2e	; 46
    4868:	28 33       	cpi	r18, 0x38	; 56
    486a:	31 05       	cpc	r19, r1
    486c:	8c f4       	brge	.+34     	; 0x4890 <App_voidSystemLogin+0x166>
    486e:	ae 96       	adiw	r28, 0x2e	; 46
    4870:	8e ad       	ldd	r24, Y+62	; 0x3e
    4872:	9f ad       	ldd	r25, Y+63	; 0x3f
    4874:	ae 97       	sbiw	r28, 0x2e	; 46
    4876:	85 33       	cpi	r24, 0x35	; 53
    4878:	91 05       	cpc	r25, r1
    487a:	09 f4       	brne	.+2      	; 0x487e <App_voidSystemLogin+0x154>
    487c:	d6 c0       	rjmp	.+428    	; 0x4a2a <App_voidSystemLogin+0x300>
    487e:	ae 96       	adiw	r28, 0x2e	; 46
    4880:	ee ad       	ldd	r30, Y+62	; 0x3e
    4882:	ff ad       	ldd	r31, Y+63	; 0x3f
    4884:	ae 97       	sbiw	r28, 0x2e	; 46
    4886:	e6 33       	cpi	r30, 0x36	; 54
    4888:	f1 05       	cpc	r31, r1
    488a:	09 f4       	brne	.+2      	; 0x488e <App_voidSystemLogin+0x164>
    488c:	f4 c0       	rjmp	.+488    	; 0x4a76 <App_voidSystemLogin+0x34c>
    488e:	8b c1       	rjmp	.+790    	; 0x4ba6 <App_voidSystemLogin+0x47c>
    4890:	ae 96       	adiw	r28, 0x2e	; 46
    4892:	2e ad       	ldd	r18, Y+62	; 0x3e
    4894:	3f ad       	ldd	r19, Y+63	; 0x3f
    4896:	ae 97       	sbiw	r28, 0x2e	; 46
    4898:	28 33       	cpi	r18, 0x38	; 56
    489a:	31 05       	cpc	r19, r1
    489c:	09 f4       	brne	.+2      	; 0x48a0 <App_voidSystemLogin+0x176>
    489e:	37 c1       	rjmp	.+622    	; 0x4b0e <App_voidSystemLogin+0x3e4>
    48a0:	ae 96       	adiw	r28, 0x2e	; 46
    48a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    48a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    48a6:	ae 97       	sbiw	r28, 0x2e	; 46
    48a8:	89 33       	cpi	r24, 0x39	; 57
    48aa:	91 05       	cpc	r25, r1
    48ac:	09 f4       	brne	.+2      	; 0x48b0 <App_voidSystemLogin+0x186>
    48ae:	55 c1       	rjmp	.+682    	; 0x4b5a <App_voidSystemLogin+0x430>
    48b0:	7a c1       	rjmp	.+756    	; 0x4ba6 <App_voidSystemLogin+0x47c>
				{
				case '0':
					Local_u16value =0;
    48b2:	fe 01       	movw	r30, r28
    48b4:	e9 59       	subi	r30, 0x99	; 153
    48b6:	ff 4f       	sbci	r31, 0xFF	; 255
    48b8:	11 82       	std	Z+1, r1	; 0x01
    48ba:	10 82       	st	Z, r1
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    48bc:	fe 01       	movw	r30, r28
    48be:	eb 59       	subi	r30, 0x9B	; 155
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	9c 01       	movw	r18, r24
    48c8:	22 0f       	add	r18, r18
    48ca:	33 1f       	adc	r19, r19
    48cc:	c9 01       	movw	r24, r18
    48ce:	88 0f       	add	r24, r24
    48d0:	99 1f       	adc	r25, r25
    48d2:	88 0f       	add	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	28 0f       	add	r18, r24
    48d8:	39 1f       	adc	r19, r25
    48da:	de 01       	movw	r26, r28
    48dc:	ab 59       	subi	r26, 0x9B	; 155
    48de:	bf 4f       	sbci	r27, 0xFF	; 255
    48e0:	fe 01       	movw	r30, r28
    48e2:	e9 59       	subi	r30, 0x99	; 153
    48e4:	ff 4f       	sbci	r31, 0xFF	; 255
    48e6:	80 81       	ld	r24, Z
    48e8:	91 81       	ldd	r25, Z+1	; 0x01
    48ea:	82 0f       	add	r24, r18
    48ec:	93 1f       	adc	r25, r19
    48ee:	8d 93       	st	X+, r24
    48f0:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('0');
    48f2:	80 e3       	ldi	r24, 0x30	; 48
    48f4:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    48f8:	dd c2       	rjmp	.+1466   	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '1':
					Local_u16value =1;
    48fa:	fe 01       	movw	r30, r28
    48fc:	e9 59       	subi	r30, 0x99	; 153
    48fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	91 83       	std	Z+1, r25	; 0x01
    4906:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    4908:	fe 01       	movw	r30, r28
    490a:	eb 59       	subi	r30, 0x9B	; 155
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	80 81       	ld	r24, Z
    4910:	91 81       	ldd	r25, Z+1	; 0x01
    4912:	9c 01       	movw	r18, r24
    4914:	22 0f       	add	r18, r18
    4916:	33 1f       	adc	r19, r19
    4918:	c9 01       	movw	r24, r18
    491a:	88 0f       	add	r24, r24
    491c:	99 1f       	adc	r25, r25
    491e:	88 0f       	add	r24, r24
    4920:	99 1f       	adc	r25, r25
    4922:	28 0f       	add	r18, r24
    4924:	39 1f       	adc	r19, r25
    4926:	de 01       	movw	r26, r28
    4928:	ab 59       	subi	r26, 0x9B	; 155
    492a:	bf 4f       	sbci	r27, 0xFF	; 255
    492c:	fe 01       	movw	r30, r28
    492e:	e9 59       	subi	r30, 0x99	; 153
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	80 81       	ld	r24, Z
    4934:	91 81       	ldd	r25, Z+1	; 0x01
    4936:	82 0f       	add	r24, r18
    4938:	93 1f       	adc	r25, r19
    493a:	8d 93       	st	X+, r24
    493c:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('1');
    493e:	81 e3       	ldi	r24, 0x31	; 49
    4940:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    4944:	b7 c2       	rjmp	.+1390   	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '2':
					Local_u16value =2;
    4946:	fe 01       	movw	r30, r28
    4948:	e9 59       	subi	r30, 0x99	; 153
    494a:	ff 4f       	sbci	r31, 0xFF	; 255
    494c:	82 e0       	ldi	r24, 0x02	; 2
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	91 83       	std	Z+1, r25	; 0x01
    4952:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    4954:	fe 01       	movw	r30, r28
    4956:	eb 59       	subi	r30, 0x9B	; 155
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	80 81       	ld	r24, Z
    495c:	91 81       	ldd	r25, Z+1	; 0x01
    495e:	9c 01       	movw	r18, r24
    4960:	22 0f       	add	r18, r18
    4962:	33 1f       	adc	r19, r19
    4964:	c9 01       	movw	r24, r18
    4966:	88 0f       	add	r24, r24
    4968:	99 1f       	adc	r25, r25
    496a:	88 0f       	add	r24, r24
    496c:	99 1f       	adc	r25, r25
    496e:	28 0f       	add	r18, r24
    4970:	39 1f       	adc	r19, r25
    4972:	de 01       	movw	r26, r28
    4974:	ab 59       	subi	r26, 0x9B	; 155
    4976:	bf 4f       	sbci	r27, 0xFF	; 255
    4978:	fe 01       	movw	r30, r28
    497a:	e9 59       	subi	r30, 0x99	; 153
    497c:	ff 4f       	sbci	r31, 0xFF	; 255
    497e:	80 81       	ld	r24, Z
    4980:	91 81       	ldd	r25, Z+1	; 0x01
    4982:	82 0f       	add	r24, r18
    4984:	93 1f       	adc	r25, r19
    4986:	8d 93       	st	X+, r24
    4988:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('2');
    498a:	82 e3       	ldi	r24, 0x32	; 50
    498c:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    4990:	91 c2       	rjmp	.+1314   	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '3':
					Local_u16value =3;
    4992:	fe 01       	movw	r30, r28
    4994:	e9 59       	subi	r30, 0x99	; 153
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	83 e0       	ldi	r24, 0x03	; 3
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	91 83       	std	Z+1, r25	; 0x01
    499e:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    49a0:	fe 01       	movw	r30, r28
    49a2:	eb 59       	subi	r30, 0x9B	; 155
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	80 81       	ld	r24, Z
    49a8:	91 81       	ldd	r25, Z+1	; 0x01
    49aa:	9c 01       	movw	r18, r24
    49ac:	22 0f       	add	r18, r18
    49ae:	33 1f       	adc	r19, r19
    49b0:	c9 01       	movw	r24, r18
    49b2:	88 0f       	add	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	88 0f       	add	r24, r24
    49b8:	99 1f       	adc	r25, r25
    49ba:	28 0f       	add	r18, r24
    49bc:	39 1f       	adc	r19, r25
    49be:	de 01       	movw	r26, r28
    49c0:	ab 59       	subi	r26, 0x9B	; 155
    49c2:	bf 4f       	sbci	r27, 0xFF	; 255
    49c4:	fe 01       	movw	r30, r28
    49c6:	e9 59       	subi	r30, 0x99	; 153
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	80 81       	ld	r24, Z
    49cc:	91 81       	ldd	r25, Z+1	; 0x01
    49ce:	82 0f       	add	r24, r18
    49d0:	93 1f       	adc	r25, r19
    49d2:	8d 93       	st	X+, r24
    49d4:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('3');
    49d6:	83 e3       	ldi	r24, 0x33	; 51
    49d8:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    49dc:	6b c2       	rjmp	.+1238   	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '4':
					Local_u16value =4;
    49de:	fe 01       	movw	r30, r28
    49e0:	e9 59       	subi	r30, 0x99	; 153
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	84 e0       	ldi	r24, 0x04	; 4
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	91 83       	std	Z+1, r25	; 0x01
    49ea:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    49ec:	fe 01       	movw	r30, r28
    49ee:	eb 59       	subi	r30, 0x9B	; 155
    49f0:	ff 4f       	sbci	r31, 0xFF	; 255
    49f2:	80 81       	ld	r24, Z
    49f4:	91 81       	ldd	r25, Z+1	; 0x01
    49f6:	9c 01       	movw	r18, r24
    49f8:	22 0f       	add	r18, r18
    49fa:	33 1f       	adc	r19, r19
    49fc:	c9 01       	movw	r24, r18
    49fe:	88 0f       	add	r24, r24
    4a00:	99 1f       	adc	r25, r25
    4a02:	88 0f       	add	r24, r24
    4a04:	99 1f       	adc	r25, r25
    4a06:	28 0f       	add	r18, r24
    4a08:	39 1f       	adc	r19, r25
    4a0a:	de 01       	movw	r26, r28
    4a0c:	ab 59       	subi	r26, 0x9B	; 155
    4a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a10:	fe 01       	movw	r30, r28
    4a12:	e9 59       	subi	r30, 0x99	; 153
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	80 81       	ld	r24, Z
    4a18:	91 81       	ldd	r25, Z+1	; 0x01
    4a1a:	82 0f       	add	r24, r18
    4a1c:	93 1f       	adc	r25, r19
    4a1e:	8d 93       	st	X+, r24
    4a20:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('4');
    4a22:	84 e3       	ldi	r24, 0x34	; 52
    4a24:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    4a28:	45 c2       	rjmp	.+1162   	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '5':
					Local_u16value =5;
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	e9 59       	subi	r30, 0x99	; 153
    4a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a30:	85 e0       	ldi	r24, 0x05	; 5
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	91 83       	std	Z+1, r25	; 0x01
    4a36:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    4a38:	fe 01       	movw	r30, r28
    4a3a:	eb 59       	subi	r30, 0x9B	; 155
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	80 81       	ld	r24, Z
    4a40:	91 81       	ldd	r25, Z+1	; 0x01
    4a42:	9c 01       	movw	r18, r24
    4a44:	22 0f       	add	r18, r18
    4a46:	33 1f       	adc	r19, r19
    4a48:	c9 01       	movw	r24, r18
    4a4a:	88 0f       	add	r24, r24
    4a4c:	99 1f       	adc	r25, r25
    4a4e:	88 0f       	add	r24, r24
    4a50:	99 1f       	adc	r25, r25
    4a52:	28 0f       	add	r18, r24
    4a54:	39 1f       	adc	r19, r25
    4a56:	de 01       	movw	r26, r28
    4a58:	ab 59       	subi	r26, 0x9B	; 155
    4a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	e9 59       	subi	r30, 0x99	; 153
    4a60:	ff 4f       	sbci	r31, 0xFF	; 255
    4a62:	80 81       	ld	r24, Z
    4a64:	91 81       	ldd	r25, Z+1	; 0x01
    4a66:	82 0f       	add	r24, r18
    4a68:	93 1f       	adc	r25, r19
    4a6a:	8d 93       	st	X+, r24
    4a6c:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('5');
    4a6e:	85 e3       	ldi	r24, 0x35	; 53
    4a70:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    4a74:	1f c2       	rjmp	.+1086   	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '6':
					Local_u16value =6;
    4a76:	fe 01       	movw	r30, r28
    4a78:	e9 59       	subi	r30, 0x99	; 153
    4a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7c:	86 e0       	ldi	r24, 0x06	; 6
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	91 83       	std	Z+1, r25	; 0x01
    4a82:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    4a84:	fe 01       	movw	r30, r28
    4a86:	eb 59       	subi	r30, 0x9B	; 155
    4a88:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8a:	80 81       	ld	r24, Z
    4a8c:	91 81       	ldd	r25, Z+1	; 0x01
    4a8e:	9c 01       	movw	r18, r24
    4a90:	22 0f       	add	r18, r18
    4a92:	33 1f       	adc	r19, r19
    4a94:	c9 01       	movw	r24, r18
    4a96:	88 0f       	add	r24, r24
    4a98:	99 1f       	adc	r25, r25
    4a9a:	88 0f       	add	r24, r24
    4a9c:	99 1f       	adc	r25, r25
    4a9e:	28 0f       	add	r18, r24
    4aa0:	39 1f       	adc	r19, r25
    4aa2:	de 01       	movw	r26, r28
    4aa4:	ab 59       	subi	r26, 0x9B	; 155
    4aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	e9 59       	subi	r30, 0x99	; 153
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	80 81       	ld	r24, Z
    4ab0:	91 81       	ldd	r25, Z+1	; 0x01
    4ab2:	82 0f       	add	r24, r18
    4ab4:	93 1f       	adc	r25, r19
    4ab6:	8d 93       	st	X+, r24
    4ab8:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('6');
    4aba:	86 e3       	ldi	r24, 0x36	; 54
    4abc:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    4ac0:	f9 c1       	rjmp	.+1010   	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '7':
					Local_u16value =7;
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	e9 59       	subi	r30, 0x99	; 153
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	87 e0       	ldi	r24, 0x07	; 7
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	91 83       	std	Z+1, r25	; 0x01
    4ace:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	eb 59       	subi	r30, 0x9B	; 155
    4ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad6:	80 81       	ld	r24, Z
    4ad8:	91 81       	ldd	r25, Z+1	; 0x01
    4ada:	9c 01       	movw	r18, r24
    4adc:	22 0f       	add	r18, r18
    4ade:	33 1f       	adc	r19, r19
    4ae0:	c9 01       	movw	r24, r18
    4ae2:	88 0f       	add	r24, r24
    4ae4:	99 1f       	adc	r25, r25
    4ae6:	88 0f       	add	r24, r24
    4ae8:	99 1f       	adc	r25, r25
    4aea:	28 0f       	add	r18, r24
    4aec:	39 1f       	adc	r19, r25
    4aee:	de 01       	movw	r26, r28
    4af0:	ab 59       	subi	r26, 0x9B	; 155
    4af2:	bf 4f       	sbci	r27, 0xFF	; 255
    4af4:	fe 01       	movw	r30, r28
    4af6:	e9 59       	subi	r30, 0x99	; 153
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	80 81       	ld	r24, Z
    4afc:	91 81       	ldd	r25, Z+1	; 0x01
    4afe:	82 0f       	add	r24, r18
    4b00:	93 1f       	adc	r25, r19
    4b02:	8d 93       	st	X+, r24
    4b04:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('7');
    4b06:	87 e3       	ldi	r24, 0x37	; 55
    4b08:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    4b0c:	d3 c1       	rjmp	.+934    	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '8':
					Local_u16value =8;
    4b0e:	fe 01       	movw	r30, r28
    4b10:	e9 59       	subi	r30, 0x99	; 153
    4b12:	ff 4f       	sbci	r31, 0xFF	; 255
    4b14:	88 e0       	ldi	r24, 0x08	; 8
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	eb 59       	subi	r30, 0x9B	; 155
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	80 81       	ld	r24, Z
    4b24:	91 81       	ldd	r25, Z+1	; 0x01
    4b26:	9c 01       	movw	r18, r24
    4b28:	22 0f       	add	r18, r18
    4b2a:	33 1f       	adc	r19, r19
    4b2c:	c9 01       	movw	r24, r18
    4b2e:	88 0f       	add	r24, r24
    4b30:	99 1f       	adc	r25, r25
    4b32:	88 0f       	add	r24, r24
    4b34:	99 1f       	adc	r25, r25
    4b36:	28 0f       	add	r18, r24
    4b38:	39 1f       	adc	r19, r25
    4b3a:	de 01       	movw	r26, r28
    4b3c:	ab 59       	subi	r26, 0x9B	; 155
    4b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    4b40:	fe 01       	movw	r30, r28
    4b42:	e9 59       	subi	r30, 0x99	; 153
    4b44:	ff 4f       	sbci	r31, 0xFF	; 255
    4b46:	80 81       	ld	r24, Z
    4b48:	91 81       	ldd	r25, Z+1	; 0x01
    4b4a:	82 0f       	add	r24, r18
    4b4c:	93 1f       	adc	r25, r19
    4b4e:	8d 93       	st	X+, r24
    4b50:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('8');
    4b52:	88 e3       	ldi	r24, 0x38	; 56
    4b54:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    4b58:	ad c1       	rjmp	.+858    	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				case '9':
					Local_u16value =9;
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	e9 59       	subi	r30, 0x99	; 153
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	89 e0       	ldi	r24, 0x09	; 9
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	91 83       	std	Z+1, r25	; 0x01
    4b66:	80 83       	st	Z, r24
					Local_Num1 = (Local_Num1*10) + Local_u16value ;
    4b68:	fe 01       	movw	r30, r28
    4b6a:	eb 59       	subi	r30, 0x9B	; 155
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	80 81       	ld	r24, Z
    4b70:	91 81       	ldd	r25, Z+1	; 0x01
    4b72:	9c 01       	movw	r18, r24
    4b74:	22 0f       	add	r18, r18
    4b76:	33 1f       	adc	r19, r19
    4b78:	c9 01       	movw	r24, r18
    4b7a:	88 0f       	add	r24, r24
    4b7c:	99 1f       	adc	r25, r25
    4b7e:	88 0f       	add	r24, r24
    4b80:	99 1f       	adc	r25, r25
    4b82:	28 0f       	add	r18, r24
    4b84:	39 1f       	adc	r19, r25
    4b86:	de 01       	movw	r26, r28
    4b88:	ab 59       	subi	r26, 0x9B	; 155
    4b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e9 59       	subi	r30, 0x99	; 153
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	80 81       	ld	r24, Z
    4b94:	91 81       	ldd	r25, Z+1	; 0x01
    4b96:	82 0f       	add	r24, r18
    4b98:	93 1f       	adc	r25, r19
    4b9a:	8d 93       	st	X+, r24
    4b9c:	9c 93       	st	X, r25
					HCLCD_Vid4Bits_DisplayCharacter('9');
    4b9e:	89 e3       	ldi	r24, 0x39	; 57
    4ba0:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <HCLCD_Vid4Bits_DisplayCharacter>
    4ba4:	87 c1       	rjmp	.+782    	; 0x4eb4 <App_voidSystemLogin+0x78a>
					break;
				default:                                             /* if any Button is pressed other than Numbers */
					HCLCD_Vid4Bits_ClearScreen();
    4ba6:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Vid4Bits_ClearScreen>

					HCLCD_Vid4Bits_SetPosition(HCLCD_LINE1,1);
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	61 e0       	ldi	r22, 0x01	; 1
    4bae:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <HCLCD_Vid4Bits_SetPosition>
					HCLCD_Vid4Bits_DisplayString("Please Enter");
    4bb2:	81 e7       	ldi	r24, 0x71	; 113
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>

					HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,1);
    4bba:	82 e0       	ldi	r24, 0x02	; 2
    4bbc:	61 e0       	ldi	r22, 0x01	; 1
    4bbe:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <HCLCD_Vid4Bits_SetPosition>
					HCLCD_Vid4Bits_DisplayString("Numbers Only");
    4bc2:	8e e7       	ldi	r24, 0x7E	; 126
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
    4bca:	fe 01       	movw	r30, r28
    4bcc:	e1 5a       	subi	r30, 0xA1	; 161
    4bce:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd0:	80 e0       	ldi	r24, 0x00	; 0
    4bd2:	90 e8       	ldi	r25, 0x80	; 128
    4bd4:	ab eb       	ldi	r26, 0xBB	; 187
    4bd6:	b4 e4       	ldi	r27, 0x44	; 68
    4bd8:	80 83       	st	Z, r24
    4bda:	91 83       	std	Z+1, r25	; 0x01
    4bdc:	a2 83       	std	Z+2, r26	; 0x02
    4bde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4be0:	8e 01       	movw	r16, r28
    4be2:	05 5a       	subi	r16, 0xA5	; 165
    4be4:	1f 4f       	sbci	r17, 0xFF	; 255
    4be6:	fe 01       	movw	r30, r28
    4be8:	e1 5a       	subi	r30, 0xA1	; 161
    4bea:	ff 4f       	sbci	r31, 0xFF	; 255
    4bec:	60 81       	ld	r22, Z
    4bee:	71 81       	ldd	r23, Z+1	; 0x01
    4bf0:	82 81       	ldd	r24, Z+2	; 0x02
    4bf2:	93 81       	ldd	r25, Z+3	; 0x03
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	4a ef       	ldi	r20, 0xFA	; 250
    4bfa:	54 e4       	ldi	r21, 0x44	; 68
    4bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c00:	dc 01       	movw	r26, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	f8 01       	movw	r30, r16
    4c06:	80 83       	st	Z, r24
    4c08:	91 83       	std	Z+1, r25	; 0x01
    4c0a:	a2 83       	std	Z+2, r26	; 0x02
    4c0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c0e:	fe 01       	movw	r30, r28
    4c10:	e5 5a       	subi	r30, 0xA5	; 165
    4c12:	ff 4f       	sbci	r31, 0xFF	; 255
    4c14:	60 81       	ld	r22, Z
    4c16:	71 81       	ldd	r23, Z+1	; 0x01
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	40 e8       	ldi	r20, 0x80	; 128
    4c22:	5f e3       	ldi	r21, 0x3F	; 63
    4c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c28:	88 23       	and	r24, r24
    4c2a:	44 f4       	brge	.+16     	; 0x4c3c <App_voidSystemLogin+0x512>
		__ticks = 1;
    4c2c:	fe 01       	movw	r30, r28
    4c2e:	e7 5a       	subi	r30, 0xA7	; 167
    4c30:	ff 4f       	sbci	r31, 0xFF	; 255
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	91 83       	std	Z+1, r25	; 0x01
    4c38:	80 83       	st	Z, r24
    4c3a:	64 c0       	rjmp	.+200    	; 0x4d04 <App_voidSystemLogin+0x5da>
	else if (__tmp > 65535)
    4c3c:	fe 01       	movw	r30, r28
    4c3e:	e5 5a       	subi	r30, 0xA5	; 165
    4c40:	ff 4f       	sbci	r31, 0xFF	; 255
    4c42:	60 81       	ld	r22, Z
    4c44:	71 81       	ldd	r23, Z+1	; 0x01
    4c46:	82 81       	ldd	r24, Z+2	; 0x02
    4c48:	93 81       	ldd	r25, Z+3	; 0x03
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	3f ef       	ldi	r19, 0xFF	; 255
    4c4e:	4f e7       	ldi	r20, 0x7F	; 127
    4c50:	57 e4       	ldi	r21, 0x47	; 71
    4c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c56:	18 16       	cp	r1, r24
    4c58:	0c f0       	brlt	.+2      	; 0x4c5c <App_voidSystemLogin+0x532>
    4c5a:	43 c0       	rjmp	.+134    	; 0x4ce2 <App_voidSystemLogin+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c5c:	fe 01       	movw	r30, r28
    4c5e:	e1 5a       	subi	r30, 0xA1	; 161
    4c60:	ff 4f       	sbci	r31, 0xFF	; 255
    4c62:	60 81       	ld	r22, Z
    4c64:	71 81       	ldd	r23, Z+1	; 0x01
    4c66:	82 81       	ldd	r24, Z+2	; 0x02
    4c68:	93 81       	ldd	r25, Z+3	; 0x03
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	40 e2       	ldi	r20, 0x20	; 32
    4c70:	51 e4       	ldi	r21, 0x41	; 65
    4c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c76:	dc 01       	movw	r26, r24
    4c78:	cb 01       	movw	r24, r22
    4c7a:	8e 01       	movw	r16, r28
    4c7c:	07 5a       	subi	r16, 0xA7	; 167
    4c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c80:	bc 01       	movw	r22, r24
    4c82:	cd 01       	movw	r24, r26
    4c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	f8 01       	movw	r30, r16
    4c8e:	91 83       	std	Z+1, r25	; 0x01
    4c90:	80 83       	st	Z, r24
    4c92:	1f c0       	rjmp	.+62     	; 0x4cd2 <App_voidSystemLogin+0x5a8>
    4c94:	fe 01       	movw	r30, r28
    4c96:	e9 5a       	subi	r30, 0xA9	; 169
    4c98:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9a:	88 ec       	ldi	r24, 0xC8	; 200
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	91 83       	std	Z+1, r25	; 0x01
    4ca0:	80 83       	st	Z, r24
    4ca2:	fe 01       	movw	r30, r28
    4ca4:	e9 5a       	subi	r30, 0xA9	; 169
    4ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca8:	80 81       	ld	r24, Z
    4caa:	91 81       	ldd	r25, Z+1	; 0x01
    4cac:	01 97       	sbiw	r24, 0x01	; 1
    4cae:	f1 f7       	brne	.-4      	; 0x4cac <App_voidSystemLogin+0x582>
    4cb0:	fe 01       	movw	r30, r28
    4cb2:	e9 5a       	subi	r30, 0xA9	; 169
    4cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb6:	91 83       	std	Z+1, r25	; 0x01
    4cb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cba:	de 01       	movw	r26, r28
    4cbc:	a7 5a       	subi	r26, 0xA7	; 167
    4cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    4cc0:	fe 01       	movw	r30, r28
    4cc2:	e7 5a       	subi	r30, 0xA7	; 167
    4cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc6:	80 81       	ld	r24, Z
    4cc8:	91 81       	ldd	r25, Z+1	; 0x01
    4cca:	01 97       	sbiw	r24, 0x01	; 1
    4ccc:	11 96       	adiw	r26, 0x01	; 1
    4cce:	9c 93       	st	X, r25
    4cd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	e7 5a       	subi	r30, 0xA7	; 167
    4cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd8:	80 81       	ld	r24, Z
    4cda:	91 81       	ldd	r25, Z+1	; 0x01
    4cdc:	00 97       	sbiw	r24, 0x00	; 0
    4cde:	d1 f6       	brne	.-76     	; 0x4c94 <App_voidSystemLogin+0x56a>
    4ce0:	27 c0       	rjmp	.+78     	; 0x4d30 <App_voidSystemLogin+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce2:	8e 01       	movw	r16, r28
    4ce4:	07 5a       	subi	r16, 0xA7	; 167
    4ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ce8:	fe 01       	movw	r30, r28
    4cea:	e5 5a       	subi	r30, 0xA5	; 165
    4cec:	ff 4f       	sbci	r31, 0xFF	; 255
    4cee:	60 81       	ld	r22, Z
    4cf0:	71 81       	ldd	r23, Z+1	; 0x01
    4cf2:	82 81       	ldd	r24, Z+2	; 0x02
    4cf4:	93 81       	ldd	r25, Z+3	; 0x03
    4cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	f8 01       	movw	r30, r16
    4d00:	91 83       	std	Z+1, r25	; 0x01
    4d02:	80 83       	st	Z, r24
    4d04:	de 01       	movw	r26, r28
    4d06:	ab 5a       	subi	r26, 0xAB	; 171
    4d08:	bf 4f       	sbci	r27, 0xFF	; 255
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	e7 5a       	subi	r30, 0xA7	; 167
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	80 81       	ld	r24, Z
    4d12:	91 81       	ldd	r25, Z+1	; 0x01
    4d14:	8d 93       	st	X+, r24
    4d16:	9c 93       	st	X, r25
    4d18:	fe 01       	movw	r30, r28
    4d1a:	eb 5a       	subi	r30, 0xAB	; 171
    4d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1e:	80 81       	ld	r24, Z
    4d20:	91 81       	ldd	r25, Z+1	; 0x01
    4d22:	01 97       	sbiw	r24, 0x01	; 1
    4d24:	f1 f7       	brne	.-4      	; 0x4d22 <App_voidSystemLogin+0x5f8>
    4d26:	fe 01       	movw	r30, r28
    4d28:	eb 5a       	subi	r30, 0xAB	; 171
    4d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2c:	91 83       	std	Z+1, r25	; 0x01
    4d2e:	80 83       	st	Z, r24
					_delay_ms(1500);

					HCLCD_Vid4Bits_ClearScreen();
    4d30:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Vid4Bits_ClearScreen>
					HCLCD_Vid4Bits_DisplayString("   Try Again ");     /* Asks The User to Enter Password Again */
    4d34:	8b e8       	ldi	r24, 0x8B	; 139
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
					HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,4);
    4d3c:	82 e0       	ldi	r24, 0x02	; 2
    4d3e:	64 e0       	ldi	r22, 0x04	; 4
    4d40:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <HCLCD_Vid4Bits_SetPosition>
    4d44:	fe 01       	movw	r30, r28
    4d46:	ef 5a       	subi	r30, 0xAF	; 175
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	aa ef       	ldi	r26, 0xFA	; 250
    4d50:	b3 e4       	ldi	r27, 0x43	; 67
    4d52:	80 83       	st	Z, r24
    4d54:	91 83       	std	Z+1, r25	; 0x01
    4d56:	a2 83       	std	Z+2, r26	; 0x02
    4d58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d5a:	8e 01       	movw	r16, r28
    4d5c:	03 5b       	subi	r16, 0xB3	; 179
    4d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d60:	fe 01       	movw	r30, r28
    4d62:	ef 5a       	subi	r30, 0xAF	; 175
    4d64:	ff 4f       	sbci	r31, 0xFF	; 255
    4d66:	60 81       	ld	r22, Z
    4d68:	71 81       	ldd	r23, Z+1	; 0x01
    4d6a:	82 81       	ldd	r24, Z+2	; 0x02
    4d6c:	93 81       	ldd	r25, Z+3	; 0x03
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	4a ef       	ldi	r20, 0xFA	; 250
    4d74:	54 e4       	ldi	r21, 0x44	; 68
    4d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	f8 01       	movw	r30, r16
    4d80:	80 83       	st	Z, r24
    4d82:	91 83       	std	Z+1, r25	; 0x01
    4d84:	a2 83       	std	Z+2, r26	; 0x02
    4d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e3 5b       	subi	r30, 0xB3	; 179
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	60 81       	ld	r22, Z
    4d90:	71 81       	ldd	r23, Z+1	; 0x01
    4d92:	82 81       	ldd	r24, Z+2	; 0x02
    4d94:	93 81       	ldd	r25, Z+3	; 0x03
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	40 e8       	ldi	r20, 0x80	; 128
    4d9c:	5f e3       	ldi	r21, 0x3F	; 63
    4d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4da2:	88 23       	and	r24, r24
    4da4:	44 f4       	brge	.+16     	; 0x4db6 <App_voidSystemLogin+0x68c>
		__ticks = 1;
    4da6:	fe 01       	movw	r30, r28
    4da8:	e5 5b       	subi	r30, 0xB5	; 181
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	91 83       	std	Z+1, r25	; 0x01
    4db2:	80 83       	st	Z, r24
    4db4:	64 c0       	rjmp	.+200    	; 0x4e7e <App_voidSystemLogin+0x754>
	else if (__tmp > 65535)
    4db6:	fe 01       	movw	r30, r28
    4db8:	e3 5b       	subi	r30, 0xB3	; 179
    4dba:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbc:	60 81       	ld	r22, Z
    4dbe:	71 81       	ldd	r23, Z+1	; 0x01
    4dc0:	82 81       	ldd	r24, Z+2	; 0x02
    4dc2:	93 81       	ldd	r25, Z+3	; 0x03
    4dc4:	20 e0       	ldi	r18, 0x00	; 0
    4dc6:	3f ef       	ldi	r19, 0xFF	; 255
    4dc8:	4f e7       	ldi	r20, 0x7F	; 127
    4dca:	57 e4       	ldi	r21, 0x47	; 71
    4dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4dd0:	18 16       	cp	r1, r24
    4dd2:	0c f0       	brlt	.+2      	; 0x4dd6 <App_voidSystemLogin+0x6ac>
    4dd4:	43 c0       	rjmp	.+134    	; 0x4e5c <App_voidSystemLogin+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd6:	fe 01       	movw	r30, r28
    4dd8:	ef 5a       	subi	r30, 0xAF	; 175
    4dda:	ff 4f       	sbci	r31, 0xFF	; 255
    4ddc:	60 81       	ld	r22, Z
    4dde:	71 81       	ldd	r23, Z+1	; 0x01
    4de0:	82 81       	ldd	r24, Z+2	; 0x02
    4de2:	93 81       	ldd	r25, Z+3	; 0x03
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	40 e2       	ldi	r20, 0x20	; 32
    4dea:	51 e4       	ldi	r21, 0x41	; 65
    4dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	8e 01       	movw	r16, r28
    4df6:	05 5b       	subi	r16, 0xB5	; 181
    4df8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dfa:	bc 01       	movw	r22, r24
    4dfc:	cd 01       	movw	r24, r26
    4dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e02:	dc 01       	movw	r26, r24
    4e04:	cb 01       	movw	r24, r22
    4e06:	f8 01       	movw	r30, r16
    4e08:	91 83       	std	Z+1, r25	; 0x01
    4e0a:	80 83       	st	Z, r24
    4e0c:	1f c0       	rjmp	.+62     	; 0x4e4c <App_voidSystemLogin+0x722>
    4e0e:	fe 01       	movw	r30, r28
    4e10:	e7 5b       	subi	r30, 0xB7	; 183
    4e12:	ff 4f       	sbci	r31, 0xFF	; 255
    4e14:	88 ec       	ldi	r24, 0xC8	; 200
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	91 83       	std	Z+1, r25	; 0x01
    4e1a:	80 83       	st	Z, r24
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	e7 5b       	subi	r30, 0xB7	; 183
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	80 81       	ld	r24, Z
    4e24:	91 81       	ldd	r25, Z+1	; 0x01
    4e26:	01 97       	sbiw	r24, 0x01	; 1
    4e28:	f1 f7       	brne	.-4      	; 0x4e26 <App_voidSystemLogin+0x6fc>
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	e7 5b       	subi	r30, 0xB7	; 183
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	91 83       	std	Z+1, r25	; 0x01
    4e32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e34:	de 01       	movw	r26, r28
    4e36:	a5 5b       	subi	r26, 0xB5	; 181
    4e38:	bf 4f       	sbci	r27, 0xFF	; 255
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	e5 5b       	subi	r30, 0xB5	; 181
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	80 81       	ld	r24, Z
    4e42:	91 81       	ldd	r25, Z+1	; 0x01
    4e44:	01 97       	sbiw	r24, 0x01	; 1
    4e46:	11 96       	adiw	r26, 0x01	; 1
    4e48:	9c 93       	st	X, r25
    4e4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	e5 5b       	subi	r30, 0xB5	; 181
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	80 81       	ld	r24, Z
    4e54:	91 81       	ldd	r25, Z+1	; 0x01
    4e56:	00 97       	sbiw	r24, 0x00	; 0
    4e58:	d1 f6       	brne	.-76     	; 0x4e0e <App_voidSystemLogin+0x6e4>
    4e5a:	28 c0       	rjmp	.+80     	; 0x4eac <App_voidSystemLogin+0x782>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e5c:	8e 01       	movw	r16, r28
    4e5e:	05 5b       	subi	r16, 0xB5	; 181
    4e60:	1f 4f       	sbci	r17, 0xFF	; 255
    4e62:	fe 01       	movw	r30, r28
    4e64:	e3 5b       	subi	r30, 0xB3	; 179
    4e66:	ff 4f       	sbci	r31, 0xFF	; 255
    4e68:	60 81       	ld	r22, Z
    4e6a:	71 81       	ldd	r23, Z+1	; 0x01
    4e6c:	82 81       	ldd	r24, Z+2	; 0x02
    4e6e:	93 81       	ldd	r25, Z+3	; 0x03
    4e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	f8 01       	movw	r30, r16
    4e7a:	91 83       	std	Z+1, r25	; 0x01
    4e7c:	80 83       	st	Z, r24
    4e7e:	de 01       	movw	r26, r28
    4e80:	a9 5b       	subi	r26, 0xB9	; 185
    4e82:	bf 4f       	sbci	r27, 0xFF	; 255
    4e84:	fe 01       	movw	r30, r28
    4e86:	e5 5b       	subi	r30, 0xB5	; 181
    4e88:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8a:	80 81       	ld	r24, Z
    4e8c:	91 81       	ldd	r25, Z+1	; 0x01
    4e8e:	11 96       	adiw	r26, 0x01	; 1
    4e90:	9c 93       	st	X, r25
    4e92:	8e 93       	st	-X, r24
    4e94:	fe 01       	movw	r30, r28
    4e96:	e9 5b       	subi	r30, 0xB9	; 185
    4e98:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9a:	80 81       	ld	r24, Z
    4e9c:	91 81       	ldd	r25, Z+1	; 0x01
    4e9e:	01 97       	sbiw	r24, 0x01	; 1
    4ea0:	f1 f7       	brne	.-4      	; 0x4e9e <App_voidSystemLogin+0x774>
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	e9 5b       	subi	r30, 0xB9	; 185
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	91 83       	std	Z+1, r25	; 0x01
    4eaa:	80 83       	st	Z, r24
					_delay_ms(500);
					Local_u8Counter =0 ;
    4eac:	fe 01       	movw	r30, r28
    4eae:	e6 59       	subi	r30, 0x96	; 150
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	10 82       	st	Z, r1

				}

			}
			if(Local_u8Counter>3)                         /* if 4 Numbers Are Entered */
    4eb4:	fe 01       	movw	r30, r28
    4eb6:	e6 59       	subi	r30, 0x96	; 150
    4eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eba:	80 81       	ld	r24, Z
    4ebc:	84 30       	cpi	r24, 0x04	; 4
    4ebe:	08 f4       	brcc	.+2      	; 0x4ec2 <App_voidSystemLogin+0x798>
    4ec0:	69 cc       	rjmp	.-1838   	; 0x4794 <App_voidSystemLogin+0x6a>
			{
				if(Local_Num1 == Local_u16Password)        /* Checks if Password Match */
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	eb 59       	subi	r30, 0x9B	; 155
    4ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec8:	de 01       	movw	r26, r28
    4eca:	ad 59       	subi	r26, 0x9D	; 157
    4ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    4ece:	20 81       	ld	r18, Z
    4ed0:	31 81       	ldd	r19, Z+1	; 0x01
    4ed2:	8d 91       	ld	r24, X+
    4ed4:	9c 91       	ld	r25, X
    4ed6:	11 97       	sbiw	r26, 0x01	; 1
    4ed8:	28 17       	cp	r18, r24
    4eda:	39 07       	cpc	r19, r25
    4edc:	09 f0       	breq	.+2      	; 0x4ee0 <App_voidSystemLogin+0x7b6>
    4ede:	09 c1       	rjmp	.+530    	; 0x50f2 <App_voidSystemLogin+0x9c8>
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	ed 5b       	subi	r30, 0xBD	; 189
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	aa e7       	ldi	r26, 0x7A	; 122
    4eec:	b4 e4       	ldi	r27, 0x44	; 68
    4eee:	80 83       	st	Z, r24
    4ef0:	91 83       	std	Z+1, r25	; 0x01
    4ef2:	a2 83       	std	Z+2, r26	; 0x02
    4ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ef6:	8e 01       	movw	r16, r28
    4ef8:	01 5c       	subi	r16, 0xC1	; 193
    4efa:	1f 4f       	sbci	r17, 0xFF	; 255
    4efc:	fe 01       	movw	r30, r28
    4efe:	ed 5b       	subi	r30, 0xBD	; 189
    4f00:	ff 4f       	sbci	r31, 0xFF	; 255
    4f02:	60 81       	ld	r22, Z
    4f04:	71 81       	ldd	r23, Z+1	; 0x01
    4f06:	82 81       	ldd	r24, Z+2	; 0x02
    4f08:	93 81       	ldd	r25, Z+3	; 0x03
    4f0a:	20 e0       	ldi	r18, 0x00	; 0
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	4a ef       	ldi	r20, 0xFA	; 250
    4f10:	54 e4       	ldi	r21, 0x44	; 68
    4f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f16:	dc 01       	movw	r26, r24
    4f18:	cb 01       	movw	r24, r22
    4f1a:	f8 01       	movw	r30, r16
    4f1c:	80 83       	st	Z, r24
    4f1e:	91 83       	std	Z+1, r25	; 0x01
    4f20:	a2 83       	std	Z+2, r26	; 0x02
    4f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f24:	fe 01       	movw	r30, r28
    4f26:	ff 96       	adiw	r30, 0x3f	; 63
    4f28:	60 81       	ld	r22, Z
    4f2a:	71 81       	ldd	r23, Z+1	; 0x01
    4f2c:	82 81       	ldd	r24, Z+2	; 0x02
    4f2e:	93 81       	ldd	r25, Z+3	; 0x03
    4f30:	20 e0       	ldi	r18, 0x00	; 0
    4f32:	30 e0       	ldi	r19, 0x00	; 0
    4f34:	40 e8       	ldi	r20, 0x80	; 128
    4f36:	5f e3       	ldi	r21, 0x3F	; 63
    4f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f3c:	88 23       	and	r24, r24
    4f3e:	2c f4       	brge	.+10     	; 0x4f4a <App_voidSystemLogin+0x820>
		__ticks = 1;
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	9e af       	std	Y+62, r25	; 0x3e
    4f46:	8d af       	std	Y+61, r24	; 0x3d
    4f48:	46 c0       	rjmp	.+140    	; 0x4fd6 <App_voidSystemLogin+0x8ac>
	else if (__tmp > 65535)
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	ff 96       	adiw	r30, 0x3f	; 63
    4f4e:	60 81       	ld	r22, Z
    4f50:	71 81       	ldd	r23, Z+1	; 0x01
    4f52:	82 81       	ldd	r24, Z+2	; 0x02
    4f54:	93 81       	ldd	r25, Z+3	; 0x03
    4f56:	20 e0       	ldi	r18, 0x00	; 0
    4f58:	3f ef       	ldi	r19, 0xFF	; 255
    4f5a:	4f e7       	ldi	r20, 0x7F	; 127
    4f5c:	57 e4       	ldi	r21, 0x47	; 71
    4f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f62:	18 16       	cp	r1, r24
    4f64:	64 f5       	brge	.+88     	; 0x4fbe <App_voidSystemLogin+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f66:	fe 01       	movw	r30, r28
    4f68:	ed 5b       	subi	r30, 0xBD	; 189
    4f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6c:	60 81       	ld	r22, Z
    4f6e:	71 81       	ldd	r23, Z+1	; 0x01
    4f70:	82 81       	ldd	r24, Z+2	; 0x02
    4f72:	93 81       	ldd	r25, Z+3	; 0x03
    4f74:	20 e0       	ldi	r18, 0x00	; 0
    4f76:	30 e0       	ldi	r19, 0x00	; 0
    4f78:	40 e2       	ldi	r20, 0x20	; 32
    4f7a:	51 e4       	ldi	r21, 0x41	; 65
    4f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f80:	dc 01       	movw	r26, r24
    4f82:	cb 01       	movw	r24, r22
    4f84:	bc 01       	movw	r22, r24
    4f86:	cd 01       	movw	r24, r26
    4f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f8c:	dc 01       	movw	r26, r24
    4f8e:	cb 01       	movw	r24, r22
    4f90:	9e af       	std	Y+62, r25	; 0x3e
    4f92:	8d af       	std	Y+61, r24	; 0x3d
    4f94:	0f c0       	rjmp	.+30     	; 0x4fb4 <App_voidSystemLogin+0x88a>
    4f96:	88 ec       	ldi	r24, 0xC8	; 200
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	9c af       	std	Y+60, r25	; 0x3c
    4f9c:	8b af       	std	Y+59, r24	; 0x3b
    4f9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4fa0:	9c ad       	ldd	r25, Y+60	; 0x3c
    4fa2:	01 97       	sbiw	r24, 0x01	; 1
    4fa4:	f1 f7       	brne	.-4      	; 0x4fa2 <App_voidSystemLogin+0x878>
    4fa6:	9c af       	std	Y+60, r25	; 0x3c
    4fa8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4faa:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fac:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fae:	01 97       	sbiw	r24, 0x01	; 1
    4fb0:	9e af       	std	Y+62, r25	; 0x3e
    4fb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fb8:	00 97       	sbiw	r24, 0x00	; 0
    4fba:	69 f7       	brne	.-38     	; 0x4f96 <App_voidSystemLogin+0x86c>
    4fbc:	16 c0       	rjmp	.+44     	; 0x4fea <App_voidSystemLogin+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	ff 96       	adiw	r30, 0x3f	; 63
    4fc2:	60 81       	ld	r22, Z
    4fc4:	71 81       	ldd	r23, Z+1	; 0x01
    4fc6:	82 81       	ldd	r24, Z+2	; 0x02
    4fc8:	93 81       	ldd	r25, Z+3	; 0x03
    4fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fce:	dc 01       	movw	r26, r24
    4fd0:	cb 01       	movw	r24, r22
    4fd2:	9e af       	std	Y+62, r25	; 0x3e
    4fd4:	8d af       	std	Y+61, r24	; 0x3d
    4fd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fda:	9a af       	std	Y+58, r25	; 0x3a
    4fdc:	89 af       	std	Y+57, r24	; 0x39
    4fde:	89 ad       	ldd	r24, Y+57	; 0x39
    4fe0:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fe2:	01 97       	sbiw	r24, 0x01	; 1
    4fe4:	f1 f7       	brne	.-4      	; 0x4fe2 <App_voidSystemLogin+0x8b8>
    4fe6:	9a af       	std	Y+58, r25	; 0x3a
    4fe8:	89 af       	std	Y+57, r24	; 0x39
				{
					_delay_ms(1000);

					HCLCD_Vid4Bits_ClearScreen();
    4fea:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Vid4Bits_ClearScreen>

					HCLCD_Vid4Bits_DisplayString("    Welcome ");       /* Welcome Message is Displayed */
    4fee:	89 e9       	ldi	r24, 0x99	; 153
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
					HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,1);
    4ff6:	82 e0       	ldi	r24, 0x02	; 2
    4ff8:	61 e0       	ldi	r22, 0x01	; 1
    4ffa:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <HCLCD_Vid4Bits_SetPosition>
					HCLCD_Vid4Bits_DisplayString("Opening  Door");
    4ffe:	86 ea       	ldi	r24, 0xA6	; 166
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
					Global_u8ServoFlag  = ACTIVE;                       /*  Set Global_u8ServoFlag  = 1  */
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	80 93 11 01 	sts	0x0111, r24
    500c:	80 e0       	ldi	r24, 0x00	; 0
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	aa e7       	ldi	r26, 0x7A	; 122
    5012:	b4 e4       	ldi	r27, 0x44	; 68
    5014:	8d ab       	std	Y+53, r24	; 0x35
    5016:	9e ab       	std	Y+54, r25	; 0x36
    5018:	af ab       	std	Y+55, r26	; 0x37
    501a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    501c:	6d a9       	ldd	r22, Y+53	; 0x35
    501e:	7e a9       	ldd	r23, Y+54	; 0x36
    5020:	8f a9       	ldd	r24, Y+55	; 0x37
    5022:	98 ad       	ldd	r25, Y+56	; 0x38
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	4a ef       	ldi	r20, 0xFA	; 250
    502a:	54 e4       	ldi	r21, 0x44	; 68
    502c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	89 ab       	std	Y+49, r24	; 0x31
    5036:	9a ab       	std	Y+50, r25	; 0x32
    5038:	ab ab       	std	Y+51, r26	; 0x33
    503a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    503c:	69 a9       	ldd	r22, Y+49	; 0x31
    503e:	7a a9       	ldd	r23, Y+50	; 0x32
    5040:	8b a9       	ldd	r24, Y+51	; 0x33
    5042:	9c a9       	ldd	r25, Y+52	; 0x34
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	40 e8       	ldi	r20, 0x80	; 128
    504a:	5f e3       	ldi	r21, 0x3F	; 63
    504c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5050:	88 23       	and	r24, r24
    5052:	2c f4       	brge	.+10     	; 0x505e <App_voidSystemLogin+0x934>
		__ticks = 1;
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	98 ab       	std	Y+48, r25	; 0x30
    505a:	8f a7       	std	Y+47, r24	; 0x2f
    505c:	3f c0       	rjmp	.+126    	; 0x50dc <App_voidSystemLogin+0x9b2>
	else if (__tmp > 65535)
    505e:	69 a9       	ldd	r22, Y+49	; 0x31
    5060:	7a a9       	ldd	r23, Y+50	; 0x32
    5062:	8b a9       	ldd	r24, Y+51	; 0x33
    5064:	9c a9       	ldd	r25, Y+52	; 0x34
    5066:	20 e0       	ldi	r18, 0x00	; 0
    5068:	3f ef       	ldi	r19, 0xFF	; 255
    506a:	4f e7       	ldi	r20, 0x7F	; 127
    506c:	57 e4       	ldi	r21, 0x47	; 71
    506e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5072:	18 16       	cp	r1, r24
    5074:	4c f5       	brge	.+82     	; 0x50c8 <App_voidSystemLogin+0x99e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5076:	6d a9       	ldd	r22, Y+53	; 0x35
    5078:	7e a9       	ldd	r23, Y+54	; 0x36
    507a:	8f a9       	ldd	r24, Y+55	; 0x37
    507c:	98 ad       	ldd	r25, Y+56	; 0x38
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	40 e2       	ldi	r20, 0x20	; 32
    5084:	51 e4       	ldi	r21, 0x41	; 65
    5086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	bc 01       	movw	r22, r24
    5090:	cd 01       	movw	r24, r26
    5092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	98 ab       	std	Y+48, r25	; 0x30
    509c:	8f a7       	std	Y+47, r24	; 0x2f
    509e:	0f c0       	rjmp	.+30     	; 0x50be <App_voidSystemLogin+0x994>
    50a0:	88 ec       	ldi	r24, 0xC8	; 200
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	9e a7       	std	Y+46, r25	; 0x2e
    50a6:	8d a7       	std	Y+45, r24	; 0x2d
    50a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    50aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    50ac:	01 97       	sbiw	r24, 0x01	; 1
    50ae:	f1 f7       	brne	.-4      	; 0x50ac <App_voidSystemLogin+0x982>
    50b0:	9e a7       	std	Y+46, r25	; 0x2e
    50b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    50b6:	98 a9       	ldd	r25, Y+48	; 0x30
    50b8:	01 97       	sbiw	r24, 0x01	; 1
    50ba:	98 ab       	std	Y+48, r25	; 0x30
    50bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50be:	8f a5       	ldd	r24, Y+47	; 0x2f
    50c0:	98 a9       	ldd	r25, Y+48	; 0x30
    50c2:	00 97       	sbiw	r24, 0x00	; 0
    50c4:	69 f7       	brne	.-38     	; 0x50a0 <App_voidSystemLogin+0x976>
    50c6:	98 c1       	rjmp	.+816    	; 0x53f8 <App_voidSystemLogin+0xcce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c8:	69 a9       	ldd	r22, Y+49	; 0x31
    50ca:	7a a9       	ldd	r23, Y+50	; 0x32
    50cc:	8b a9       	ldd	r24, Y+51	; 0x33
    50ce:	9c a9       	ldd	r25, Y+52	; 0x34
    50d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	98 ab       	std	Y+48, r25	; 0x30
    50da:	8f a7       	std	Y+47, r24	; 0x2f
    50dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    50de:	98 a9       	ldd	r25, Y+48	; 0x30
    50e0:	9c a7       	std	Y+44, r25	; 0x2c
    50e2:	8b a7       	std	Y+43, r24	; 0x2b
    50e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    50e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    50e8:	01 97       	sbiw	r24, 0x01	; 1
    50ea:	f1 f7       	brne	.-4      	; 0x50e8 <App_voidSystemLogin+0x9be>
    50ec:	9c a7       	std	Y+44, r25	; 0x2c
    50ee:	8b a7       	std	Y+43, r24	; 0x2b
    50f0:	83 c1       	rjmp	.+774    	; 0x53f8 <App_voidSystemLogin+0xcce>
					break;
				}
				else
				{

					if(Local_u8Counter2 < 2)           /* if a wrong password is entered less than three times */
    50f2:	fe 01       	movw	r30, r28
    50f4:	e7 59       	subi	r30, 0x97	; 151
    50f6:	ff 4f       	sbci	r31, 0xFF	; 255
    50f8:	80 81       	ld	r24, Z
    50fa:	82 30       	cpi	r24, 0x02	; 2
    50fc:	08 f0       	brcs	.+2      	; 0x5100 <App_voidSystemLogin+0x9d6>
    50fe:	8f c0       	rjmp	.+286    	; 0x521e <App_voidSystemLogin+0xaf4>
    5100:	80 e0       	ldi	r24, 0x00	; 0
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	aa e7       	ldi	r26, 0x7A	; 122
    5106:	b4 e4       	ldi	r27, 0x44	; 68
    5108:	8f a3       	std	Y+39, r24	; 0x27
    510a:	98 a7       	std	Y+40, r25	; 0x28
    510c:	a9 a7       	std	Y+41, r26	; 0x29
    510e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5110:	6f a1       	ldd	r22, Y+39	; 0x27
    5112:	78 a5       	ldd	r23, Y+40	; 0x28
    5114:	89 a5       	ldd	r24, Y+41	; 0x29
    5116:	9a a5       	ldd	r25, Y+42	; 0x2a
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	4a ef       	ldi	r20, 0xFA	; 250
    511e:	54 e4       	ldi	r21, 0x44	; 68
    5120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	8b a3       	std	Y+35, r24	; 0x23
    512a:	9c a3       	std	Y+36, r25	; 0x24
    512c:	ad a3       	std	Y+37, r26	; 0x25
    512e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5130:	6b a1       	ldd	r22, Y+35	; 0x23
    5132:	7c a1       	ldd	r23, Y+36	; 0x24
    5134:	8d a1       	ldd	r24, Y+37	; 0x25
    5136:	9e a1       	ldd	r25, Y+38	; 0x26
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	40 e8       	ldi	r20, 0x80	; 128
    513e:	5f e3       	ldi	r21, 0x3F	; 63
    5140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5144:	88 23       	and	r24, r24
    5146:	2c f4       	brge	.+10     	; 0x5152 <App_voidSystemLogin+0xa28>
		__ticks = 1;
    5148:	81 e0       	ldi	r24, 0x01	; 1
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	9a a3       	std	Y+34, r25	; 0x22
    514e:	89 a3       	std	Y+33, r24	; 0x21
    5150:	3f c0       	rjmp	.+126    	; 0x51d0 <App_voidSystemLogin+0xaa6>
	else if (__tmp > 65535)
    5152:	6b a1       	ldd	r22, Y+35	; 0x23
    5154:	7c a1       	ldd	r23, Y+36	; 0x24
    5156:	8d a1       	ldd	r24, Y+37	; 0x25
    5158:	9e a1       	ldd	r25, Y+38	; 0x26
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	3f ef       	ldi	r19, 0xFF	; 255
    515e:	4f e7       	ldi	r20, 0x7F	; 127
    5160:	57 e4       	ldi	r21, 0x47	; 71
    5162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5166:	18 16       	cp	r1, r24
    5168:	4c f5       	brge	.+82     	; 0x51bc <App_voidSystemLogin+0xa92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    516a:	6f a1       	ldd	r22, Y+39	; 0x27
    516c:	78 a5       	ldd	r23, Y+40	; 0x28
    516e:	89 a5       	ldd	r24, Y+41	; 0x29
    5170:	9a a5       	ldd	r25, Y+42	; 0x2a
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	40 e2       	ldi	r20, 0x20	; 32
    5178:	51 e4       	ldi	r21, 0x41	; 65
    517a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    517e:	dc 01       	movw	r26, r24
    5180:	cb 01       	movw	r24, r22
    5182:	bc 01       	movw	r22, r24
    5184:	cd 01       	movw	r24, r26
    5186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    518a:	dc 01       	movw	r26, r24
    518c:	cb 01       	movw	r24, r22
    518e:	9a a3       	std	Y+34, r25	; 0x22
    5190:	89 a3       	std	Y+33, r24	; 0x21
    5192:	0f c0       	rjmp	.+30     	; 0x51b2 <App_voidSystemLogin+0xa88>
    5194:	88 ec       	ldi	r24, 0xC8	; 200
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	98 a3       	std	Y+32, r25	; 0x20
    519a:	8f 8f       	std	Y+31, r24	; 0x1f
    519c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    519e:	98 a1       	ldd	r25, Y+32	; 0x20
    51a0:	01 97       	sbiw	r24, 0x01	; 1
    51a2:	f1 f7       	brne	.-4      	; 0x51a0 <App_voidSystemLogin+0xa76>
    51a4:	98 a3       	std	Y+32, r25	; 0x20
    51a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51a8:	89 a1       	ldd	r24, Y+33	; 0x21
    51aa:	9a a1       	ldd	r25, Y+34	; 0x22
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	9a a3       	std	Y+34, r25	; 0x22
    51b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51b2:	89 a1       	ldd	r24, Y+33	; 0x21
    51b4:	9a a1       	ldd	r25, Y+34	; 0x22
    51b6:	00 97       	sbiw	r24, 0x00	; 0
    51b8:	69 f7       	brne	.-38     	; 0x5194 <App_voidSystemLogin+0xa6a>
    51ba:	14 c0       	rjmp	.+40     	; 0x51e4 <App_voidSystemLogin+0xaba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51bc:	6b a1       	ldd	r22, Y+35	; 0x23
    51be:	7c a1       	ldd	r23, Y+36	; 0x24
    51c0:	8d a1       	ldd	r24, Y+37	; 0x25
    51c2:	9e a1       	ldd	r25, Y+38	; 0x26
    51c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51c8:	dc 01       	movw	r26, r24
    51ca:	cb 01       	movw	r24, r22
    51cc:	9a a3       	std	Y+34, r25	; 0x22
    51ce:	89 a3       	std	Y+33, r24	; 0x21
    51d0:	89 a1       	ldd	r24, Y+33	; 0x21
    51d2:	9a a1       	ldd	r25, Y+34	; 0x22
    51d4:	9e 8f       	std	Y+30, r25	; 0x1e
    51d6:	8d 8f       	std	Y+29, r24	; 0x1d
    51d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51dc:	01 97       	sbiw	r24, 0x01	; 1
    51de:	f1 f7       	brne	.-4      	; 0x51dc <App_voidSystemLogin+0xab2>
    51e0:	9e 8f       	std	Y+30, r25	; 0x1e
    51e2:	8d 8f       	std	Y+29, r24	; 0x1d
					{
						_delay_ms(1000);
						HCLCD_Vid4Bits_ClearScreen();
    51e4:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Vid4Bits_ClearScreen>
						HCLCD_Vid4Bits_DisplayString("  Try Again ");
    51e8:	84 eb       	ldi	r24, 0xB4	; 180
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
						Local_u8Counter = 0 ;
    51f0:	fe 01       	movw	r30, r28
    51f2:	e6 59       	subi	r30, 0x96	; 150
    51f4:	ff 4f       	sbci	r31, 0xFF	; 255
    51f6:	10 82       	st	Z, r1
						Local_Num1=0;
    51f8:	fe 01       	movw	r30, r28
    51fa:	eb 59       	subi	r30, 0x9B	; 155
    51fc:	ff 4f       	sbci	r31, 0xFF	; 255
    51fe:	11 82       	std	Z+1, r1	; 0x01
    5200:	10 82       	st	Z, r1
						Local_u8Counter2++;
    5202:	de 01       	movw	r26, r28
    5204:	a7 59       	subi	r26, 0x97	; 151
    5206:	bf 4f       	sbci	r27, 0xFF	; 255
    5208:	fe 01       	movw	r30, r28
    520a:	e7 59       	subi	r30, 0x97	; 151
    520c:	ff 4f       	sbci	r31, 0xFF	; 255
    520e:	80 81       	ld	r24, Z
    5210:	8f 5f       	subi	r24, 0xFF	; 255
    5212:	8c 93       	st	X, r24
						HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,4);
    5214:	82 e0       	ldi	r24, 0x02	; 2
    5216:	64 e0       	ldi	r22, 0x04	; 4
    5218:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <HCLCD_Vid4Bits_SetPosition>
    521c:	bb ca       	rjmp	.-2698   	; 0x4794 <App_voidSystemLogin+0x6a>
    521e:	80 e0       	ldi	r24, 0x00	; 0
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	aa e7       	ldi	r26, 0x7A	; 122
    5224:	b4 e4       	ldi	r27, 0x44	; 68
    5226:	89 8f       	std	Y+25, r24	; 0x19
    5228:	9a 8f       	std	Y+26, r25	; 0x1a
    522a:	ab 8f       	std	Y+27, r26	; 0x1b
    522c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    522e:	69 8d       	ldd	r22, Y+25	; 0x19
    5230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5236:	20 e0       	ldi	r18, 0x00	; 0
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	4a ef       	ldi	r20, 0xFA	; 250
    523c:	54 e4       	ldi	r21, 0x44	; 68
    523e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5242:	dc 01       	movw	r26, r24
    5244:	cb 01       	movw	r24, r22
    5246:	8d 8b       	std	Y+21, r24	; 0x15
    5248:	9e 8b       	std	Y+22, r25	; 0x16
    524a:	af 8b       	std	Y+23, r26	; 0x17
    524c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    524e:	6d 89       	ldd	r22, Y+21	; 0x15
    5250:	7e 89       	ldd	r23, Y+22	; 0x16
    5252:	8f 89       	ldd	r24, Y+23	; 0x17
    5254:	98 8d       	ldd	r25, Y+24	; 0x18
    5256:	20 e0       	ldi	r18, 0x00	; 0
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	40 e8       	ldi	r20, 0x80	; 128
    525c:	5f e3       	ldi	r21, 0x3F	; 63
    525e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5262:	88 23       	and	r24, r24
    5264:	2c f4       	brge	.+10     	; 0x5270 <App_voidSystemLogin+0xb46>
		__ticks = 1;
    5266:	81 e0       	ldi	r24, 0x01	; 1
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	9c 8b       	std	Y+20, r25	; 0x14
    526c:	8b 8b       	std	Y+19, r24	; 0x13
    526e:	3f c0       	rjmp	.+126    	; 0x52ee <App_voidSystemLogin+0xbc4>
	else if (__tmp > 65535)
    5270:	6d 89       	ldd	r22, Y+21	; 0x15
    5272:	7e 89       	ldd	r23, Y+22	; 0x16
    5274:	8f 89       	ldd	r24, Y+23	; 0x17
    5276:	98 8d       	ldd	r25, Y+24	; 0x18
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	3f ef       	ldi	r19, 0xFF	; 255
    527c:	4f e7       	ldi	r20, 0x7F	; 127
    527e:	57 e4       	ldi	r21, 0x47	; 71
    5280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5284:	18 16       	cp	r1, r24
    5286:	4c f5       	brge	.+82     	; 0x52da <App_voidSystemLogin+0xbb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5288:	69 8d       	ldd	r22, Y+25	; 0x19
    528a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    528c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    528e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5290:	20 e0       	ldi	r18, 0x00	; 0
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	40 e2       	ldi	r20, 0x20	; 32
    5296:	51 e4       	ldi	r21, 0x41	; 65
    5298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    529c:	dc 01       	movw	r26, r24
    529e:	cb 01       	movw	r24, r22
    52a0:	bc 01       	movw	r22, r24
    52a2:	cd 01       	movw	r24, r26
    52a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a8:	dc 01       	movw	r26, r24
    52aa:	cb 01       	movw	r24, r22
    52ac:	9c 8b       	std	Y+20, r25	; 0x14
    52ae:	8b 8b       	std	Y+19, r24	; 0x13
    52b0:	0f c0       	rjmp	.+30     	; 0x52d0 <App_voidSystemLogin+0xba6>
    52b2:	88 ec       	ldi	r24, 0xC8	; 200
    52b4:	90 e0       	ldi	r25, 0x00	; 0
    52b6:	9a 8b       	std	Y+18, r25	; 0x12
    52b8:	89 8b       	std	Y+17, r24	; 0x11
    52ba:	89 89       	ldd	r24, Y+17	; 0x11
    52bc:	9a 89       	ldd	r25, Y+18	; 0x12
    52be:	01 97       	sbiw	r24, 0x01	; 1
    52c0:	f1 f7       	brne	.-4      	; 0x52be <App_voidSystemLogin+0xb94>
    52c2:	9a 8b       	std	Y+18, r25	; 0x12
    52c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52c6:	8b 89       	ldd	r24, Y+19	; 0x13
    52c8:	9c 89       	ldd	r25, Y+20	; 0x14
    52ca:	01 97       	sbiw	r24, 0x01	; 1
    52cc:	9c 8b       	std	Y+20, r25	; 0x14
    52ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d0:	8b 89       	ldd	r24, Y+19	; 0x13
    52d2:	9c 89       	ldd	r25, Y+20	; 0x14
    52d4:	00 97       	sbiw	r24, 0x00	; 0
    52d6:	69 f7       	brne	.-38     	; 0x52b2 <App_voidSystemLogin+0xb88>
    52d8:	14 c0       	rjmp	.+40     	; 0x5302 <App_voidSystemLogin+0xbd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52da:	6d 89       	ldd	r22, Y+21	; 0x15
    52dc:	7e 89       	ldd	r23, Y+22	; 0x16
    52de:	8f 89       	ldd	r24, Y+23	; 0x17
    52e0:	98 8d       	ldd	r25, Y+24	; 0x18
    52e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e6:	dc 01       	movw	r26, r24
    52e8:	cb 01       	movw	r24, r22
    52ea:	9c 8b       	std	Y+20, r25	; 0x14
    52ec:	8b 8b       	std	Y+19, r24	; 0x13
    52ee:	8b 89       	ldd	r24, Y+19	; 0x13
    52f0:	9c 89       	ldd	r25, Y+20	; 0x14
    52f2:	98 8b       	std	Y+16, r25	; 0x10
    52f4:	8f 87       	std	Y+15, r24	; 0x0f
    52f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    52f8:	98 89       	ldd	r25, Y+16	; 0x10
    52fa:	01 97       	sbiw	r24, 0x01	; 1
    52fc:	f1 f7       	brne	.-4      	; 0x52fa <App_voidSystemLogin+0xbd0>
    52fe:	98 8b       	std	Y+16, r25	; 0x10
    5300:	8f 87       	std	Y+15, r24	; 0x0f

					}
					else                                   /* if Password is entered 3 times Wrong */
					{
						_delay_ms(1000);
						HCLCD_Vid4Bits_ClearScreen();
    5302:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Vid4Bits_ClearScreen>
						HCLCD_Vid4Bits_DisplayString(" Out of tries !");
    5306:	81 ec       	ldi	r24, 0xC1	; 193
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
						Global_u8BuzzerFlag  = ACTIVE;     /* Set Global_u8BuzzerFlag  = 1 */
    530e:	81 e0       	ldi	r24, 0x01	; 1
    5310:	80 93 10 01 	sts	0x0110, r24
    5314:	80 e0       	ldi	r24, 0x00	; 0
    5316:	90 e8       	ldi	r25, 0x80	; 128
    5318:	ab e3       	ldi	r26, 0x3B	; 59
    531a:	b5 e4       	ldi	r27, 0x45	; 69
    531c:	8b 87       	std	Y+11, r24	; 0x0b
    531e:	9c 87       	std	Y+12, r25	; 0x0c
    5320:	ad 87       	std	Y+13, r26	; 0x0d
    5322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5324:	6b 85       	ldd	r22, Y+11	; 0x0b
    5326:	7c 85       	ldd	r23, Y+12	; 0x0c
    5328:	8d 85       	ldd	r24, Y+13	; 0x0d
    532a:	9e 85       	ldd	r25, Y+14	; 0x0e
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	4a ef       	ldi	r20, 0xFA	; 250
    5332:	54 e4       	ldi	r21, 0x44	; 68
    5334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5338:	dc 01       	movw	r26, r24
    533a:	cb 01       	movw	r24, r22
    533c:	8f 83       	std	Y+7, r24	; 0x07
    533e:	98 87       	std	Y+8, r25	; 0x08
    5340:	a9 87       	std	Y+9, r26	; 0x09
    5342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5344:	6f 81       	ldd	r22, Y+7	; 0x07
    5346:	78 85       	ldd	r23, Y+8	; 0x08
    5348:	89 85       	ldd	r24, Y+9	; 0x09
    534a:	9a 85       	ldd	r25, Y+10	; 0x0a
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	40 e8       	ldi	r20, 0x80	; 128
    5352:	5f e3       	ldi	r21, 0x3F	; 63
    5354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5358:	88 23       	and	r24, r24
    535a:	2c f4       	brge	.+10     	; 0x5366 <App_voidSystemLogin+0xc3c>
		__ticks = 1;
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	9e 83       	std	Y+6, r25	; 0x06
    5362:	8d 83       	std	Y+5, r24	; 0x05
    5364:	3f c0       	rjmp	.+126    	; 0x53e4 <App_voidSystemLogin+0xcba>
	else if (__tmp > 65535)
    5366:	6f 81       	ldd	r22, Y+7	; 0x07
    5368:	78 85       	ldd	r23, Y+8	; 0x08
    536a:	89 85       	ldd	r24, Y+9	; 0x09
    536c:	9a 85       	ldd	r25, Y+10	; 0x0a
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	3f ef       	ldi	r19, 0xFF	; 255
    5372:	4f e7       	ldi	r20, 0x7F	; 127
    5374:	57 e4       	ldi	r21, 0x47	; 71
    5376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    537a:	18 16       	cp	r1, r24
    537c:	4c f5       	brge	.+82     	; 0x53d0 <App_voidSystemLogin+0xca6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    537e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5380:	7c 85       	ldd	r23, Y+12	; 0x0c
    5382:	8d 85       	ldd	r24, Y+13	; 0x0d
    5384:	9e 85       	ldd	r25, Y+14	; 0x0e
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	40 e2       	ldi	r20, 0x20	; 32
    538c:	51 e4       	ldi	r21, 0x41	; 65
    538e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5392:	dc 01       	movw	r26, r24
    5394:	cb 01       	movw	r24, r22
    5396:	bc 01       	movw	r22, r24
    5398:	cd 01       	movw	r24, r26
    539a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	9e 83       	std	Y+6, r25	; 0x06
    53a4:	8d 83       	std	Y+5, r24	; 0x05
    53a6:	0f c0       	rjmp	.+30     	; 0x53c6 <App_voidSystemLogin+0xc9c>
    53a8:	88 ec       	ldi	r24, 0xC8	; 200
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	9c 83       	std	Y+4, r25	; 0x04
    53ae:	8b 83       	std	Y+3, r24	; 0x03
    53b0:	8b 81       	ldd	r24, Y+3	; 0x03
    53b2:	9c 81       	ldd	r25, Y+4	; 0x04
    53b4:	01 97       	sbiw	r24, 0x01	; 1
    53b6:	f1 f7       	brne	.-4      	; 0x53b4 <App_voidSystemLogin+0xc8a>
    53b8:	9c 83       	std	Y+4, r25	; 0x04
    53ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53bc:	8d 81       	ldd	r24, Y+5	; 0x05
    53be:	9e 81       	ldd	r25, Y+6	; 0x06
    53c0:	01 97       	sbiw	r24, 0x01	; 1
    53c2:	9e 83       	std	Y+6, r25	; 0x06
    53c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53c6:	8d 81       	ldd	r24, Y+5	; 0x05
    53c8:	9e 81       	ldd	r25, Y+6	; 0x06
    53ca:	00 97       	sbiw	r24, 0x00	; 0
    53cc:	69 f7       	brne	.-38     	; 0x53a8 <App_voidSystemLogin+0xc7e>
    53ce:	14 c0       	rjmp	.+40     	; 0x53f8 <App_voidSystemLogin+0xcce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53d0:	6f 81       	ldd	r22, Y+7	; 0x07
    53d2:	78 85       	ldd	r23, Y+8	; 0x08
    53d4:	89 85       	ldd	r24, Y+9	; 0x09
    53d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53dc:	dc 01       	movw	r26, r24
    53de:	cb 01       	movw	r24, r22
    53e0:	9e 83       	std	Y+6, r25	; 0x06
    53e2:	8d 83       	std	Y+5, r24	; 0x05
    53e4:	8d 81       	ldd	r24, Y+5	; 0x05
    53e6:	9e 81       	ldd	r25, Y+6	; 0x06
    53e8:	9a 83       	std	Y+2, r25	; 0x02
    53ea:	89 83       	std	Y+1, r24	; 0x01
    53ec:	89 81       	ldd	r24, Y+1	; 0x01
    53ee:	9a 81       	ldd	r25, Y+2	; 0x02
    53f0:	01 97       	sbiw	r24, 0x01	; 1
    53f2:	f1 f7       	brne	.-4      	; 0x53f0 <App_voidSystemLogin+0xcc6>
    53f4:	9a 83       	std	Y+2, r25	; 0x02
    53f6:	89 83       	std	Y+1, r24	; 0x01

			}

		}
	}
}
    53f8:	c3 59       	subi	r28, 0x93	; 147
    53fa:	df 4f       	sbci	r29, 0xFF	; 255
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	f8 94       	cli
    5400:	de bf       	out	0x3e, r29	; 62
    5402:	0f be       	out	0x3f, r0	; 63
    5404:	cd bf       	out	0x3d, r28	; 61
    5406:	cf 91       	pop	r28
    5408:	df 91       	pop	r29
    540a:	1f 91       	pop	r17
    540c:	0f 91       	pop	r16
    540e:	08 95       	ret

00005410 <APP_voidFanControl>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void APP_voidFanControl(void)
{
    5410:	df 93       	push	r29
    5412:	cf 93       	push	r28
    5414:	cd b7       	in	r28, 0x3d	; 61
    5416:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_VidSetCTCValue(Global_u8MotorSpeed) ;
    5418:	80 91 0f 01 	lds	r24, 0x010F
    541c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <MTIMER0_VidSetCTCValue>
}
    5420:	cf 91       	pop	r28
    5422:	df 91       	pop	r29
    5424:	08 95       	ret

00005426 <APP_voidLightControl>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void APP_voidLightControl(void)
{
    5426:	df 93       	push	r29
    5428:	cf 93       	push	r28
    542a:	00 d0       	rcall	.+0      	; 0x542c <APP_voidLightControl+0x6>
    542c:	cd b7       	in	r28, 0x3d	; 61
    542e:	de b7       	in	r29, 0x3e	; 62
	/*Set Algorithm*/
	switch(Global_u8LedsNumber)
    5430:	80 91 fb 00 	lds	r24, 0x00FB
    5434:	28 2f       	mov	r18, r24
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	3a 83       	std	Y+2, r19	; 0x02
    543a:	29 83       	std	Y+1, r18	; 0x01
    543c:	89 81       	ldd	r24, Y+1	; 0x01
    543e:	9a 81       	ldd	r25, Y+2	; 0x02
    5440:	83 30       	cpi	r24, 0x03	; 3
    5442:	91 05       	cpc	r25, r1
    5444:	09 f4       	brne	.+2      	; 0x5448 <APP_voidLightControl+0x22>
    5446:	47 c0       	rjmp	.+142    	; 0x54d6 <APP_voidLightControl+0xb0>
    5448:	29 81       	ldd	r18, Y+1	; 0x01
    544a:	3a 81       	ldd	r19, Y+2	; 0x02
    544c:	24 30       	cpi	r18, 0x04	; 4
    544e:	31 05       	cpc	r19, r1
    5450:	5c f4       	brge	.+22     	; 0x5468 <APP_voidLightControl+0x42>
    5452:	89 81       	ldd	r24, Y+1	; 0x01
    5454:	9a 81       	ldd	r25, Y+2	; 0x02
    5456:	81 30       	cpi	r24, 0x01	; 1
    5458:	91 05       	cpc	r25, r1
    545a:	99 f0       	breq	.+38     	; 0x5482 <APP_voidLightControl+0x5c>
    545c:	29 81       	ldd	r18, Y+1	; 0x01
    545e:	3a 81       	ldd	r19, Y+2	; 0x02
    5460:	22 30       	cpi	r18, 0x02	; 2
    5462:	31 05       	cpc	r19, r1
    5464:	19 f1       	breq	.+70     	; 0x54ac <APP_voidLightControl+0x86>
    5466:	75 c0       	rjmp	.+234    	; 0x5552 <APP_voidLightControl+0x12c>
    5468:	89 81       	ldd	r24, Y+1	; 0x01
    546a:	9a 81       	ldd	r25, Y+2	; 0x02
    546c:	84 30       	cpi	r24, 0x04	; 4
    546e:	91 05       	cpc	r25, r1
    5470:	09 f4       	brne	.+2      	; 0x5474 <APP_voidLightControl+0x4e>
    5472:	46 c0       	rjmp	.+140    	; 0x5500 <APP_voidLightControl+0xda>
    5474:	29 81       	ldd	r18, Y+1	; 0x01
    5476:	3a 81       	ldd	r19, Y+2	; 0x02
    5478:	25 30       	cpi	r18, 0x05	; 5
    547a:	31 05       	cpc	r19, r1
    547c:	09 f4       	brne	.+2      	; 0x5480 <APP_voidLightControl+0x5a>
    547e:	55 c0       	rjmp	.+170    	; 0x552a <APP_voidLightControl+0x104>
    5480:	68 c0       	rjmp	.+208    	; 0x5552 <APP_voidLightControl+0x12c>
	{
	case ONE_LED:
		HLED_VidLed_On(&LOC_SturctLED_1);
    5482:	8d e0       	ldi	r24, 0x0D	; 13
    5484:	91 e0       	ldi	r25, 0x01	; 1
    5486:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_Off(&LOC_SturctLED_2);
    548a:	83 ef       	ldi	r24, 0xF3	; 243
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
		HLED_VidLed_Off(&LOC_SturctLED_3);
    5492:	85 ef       	ldi	r24, 0xF5	; 245
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
		HLED_VidLed_Off(&LOC_SturctLED_4);
    549a:	87 ef       	ldi	r24, 0xF7	; 247
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
		HLED_VidLed_Off(&LOC_SturctLED_5);
    54a2:	89 ef       	ldi	r24, 0xF9	; 249
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
    54aa:	53 c0       	rjmp	.+166    	; 0x5552 <APP_voidLightControl+0x12c>
		break ;
	case TWO_LED:
		HLED_VidLed_On(&LOC_SturctLED_1);
    54ac:	8d e0       	ldi	r24, 0x0D	; 13
    54ae:	91 e0       	ldi	r25, 0x01	; 1
    54b0:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_2);
    54b4:	83 ef       	ldi	r24, 0xF3	; 243
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_Off(&LOC_SturctLED_3);
    54bc:	85 ef       	ldi	r24, 0xF5	; 245
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
		HLED_VidLed_Off(&LOC_SturctLED_4);
    54c4:	87 ef       	ldi	r24, 0xF7	; 247
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
		HLED_VidLed_Off(&LOC_SturctLED_5);
    54cc:	89 ef       	ldi	r24, 0xF9	; 249
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
    54d4:	3e c0       	rjmp	.+124    	; 0x5552 <APP_voidLightControl+0x12c>
		break ;
	case THREE_LED:
		HLED_VidLed_On(&LOC_SturctLED_1);
    54d6:	8d e0       	ldi	r24, 0x0D	; 13
    54d8:	91 e0       	ldi	r25, 0x01	; 1
    54da:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_2);
    54de:	83 ef       	ldi	r24, 0xF3	; 243
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_3);
    54e6:	85 ef       	ldi	r24, 0xF5	; 245
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_Off(&LOC_SturctLED_4);
    54ee:	87 ef       	ldi	r24, 0xF7	; 247
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
		HLED_VidLed_Off(&LOC_SturctLED_5);
    54f6:	89 ef       	ldi	r24, 0xF9	; 249
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
    54fe:	29 c0       	rjmp	.+82     	; 0x5552 <APP_voidLightControl+0x12c>
		break ;
	case FOUR_LED:
		HLED_VidLed_On(&LOC_SturctLED_1);
    5500:	8d e0       	ldi	r24, 0x0D	; 13
    5502:	91 e0       	ldi	r25, 0x01	; 1
    5504:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_2);
    5508:	83 ef       	ldi	r24, 0xF3	; 243
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_3);
    5510:	85 ef       	ldi	r24, 0xF5	; 245
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_4);
    5518:	87 ef       	ldi	r24, 0xF7	; 247
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_Off(&LOC_SturctLED_5);
    5520:	89 ef       	ldi	r24, 0xF9	; 249
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	0e 94 4d 11 	call	0x229a	; 0x229a <HLED_VidLed_Off>
    5528:	14 c0       	rjmp	.+40     	; 0x5552 <APP_voidLightControl+0x12c>
		break ;
	case FIVE_LED:
		HLED_VidLed_On(&LOC_SturctLED_1);
    552a:	8d e0       	ldi	r24, 0x0D	; 13
    552c:	91 e0       	ldi	r25, 0x01	; 1
    552e:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_2);
    5532:	83 ef       	ldi	r24, 0xF3	; 243
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_3);
    553a:	85 ef       	ldi	r24, 0xF5	; 245
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_4);
    5542:	87 ef       	ldi	r24, 0xF7	; 247
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		HLED_VidLed_On(&LOC_SturctLED_5);
    554a:	89 ef       	ldi	r24, 0xF9	; 249
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	0e 94 37 11 	call	0x226e	; 0x226e <HLED_VidLed_On>
		break ;
	default:
		/* Do Nothing */
		break;
	}
}
    5552:	0f 90       	pop	r0
    5554:	0f 90       	pop	r0
    5556:	cf 91       	pop	r28
    5558:	df 91       	pop	r29
    555a:	08 95       	ret

0000555c <App_voidCheckTempretuare>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void App_voidCheckTempretuare(s8 Copy_s8Temperature)
{
    555c:	df 93       	push	r29
    555e:	cf 93       	push	r28
    5560:	0f 92       	push	r0
    5562:	cd b7       	in	r28, 0x3d	; 61
    5564:	de b7       	in	r29, 0x3e	; 62
    5566:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_s8Temperature>40)
    5568:	89 81       	ldd	r24, Y+1	; 0x01
    556a:	89 32       	cpi	r24, 0x29	; 41
    556c:	24 f0       	brlt	.+8      	; 0x5576 <App_voidCheckTempretuare+0x1a>
	{
		Global_u8MotorSpeed = 255 ;           // Full speed
    556e:	8f ef       	ldi	r24, 0xFF	; 255
    5570:	80 93 0f 01 	sts	0x010F, r24
    5574:	20 c0       	rjmp	.+64     	; 0x55b6 <App_voidCheckTempretuare+0x5a>
	}
	else if(Copy_s8Temperature<=40 && Copy_s8Temperature>30)
    5576:	89 81       	ldd	r24, Y+1	; 0x01
    5578:	89 32       	cpi	r24, 0x29	; 41
    557a:	3c f4       	brge	.+14     	; 0x558a <App_voidCheckTempretuare+0x2e>
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	8f 31       	cpi	r24, 0x1F	; 31
    5580:	24 f0       	brlt	.+8      	; 0x558a <App_voidCheckTempretuare+0x2e>
	{
		Global_u8MotorSpeed = 191 ;           //  Speed is 75%
    5582:	8f eb       	ldi	r24, 0xBF	; 191
    5584:	80 93 0f 01 	sts	0x010F, r24
    5588:	16 c0       	rjmp	.+44     	; 0x55b6 <App_voidCheckTempretuare+0x5a>
	}
	else if(Copy_s8Temperature<=30 && Copy_s8Temperature>25)
    558a:	89 81       	ldd	r24, Y+1	; 0x01
    558c:	8f 31       	cpi	r24, 0x1F	; 31
    558e:	3c f4       	brge	.+14     	; 0x559e <App_voidCheckTempretuare+0x42>
    5590:	89 81       	ldd	r24, Y+1	; 0x01
    5592:	8a 31       	cpi	r24, 0x1A	; 26
    5594:	24 f0       	brlt	.+8      	; 0x559e <App_voidCheckTempretuare+0x42>
	{
		Global_u8MotorSpeed = 127 ;           //  Speed is 50%
    5596:	8f e7       	ldi	r24, 0x7F	; 127
    5598:	80 93 0f 01 	sts	0x010F, r24
    559c:	0c c0       	rjmp	.+24     	; 0x55b6 <App_voidCheckTempretuare+0x5a>
	}
	else if(Copy_s8Temperature<=25 && Copy_s8Temperature>20)
    559e:	89 81       	ldd	r24, Y+1	; 0x01
    55a0:	8a 31       	cpi	r24, 0x1A	; 26
    55a2:	3c f4       	brge	.+14     	; 0x55b2 <App_voidCheckTempretuare+0x56>
    55a4:	89 81       	ldd	r24, Y+1	; 0x01
    55a6:	85 31       	cpi	r24, 0x15	; 21
    55a8:	24 f0       	brlt	.+8      	; 0x55b2 <App_voidCheckTempretuare+0x56>
	{
		Global_u8MotorSpeed = 64 ;            //  Speed is 25%
    55aa:	80 e4       	ldi	r24, 0x40	; 64
    55ac:	80 93 0f 01 	sts	0x010F, r24
    55b0:	02 c0       	rjmp	.+4      	; 0x55b6 <App_voidCheckTempretuare+0x5a>
	}
	else
	{
		Global_u8MotorSpeed = 0 ;             //  Speed is 0 %
    55b2:	10 92 0f 01 	sts	0x010F, r1
	}
}
    55b6:	0f 90       	pop	r0
    55b8:	cf 91       	pop	r28
    55ba:	df 91       	pop	r29
    55bc:	08 95       	ret

000055be <App_voidCheckLightIntensity>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void App_voidCheckLightIntensity(u8 Copy_u8LightIntenisity)
{
    55be:	df 93       	push	r29
    55c0:	cf 93       	push	r28
    55c2:	0f 92       	push	r0
    55c4:	cd b7       	in	r28, 0x3d	; 61
    55c6:	de b7       	in	r29, 0x3e	; 62
    55c8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8LightIntenisity<= 100     && Copy_u8LightIntenisity> 85)
    55ca:	89 81       	ldd	r24, Y+1	; 0x01
    55cc:	85 36       	cpi	r24, 0x65	; 101
    55ce:	38 f4       	brcc	.+14     	; 0x55de <App_voidCheckLightIntensity+0x20>
    55d0:	89 81       	ldd	r24, Y+1	; 0x01
    55d2:	86 35       	cpi	r24, 0x56	; 86
    55d4:	20 f0       	brcs	.+8      	; 0x55de <App_voidCheckLightIntensity+0x20>
	{
		Global_u8LedsNumber = 1 ;
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	80 93 fb 00 	sts	0x00FB, r24
    55dc:	21 c0       	rjmp	.+66     	; 0x5620 <App_voidCheckLightIntensity+0x62>
	}
	else if(Copy_u8LightIntenisity<= 85 && Copy_u8LightIntenisity> 65)
    55de:	89 81       	ldd	r24, Y+1	; 0x01
    55e0:	86 35       	cpi	r24, 0x56	; 86
    55e2:	38 f4       	brcc	.+14     	; 0x55f2 <App_voidCheckLightIntensity+0x34>
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
    55e6:	82 34       	cpi	r24, 0x42	; 66
    55e8:	20 f0       	brcs	.+8      	; 0x55f2 <App_voidCheckLightIntensity+0x34>
	{
		Global_u8LedsNumber = 2 ;
    55ea:	82 e0       	ldi	r24, 0x02	; 2
    55ec:	80 93 fb 00 	sts	0x00FB, r24
    55f0:	17 c0       	rjmp	.+46     	; 0x5620 <App_voidCheckLightIntensity+0x62>
	}
	else if(Copy_u8LightIntenisity<= 65 && Copy_u8LightIntenisity> 45)
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	82 34       	cpi	r24, 0x42	; 66
    55f6:	38 f4       	brcc	.+14     	; 0x5606 <App_voidCheckLightIntensity+0x48>
    55f8:	89 81       	ldd	r24, Y+1	; 0x01
    55fa:	8e 32       	cpi	r24, 0x2E	; 46
    55fc:	20 f0       	brcs	.+8      	; 0x5606 <App_voidCheckLightIntensity+0x48>
	{
		Global_u8LedsNumber = 3 ;
    55fe:	83 e0       	ldi	r24, 0x03	; 3
    5600:	80 93 fb 00 	sts	0x00FB, r24
    5604:	0d c0       	rjmp	.+26     	; 0x5620 <App_voidCheckLightIntensity+0x62>
	}
	else if(Copy_u8LightIntenisity<= 45 && Copy_u8LightIntenisity> 25)
    5606:	89 81       	ldd	r24, Y+1	; 0x01
    5608:	8e 32       	cpi	r24, 0x2E	; 46
    560a:	38 f4       	brcc	.+14     	; 0x561a <App_voidCheckLightIntensity+0x5c>
    560c:	89 81       	ldd	r24, Y+1	; 0x01
    560e:	8a 31       	cpi	r24, 0x1A	; 26
    5610:	20 f0       	brcs	.+8      	; 0x561a <App_voidCheckLightIntensity+0x5c>
	{
		Global_u8LedsNumber = 4 ;
    5612:	84 e0       	ldi	r24, 0x04	; 4
    5614:	80 93 fb 00 	sts	0x00FB, r24
    5618:	03 c0       	rjmp	.+6      	; 0x5620 <App_voidCheckLightIntensity+0x62>
	}
	else
	{
		Global_u8LedsNumber = 5 ;             //  Speed is 0 %
    561a:	85 e0       	ldi	r24, 0x05	; 5
    561c:	80 93 fb 00 	sts	0x00FB, r24
	}
}
    5620:	0f 90       	pop	r0
    5622:	cf 91       	pop	r28
    5624:	df 91       	pop	r29
    5626:	08 95       	ret

00005628 <APP_voidDisplayTemperature>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void APP_voidDisplayTemperature(void)
{
    5628:	df 93       	push	r29
    562a:	cf 93       	push	r28
    562c:	cd b7       	in	r28, 0x3d	; 61
    562e:	de b7       	in	r29, 0x3e	; 62
/*******************************************************************************************************/
/*                                          Display Temperature                                            */
/*******************************************************************************************************/

	App_voidReadTemp();                                 /* Function That Calculates Temperature */
    5630:	0e 94 29 23 	call	0x4652	; 0x4652 <App_voidReadTemp>
	HCLCD_Vid4Bits_ClearScreen();
    5634:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Vid4Bits_ClearScreen>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE1,1);          /*  Position of Temperature on LCD first row */
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	61 e0       	ldi	r22, 0x01	; 1
    563c:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayString("Temp = ");
    5640:	81 ed       	ldi	r24, 0xD1	; 209
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
	HCLCD_Vid4Bits_DisplayNumber(Global_u8Temerature);
    5648:	80 91 12 01 	lds	r24, 0x0112
    564c:	88 2f       	mov	r24, r24
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	a0 e0       	ldi	r26, 0x00	; 0
    5652:	b0 e0       	ldi	r27, 0x00	; 0
    5654:	bc 01       	movw	r22, r24
    5656:	cd 01       	movw	r24, r26
    5658:	0e 94 75 1e 	call	0x3cea	; 0x3cea <HCLCD_Vid4Bits_DisplayNumber>
	HCLCD_Vid4Bits_DisplayString(".");
    565c:	89 ed       	ldi	r24, 0xD9	; 217
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
	HCLCD_Vid4Bits_DisplayNumber(Global_u8Temerature_dec);
    5664:	80 91 13 01 	lds	r24, 0x0113
    5668:	88 2f       	mov	r24, r24
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	a0 e0       	ldi	r26, 0x00	; 0
    566e:	b0 e0       	ldi	r27, 0x00	; 0
    5670:	bc 01       	movw	r22, r24
    5672:	cd 01       	movw	r24, r26
    5674:	0e 94 75 1e 	call	0x3cea	; 0x3cea <HCLCD_Vid4Bits_DisplayNumber>
	HCLCD_Vid4Bits_DisplayString(" C");
    5678:	8b ed       	ldi	r24, 0xDB	; 219
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>

	App_voidCheckTempretuare(Global_u8Temerature);
    5680:	80 91 12 01 	lds	r24, 0x0112
    5684:	0e 94 ae 2a 	call	0x555c	; 0x555c <App_voidCheckTempretuare>
}
    5688:	cf 91       	pop	r28
    568a:	df 91       	pop	r29
    568c:	08 95       	ret

0000568e <APP_voidDisplayLightIntensity>:
/*-----------------------------------------------------------------------------------------------------*/
/*Notes:                                                                                               */
/*******************************************************************************************************/

void APP_voidDisplayLightIntensity(void)
{
    568e:	df 93       	push	r29
    5690:	cf 93       	push	r28
    5692:	cd b7       	in	r28, 0x3d	; 61
    5694:	de b7       	in	r29, 0x3e	; 62
/*******************************************************************************************************/
/*                                         Display Light Intensity                                     */
/*******************************************************************************************************/
	App_voidReadLight();                               /* Function That Calculates Light Intensity */
    5696:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <App_voidReadLight>
	HCLCD_Vid4Bits_SetPosition(HCLCD_LINE2,1);
    569a:	82 e0       	ldi	r24, 0x02	; 2
    569c:	61 e0       	ldi	r22, 0x01	; 1
    569e:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <HCLCD_Vid4Bits_SetPosition>
	HCLCD_Vid4Bits_DisplayString("LT INT = ");         /* Displays the Light Intensity Reading of the LDR */
    56a2:	8e ed       	ldi	r24, 0xDE	; 222
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>
	HCLCD_Vid4Bits_DisplayNumber(Global_u8LightPercent);
    56aa:	80 91 14 01 	lds	r24, 0x0114
    56ae:	88 2f       	mov	r24, r24
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	a0 e0       	ldi	r26, 0x00	; 0
    56b4:	b0 e0       	ldi	r27, 0x00	; 0
    56b6:	bc 01       	movw	r22, r24
    56b8:	cd 01       	movw	r24, r26
    56ba:	0e 94 75 1e 	call	0x3cea	; 0x3cea <HCLCD_Vid4Bits_DisplayNumber>
	HCLCD_Vid4Bits_DisplayString(" %");
    56be:	88 ee       	ldi	r24, 0xE8	; 232
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <HCLCD_Vid4Bits_DisplayString>


	App_voidCheckLightIntensity(Global_u8LightPercent);
    56c6:	80 91 14 01 	lds	r24, 0x0114
    56ca:	0e 94 df 2a 	call	0x55be	; 0x55be <App_voidCheckLightIntensity>
}
    56ce:	cf 91       	pop	r28
    56d0:	df 91       	pop	r29
    56d2:	08 95       	ret

000056d4 <__mulsi3>:
    56d4:	62 9f       	mul	r22, r18
    56d6:	d0 01       	movw	r26, r0
    56d8:	73 9f       	mul	r23, r19
    56da:	f0 01       	movw	r30, r0
    56dc:	82 9f       	mul	r24, r18
    56de:	e0 0d       	add	r30, r0
    56e0:	f1 1d       	adc	r31, r1
    56e2:	64 9f       	mul	r22, r20
    56e4:	e0 0d       	add	r30, r0
    56e6:	f1 1d       	adc	r31, r1
    56e8:	92 9f       	mul	r25, r18
    56ea:	f0 0d       	add	r31, r0
    56ec:	83 9f       	mul	r24, r19
    56ee:	f0 0d       	add	r31, r0
    56f0:	74 9f       	mul	r23, r20
    56f2:	f0 0d       	add	r31, r0
    56f4:	65 9f       	mul	r22, r21
    56f6:	f0 0d       	add	r31, r0
    56f8:	99 27       	eor	r25, r25
    56fa:	72 9f       	mul	r23, r18
    56fc:	b0 0d       	add	r27, r0
    56fe:	e1 1d       	adc	r30, r1
    5700:	f9 1f       	adc	r31, r25
    5702:	63 9f       	mul	r22, r19
    5704:	b0 0d       	add	r27, r0
    5706:	e1 1d       	adc	r30, r1
    5708:	f9 1f       	adc	r31, r25
    570a:	bd 01       	movw	r22, r26
    570c:	cf 01       	movw	r24, r30
    570e:	11 24       	eor	r1, r1
    5710:	08 95       	ret

00005712 <__udivmodhi4>:
    5712:	aa 1b       	sub	r26, r26
    5714:	bb 1b       	sub	r27, r27
    5716:	51 e1       	ldi	r21, 0x11	; 17
    5718:	07 c0       	rjmp	.+14     	; 0x5728 <__udivmodhi4_ep>

0000571a <__udivmodhi4_loop>:
    571a:	aa 1f       	adc	r26, r26
    571c:	bb 1f       	adc	r27, r27
    571e:	a6 17       	cp	r26, r22
    5720:	b7 07       	cpc	r27, r23
    5722:	10 f0       	brcs	.+4      	; 0x5728 <__udivmodhi4_ep>
    5724:	a6 1b       	sub	r26, r22
    5726:	b7 0b       	sbc	r27, r23

00005728 <__udivmodhi4_ep>:
    5728:	88 1f       	adc	r24, r24
    572a:	99 1f       	adc	r25, r25
    572c:	5a 95       	dec	r21
    572e:	a9 f7       	brne	.-22     	; 0x571a <__udivmodhi4_loop>
    5730:	80 95       	com	r24
    5732:	90 95       	com	r25
    5734:	bc 01       	movw	r22, r24
    5736:	cd 01       	movw	r24, r26
    5738:	08 95       	ret

0000573a <__udivmodsi4>:
    573a:	a1 e2       	ldi	r26, 0x21	; 33
    573c:	1a 2e       	mov	r1, r26
    573e:	aa 1b       	sub	r26, r26
    5740:	bb 1b       	sub	r27, r27
    5742:	fd 01       	movw	r30, r26
    5744:	0d c0       	rjmp	.+26     	; 0x5760 <__udivmodsi4_ep>

00005746 <__udivmodsi4_loop>:
    5746:	aa 1f       	adc	r26, r26
    5748:	bb 1f       	adc	r27, r27
    574a:	ee 1f       	adc	r30, r30
    574c:	ff 1f       	adc	r31, r31
    574e:	a2 17       	cp	r26, r18
    5750:	b3 07       	cpc	r27, r19
    5752:	e4 07       	cpc	r30, r20
    5754:	f5 07       	cpc	r31, r21
    5756:	20 f0       	brcs	.+8      	; 0x5760 <__udivmodsi4_ep>
    5758:	a2 1b       	sub	r26, r18
    575a:	b3 0b       	sbc	r27, r19
    575c:	e4 0b       	sbc	r30, r20
    575e:	f5 0b       	sbc	r31, r21

00005760 <__udivmodsi4_ep>:
    5760:	66 1f       	adc	r22, r22
    5762:	77 1f       	adc	r23, r23
    5764:	88 1f       	adc	r24, r24
    5766:	99 1f       	adc	r25, r25
    5768:	1a 94       	dec	r1
    576a:	69 f7       	brne	.-38     	; 0x5746 <__udivmodsi4_loop>
    576c:	60 95       	com	r22
    576e:	70 95       	com	r23
    5770:	80 95       	com	r24
    5772:	90 95       	com	r25
    5774:	9b 01       	movw	r18, r22
    5776:	ac 01       	movw	r20, r24
    5778:	bd 01       	movw	r22, r26
    577a:	cf 01       	movw	r24, r30
    577c:	08 95       	ret

0000577e <__prologue_saves__>:
    577e:	2f 92       	push	r2
    5780:	3f 92       	push	r3
    5782:	4f 92       	push	r4
    5784:	5f 92       	push	r5
    5786:	6f 92       	push	r6
    5788:	7f 92       	push	r7
    578a:	8f 92       	push	r8
    578c:	9f 92       	push	r9
    578e:	af 92       	push	r10
    5790:	bf 92       	push	r11
    5792:	cf 92       	push	r12
    5794:	df 92       	push	r13
    5796:	ef 92       	push	r14
    5798:	ff 92       	push	r15
    579a:	0f 93       	push	r16
    579c:	1f 93       	push	r17
    579e:	cf 93       	push	r28
    57a0:	df 93       	push	r29
    57a2:	cd b7       	in	r28, 0x3d	; 61
    57a4:	de b7       	in	r29, 0x3e	; 62
    57a6:	ca 1b       	sub	r28, r26
    57a8:	db 0b       	sbc	r29, r27
    57aa:	0f b6       	in	r0, 0x3f	; 63
    57ac:	f8 94       	cli
    57ae:	de bf       	out	0x3e, r29	; 62
    57b0:	0f be       	out	0x3f, r0	; 63
    57b2:	cd bf       	out	0x3d, r28	; 61
    57b4:	09 94       	ijmp

000057b6 <__epilogue_restores__>:
    57b6:	2a 88       	ldd	r2, Y+18	; 0x12
    57b8:	39 88       	ldd	r3, Y+17	; 0x11
    57ba:	48 88       	ldd	r4, Y+16	; 0x10
    57bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    57be:	6e 84       	ldd	r6, Y+14	; 0x0e
    57c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    57c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    57c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    57c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    57c8:	b9 84       	ldd	r11, Y+9	; 0x09
    57ca:	c8 84       	ldd	r12, Y+8	; 0x08
    57cc:	df 80       	ldd	r13, Y+7	; 0x07
    57ce:	ee 80       	ldd	r14, Y+6	; 0x06
    57d0:	fd 80       	ldd	r15, Y+5	; 0x05
    57d2:	0c 81       	ldd	r16, Y+4	; 0x04
    57d4:	1b 81       	ldd	r17, Y+3	; 0x03
    57d6:	aa 81       	ldd	r26, Y+2	; 0x02
    57d8:	b9 81       	ldd	r27, Y+1	; 0x01
    57da:	ce 0f       	add	r28, r30
    57dc:	d1 1d       	adc	r29, r1
    57de:	0f b6       	in	r0, 0x3f	; 63
    57e0:	f8 94       	cli
    57e2:	de bf       	out	0x3e, r29	; 62
    57e4:	0f be       	out	0x3f, r0	; 63
    57e6:	cd bf       	out	0x3d, r28	; 61
    57e8:	ed 01       	movw	r28, r26
    57ea:	08 95       	ret

000057ec <_exit>:
    57ec:	f8 94       	cli

000057ee <__stop_program>:
    57ee:	ff cf       	rjmp	.-2      	; 0x57ee <__stop_program>
