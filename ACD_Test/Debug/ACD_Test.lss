
ACD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00006476  0000650a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000b0  008000b0  0000655a  2**0
                  ALLOC
  3 .stab         000040b0  00000000  00000000  0000655c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f38  00000000  00000000  0000a60c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e979  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f8fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000fa7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000fd3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 16 	call	0x2d24	; 0x2d24 <main>
      8a:	0c 94 39 32 	jmp	0x6472	; 0x6472 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 32 	jmp	0x643c	; 0x643c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 32 	jmp	0x643c	; 0x643c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 32 	jmp	0x6414	; 0x6414 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 26 32 	jmp	0x644c	; 0x644c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 12 32 	jmp	0x6424	; 0x6424 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
static void (*ADC_pfNotification)(u16) = NULL;

static u8 ADC_u8BusyFlag =0;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    /* 1- Select Vref = AVCC */
    CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
    /* 2- Right Adjust */
	CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
    /* 3- Disable AutoTrigger */
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
    /* 4- Clock/64  */
	SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
    CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
    /* 5- Enable ADC periphieral */
	SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSunchNonBlocking>:

u8 ADC_u8GetDigitalValueSunchNonBlocking(u8 Copy_u8ChannelNb,u16* Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u8TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSunchNonBlocking+0x2e>
     d48:	5c c0       	rjmp	.+184    	; 0xe02 <ADC_u8GetDigitalValueSunchNonBlocking+0xe6>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSunchNonBlocking+0x38>
     d52:	57 c0       	rjmp	.+174    	; 0xe02 <ADC_u8GetDigitalValueSunchNonBlocking+0xe6>
	{
		/* Clear MUX 4..0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 7e       	andi	r24, 0xE0	; 224
     d60:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     d62:	a7 e2       	ldi	r26, 0x27	; 39
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e2       	ldi	r30, 0x27	; 39
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	90 81       	ld	r25, Z
     d6c:	8e 81       	ldd	r24, Y+6	; 0x06
     d6e:	89 2b       	or	r24, r25
     d70:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d72:	a6 e2       	ldi	r26, 0x26	; 38
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e6 e2       	ldi	r30, 0x26	; 38
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	8c 93       	st	X, r24
     d80:	0b c0       	rjmp	.+22     	; 0xd98 <ADC_u8GetDigitalValueSunchNonBlocking+0x7c>
		/* Wait Till Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)==0) && (Local_u8TimeOutCounter < 50000))
		{
			Local_u8TimeOutCounter ++;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	ab 81       	ldd	r26, Y+3	; 0x03
     d88:	bc 81       	ldd	r27, Y+4	; 0x04
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	ab 83       	std	Y+3, r26	; 0x03
     d96:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Till Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)==0) && (Local_u8TimeOutCounter < 50000))
     d98:	e6 e2       	ldi	r30, 0x26	; 38
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 95       	swap	r24
     da0:	8f 70       	andi	r24, 0x0F	; 15
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	81 70       	andi	r24, 0x01	; 1
     da8:	90 70       	andi	r25, 0x00	; 0
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	61 f4       	brne	.+24     	; 0xdc6 <ADC_u8GetDigitalValueSunchNonBlocking+0xaa>
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	ab 81       	ldd	r26, Y+3	; 0x03
     db4:	bc 81       	ldd	r27, Y+4	; 0x04
     db6:	80 35       	cpi	r24, 0x50	; 80
     db8:	23 ec       	ldi	r18, 0xC3	; 195
     dba:	92 07       	cpc	r25, r18
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	a2 07       	cpc	r26, r18
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	b2 07       	cpc	r27, r18
     dc4:	f0 f2       	brcs	.-68     	; 0xd82 <ADC_u8GetDigitalValueSunchNonBlocking+0x66>
		{
			Local_u8TimeOutCounter ++;
		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(Local_u8TimeOutCounter >= ADC_u8_TIME_OUT_MAX_VALUE)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	ab 81       	ldd	r26, Y+3	; 0x03
     dcc:	bc 81       	ldd	r27, Y+4	; 0x04
     dce:	80 35       	cpi	r24, 0x50	; 80
     dd0:	23 ec       	ldi	r18, 0xC3	; 195
     dd2:	92 07       	cpc	r25, r18
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	a2 07       	cpc	r26, r18
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	b2 07       	cpc	r27, r18
     ddc:	10 f0       	brcs	.+4      	; 0xde2 <ADC_u8GetDigitalValueSunchNonBlocking+0xc6>
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     dde:	1d 82       	std	Y+5, r1	; 0x05
     de0:	11 c0       	rjmp	.+34     	; 0xe04 <ADC_u8GetDigitalValueSunchNonBlocking+0xe8>
		}
		else
		{
			/* Read Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     de2:	e4 e2       	ldi	r30, 0x24	; 36
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	ef 81       	ldd	r30, Y+7	; 0x07
     dec:	f8 85       	ldd	r31, Y+8	; 0x08
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
			/* Clear Flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     df2:	a6 e2       	ldi	r26, 0x26	; 38
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e6 e2       	ldi	r30, 0x26	; 38
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	80 61       	ori	r24, 0x10	; 16
     dfe:	8c 93       	st	X, r24
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <ADC_u8GetDigitalValueSunchNonBlocking+0xe8>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e02:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e06:	28 96       	adiw	r28, 0x08	; 8
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <ADC_u8GetDigitalValueAsync>:
u8 ADC_u8GetDigitalValueAsync(u8 Copy_u8ChannelNb,void(*Copy_PfNotification)(u16))
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <ADC_u8GetDigitalValueAsync+0x6>
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <ADC_u8GetDigitalValueAsync+0x8>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	8a 83       	std	Y+2, r24	; 0x02
     e26:	7c 83       	std	Y+4, r23	; 0x04
     e28:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (*Copy_PfNotification != NULL) && (ADC_u8BusyFlag == 0) )
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	80 32       	cpi	r24, 0x20	; 32
     e32:	78 f5       	brcc	.+94     	; 0xe92 <ADC_u8GetDigitalValueAsync+0x7a>
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	59 f1       	breq	.+86     	; 0xe92 <ADC_u8GetDigitalValueAsync+0x7a>
     e3c:	80 91 b2 00 	lds	r24, 0x00B2
     e40:	88 23       	and	r24, r24
     e42:	39 f5       	brne	.+78     	; 0xe92 <ADC_u8GetDigitalValueAsync+0x7a>
	{
		/* ADC is Busy */
		ADC_u8BusyFlag = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 b2 00 	sts	0x00B2, r24
		/* Updating Global Pointer to a Function With the Notification Function */
		ADC_pfNotification = Copy_PfNotification;
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	90 93 b1 00 	sts	0x00B1, r25
     e52:	80 93 b0 00 	sts	0x00B0, r24
		/* Enable Interrupt PIE */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e56:	a6 e2       	ldi	r26, 0x26	; 38
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e6 e2       	ldi	r30, 0x26	; 38
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
		/* Clear MUX 4..0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e64:	a7 e2       	ldi	r26, 0x27	; 39
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 7e       	andi	r24, 0xE0	; 224
     e70:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     e72:	a7 e2       	ldi	r26, 0x27	; 39
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e7 e2       	ldi	r30, 0x27	; 39
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	90 81       	ld	r25, Z
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	89 2b       	or	r24, r25
     e80:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e82:	a6 e2       	ldi	r26, 0x26	; 38
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e2       	ldi	r30, 0x26	; 38
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	8c 93       	st	X, r24
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <ADC_u8GetDigitalValueAsync+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e92:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <ADC_u8ReadADCRegister>:
u8 ADC_u8ReadADCRegister(u16 * Copy_pu16ADCRegValue)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <ADC_u8ReadADCRegister+0x6>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9b 83       	std	Y+3, r25	; 0x03
     eb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCRegValue !=NULL)
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	49 f0       	breq	.+18     	; 0xed2 <ADC_u8ReadADCRegister+0x2e>
	{
	    *Copy_pu16ADCRegValue = ADC_u16_ADC_REG;
     ec0:	e4 e2       	ldi	r30, 0x24	; 36
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	ea 81       	ldd	r30, Y+2	; 0x02
     eca:	fb 81       	ldd	r31, Y+3	; 0x03
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <ADC_u8ReadADCRegister+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ed2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <__vector_16>:
/* Prototype of ADC ISR */
void __vector_16(void)   __attribute__((signal));
void __vector_16(void)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     f0c:	80 91 b0 00 	lds	r24, 0x00B0
     f10:	90 91 b1 00 	lds	r25, 0x00B1
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	99 f0       	breq	.+38     	; 0xf3e <__vector_16+0x5c>
	{
		/* Clear PIE */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     f18:	a6 e2       	ldi	r26, 0x26	; 38
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e6 e2       	ldi	r30, 0x26	; 38
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     f26:	20 91 b0 00 	lds	r18, 0x00B0
     f2a:	30 91 b1 00 	lds	r19, 0x00B1
     f2e:	e4 e2       	ldi	r30, 0x24	; 36
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	91 81       	ldd	r25, Z+1	; 0x01
     f36:	f9 01       	movw	r30, r18
     f38:	09 95       	icall
		/* Clear Busy Flag */
		ADC_u8BusyFlag =0;
     f3a:	10 92 b2 00 	sts	0x00B2, r1
	}
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	bf 91       	pop	r27
     f48:	af 91       	pop	r26
     f4a:	9f 91       	pop	r25
     f4c:	8f 91       	pop	r24
     f4e:	7f 91       	pop	r23
     f50:	6f 91       	pop	r22
     f52:	5f 91       	pop	r21
     f54:	4f 91       	pop	r20
     f56:	3f 91       	pop	r19
     f58:	2f 91       	pop	r18
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     f6e:	ea e3       	ldi	r30, 0x3A	; 58
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     f74:	e7 e3       	ldi	r30, 0x37	; 55
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	8f e0       	ldi	r24, 0x0F	; 15
     f7a:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     f7c:	e4 e3       	ldi	r30, 0x34	; 52
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	80 83       	st	Z, r24
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     f84:	e1 e3       	ldi	r30, 0x31	; 49
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	8b ee       	ldi	r24, 0xEB	; 235
     f8a:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     f8c:	eb e3       	ldi	r30, 0x3B	; 59
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     f92:	e8 e3       	ldi	r30, 0x38	; 56
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 ef       	ldi	r24, 0xF0	; 240
     f98:	80 83       	st	Z, r24
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     f9a:	e5 e3       	ldi	r30, 0x35	; 53
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     fa0:	e2 e3       	ldi	r30, 0x32	; 50
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2e 97       	sbiw	r28, 0x0e	; 14
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	8a 83       	std	Y+2, r24	; 0x02
     fc4:	6b 83       	std	Y+3, r22	; 0x03
     fc6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <DIO_u8SetPinDirection+0x26>
     fd2:	0c c1       	rjmp	.+536    	; 0x11ec <DIO_u8SetPinDirection+0x23e>
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	88 30       	cpi	r24, 0x08	; 8
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <DIO_u8SetPinDirection+0x2e>
     fda:	08 c1       	rjmp	.+528    	; 0x11ec <DIO_u8SetPinDirection+0x23e>
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	88 23       	and	r24, r24
     fe0:	21 f0       	breq	.+8      	; 0xfea <DIO_u8SetPinDirection+0x3c>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	09 f0       	breq	.+2      	; 0xfea <DIO_u8SetPinDirection+0x3c>
     fe8:	01 c1       	rjmp	.+514    	; 0x11ec <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3e 87       	std	Y+14, r19	; 0x0e
     ff2:	2d 87       	std	Y+13, r18	; 0x0d
     ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <DIO_u8SetPinDirection+0x52>
     ffe:	4f c0       	rjmp	.+158    	; 0x109e <DIO_u8SetPinDirection+0xf0>
    1000:	2d 85       	ldd	r18, Y+13	; 0x0d
    1002:	3e 85       	ldd	r19, Y+14	; 0x0e
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	2c f4       	brge	.+10     	; 0x1014 <DIO_u8SetPinDirection+0x66>
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	71 f0       	breq	.+28     	; 0x102e <DIO_u8SetPinDirection+0x80>
    1012:	ed c0       	rjmp	.+474    	; 0x11ee <DIO_u8SetPinDirection+0x240>
    1014:	2d 85       	ldd	r18, Y+13	; 0x0d
    1016:	3e 85       	ldd	r19, Y+14	; 0x0e
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_u8SetPinDirection+0x72>
    101e:	77 c0       	rjmp	.+238    	; 0x110e <DIO_u8SetPinDirection+0x160>
    1020:	8d 85       	ldd	r24, Y+13	; 0x0d
    1022:	9e 85       	ldd	r25, Y+14	; 0x0e
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <DIO_u8SetPinDirection+0x7e>
    102a:	a9 c0       	rjmp	.+338    	; 0x117e <DIO_u8SetPinDirection+0x1d0>
    102c:	e0 c0       	rjmp	.+448    	; 0x11ee <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 87       	std	Y+12, r19	; 0x0c
    1036:	2b 87       	std	Y+11, r18	; 0x0b
    1038:	8b 85       	ldd	r24, Y+11	; 0x0b
    103a:	9c 85       	ldd	r25, Y+12	; 0x0c
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	d1 f0       	breq	.+52     	; 0x1074 <DIO_u8SetPinDirection+0xc6>
    1040:	2b 85       	ldd	r18, Y+11	; 0x0b
    1042:	3c 85       	ldd	r19, Y+12	; 0x0c
    1044:	21 30       	cpi	r18, 0x01	; 1
    1046:	31 05       	cpc	r19, r1
    1048:	09 f0       	breq	.+2      	; 0x104c <DIO_u8SetPinDirection+0x9e>
    104a:	d1 c0       	rjmp	.+418    	; 0x11ee <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
    104c:	aa e3       	ldi	r26, 0x3A	; 58
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ea e3       	ldi	r30, 0x3A	; 58
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinDirection+0xbc>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinDirection+0xb8>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	bd c0       	rjmp	.+378    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
    1074:	aa e3       	ldi	r26, 0x3A	; 58
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ea e3       	ldi	r30, 0x3A	; 58
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_u8SetPinDirection+0xe4>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_u8SetPinDirection+0xe0>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	a8 c0       	rjmp	.+336    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3a 87       	std	Y+10, r19	; 0x0a
    10a6:	29 87       	std	Y+9, r18	; 0x09
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	d1 f0       	breq	.+52     	; 0x10e4 <DIO_u8SetPinDirection+0x136>
    10b0:	29 85       	ldd	r18, Y+9	; 0x09
    10b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b4:	21 30       	cpi	r18, 0x01	; 1
    10b6:	31 05       	cpc	r19, r1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <DIO_u8SetPinDirection+0x10e>
    10ba:	99 c0       	rjmp	.+306    	; 0x11ee <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_u8SetPinDirection+0x12c>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_u8SetPinDirection+0x128>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	85 c0       	rjmp	.+266    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinDirection+0x154>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinDirection+0x150>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	70 c0       	rjmp	.+224    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	38 87       	std	Y+8, r19	; 0x08
    1116:	2f 83       	std	Y+7, r18	; 0x07
    1118:	8f 81       	ldd	r24, Y+7	; 0x07
    111a:	98 85       	ldd	r25, Y+8	; 0x08
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	d1 f0       	breq	.+52     	; 0x1154 <DIO_u8SetPinDirection+0x1a6>
    1120:	2f 81       	ldd	r18, Y+7	; 0x07
    1122:	38 85       	ldd	r19, Y+8	; 0x08
    1124:	21 30       	cpi	r18, 0x01	; 1
    1126:	31 05       	cpc	r19, r1
    1128:	09 f0       	breq	.+2      	; 0x112c <DIO_u8SetPinDirection+0x17e>
    112a:	61 c0       	rjmp	.+194    	; 0x11ee <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
    112c:	a4 e3       	ldi	r26, 0x34	; 52
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e4 e3       	ldi	r30, 0x34	; 52
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_u8SetPinDirection+0x19c>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_u8SetPinDirection+0x198>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	4d c0       	rjmp	.+154    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
    1154:	a4 e3       	ldi	r26, 0x34	; 52
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e4 e3       	ldi	r30, 0x34	; 52
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8SetPinDirection+0x1c4>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8SetPinDirection+0x1c0>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	38 c0       	rjmp	.+112    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3e 83       	std	Y+6, r19	; 0x06
    1186:	2d 83       	std	Y+5, r18	; 0x05
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	c9 f0       	breq	.+50     	; 0x11c2 <DIO_u8SetPinDirection+0x214>
    1190:	2d 81       	ldd	r18, Y+5	; 0x05
    1192:	3e 81       	ldd	r19, Y+6	; 0x06
    1194:	21 30       	cpi	r18, 0x01	; 1
    1196:	31 05       	cpc	r19, r1
    1198:	51 f5       	brne	.+84     	; 0x11ee <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
    119a:	a1 e3       	ldi	r26, 0x31	; 49
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e1 e3       	ldi	r30, 0x31	; 49
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_u8SetPinDirection+0x20a>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_u8SetPinDirection+0x206>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	16 c0       	rjmp	.+44     	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
    11c2:	a1 e3       	ldi	r26, 0x31	; 49
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_u8SetPinDirection+0x232>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_u8SetPinDirection+0x22e>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    11ec:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f0:	2e 96       	adiw	r28, 0x0e	; 14
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	2e 97       	sbiw	r28, 0x0e	; 14
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	8a 83       	std	Y+2, r24	; 0x02
    1218:	6b 83       	std	Y+3, r22	; 0x03
    121a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	84 30       	cpi	r24, 0x04	; 4
    1224:	08 f0       	brcs	.+2      	; 0x1228 <DIO_u8SetPinValue+0x26>
    1226:	0c c1       	rjmp	.+536    	; 0x1440 <DIO_u8SetPinValue+0x23e>
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	88 30       	cpi	r24, 0x08	; 8
    122c:	08 f0       	brcs	.+2      	; 0x1230 <DIO_u8SetPinValue+0x2e>
    122e:	08 c1       	rjmp	.+528    	; 0x1440 <DIO_u8SetPinValue+0x23e>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	21 f0       	breq	.+8      	; 0x123e <DIO_u8SetPinValue+0x3c>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	88 23       	and	r24, r24
    123a:	09 f0       	breq	.+2      	; 0x123e <DIO_u8SetPinValue+0x3c>
    123c:	01 c1       	rjmp	.+514    	; 0x1440 <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3e 87       	std	Y+14, r19	; 0x0e
    1246:	2d 87       	std	Y+13, r18	; 0x0d
    1248:	8d 85       	ldd	r24, Y+13	; 0x0d
    124a:	9e 85       	ldd	r25, Y+14	; 0x0e
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <DIO_u8SetPinValue+0x52>
    1252:	4f c0       	rjmp	.+158    	; 0x12f2 <DIO_u8SetPinValue+0xf0>
    1254:	2d 85       	ldd	r18, Y+13	; 0x0d
    1256:	3e 85       	ldd	r19, Y+14	; 0x0e
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <DIO_u8SetPinValue+0x66>
    125e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1260:	9e 85       	ldd	r25, Y+14	; 0x0e
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	71 f0       	breq	.+28     	; 0x1282 <DIO_u8SetPinValue+0x80>
    1266:	ed c0       	rjmp	.+474    	; 0x1442 <DIO_u8SetPinValue+0x240>
    1268:	2d 85       	ldd	r18, Y+13	; 0x0d
    126a:	3e 85       	ldd	r19, Y+14	; 0x0e
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <DIO_u8SetPinValue+0x72>
    1272:	77 c0       	rjmp	.+238    	; 0x1362 <DIO_u8SetPinValue+0x160>
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_u8SetPinValue+0x7e>
    127e:	a9 c0       	rjmp	.+338    	; 0x13d2 <DIO_u8SetPinValue+0x1d0>
    1280:	e0 c0       	rjmp	.+448    	; 0x1442 <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3c 87       	std	Y+12, r19	; 0x0c
    128a:	2b 87       	std	Y+11, r18	; 0x0b
    128c:	8b 85       	ldd	r24, Y+11	; 0x0b
    128e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	d1 f0       	breq	.+52     	; 0x12c8 <DIO_u8SetPinValue+0xc6>
    1294:	2b 85       	ldd	r18, Y+11	; 0x0b
    1296:	3c 85       	ldd	r19, Y+12	; 0x0c
    1298:	21 30       	cpi	r18, 0x01	; 1
    129a:	31 05       	cpc	r19, r1
    129c:	09 f0       	breq	.+2      	; 0x12a0 <DIO_u8SetPinValue+0x9e>
    129e:	d1 c0       	rjmp	.+418    	; 0x1442 <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
    12a0:	ab e3       	ldi	r26, 0x3B	; 59
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e3       	ldi	r30, 0x3B	; 59
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8SetPinValue+0xbc>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8SetPinValue+0xb8>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	bd c0       	rjmp	.+378    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
    12c8:	ab e3       	ldi	r26, 0x3B	; 59
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_u8SetPinValue+0xe4>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_u8SetPinValue+0xe0>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	a8 c0       	rjmp	.+336    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	3a 87       	std	Y+10, r19	; 0x0a
    12fa:	29 87       	std	Y+9, r18	; 0x09
    12fc:	89 85       	ldd	r24, Y+9	; 0x09
    12fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	d1 f0       	breq	.+52     	; 0x1338 <DIO_u8SetPinValue+0x136>
    1304:	29 85       	ldd	r18, Y+9	; 0x09
    1306:	3a 85       	ldd	r19, Y+10	; 0x0a
    1308:	21 30       	cpi	r18, 0x01	; 1
    130a:	31 05       	cpc	r19, r1
    130c:	09 f0       	breq	.+2      	; 0x1310 <DIO_u8SetPinValue+0x10e>
    130e:	99 c0       	rjmp	.+306    	; 0x1442 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8SetPinValue+0x12c>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8SetPinValue+0x128>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	85 c0       	rjmp	.+266    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_u8SetPinValue+0x154>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_u8SetPinValue+0x150>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	70 c0       	rjmp	.+224    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	38 87       	std	Y+8, r19	; 0x08
    136a:	2f 83       	std	Y+7, r18	; 0x07
    136c:	8f 81       	ldd	r24, Y+7	; 0x07
    136e:	98 85       	ldd	r25, Y+8	; 0x08
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	d1 f0       	breq	.+52     	; 0x13a8 <DIO_u8SetPinValue+0x1a6>
    1374:	2f 81       	ldd	r18, Y+7	; 0x07
    1376:	38 85       	ldd	r19, Y+8	; 0x08
    1378:	21 30       	cpi	r18, 0x01	; 1
    137a:	31 05       	cpc	r19, r1
    137c:	09 f0       	breq	.+2      	; 0x1380 <DIO_u8SetPinValue+0x17e>
    137e:	61 c0       	rjmp	.+194    	; 0x1442 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8SetPinValue+0x19c>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_u8SetPinValue+0x198>
    13a2:	84 2b       	or	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	4d c0       	rjmp	.+154    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    13a8:	a5 e3       	ldi	r26, 0x35	; 53
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8SetPinValue+0x1c4>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8SetPinValue+0x1c0>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	38 c0       	rjmp	.+112    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3e 83       	std	Y+6, r19	; 0x06
    13da:	2d 83       	std	Y+5, r18	; 0x05
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	c9 f0       	breq	.+50     	; 0x1416 <DIO_u8SetPinValue+0x214>
    13e4:	2d 81       	ldd	r18, Y+5	; 0x05
    13e6:	3e 81       	ldd	r19, Y+6	; 0x06
    13e8:	21 30       	cpi	r18, 0x01	; 1
    13ea:	31 05       	cpc	r19, r1
    13ec:	51 f5       	brne	.+84     	; 0x1442 <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    13ee:	a2 e3       	ldi	r26, 0x32	; 50
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_u8SetPinValue+0x20a>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_u8SetPinValue+0x206>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    1416:	a2 e3       	ldi	r26, 0x32	; 50
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e2 e3       	ldi	r30, 0x32	; 50
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_u8SetPinValue+0x232>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_u8SetPinValue+0x22e>
    1438:	80 95       	com	r24
    143a:	84 23       	and	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    1440:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    1442:	89 81       	ldd	r24, Y+1	; 0x01
}
    1444:	2e 96       	adiw	r28, 0x0e	; 14
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	27 97       	sbiw	r28, 0x07	; 7
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	6b 83       	std	Y+3, r22	; 0x03
    146e:	5d 83       	std	Y+5, r21	; 0x05
    1470:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	08 f0       	brcs	.+2      	; 0x147e <DIO_u8GetPinValue+0x28>
    147c:	ea c0       	rjmp	.+468    	; 0x1652 <DIO_u8GetPinValue+0x1fc>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 30       	cpi	r24, 0x08	; 8
    1482:	08 f0       	brcs	.+2      	; 0x1486 <DIO_u8GetPinValue+0x30>
    1484:	e6 c0       	rjmp	.+460    	; 0x1652 <DIO_u8GetPinValue+0x1fc>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	09 f4       	brne	.+2      	; 0x1490 <DIO_u8GetPinValue+0x3a>
    148e:	e1 c0       	rjmp	.+450    	; 0x1652 <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3f 83       	std	Y+7, r19	; 0x07
    1498:	2e 83       	std	Y+6, r18	; 0x06
    149a:	4e 81       	ldd	r20, Y+6	; 0x06
    149c:	5f 81       	ldd	r21, Y+7	; 0x07
    149e:	41 30       	cpi	r20, 0x01	; 1
    14a0:	51 05       	cpc	r21, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <DIO_u8GetPinValue+0x50>
    14a4:	48 c0       	rjmp	.+144    	; 0x1536 <DIO_u8GetPinValue+0xe0>
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	9f 81       	ldd	r25, Y+7	; 0x07
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	91 05       	cpc	r25, r1
    14ae:	34 f4       	brge	.+12     	; 0x14bc <DIO_u8GetPinValue+0x66>
    14b0:	2e 81       	ldd	r18, Y+6	; 0x06
    14b2:	3f 81       	ldd	r19, Y+7	; 0x07
    14b4:	21 15       	cp	r18, r1
    14b6:	31 05       	cpc	r19, r1
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <DIO_u8GetPinValue+0x80>
    14ba:	cc c0       	rjmp	.+408    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
    14bc:	4e 81       	ldd	r20, Y+6	; 0x06
    14be:	5f 81       	ldd	r21, Y+7	; 0x07
    14c0:	42 30       	cpi	r20, 0x02	; 2
    14c2:	51 05       	cpc	r21, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <DIO_u8GetPinValue+0x72>
    14c6:	67 c0       	rjmp	.+206    	; 0x1596 <DIO_u8GetPinValue+0x140>
    14c8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ca:	9f 81       	ldd	r25, Y+7	; 0x07
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <DIO_u8GetPinValue+0x7e>
    14d2:	90 c0       	rjmp	.+288    	; 0x15f4 <DIO_u8GetPinValue+0x19e>
    14d4:	bf c0       	rjmp	.+382    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    14d6:	e9 e3       	ldi	r30, 0x39	; 57
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a9 01       	movw	r20, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <DIO_u8GetPinValue+0x98>
    14ea:	55 95       	asr	r21
    14ec:	47 95       	ror	r20
    14ee:	8a 95       	dec	r24
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <DIO_u8GetPinValue+0x94>
    14f2:	ca 01       	movw	r24, r20
    14f4:	81 70       	andi	r24, 0x01	; 1
    14f6:	90 70       	andi	r25, 0x00	; 0
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	21 f4       	brne	.+8      	; 0x1504 <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    14fc:	ec 81       	ldd	r30, Y+4	; 0x04
    14fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1500:	10 82       	st	Z, r1
    1502:	a8 c0       	rjmp	.+336    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    1504:	e9 e3       	ldi	r30, 0x39	; 57
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_u8GetPinValue+0xc6>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_u8GetPinValue+0xc2>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	90 70       	andi	r25, 0x00	; 0
    1526:	88 23       	and	r24, r24
    1528:	09 f4       	brne	.+2      	; 0x152c <DIO_u8GetPinValue+0xd6>
    152a:	94 c0       	rjmp	.+296    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    152c:	ec 81       	ldd	r30, Y+4	; 0x04
    152e:	fd 81       	ldd	r31, Y+5	; 0x05
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	80 83       	st	Z, r24
    1534:	8f c0       	rjmp	.+286    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    1536:	e6 e3       	ldi	r30, 0x36	; 54
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a9 01       	movw	r20, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_u8GetPinValue+0xf8>
    154a:	55 95       	asr	r21
    154c:	47 95       	ror	r20
    154e:	8a 95       	dec	r24
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_u8GetPinValue+0xf4>
    1552:	ca 01       	movw	r24, r20
    1554:	81 70       	andi	r24, 0x01	; 1
    1556:	90 70       	andi	r25, 0x00	; 0
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	21 f4       	brne	.+8      	; 0x1564 <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    155c:	ec 81       	ldd	r30, Y+4	; 0x04
    155e:	fd 81       	ldd	r31, Y+5	; 0x05
    1560:	10 82       	st	Z, r1
    1562:	78 c0       	rjmp	.+240    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    1564:	e6 e3       	ldi	r30, 0x36	; 54
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a9 01       	movw	r20, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_u8GetPinValue+0x126>
    1578:	55 95       	asr	r21
    157a:	47 95       	ror	r20
    157c:	8a 95       	dec	r24
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_u8GetPinValue+0x122>
    1580:	ca 01       	movw	r24, r20
    1582:	81 70       	andi	r24, 0x01	; 1
    1584:	90 70       	andi	r25, 0x00	; 0
    1586:	88 23       	and	r24, r24
    1588:	09 f4       	brne	.+2      	; 0x158c <DIO_u8GetPinValue+0x136>
    158a:	64 c0       	rjmp	.+200    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    158c:	ec 81       	ldd	r30, Y+4	; 0x04
    158e:	fd 81       	ldd	r31, Y+5	; 0x05
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 83       	st	Z, r24
    1594:	5f c0       	rjmp	.+190    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    1596:	e3 e3       	ldi	r30, 0x33	; 51
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_u8GetPinValue+0x158>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_u8GetPinValue+0x154>
    15b2:	ca 01       	movw	r24, r20
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	90 70       	andi	r25, 0x00	; 0
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15bc:	ec 81       	ldd	r30, Y+4	; 0x04
    15be:	fd 81       	ldd	r31, Y+5	; 0x05
    15c0:	10 82       	st	Z, r1
    15c2:	48 c0       	rjmp	.+144    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    15c4:	e3 e3       	ldi	r30, 0x33	; 51
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a9 01       	movw	r20, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_u8GetPinValue+0x186>
    15d8:	55 95       	asr	r21
    15da:	47 95       	ror	r20
    15dc:	8a 95       	dec	r24
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_u8GetPinValue+0x182>
    15e0:	ca 01       	movw	r24, r20
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	90 70       	andi	r25, 0x00	; 0
    15e6:	88 23       	and	r24, r24
    15e8:	a9 f1       	breq	.+106    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    15ea:	ec 81       	ldd	r30, Y+4	; 0x04
    15ec:	fd 81       	ldd	r31, Y+5	; 0x05
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 83       	st	Z, r24
    15f2:	30 c0       	rjmp	.+96     	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    15f4:	e0 e3       	ldi	r30, 0x30	; 48
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a9 01       	movw	r20, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_u8GetPinValue+0x1b6>
    1608:	55 95       	asr	r21
    160a:	47 95       	ror	r20
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_u8GetPinValue+0x1b2>
    1610:	ca 01       	movw	r24, r20
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	90 70       	andi	r25, 0x00	; 0
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	21 f4       	brne	.+8      	; 0x1622 <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    161a:	ec 81       	ldd	r30, Y+4	; 0x04
    161c:	fd 81       	ldd	r31, Y+5	; 0x05
    161e:	10 82       	st	Z, r1
    1620:	19 c0       	rjmp	.+50     	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    1622:	e0 e3       	ldi	r30, 0x30	; 48
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a9 01       	movw	r20, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_u8GetPinValue+0x1e4>
    1636:	55 95       	asr	r21
    1638:	47 95       	ror	r20
    163a:	8a 95       	dec	r24
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_u8GetPinValue+0x1e0>
    163e:	ca 01       	movw	r24, r20
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	90 70       	andi	r25, 0x00	; 0
    1644:	88 23       	and	r24, r24
    1646:	31 f0       	breq	.+12     	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1648:	ec 81       	ldd	r30, Y+4	; 0x04
    164a:	fd 81       	ldd	r31, Y+5	; 0x05
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 83       	st	Z, r24
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1652:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1654:	89 81       	ldd	r24, Y+1	; 0x01
}
    1656:	27 96       	adiw	r28, 0x07	; 7
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2d 97       	sbiw	r28, 0x0d	; 13
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	08 f0       	brcs	.+2      	; 0x168c <DIO_u8SetPortDirection+0x24>
    168a:	87 c0       	rjmp	.+270    	; 0x179a <DIO_u8SetPortDirection+0x132>
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	21 f0       	breq	.+8      	; 0x169a <DIO_u8SetPortDirection+0x32>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	88 23       	and	r24, r24
    1696:	09 f0       	breq	.+2      	; 0x169a <DIO_u8SetPortDirection+0x32>
    1698:	80 c0       	rjmp	.+256    	; 0x179a <DIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3d 87       	std	Y+13, r19	; 0x0d
    16a2:	2c 87       	std	Y+12, r18	; 0x0c
    16a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	91 05       	cpc	r25, r1
    16ac:	71 f1       	breq	.+92     	; 0x170a <DIO_u8SetPortDirection+0xa2>
    16ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    16b0:	3d 85       	ldd	r19, Y+13	; 0x0d
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <DIO_u8SetPortDirection+0x5a>
    16b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f0       	breq	.+26     	; 0x16da <DIO_u8SetPortDirection+0x72>
    16c0:	6d c0       	rjmp	.+218    	; 0x179c <DIO_u8SetPortDirection+0x134>
    16c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	b9 f1       	breq	.+110    	; 0x173a <DIO_u8SetPortDirection+0xd2>
    16cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	91 05       	cpc	r25, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <DIO_u8SetPortDirection+0x70>
    16d6:	49 c0       	rjmp	.+146    	; 0x176a <DIO_u8SetPortDirection+0x102>
    16d8:	61 c0       	rjmp	.+194    	; 0x179c <DIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3b 87       	std	Y+11, r19	; 0x0b
    16e2:	2a 87       	std	Y+10, r18	; 0x0a
    16e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <DIO_u8SetPortDirection+0x90>
    16ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    16f0:	21 30       	cpi	r18, 0x01	; 1
    16f2:	31 05       	cpc	r19, r1
    16f4:	29 f0       	breq	.+10     	; 0x1700 <DIO_u8SetPortDirection+0x98>
    16f6:	52 c0       	rjmp	.+164    	; 0x179c <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    16f8:	ea e3       	ldi	r30, 0x3A	; 58
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	10 82       	st	Z, r1
    16fe:	4e c0       	rjmp	.+156    	; 0x179c <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    1700:	ea e3       	ldi	r30, 0x3A	; 58
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	80 83       	st	Z, r24
    1708:	49 c0       	rjmp	.+146    	; 0x179c <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	39 87       	std	Y+9, r19	; 0x09
    1712:	28 87       	std	Y+8, r18	; 0x08
    1714:	88 85       	ldd	r24, Y+8	; 0x08
    1716:	99 85       	ldd	r25, Y+9	; 0x09
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	31 f0       	breq	.+12     	; 0x1728 <DIO_u8SetPortDirection+0xc0>
    171c:	28 85       	ldd	r18, Y+8	; 0x08
    171e:	39 85       	ldd	r19, Y+9	; 0x09
    1720:	21 30       	cpi	r18, 0x01	; 1
    1722:	31 05       	cpc	r19, r1
    1724:	29 f0       	breq	.+10     	; 0x1730 <DIO_u8SetPortDirection+0xc8>
    1726:	3a c0       	rjmp	.+116    	; 0x179c <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    1728:	e7 e3       	ldi	r30, 0x37	; 55
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	10 82       	st	Z, r1
    172e:	36 c0       	rjmp	.+108    	; 0x179c <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    1730:	e7 e3       	ldi	r30, 0x37	; 55
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	80 83       	st	Z, r24
    1738:	31 c0       	rjmp	.+98     	; 0x179c <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3f 83       	std	Y+7, r19	; 0x07
    1742:	2e 83       	std	Y+6, r18	; 0x06
    1744:	8e 81       	ldd	r24, Y+6	; 0x06
    1746:	9f 81       	ldd	r25, Y+7	; 0x07
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	31 f0       	breq	.+12     	; 0x1758 <DIO_u8SetPortDirection+0xf0>
    174c:	2e 81       	ldd	r18, Y+6	; 0x06
    174e:	3f 81       	ldd	r19, Y+7	; 0x07
    1750:	21 30       	cpi	r18, 0x01	; 1
    1752:	31 05       	cpc	r19, r1
    1754:	29 f0       	breq	.+10     	; 0x1760 <DIO_u8SetPortDirection+0xf8>
    1756:	22 c0       	rjmp	.+68     	; 0x179c <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    1758:	e4 e3       	ldi	r30, 0x34	; 52
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	10 82       	st	Z, r1
    175e:	1e c0       	rjmp	.+60     	; 0x179c <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    1760:	e4 e3       	ldi	r30, 0x34	; 52
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	80 83       	st	Z, r24
    1768:	19 c0       	rjmp	.+50     	; 0x179c <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	3d 83       	std	Y+5, r19	; 0x05
    1772:	2c 83       	std	Y+4, r18	; 0x04
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	31 f0       	breq	.+12     	; 0x1788 <DIO_u8SetPortDirection+0x120>
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	21 30       	cpi	r18, 0x01	; 1
    1782:	31 05       	cpc	r19, r1
    1784:	29 f0       	breq	.+10     	; 0x1790 <DIO_u8SetPortDirection+0x128>
    1786:	0a c0       	rjmp	.+20     	; 0x179c <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    1788:	e1 e3       	ldi	r30, 0x31	; 49
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	10 82       	st	Z, r1
    178e:	06 c0       	rjmp	.+12     	; 0x179c <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    1790:	e1 e3       	ldi	r30, 0x31	; 49
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	80 83       	st	Z, r24
    1798:	01 c0       	rjmp	.+2      	; 0x179c <DIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    179a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    179c:	89 81       	ldd	r24, Y+1	; 0x01
}
    179e:	2d 96       	adiw	r28, 0x0d	; 13
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <DIO_u8SetPortValue+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_u8SetPortValue+0x8>
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3d 83       	std	Y+5, r19	; 0x05
    17ce:	2c 83       	std	Y+4, r18	; 0x04
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 05       	cpc	r25, r1
    17d8:	d1 f0       	breq	.+52     	; 0x180e <DIO_u8SetPortValue+0x5e>
    17da:	2c 81       	ldd	r18, Y+4	; 0x04
    17dc:	3d 81       	ldd	r19, Y+5	; 0x05
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	2c f4       	brge	.+10     	; 0x17ee <DIO_u8SetPortValue+0x3e>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	61 f0       	breq	.+24     	; 0x1804 <DIO_u8SetPortValue+0x54>
    17ec:	1f c0       	rjmp	.+62     	; 0x182c <DIO_u8SetPortValue+0x7c>
    17ee:	2c 81       	ldd	r18, Y+4	; 0x04
    17f0:	3d 81       	ldd	r19, Y+5	; 0x05
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	81 f0       	breq	.+32     	; 0x1818 <DIO_u8SetPortValue+0x68>
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	9d 81       	ldd	r25, Y+5	; 0x05
    17fc:	83 30       	cpi	r24, 0x03	; 3
    17fe:	91 05       	cpc	r25, r1
    1800:	81 f0       	breq	.+32     	; 0x1822 <DIO_u8SetPortValue+0x72>
    1802:	14 c0       	rjmp	.+40     	; 0x182c <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	80 83       	st	Z, r24
    180c:	10 c0       	rjmp	.+32     	; 0x182e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    180e:	e8 e3       	ldi	r30, 0x38	; 56
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	80 83       	st	Z, r24
    1816:	0b c0       	rjmp	.+22     	; 0x182e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	80 83       	st	Z, r24
    1820:	06 c0       	rjmp	.+12     	; 0x182e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	80 83       	st	Z, r24
    182a:	01 c0       	rjmp	.+2      	; 0x182e <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    182c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <DIO_u8GetPortValue+0x6>
    1846:	00 d0       	rcall	.+0      	; 0x1848 <DIO_u8GetPortValue+0x8>
    1848:	00 d0       	rcall	.+0      	; 0x184a <DIO_u8GetPortValue+0xa>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	7c 83       	std	Y+4, r23	; 0x04
    1852:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	e9 f1       	breq	.+122    	; 0x18da <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3e 83       	std	Y+6, r19	; 0x06
    1868:	2d 83       	std	Y+5, r18	; 0x05
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	e1 f0       	breq	.+56     	; 0x18ac <DIO_u8GetPortValue+0x6c>
    1874:	2d 81       	ldd	r18, Y+5	; 0x05
    1876:	3e 81       	ldd	r19, Y+6	; 0x06
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	2c f4       	brge	.+10     	; 0x1888 <DIO_u8GetPortValue+0x48>
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	61 f0       	breq	.+24     	; 0x189e <DIO_u8GetPortValue+0x5e>
    1886:	27 c0       	rjmp	.+78     	; 0x18d6 <DIO_u8GetPortValue+0x96>
    1888:	2d 81       	ldd	r18, Y+5	; 0x05
    188a:	3e 81       	ldd	r19, Y+6	; 0x06
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	a1 f0       	breq	.+40     	; 0x18ba <DIO_u8GetPortValue+0x7a>
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	91 05       	cpc	r25, r1
    189a:	b1 f0       	breq	.+44     	; 0x18c8 <DIO_u8GetPortValue+0x88>
    189c:	1c c0       	rjmp	.+56     	; 0x18d6 <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    189e:	e9 e3       	ldi	r30, 0x39	; 57
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	eb 81       	ldd	r30, Y+3	; 0x03
    18a6:	fc 81       	ldd	r31, Y+4	; 0x04
    18a8:	80 83       	st	Z, r24
    18aa:	18 c0       	rjmp	.+48     	; 0x18dc <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    18ac:	e6 e3       	ldi	r30, 0x36	; 54
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	eb 81       	ldd	r30, Y+3	; 0x03
    18b4:	fc 81       	ldd	r31, Y+4	; 0x04
    18b6:	80 83       	st	Z, r24
    18b8:	11 c0       	rjmp	.+34     	; 0x18dc <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    18ba:	e3 e3       	ldi	r30, 0x33	; 51
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	eb 81       	ldd	r30, Y+3	; 0x03
    18c2:	fc 81       	ldd	r31, Y+4	; 0x04
    18c4:	80 83       	st	Z, r24
    18c6:	0a c0       	rjmp	.+20     	; 0x18dc <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    18c8:	e0 e3       	ldi	r30, 0x30	; 48
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	eb 81       	ldd	r30, Y+3	; 0x03
    18d0:	fc 81       	ldd	r31, Y+4	; 0x04
    18d2:	80 83       	st	Z, r24
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    18d6:	19 82       	std	Y+1, r1	; 0x01
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    18da:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	26 96       	adiw	r28, 0x06	; 6
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <KPD_u8GetKey>:
static u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN, KPD_u8_R2_PIN, KPD_u8_R3_PIN, KPD_u8_R4_PIN};
static u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN, KPD_u8_C2_PIN, KPD_u8_C3_PIN, KPD_u8_C4_PIN};

/* Rows output *//* Columns Input */
u8 KPD_u8GetKey(u8 * Copy_pu8ReturnedKey)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	a3 97       	sbiw	r28, 0x23	; 35
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	9b a3       	std	Y+35, r25	; 0x23
    1906:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
    190c:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
    190e:	8a a1       	ldd	r24, Y+34	; 0x22
    1910:	9b a1       	ldd	r25, Y+35	; 0x23
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	09 f4       	brne	.+2      	; 0x1918 <KPD_u8GetKey+0x28>
    1916:	53 c1       	rjmp	.+678    	; 0x1bbe <KPD_u8GetKey+0x2ce>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1918:	ea a1       	ldd	r30, Y+34	; 0x22
    191a:	fb a1       	ldd	r31, Y+35	; 0x23
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	80 83       	st	Z, r24
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    1920:	1f 8e       	std	Y+31, r1	; 0x1f
    1922:	48 c1       	rjmp	.+656    	; 0x1bb4 <KPD_u8GetKey+0x2c4>
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
    1924:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	e8 57       	subi	r30, 0x78	; 120
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	90 81       	ld	r25, Z
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	69 2f       	mov	r22, r25
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    193c:	1e 8e       	std	Y+30, r1	; 0x1e
    193e:	24 c1       	rjmp	.+584    	; 0x1b88 <KPD_u8GetKey+0x298>
		    {
			    DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    1940:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	fc 01       	movw	r30, r24
    1948:	e4 57       	subi	r30, 0x74	; 116
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	90 81       	ld	r25, Z
    194e:	9e 01       	movw	r18, r28
    1950:	2f 5d       	subi	r18, 0xDF	; 223
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	69 2f       	mov	r22, r25
    1958:	a9 01       	movw	r20, r18
    195a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
    195e:	89 a1       	ldd	r24, Y+33	; 0x21
    1960:	88 23       	and	r24, r24
    1962:	09 f0       	breq	.+2      	; 0x1966 <KPD_u8GetKey+0x76>
    1964:	0e c1       	rjmp	.+540    	; 0x1b82 <KPD_u8GetKey+0x292>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 ea       	ldi	r26, 0xA0	; 160
    196c:	b1 e4       	ldi	r27, 0x41	; 65
    196e:	89 8f       	std	Y+25, r24	; 0x19
    1970:	9a 8f       	std	Y+26, r25	; 0x1a
    1972:	ab 8f       	std	Y+27, r26	; 0x1b
    1974:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	69 8d       	ldd	r22, Y+25	; 0x19
    1978:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8d 8b       	std	Y+21, r24	; 0x15
    1990:	9e 8b       	std	Y+22, r25	; 0x16
    1992:	af 8b       	std	Y+23, r26	; 0x17
    1994:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1996:	6d 89       	ldd	r22, Y+21	; 0x15
    1998:	7e 89       	ldd	r23, Y+22	; 0x16
    199a:	8f 89       	ldd	r24, Y+23	; 0x17
    199c:	98 8d       	ldd	r25, Y+24	; 0x18
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <KPD_u8GetKey+0xc8>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9c 8b       	std	Y+20, r25	; 0x14
    19b4:	8b 8b       	std	Y+19, r24	; 0x13
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <KPD_u8GetKey+0x146>
	else if (__tmp > 65535)
    19b8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ba:	7e 89       	ldd	r23, Y+22	; 0x16
    19bc:	8f 89       	ldd	r24, Y+23	; 0x17
    19be:	98 8d       	ldd	r25, Y+24	; 0x18
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <KPD_u8GetKey+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	69 8d       	ldd	r22, Y+25	; 0x19
    19d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9c 8b       	std	Y+20, r25	; 0x14
    19f6:	8b 8b       	std	Y+19, r24	; 0x13
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <KPD_u8GetKey+0x128>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9a 8b       	std	Y+18, r25	; 0x12
    1a00:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a02:	89 89       	ldd	r24, Y+17	; 0x11
    1a04:	9a 89       	ldd	r25, Y+18	; 0x12
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <KPD_u8GetKey+0x116>
    1a0a:	9a 8b       	std	Y+18, r25	; 0x12
    1a0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9c 8b       	std	Y+20, r25	; 0x14
    1a16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <KPD_u8GetKey+0x10a>
    1a20:	24 c0       	rjmp	.+72     	; 0x1a6a <KPD_u8GetKey+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6d 89       	ldd	r22, Y+21	; 0x15
    1a24:	7e 89       	ldd	r23, Y+22	; 0x16
    1a26:	8f 89       	ldd	r24, Y+23	; 0x17
    1a28:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	8b 89       	ldd	r24, Y+19	; 0x13
    1a38:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3a:	98 8b       	std	Y+16, r25	; 0x10
    1a3c:	8f 87       	std	Y+15, r24	; 0x0f
    1a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a40:	98 89       	ldd	r25, Y+16	; 0x10
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <KPD_u8GetKey+0x152>
    1a46:	98 8b       	std	Y+16, r25	; 0x10
    1a48:	8f 87       	std	Y+15, r24	; 0x0f
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <KPD_u8GetKey+0x17a>
			    {
				    /* Debouncing */
				    _delay_ms(20);
				    while(Local_u8ReturnedPinValue == DIO_u8_LOW)
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    1a4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	fc 01       	movw	r30, r24
    1a54:	e4 57       	subi	r30, 0x74	; 116
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	90 81       	ld	r25, Z
    1a5a:	9e 01       	movw	r18, r28
    1a5c:	2f 5d       	subi	r18, 0xDF	; 223
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	69 2f       	mov	r22, r25
    1a64:	a9 01       	movw	r20, r18
    1a66:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
			    {
				    /* Debouncing */
				    _delay_ms(20);
				    while(Local_u8ReturnedPinValue == DIO_u8_LOW)
    1a6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a6c:	88 23       	and	r24, r24
    1a6e:	71 f3       	breq	.-36     	; 0x1a4c <KPD_u8GetKey+0x15c>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a0 e2       	ldi	r26, 0x20	; 32
    1a76:	b1 e4       	ldi	r27, 0x41	; 65
    1a78:	8b 87       	std	Y+11, r24	; 0x0b
    1a7a:	9c 87       	std	Y+12, r25	; 0x0c
    1a7c:	ad 87       	std	Y+13, r26	; 0x0d
    1a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	4a ef       	ldi	r20, 0xFA	; 250
    1a8e:	54 e4       	ldi	r21, 0x44	; 68
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	8f 83       	std	Y+7, r24	; 0x07
    1a9a:	98 87       	std	Y+8, r25	; 0x08
    1a9c:	a9 87       	std	Y+9, r26	; 0x09
    1a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <KPD_u8GetKey+0x1d2>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	3f c0       	rjmp	.+126    	; 0x1b40 <KPD_u8GetKey+0x250>
	else if (__tmp > 65535)
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	3f ef       	ldi	r19, 0xFF	; 255
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	57 e4       	ldi	r21, 0x47	; 71
    1ad2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad6:	18 16       	cp	r1, r24
    1ad8:	4c f5       	brge	.+82     	; 0x1b2c <KPD_u8GetKey+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    1adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e2       	ldi	r20, 0x20	; 32
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	0f c0       	rjmp	.+30     	; 0x1b22 <KPD_u8GetKey+0x232>
    1b04:	88 ec       	ldi	r24, 0xC8	; 200
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9c 83       	std	Y+4, r25	; 0x04
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <KPD_u8GetKey+0x220>
    1b14:	9c 83       	std	Y+4, r25	; 0x04
    1b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <KPD_u8GetKey+0x214>
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <KPD_u8GetKey+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2e:	78 85       	ldd	r23, Y+8	; 0x08
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <KPD_u8GetKey+0x25c>
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
				    }
				     _delay_ms(10);
                     * Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8_RowsCounter][Local_u8_ColsCounter];	
    1b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b56:	48 2f       	mov	r20, r24
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	ca 01       	movw	r24, r20
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e8 58       	subi	r30, 0x88	; 136
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 81       	ld	r24, Z
    1b76:	ea a1       	ldd	r30, Y+34	; 0x22
    1b78:	fb a1       	ldd	r31, Y+35	; 0x23
    1b7a:	80 83       	st	Z, r24
                     Local_u8Flag = 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b80:	07 c0       	rjmp	.+14     	; 0x1b90 <KPD_u8GetKey+0x2a0>
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    1b82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	8e 8f       	std	Y+30, r24	; 0x1e
    1b88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <KPD_u8GetKey+0x2a0>
    1b8e:	d8 ce       	rjmp	.-592    	; 0x1940 <KPD_u8GetKey+0x50>
					break;
					
			    }
		     }
			 /* Deactivate currently Row  */
		     DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_HIGH);
    1b90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	fc 01       	movw	r30, r24
    1b98:	e8 57       	subi	r30, 0x78	; 120
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	90 81       	ld	r25, Z
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	69 2f       	mov	r22, r25
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
		   	 if(Local_u8Flag == 1)
    1ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	49 f0       	breq	.+18     	; 0x1bc0 <KPD_u8GetKey+0x2d0>
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    1bae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bb0:	8f 5f       	subi	r24, 0xFF	; 255
    1bb2:	8f 8f       	std	Y+31, r24	; 0x1f
    1bb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bb6:	84 30       	cpi	r24, 0x04	; 4
    1bb8:	08 f4       	brcc	.+2      	; 0x1bbc <KPD_u8GetKey+0x2cc>
    1bba:	b4 ce       	rjmp	.-664    	; 0x1924 <KPD_u8GetKey+0x34>
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <KPD_u8GetKey+0x2d0>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1bbe:	18 a2       	std	Y+32, r1	; 0x20
	}
	return Local_u8ErrorState;
    1bc0:	88 a1       	ldd	r24, Y+32	; 0x20
	
}
    1bc2:	a3 96       	adiw	r28, 0x23	; 35
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit     (void)
{
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	cc 54       	subi	r28, 0x4C	; 76
    1be2:	d0 40       	sbci	r29, 0x00	; 0
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e7 5b       	subi	r30, 0xB7	; 183
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	ac e0       	ldi	r26, 0x0C	; 12
    1bfa:	b2 e4       	ldi	r27, 0x42	; 66
    1bfc:	80 83       	st	Z, r24
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	a2 83       	std	Z+2, r26	; 0x02
    1c02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c04:	8e 01       	movw	r16, r28
    1c06:	0b 5b       	subi	r16, 0xBB	; 187
    1c08:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e7 5b       	subi	r30, 0xB7	; 183
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	4a ef       	ldi	r20, 0xFA	; 250
    1c1e:	54 e4       	ldi	r21, 0x44	; 68
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	f8 01       	movw	r30, r16
    1c2a:	80 83       	st	Z, r24
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	a2 83       	std	Z+2, r26	; 0x02
    1c30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c32:	fe 01       	movw	r30, r28
    1c34:	eb 5b       	subi	r30, 0xBB	; 187
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	44 f4       	brge	.+16     	; 0x1c60 <LCD_voidInit+0x8c>
		__ticks = 1;
    1c50:	fe 01       	movw	r30, r28
    1c52:	ed 5b       	subi	r30, 0xBD	; 189
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	80 83       	st	Z, r24
    1c5e:	64 c0       	rjmp	.+200    	; 0x1d28 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1c60:	fe 01       	movw	r30, r28
    1c62:	eb 5b       	subi	r30, 0xBB	; 187
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	0c f0       	brlt	.+2      	; 0x1c80 <LCD_voidInit+0xac>
    1c7e:	43 c0       	rjmp	.+134    	; 0x1d06 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c80:	fe 01       	movw	r30, r28
    1c82:	e7 5b       	subi	r30, 0xB7	; 183
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8e 01       	movw	r16, r28
    1ca0:	0d 5b       	subi	r16, 0xBD	; 189
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
    1cb6:	1f c0       	rjmp	.+62     	; 0x1cf6 <LCD_voidInit+0x122>
    1cb8:	fe 01       	movw	r30, r28
    1cba:	ef 5b       	subi	r30, 0xBF	; 191
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	88 ec       	ldi	r24, 0xC8	; 200
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	ef 5b       	subi	r30, 0xBF	; 191
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 81       	ld	r24, Z
    1cce:	91 81       	ldd	r25, Z+1	; 0x01
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_voidInit+0xfc>
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ef 5b       	subi	r30, 0xBF	; 191
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cde:	de 01       	movw	r26, r28
    1ce0:	ad 5b       	subi	r26, 0xBD	; 189
    1ce2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ed 5b       	subi	r30, 0xBD	; 189
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	11 96       	adiw	r26, 0x01	; 1
    1cf2:	9c 93       	st	X, r25
    1cf4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ed 5b       	subi	r30, 0xBD	; 189
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	d1 f6       	brne	.-76     	; 0x1cb8 <LCD_voidInit+0xe4>
    1d04:	24 c0       	rjmp	.+72     	; 0x1d4e <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d06:	8e 01       	movw	r16, r28
    1d08:	0d 5b       	subi	r16, 0xBD	; 189
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	eb 5b       	subi	r30, 0xBB	; 187
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	f8 01       	movw	r30, r16
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 5b       	subi	r30, 0xBD	; 189
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	fe 01       	movw	r30, r28
    1d34:	ff 96       	adiw	r30, 0x3f	; 63
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	ff 96       	adiw	r30, 0x3f	; 63
    1d3e:	80 81       	ld	r24, Z
    1d40:	91 81       	ldd	r25, Z+1	; 0x01
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_voidInit+0x16e>
    1d46:	fe 01       	movw	r30, r28
    1d48:	ff 96       	adiw	r30, 0x3f	; 63
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd 0b00111000 */
	LCD_voidSendCmnd(0b00111000);
    1d4e:	88 e3       	ldi	r24, 0x38	; 56
    1d50:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e2       	ldi	r26, 0x20	; 32
    1d5a:	b2 e4       	ldi	r27, 0x42	; 66
    1d5c:	8b af       	std	Y+59, r24	; 0x3b
    1d5e:	9c af       	std	Y+60, r25	; 0x3c
    1d60:	ad af       	std	Y+61, r26	; 0x3d
    1d62:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d64:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d66:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d6c:	2b ea       	ldi	r18, 0xAB	; 171
    1d6e:	3a ea       	ldi	r19, 0xAA	; 170
    1d70:	4a e2       	ldi	r20, 0x2A	; 42
    1d72:	50 e4       	ldi	r21, 0x40	; 64
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8f ab       	std	Y+55, r24	; 0x37
    1d7e:	98 af       	std	Y+56, r25	; 0x38
    1d80:	a9 af       	std	Y+57, r26	; 0x39
    1d82:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d84:	6f a9       	ldd	r22, Y+55	; 0x37
    1d86:	78 ad       	ldd	r23, Y+56	; 0x38
    1d88:	89 ad       	ldd	r24, Y+57	; 0x39
    1d8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	1c f4       	brge	.+6      	; 0x1da2 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	8e ab       	std	Y+54, r24	; 0x36
    1da0:	91 c0       	rjmp	.+290    	; 0x1ec4 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1da2:	6f a9       	ldd	r22, Y+55	; 0x37
    1da4:	78 ad       	ldd	r23, Y+56	; 0x38
    1da6:	89 ad       	ldd	r24, Y+57	; 0x39
    1da8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	53 e4       	ldi	r21, 0x43	; 67
    1db2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <LCD_voidInit+0x1e8>
    1dba:	7b c0       	rjmp	.+246    	; 0x1eb2 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1dbc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dbe:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a e7       	ldi	r20, 0x7A	; 122
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8a ab       	std	Y+50, r24	; 0x32
    1dd6:	9b ab       	std	Y+51, r25	; 0x33
    1dd8:	ac ab       	std	Y+52, r26	; 0x34
    1dda:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	6a a9       	ldd	r22, Y+50	; 0x32
    1dde:	7b a9       	ldd	r23, Y+51	; 0x33
    1de0:	8c a9       	ldd	r24, Y+52	; 0x34
    1de2:	9d a9       	ldd	r25, Y+53	; 0x35
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a ef       	ldi	r20, 0xFA	; 250
    1dea:	54 e4       	ldi	r21, 0x44	; 68
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8e a7       	std	Y+46, r24	; 0x2e
    1df6:	9f a7       	std	Y+47, r25	; 0x2f
    1df8:	a8 ab       	std	Y+48, r26	; 0x30
    1dfa:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1dfc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dfe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e00:	88 a9       	ldd	r24, Y+48	; 0x30
    1e02:	99 a9       	ldd	r25, Y+49	; 0x31
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <LCD_voidInit+0x24a>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9d a7       	std	Y+45, r25	; 0x2d
    1e1a:	8c a7       	std	Y+44, r24	; 0x2c
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1e1e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e20:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e22:	88 a9       	ldd	r24, Y+48	; 0x30
    1e24:	99 a9       	ldd	r25, Y+49	; 0x31
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	6a a9       	ldd	r22, Y+50	; 0x32
    1e38:	7b a9       	ldd	r23, Y+51	; 0x33
    1e3a:	8c a9       	ldd	r24, Y+52	; 0x34
    1e3c:	9d a9       	ldd	r25, Y+53	; 0x35
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9d a7       	std	Y+45, r25	; 0x2d
    1e5c:	8c a7       	std	Y+44, r24	; 0x2c
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <LCD_voidInit+0x2aa>
    1e60:	88 ec       	ldi	r24, 0xC8	; 200
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9b a7       	std	Y+43, r25	; 0x2b
    1e66:	8a a7       	std	Y+42, r24	; 0x2a
    1e68:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e6a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_voidInit+0x298>
    1e70:	9b a7       	std	Y+43, r25	; 0x2b
    1e72:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e76:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9d a7       	std	Y+45, r25	; 0x2d
    1e7c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e80:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <LCD_voidInit+0x28c>
    1e86:	24 c0       	rjmp	.+72     	; 0x1ed0 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e8a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e8c:	88 a9       	ldd	r24, Y+48	; 0x30
    1e8e:	99 a9       	ldd	r25, Y+49	; 0x31
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9d a7       	std	Y+45, r25	; 0x2d
    1e9a:	8c a7       	std	Y+44, r24	; 0x2c
    1e9c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e9e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ea0:	99 a7       	std	Y+41, r25	; 0x29
    1ea2:	88 a7       	std	Y+40, r24	; 0x28
    1ea4:	88 a5       	ldd	r24, Y+40	; 0x28
    1ea6:	99 a5       	ldd	r25, Y+41	; 0x29
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_voidInit+0x2d4>
    1eac:	99 a7       	std	Y+41, r25	; 0x29
    1eae:	88 a7       	std	Y+40, r24	; 0x28
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eb2:	6f a9       	ldd	r22, Y+55	; 0x37
    1eb4:	78 ad       	ldd	r23, Y+56	; 0x38
    1eb6:	89 ad       	ldd	r24, Y+57	; 0x39
    1eb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8e ab       	std	Y+54, r24	; 0x36
    1ec4:	8e a9       	ldd	r24, Y+54	; 0x36
    1ec6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ec8:	8f a1       	ldd	r24, Y+39	; 0x27
    1eca:	8a 95       	dec	r24
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <LCD_voidInit+0x2f6>
    1ece:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    1ed0:	8f e0       	ldi	r24, 0x0F	; 15
    1ed2:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e2       	ldi	r26, 0x20	; 32
    1edc:	b2 e4       	ldi	r27, 0x42	; 66
    1ede:	8b a3       	std	Y+35, r24	; 0x23
    1ee0:	9c a3       	std	Y+36, r25	; 0x24
    1ee2:	ad a3       	std	Y+37, r26	; 0x25
    1ee4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eea:	8d a1       	ldd	r24, Y+37	; 0x25
    1eec:	9e a1       	ldd	r25, Y+38	; 0x26
    1eee:	2b ea       	ldi	r18, 0xAB	; 171
    1ef0:	3a ea       	ldi	r19, 0xAA	; 170
    1ef2:	4a e2       	ldi	r20, 0x2A	; 42
    1ef4:	50 e4       	ldi	r21, 0x40	; 64
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	8f 8f       	std	Y+31, r24	; 0x1f
    1f00:	98 a3       	std	Y+32, r25	; 0x20
    1f02:	a9 a3       	std	Y+33, r26	; 0x21
    1f04:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1f06:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f08:	78 a1       	ldd	r23, Y+32	; 0x20
    1f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e8       	ldi	r20, 0x80	; 128
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	1c f4       	brge	.+6      	; 0x1f24 <LCD_voidInit+0x350>
		__ticks = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	8e 8f       	std	Y+30, r24	; 0x1e
    1f22:	91 c0       	rjmp	.+290    	; 0x2046 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1f24:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f26:	78 a1       	ldd	r23, Y+32	; 0x20
    1f28:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	53 e4       	ldi	r21, 0x43	; 67
    1f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <LCD_voidInit+0x36a>
    1f3c:	7b c0       	rjmp	.+246    	; 0x2034 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1f3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f40:	7c a1       	ldd	r23, Y+36	; 0x24
    1f42:	8d a1       	ldd	r24, Y+37	; 0x25
    1f44:	9e a1       	ldd	r25, Y+38	; 0x26
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8a 8f       	std	Y+26, r24	; 0x1a
    1f58:	9b 8f       	std	Y+27, r25	; 0x1b
    1f5a:	ac 8f       	std	Y+28, r26	; 0x1c
    1f5c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f60:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f64:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8e 8b       	std	Y+22, r24	; 0x16
    1f78:	9f 8b       	std	Y+23, r25	; 0x17
    1f7a:	a8 8f       	std	Y+24, r26	; 0x18
    1f7c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1f7e:	6e 89       	ldd	r22, Y+22	; 0x16
    1f80:	7f 89       	ldd	r23, Y+23	; 0x17
    1f82:	88 8d       	ldd	r24, Y+24	; 0x18
    1f84:	99 8d       	ldd	r25, Y+25	; 0x19
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9d 8b       	std	Y+21, r25	; 0x15
    1f9c:	8c 8b       	std	Y+20, r24	; 0x14
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1fa0:	6e 89       	ldd	r22, Y+22	; 0x16
    1fa2:	7f 89       	ldd	r23, Y+23	; 0x17
    1fa4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fa6:	99 8d       	ldd	r25, Y+25	; 0x19
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1fba:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1fbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fbe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9d 8b       	std	Y+21, r25	; 0x15
    1fde:	8c 8b       	std	Y+20, r24	; 0x14
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_voidInit+0x42c>
    1fe2:	88 ec       	ldi	r24, 0xC8	; 200
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9b 8b       	std	Y+19, r25	; 0x13
    1fe8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fea:	8a 89       	ldd	r24, Y+18	; 0x12
    1fec:	9b 89       	ldd	r25, Y+19	; 0x13
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_voidInit+0x41a>
    1ff2:	9b 8b       	std	Y+19, r25	; 0x13
    1ff4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ff8:	9d 89       	ldd	r25, Y+21	; 0x15
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9d 8b       	std	Y+21, r25	; 0x15
    1ffe:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8c 89       	ldd	r24, Y+20	; 0x14
    2002:	9d 89       	ldd	r25, Y+21	; 0x15
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <LCD_voidInit+0x40e>
    2008:	24 c0       	rjmp	.+72     	; 0x2052 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6e 89       	ldd	r22, Y+22	; 0x16
    200c:	7f 89       	ldd	r23, Y+23	; 0x17
    200e:	88 8d       	ldd	r24, Y+24	; 0x18
    2010:	99 8d       	ldd	r25, Y+25	; 0x19
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9d 8b       	std	Y+21, r25	; 0x15
    201c:	8c 8b       	std	Y+20, r24	; 0x14
    201e:	8c 89       	ldd	r24, Y+20	; 0x14
    2020:	9d 89       	ldd	r25, Y+21	; 0x15
    2022:	99 8b       	std	Y+17, r25	; 0x11
    2024:	88 8b       	std	Y+16, r24	; 0x10
    2026:	88 89       	ldd	r24, Y+16	; 0x10
    2028:	99 89       	ldd	r25, Y+17	; 0x11
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_voidInit+0x456>
    202e:	99 8b       	std	Y+17, r25	; 0x11
    2030:	88 8b       	std	Y+16, r24	; 0x10
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2034:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2036:	78 a1       	ldd	r23, Y+32	; 0x20
    2038:	89 a1       	ldd	r24, Y+33	; 0x21
    203a:	9a a1       	ldd	r25, Y+34	; 0x22
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8e 8f       	std	Y+30, r24	; 0x1e
    2046:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2048:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    204a:	8f 85       	ldd	r24, Y+15	; 0x0f
    204c:	8a 95       	dec	r24
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_voidInit+0x478>
    2050:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e4       	ldi	r27, 0x40	; 64
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <LCD_voidInit+0x4d6>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_voidInit+0x536>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_voidInit+0x524>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <LCD_voidInit+0x518>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_voidInit+0x560>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    213c:	86 e0       	ldi	r24, 0x06	; 6
    213e:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
	
}
    2142:	c4 5b       	subi	r28, 0xB4	; 180
    2144:	df 4f       	sbci	r29, 0xFF	; 255
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	08 95       	ret

0000215a <LCD_voidClear>:

void LCD_voidClear       (void)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	2e 97       	sbiw	r28, 0x0e	; 14
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00000001);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 ea       	ldi	r26, 0xA0	; 160
    217a:	b1 e4       	ldi	r27, 0x41	; 65
    217c:	8b 87       	std	Y+11, r24	; 0x0b
    217e:	9c 87       	std	Y+12, r25	; 0x0c
    2180:	ad 87       	std	Y+13, r26	; 0x0d
    2182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6b 85       	ldd	r22, Y+11	; 0x0b
    2186:	7c 85       	ldd	r23, Y+12	; 0x0c
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	8f 83       	std	Y+7, r24	; 0x07
    219e:	98 87       	std	Y+8, r25	; 0x08
    21a0:	a9 87       	std	Y+9, r26	; 0x09
    21a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a4:	6f 81       	ldd	r22, Y+7	; 0x07
    21a6:	78 85       	ldd	r23, Y+8	; 0x08
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <LCD_voidClear+0x6c>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_voidClear+0xcc>
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_voidClear+0xba>
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <LCD_voidClear+0xae>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_voidClear+0xf6>
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2258:	2e 96       	adiw	r28, 0x0e	; 14
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <LCD_voidCursorBlinkerOff>:

void LCD_voidCursorBlinkerOff(void)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	2e 97       	sbiw	r28, 0x0e	; 14
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00001100);
    227e:	8c e0       	ldi	r24, 0x0C	; 12
    2280:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 ea       	ldi	r26, 0xA0	; 160
    228a:	b1 e4       	ldi	r27, 0x41	; 65
    228c:	8b 87       	std	Y+11, r24	; 0x0b
    228e:	9c 87       	std	Y+12, r25	; 0x0c
    2290:	ad 87       	std	Y+13, r26	; 0x0d
    2292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2294:	6b 85       	ldd	r22, Y+11	; 0x0b
    2296:	7c 85       	ldd	r23, Y+12	; 0x0c
    2298:	8d 85       	ldd	r24, Y+13	; 0x0d
    229a:	9e 85       	ldd	r25, Y+14	; 0x0e
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	4a ef       	ldi	r20, 0xFA	; 250
    22a2:	54 e4       	ldi	r21, 0x44	; 68
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	8f 83       	std	Y+7, r24	; 0x07
    22ae:	98 87       	std	Y+8, r25	; 0x08
    22b0:	a9 87       	std	Y+9, r26	; 0x09
    22b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e8       	ldi	r20, 0x80	; 128
    22c2:	5f e3       	ldi	r21, 0x3F	; 63
    22c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c8:	88 23       	and	r24, r24
    22ca:	2c f4       	brge	.+10     	; 0x22d6 <LCD_voidCursorBlinkerOff+0x6c>
		__ticks = 1;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	3f c0       	rjmp	.+126    	; 0x2354 <LCD_voidCursorBlinkerOff+0xea>
	else if (__tmp > 65535)
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	3f ef       	ldi	r19, 0xFF	; 255
    22e2:	4f e7       	ldi	r20, 0x7F	; 127
    22e4:	57 e4       	ldi	r21, 0x47	; 71
    22e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ea:	18 16       	cp	r1, r24
    22ec:	4c f5       	brge	.+82     	; 0x2340 <LCD_voidCursorBlinkerOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e2       	ldi	r20, 0x20	; 32
    22fc:	51 e4       	ldi	r21, 0x41	; 65
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <LCD_voidCursorBlinkerOff+0xcc>
    2318:	88 ec       	ldi	r24, 0xC8	; 200
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9c 83       	std	Y+4, r25	; 0x04
    231e:	8b 83       	std	Y+3, r24	; 0x03
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <LCD_voidCursorBlinkerOff+0xba>
    2328:	9c 83       	std	Y+4, r25	; 0x04
    232a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	69 f7       	brne	.-38     	; 0x2318 <LCD_voidCursorBlinkerOff+0xae>
    233e:	14 c0       	rjmp	.+40     	; 0x2368 <LCD_voidCursorBlinkerOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <LCD_voidCursorBlinkerOff+0xf6>
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2368:	2e 96       	adiw	r28, 0x0e	; 14
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <LCD_voidSendCmnd>:

void LCD_voidSendCmnd (u8 Copy_u8Cmnd)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	e1 97       	sbiw	r28, 0x31	; 49
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2390:	83 e0       	ldi	r24, 0x03	; 3
    2392:	67 e0       	ldi	r22, 0x07	; 7
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    239a:	83 e0       	ldi	r24, 0x03	; 3
    239c:	66 e0       	ldi	r22, 0x06	; 6
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
	/* Send Cmnd byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	69 a9       	ldd	r22, Y+49	; 0x31
    23a8:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	65 e0       	ldi	r22, 0x05	; 5
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e8       	ldi	r26, 0x80	; 128
    23bc:	bf e3       	ldi	r27, 0x3F	; 63
    23be:	8d a7       	std	Y+45, r24	; 0x2d
    23c0:	9e a7       	std	Y+46, r25	; 0x2e
    23c2:	af a7       	std	Y+47, r26	; 0x2f
    23c4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    23c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    23ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    23cc:	98 a9       	ldd	r25, Y+48	; 0x30
    23ce:	2b ea       	ldi	r18, 0xAB	; 171
    23d0:	3a ea       	ldi	r19, 0xAA	; 170
    23d2:	4a e2       	ldi	r20, 0x2A	; 42
    23d4:	50 e4       	ldi	r21, 0x40	; 64
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	89 a7       	std	Y+41, r24	; 0x29
    23e0:	9a a7       	std	Y+42, r25	; 0x2a
    23e2:	ab a7       	std	Y+43, r26	; 0x2b
    23e4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    23e6:	69 a5       	ldd	r22, Y+41	; 0x29
    23e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    23ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	5f e3       	ldi	r21, 0x3F	; 63
    23f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23fa:	88 23       	and	r24, r24
    23fc:	1c f4       	brge	.+6      	; 0x2404 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	88 a7       	std	Y+40, r24	; 0x28
    2402:	91 c0       	rjmp	.+290    	; 0x2526 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2404:	69 a5       	ldd	r22, Y+41	; 0x29
    2406:	7a a5       	ldd	r23, Y+42	; 0x2a
    2408:	8b a5       	ldd	r24, Y+43	; 0x2b
    240a:	9c a5       	ldd	r25, Y+44	; 0x2c
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4f e7       	ldi	r20, 0x7F	; 127
    2412:	53 e4       	ldi	r21, 0x43	; 67
    2414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2418:	18 16       	cp	r1, r24
    241a:	0c f0       	brlt	.+2      	; 0x241e <LCD_voidSendCmnd+0xa4>
    241c:	7b c0       	rjmp	.+246    	; 0x2514 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    241e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2420:	7e a5       	ldd	r23, Y+46	; 0x2e
    2422:	8f a5       	ldd	r24, Y+47	; 0x2f
    2424:	98 a9       	ldd	r25, Y+48	; 0x30
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a e7       	ldi	r20, 0x7A	; 122
    242c:	54 e4       	ldi	r21, 0x44	; 68
    242e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8c a3       	std	Y+36, r24	; 0x24
    2438:	9d a3       	std	Y+37, r25	; 0x25
    243a:	ae a3       	std	Y+38, r26	; 0x26
    243c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	6c a1       	ldd	r22, Y+36	; 0x24
    2440:	7d a1       	ldd	r23, Y+37	; 0x25
    2442:	8e a1       	ldd	r24, Y+38	; 0x26
    2444:	9f a1       	ldd	r25, Y+39	; 0x27
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a ef       	ldi	r20, 0xFA	; 250
    244c:	54 e4       	ldi	r21, 0x44	; 68
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	88 a3       	std	Y+32, r24	; 0x20
    2458:	99 a3       	std	Y+33, r25	; 0x21
    245a:	aa a3       	std	Y+34, r26	; 0x22
    245c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    245e:	68 a1       	ldd	r22, Y+32	; 0x20
    2460:	79 a1       	ldd	r23, Y+33	; 0x21
    2462:	8a a1       	ldd	r24, Y+34	; 0x22
    2464:	9b a1       	ldd	r25, Y+35	; 0x23
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9f 8f       	std	Y+31, r25	; 0x1f
    247c:	8e 8f       	std	Y+30, r24	; 0x1e
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2480:	68 a1       	ldd	r22, Y+32	; 0x20
    2482:	79 a1       	ldd	r23, Y+33	; 0x21
    2484:	8a a1       	ldd	r24, Y+34	; 0x22
    2486:	9b a1       	ldd	r25, Y+35	; 0x23
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	6c a1       	ldd	r22, Y+36	; 0x24
    249a:	7d a1       	ldd	r23, Y+37	; 0x25
    249c:	8e a1       	ldd	r24, Y+38	; 0x26
    249e:	9f a1       	ldd	r25, Y+39	; 0x27
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9f 8f       	std	Y+31, r25	; 0x1f
    24be:	8e 8f       	std	Y+30, r24	; 0x1e
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <LCD_voidSendCmnd+0x166>
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9d 8f       	std	Y+29, r25	; 0x1d
    24c8:	8c 8f       	std	Y+28, r24	; 0x1c
    24ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_voidSendCmnd+0x154>
    24d2:	9d 8f       	std	Y+29, r25	; 0x1d
    24d4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	9f 8f       	std	Y+31, r25	; 0x1f
    24de:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <LCD_voidSendCmnd+0x148>
    24e8:	24 c0       	rjmp	.+72     	; 0x2532 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	68 a1       	ldd	r22, Y+32	; 0x20
    24ec:	79 a1       	ldd	r23, Y+33	; 0x21
    24ee:	8a a1       	ldd	r24, Y+34	; 0x22
    24f0:	9b a1       	ldd	r25, Y+35	; 0x23
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9f 8f       	std	Y+31, r25	; 0x1f
    24fc:	8e 8f       	std	Y+30, r24	; 0x1e
    24fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2500:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2502:	9b 8f       	std	Y+27, r25	; 0x1b
    2504:	8a 8f       	std	Y+26, r24	; 0x1a
    2506:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2508:	9b 8d       	ldd	r25, Y+27	; 0x1b
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_voidSendCmnd+0x190>
    250e:	9b 8f       	std	Y+27, r25	; 0x1b
    2510:	8a 8f       	std	Y+26, r24	; 0x1a
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2514:	69 a5       	ldd	r22, Y+41	; 0x29
    2516:	7a a5       	ldd	r23, Y+42	; 0x2a
    2518:	8b a5       	ldd	r24, Y+43	; 0x2b
    251a:	9c a5       	ldd	r25, Y+44	; 0x2c
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	88 a7       	std	Y+40, r24	; 0x28
    2526:	88 a5       	ldd	r24, Y+40	; 0x28
    2528:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    252a:	89 8d       	ldd	r24, Y+25	; 0x19
    252c:	8a 95       	dec	r24
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_voidSendCmnd+0x1b2>
    2530:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	65 e0       	ldi	r22, 0x05	; 5
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e8       	ldi	r26, 0x80	; 128
    2542:	bf e3       	ldi	r27, 0x3F	; 63
    2544:	8d 8b       	std	Y+21, r24	; 0x15
    2546:	9e 8b       	std	Y+22, r25	; 0x16
    2548:	af 8b       	std	Y+23, r26	; 0x17
    254a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    254c:	6d 89       	ldd	r22, Y+21	; 0x15
    254e:	7e 89       	ldd	r23, Y+22	; 0x16
    2550:	8f 89       	ldd	r24, Y+23	; 0x17
    2552:	98 8d       	ldd	r25, Y+24	; 0x18
    2554:	2b ea       	ldi	r18, 0xAB	; 171
    2556:	3a ea       	ldi	r19, 0xAA	; 170
    2558:	4a e2       	ldi	r20, 0x2A	; 42
    255a:	50 e4       	ldi	r21, 0x40	; 64
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	89 8b       	std	Y+17, r24	; 0x11
    2566:	9a 8b       	std	Y+18, r25	; 0x12
    2568:	ab 8b       	std	Y+19, r26	; 0x13
    256a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    256c:	69 89       	ldd	r22, Y+17	; 0x11
    256e:	7a 89       	ldd	r23, Y+18	; 0x12
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	1c f4       	brge	.+6      	; 0x258a <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	88 8b       	std	Y+16, r24	; 0x10
    2588:	91 c0       	rjmp	.+290    	; 0x26ac <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    258a:	69 89       	ldd	r22, Y+17	; 0x11
    258c:	7a 89       	ldd	r23, Y+18	; 0x12
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4f e7       	ldi	r20, 0x7F	; 127
    2598:	53 e4       	ldi	r21, 0x43	; 67
    259a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259e:	18 16       	cp	r1, r24
    25a0:	0c f0       	brlt	.+2      	; 0x25a4 <LCD_voidSendCmnd+0x22a>
    25a2:	7b c0       	rjmp	.+246    	; 0x269a <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    25a4:	6d 89       	ldd	r22, Y+21	; 0x15
    25a6:	7e 89       	ldd	r23, Y+22	; 0x16
    25a8:	8f 89       	ldd	r24, Y+23	; 0x17
    25aa:	98 8d       	ldd	r25, Y+24	; 0x18
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a e7       	ldi	r20, 0x7A	; 122
    25b2:	54 e4       	ldi	r21, 0x44	; 68
    25b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8c 87       	std	Y+12, r24	; 0x0c
    25be:	9d 87       	std	Y+13, r25	; 0x0d
    25c0:	ae 87       	std	Y+14, r26	; 0x0e
    25c2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    25c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    25c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a ef       	ldi	r20, 0xFA	; 250
    25d2:	54 e4       	ldi	r21, 0x44	; 68
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	88 87       	std	Y+8, r24	; 0x08
    25de:	99 87       	std	Y+9, r25	; 0x09
    25e0:	aa 87       	std	Y+10, r26	; 0x0a
    25e2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25e4:	68 85       	ldd	r22, Y+8	; 0x08
    25e6:	79 85       	ldd	r23, Y+9	; 0x09
    25e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9f 83       	std	Y+7, r25	; 0x07
    2602:	8e 83       	std	Y+6, r24	; 0x06
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2606:	68 85       	ldd	r22, Y+8	; 0x08
    2608:	79 85       	ldd	r23, Y+9	; 0x09
    260a:	8a 85       	ldd	r24, Y+10	; 0x0a
    260c:	9b 85       	ldd	r25, Y+11	; 0x0b
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2620:	7d 85       	ldd	r23, Y+13	; 0x0d
    2622:	8e 85       	ldd	r24, Y+14	; 0x0e
    2624:	9f 85       	ldd	r25, Y+15	; 0x0f
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	51 e4       	ldi	r21, 0x41	; 65
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9f 83       	std	Y+7, r25	; 0x07
    2644:	8e 83       	std	Y+6, r24	; 0x06
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <LCD_voidSendCmnd+0x2ec>
    2648:	88 ec       	ldi	r24, 0xC8	; 200
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9d 83       	std	Y+5, r25	; 0x05
    264e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	9d 81       	ldd	r25, Y+5	; 0x05
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_voidSendCmnd+0x2da>
    2658:	9d 83       	std	Y+5, r25	; 0x05
    265a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	9f 81       	ldd	r25, Y+7	; 0x07
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9f 83       	std	Y+7, r25	; 0x07
    2664:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	8e 81       	ldd	r24, Y+6	; 0x06
    2668:	9f 81       	ldd	r25, Y+7	; 0x07
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	69 f7       	brne	.-38     	; 0x2648 <LCD_voidSendCmnd+0x2ce>
    266e:	24 c0       	rjmp	.+72     	; 0x26b8 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	68 85       	ldd	r22, Y+8	; 0x08
    2672:	79 85       	ldd	r23, Y+9	; 0x09
    2674:	8a 85       	ldd	r24, Y+10	; 0x0a
    2676:	9b 85       	ldd	r25, Y+11	; 0x0b
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9f 83       	std	Y+7, r25	; 0x07
    2682:	8e 83       	std	Y+6, r24	; 0x06
    2684:	8e 81       	ldd	r24, Y+6	; 0x06
    2686:	9f 81       	ldd	r25, Y+7	; 0x07
    2688:	9b 83       	std	Y+3, r25	; 0x03
    268a:	8a 83       	std	Y+2, r24	; 0x02
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_voidSendCmnd+0x316>
    2694:	9b 83       	std	Y+3, r25	; 0x03
    2696:	8a 83       	std	Y+2, r24	; 0x02
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    269a:	69 89       	ldd	r22, Y+17	; 0x11
    269c:	7a 89       	ldd	r23, Y+18	; 0x12
    269e:	8b 89       	ldd	r24, Y+19	; 0x13
    26a0:	9c 89       	ldd	r25, Y+20	; 0x14
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	88 8b       	std	Y+16, r24	; 0x10
    26ac:	88 89       	ldd	r24, Y+16	; 0x10
    26ae:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	8a 95       	dec	r24
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_voidSendCmnd+0x338>
    26b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    26b8:	e1 96       	adiw	r28, 0x31	; 49
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <LCD_voidSendChar>:
void LCD_voidSendChar (u8 Copy_u8Char)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	e1 97       	sbiw	r28, 0x31	; 49
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 1 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    26e0:	83 e0       	ldi	r24, 0x03	; 3
    26e2:	67 e0       	ldi	r22, 0x07	; 7
    26e4:	41 e0       	ldi	r20, 0x01	; 1
    26e6:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	66 e0       	ldi	r22, 0x06	; 6
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
	/* Send Char byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	69 a9       	ldd	r22, Y+49	; 0x31
    26f8:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	65 e0       	ldi	r22, 0x05	; 5
    2700:	41 e0       	ldi	r20, 0x01	; 1
    2702:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a0 e8       	ldi	r26, 0x80	; 128
    270c:	bf e3       	ldi	r27, 0x3F	; 63
    270e:	8d a7       	std	Y+45, r24	; 0x2d
    2710:	9e a7       	std	Y+46, r25	; 0x2e
    2712:	af a7       	std	Y+47, r26	; 0x2f
    2714:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2716:	6d a5       	ldd	r22, Y+45	; 0x2d
    2718:	7e a5       	ldd	r23, Y+46	; 0x2e
    271a:	8f a5       	ldd	r24, Y+47	; 0x2f
    271c:	98 a9       	ldd	r25, Y+48	; 0x30
    271e:	2b ea       	ldi	r18, 0xAB	; 171
    2720:	3a ea       	ldi	r19, 0xAA	; 170
    2722:	4a e2       	ldi	r20, 0x2A	; 42
    2724:	50 e4       	ldi	r21, 0x40	; 64
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	89 a7       	std	Y+41, r24	; 0x29
    2730:	9a a7       	std	Y+42, r25	; 0x2a
    2732:	ab a7       	std	Y+43, r26	; 0x2b
    2734:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2736:	69 a5       	ldd	r22, Y+41	; 0x29
    2738:	7a a5       	ldd	r23, Y+42	; 0x2a
    273a:	8b a5       	ldd	r24, Y+43	; 0x2b
    273c:	9c a5       	ldd	r25, Y+44	; 0x2c
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	5f e3       	ldi	r21, 0x3F	; 63
    2746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274a:	88 23       	and	r24, r24
    274c:	1c f4       	brge	.+6      	; 0x2754 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	88 a7       	std	Y+40, r24	; 0x28
    2752:	91 c0       	rjmp	.+290    	; 0x2876 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2754:	69 a5       	ldd	r22, Y+41	; 0x29
    2756:	7a a5       	ldd	r23, Y+42	; 0x2a
    2758:	8b a5       	ldd	r24, Y+43	; 0x2b
    275a:	9c a5       	ldd	r25, Y+44	; 0x2c
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	53 e4       	ldi	r21, 0x43	; 67
    2764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	0c f0       	brlt	.+2      	; 0x276e <LCD_voidSendChar+0xa4>
    276c:	7b c0       	rjmp	.+246    	; 0x2864 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    276e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2770:	7e a5       	ldd	r23, Y+46	; 0x2e
    2772:	8f a5       	ldd	r24, Y+47	; 0x2f
    2774:	98 a9       	ldd	r25, Y+48	; 0x30
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4a e7       	ldi	r20, 0x7A	; 122
    277c:	54 e4       	ldi	r21, 0x44	; 68
    277e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	8c a3       	std	Y+36, r24	; 0x24
    2788:	9d a3       	std	Y+37, r25	; 0x25
    278a:	ae a3       	std	Y+38, r26	; 0x26
    278c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	6c a1       	ldd	r22, Y+36	; 0x24
    2790:	7d a1       	ldd	r23, Y+37	; 0x25
    2792:	8e a1       	ldd	r24, Y+38	; 0x26
    2794:	9f a1       	ldd	r25, Y+39	; 0x27
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4a ef       	ldi	r20, 0xFA	; 250
    279c:	54 e4       	ldi	r21, 0x44	; 68
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	88 a3       	std	Y+32, r24	; 0x20
    27a8:	99 a3       	std	Y+33, r25	; 0x21
    27aa:	aa a3       	std	Y+34, r26	; 0x22
    27ac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    27ae:	68 a1       	ldd	r22, Y+32	; 0x20
    27b0:	79 a1       	ldd	r23, Y+33	; 0x21
    27b2:	8a a1       	ldd	r24, Y+34	; 0x22
    27b4:	9b a1       	ldd	r25, Y+35	; 0x23
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e8       	ldi	r20, 0x80	; 128
    27bc:	5f e3       	ldi	r21, 0x3F	; 63
    27be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	2c f4       	brge	.+10     	; 0x27d0 <LCD_voidSendChar+0x106>
		__ticks = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9f 8f       	std	Y+31, r25	; 0x1f
    27cc:	8e 8f       	std	Y+30, r24	; 0x1e
    27ce:	3f c0       	rjmp	.+126    	; 0x284e <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    27d0:	68 a1       	ldd	r22, Y+32	; 0x20
    27d2:	79 a1       	ldd	r23, Y+33	; 0x21
    27d4:	8a a1       	ldd	r24, Y+34	; 0x22
    27d6:	9b a1       	ldd	r25, Y+35	; 0x23
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	4c f5       	brge	.+82     	; 0x283a <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	6c a1       	ldd	r22, Y+36	; 0x24
    27ea:	7d a1       	ldd	r23, Y+37	; 0x25
    27ec:	8e a1       	ldd	r24, Y+38	; 0x26
    27ee:	9f a1       	ldd	r25, Y+39	; 0x27
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9f 8f       	std	Y+31, r25	; 0x1f
    280e:	8e 8f       	std	Y+30, r24	; 0x1e
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <LCD_voidSendChar+0x166>
    2812:	88 ec       	ldi	r24, 0xC8	; 200
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9d 8f       	std	Y+29, r25	; 0x1d
    2818:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    281a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    281c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_voidSendChar+0x154>
    2822:	9d 8f       	std	Y+29, r25	; 0x1d
    2824:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2828:	9f 8d       	ldd	r25, Y+31	; 0x1f
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9f 8f       	std	Y+31, r25	; 0x1f
    282e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2832:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <LCD_voidSendChar+0x148>
    2838:	24 c0       	rjmp	.+72     	; 0x2882 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	68 a1       	ldd	r22, Y+32	; 0x20
    283c:	79 a1       	ldd	r23, Y+33	; 0x21
    283e:	8a a1       	ldd	r24, Y+34	; 0x22
    2840:	9b a1       	ldd	r25, Y+35	; 0x23
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9f 8f       	std	Y+31, r25	; 0x1f
    284c:	8e 8f       	std	Y+30, r24	; 0x1e
    284e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2850:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2852:	9b 8f       	std	Y+27, r25	; 0x1b
    2854:	8a 8f       	std	Y+26, r24	; 0x1a
    2856:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2858:	9b 8d       	ldd	r25, Y+27	; 0x1b
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <LCD_voidSendChar+0x190>
    285e:	9b 8f       	std	Y+27, r25	; 0x1b
    2860:	8a 8f       	std	Y+26, r24	; 0x1a
    2862:	0f c0       	rjmp	.+30     	; 0x2882 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2864:	69 a5       	ldd	r22, Y+41	; 0x29
    2866:	7a a5       	ldd	r23, Y+42	; 0x2a
    2868:	8b a5       	ldd	r24, Y+43	; 0x2b
    286a:	9c a5       	ldd	r25, Y+44	; 0x2c
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	88 a7       	std	Y+40, r24	; 0x28
    2876:	88 a5       	ldd	r24, Y+40	; 0x28
    2878:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    287a:	89 8d       	ldd	r24, Y+25	; 0x19
    287c:	8a 95       	dec	r24
    287e:	f1 f7       	brne	.-4      	; 0x287c <LCD_voidSendChar+0x1b2>
    2880:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	65 e0       	ldi	r22, 0x05	; 5
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e8       	ldi	r26, 0x80	; 128
    2892:	bf e3       	ldi	r27, 0x3F	; 63
    2894:	8d 8b       	std	Y+21, r24	; 0x15
    2896:	9e 8b       	std	Y+22, r25	; 0x16
    2898:	af 8b       	std	Y+23, r26	; 0x17
    289a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    289c:	6d 89       	ldd	r22, Y+21	; 0x15
    289e:	7e 89       	ldd	r23, Y+22	; 0x16
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	2b ea       	ldi	r18, 0xAB	; 171
    28a6:	3a ea       	ldi	r19, 0xAA	; 170
    28a8:	4a e2       	ldi	r20, 0x2A	; 42
    28aa:	50 e4       	ldi	r21, 0x40	; 64
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	89 8b       	std	Y+17, r24	; 0x11
    28b6:	9a 8b       	std	Y+18, r25	; 0x12
    28b8:	ab 8b       	std	Y+19, r26	; 0x13
    28ba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28bc:	69 89       	ldd	r22, Y+17	; 0x11
    28be:	7a 89       	ldd	r23, Y+18	; 0x12
    28c0:	8b 89       	ldd	r24, Y+19	; 0x13
    28c2:	9c 89       	ldd	r25, Y+20	; 0x14
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	1c f4       	brge	.+6      	; 0x28da <LCD_voidSendChar+0x210>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	88 8b       	std	Y+16, r24	; 0x10
    28d8:	91 c0       	rjmp	.+290    	; 0x29fc <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    28da:	69 89       	ldd	r22, Y+17	; 0x11
    28dc:	7a 89       	ldd	r23, Y+18	; 0x12
    28de:	8b 89       	ldd	r24, Y+19	; 0x13
    28e0:	9c 89       	ldd	r25, Y+20	; 0x14
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	53 e4       	ldi	r21, 0x43	; 67
    28ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ee:	18 16       	cp	r1, r24
    28f0:	0c f0       	brlt	.+2      	; 0x28f4 <LCD_voidSendChar+0x22a>
    28f2:	7b c0       	rjmp	.+246    	; 0x29ea <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    28f4:	6d 89       	ldd	r22, Y+21	; 0x15
    28f6:	7e 89       	ldd	r23, Y+22	; 0x16
    28f8:	8f 89       	ldd	r24, Y+23	; 0x17
    28fa:	98 8d       	ldd	r25, Y+24	; 0x18
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a e7       	ldi	r20, 0x7A	; 122
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	8c 87       	std	Y+12, r24	; 0x0c
    290e:	9d 87       	std	Y+13, r25	; 0x0d
    2910:	ae 87       	std	Y+14, r26	; 0x0e
    2912:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2914:	6c 85       	ldd	r22, Y+12	; 0x0c
    2916:	7d 85       	ldd	r23, Y+13	; 0x0d
    2918:	8e 85       	ldd	r24, Y+14	; 0x0e
    291a:	9f 85       	ldd	r25, Y+15	; 0x0f
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4a ef       	ldi	r20, 0xFA	; 250
    2922:	54 e4       	ldi	r21, 0x44	; 68
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	88 87       	std	Y+8, r24	; 0x08
    292e:	99 87       	std	Y+9, r25	; 0x09
    2930:	aa 87       	std	Y+10, r26	; 0x0a
    2932:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2934:	68 85       	ldd	r22, Y+8	; 0x08
    2936:	79 85       	ldd	r23, Y+9	; 0x09
    2938:	8a 85       	ldd	r24, Y+10	; 0x0a
    293a:	9b 85       	ldd	r25, Y+11	; 0x0b
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9f 83       	std	Y+7, r25	; 0x07
    2952:	8e 83       	std	Y+6, r24	; 0x06
    2954:	3f c0       	rjmp	.+126    	; 0x29d4 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2956:	68 85       	ldd	r22, Y+8	; 0x08
    2958:	79 85       	ldd	r23, Y+9	; 0x09
    295a:	8a 85       	ldd	r24, Y+10	; 0x0a
    295c:	9b 85       	ldd	r25, Y+11	; 0x0b
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	4c f5       	brge	.+82     	; 0x29c0 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2970:	7d 85       	ldd	r23, Y+13	; 0x0d
    2972:	8e 85       	ldd	r24, Y+14	; 0x0e
    2974:	9f 85       	ldd	r25, Y+15	; 0x0f
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e2       	ldi	r20, 0x20	; 32
    297c:	51 e4       	ldi	r21, 0x41	; 65
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9f 83       	std	Y+7, r25	; 0x07
    2994:	8e 83       	std	Y+6, r24	; 0x06
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <LCD_voidSendChar+0x2ec>
    2998:	88 ec       	ldi	r24, 0xC8	; 200
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9d 83       	std	Y+5, r25	; 0x05
    299e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29a0:	8c 81       	ldd	r24, Y+4	; 0x04
    29a2:	9d 81       	ldd	r25, Y+5	; 0x05
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_voidSendChar+0x2da>
    29a8:	9d 83       	std	Y+5, r25	; 0x05
    29aa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ac:	8e 81       	ldd	r24, Y+6	; 0x06
    29ae:	9f 81       	ldd	r25, Y+7	; 0x07
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	9f 83       	std	Y+7, r25	; 0x07
    29b4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b6:	8e 81       	ldd	r24, Y+6	; 0x06
    29b8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	69 f7       	brne	.-38     	; 0x2998 <LCD_voidSendChar+0x2ce>
    29be:	24 c0       	rjmp	.+72     	; 0x2a08 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c0:	68 85       	ldd	r22, Y+8	; 0x08
    29c2:	79 85       	ldd	r23, Y+9	; 0x09
    29c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    29c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9f 83       	std	Y+7, r25	; 0x07
    29d2:	8e 83       	std	Y+6, r24	; 0x06
    29d4:	8e 81       	ldd	r24, Y+6	; 0x06
    29d6:	9f 81       	ldd	r25, Y+7	; 0x07
    29d8:	9b 83       	std	Y+3, r25	; 0x03
    29da:	8a 83       	std	Y+2, r24	; 0x02
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	9b 81       	ldd	r25, Y+3	; 0x03
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_voidSendChar+0x316>
    29e4:	9b 83       	std	Y+3, r25	; 0x03
    29e6:	8a 83       	std	Y+2, r24	; 0x02
    29e8:	0f c0       	rjmp	.+30     	; 0x2a08 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ea:	69 89       	ldd	r22, Y+17	; 0x11
    29ec:	7a 89       	ldd	r23, Y+18	; 0x12
    29ee:	8b 89       	ldd	r24, Y+19	; 0x13
    29f0:	9c 89       	ldd	r25, Y+20	; 0x14
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	88 8b       	std	Y+16, r24	; 0x10
    29fc:	88 89       	ldd	r24, Y+16	; 0x10
    29fe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	8a 95       	dec	r24
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <LCD_voidSendChar+0x338>
    2a06:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    2a08:	e1 96       	adiw	r28, 0x31	; 49
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <LCD_voidWriteString>:
void LCD_voidWriteString (u8 * Copy_pu8String)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <LCD_voidWriteString+0x6>
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <LCD_voidWriteString+0x8>
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	9c 83       	std	Y+4, r25	; 0x04
    2a28:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8String != NULL )
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	21 f1       	breq	.+72     	; 0x2a7a <LCD_voidWriteString+0x60>
	{
	    u8 x = 0;
    2a32:	1a 82       	std	Y+2, r1	; 0x02
	    u8 i = 0;
    2a34:	19 82       	std	Y+1, r1	; 0x01
    2a36:	16 c0       	rjmp	.+44     	; 0x2a64 <LCD_voidWriteString+0x4a>
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	8f 5f       	subi	r24, 0xFF	; 255
    2a3c:	8a 83       	std	Y+2, r24	; 0x02
    2a3e:	0e c0       	rjmp	.+28     	; 0x2a5c <LCD_voidWriteString+0x42>
		 for(  ; i < x; i++)
		 {
		  /* Write Character on LCD */
		  LCD_voidSendChar (Copy_pu8String[i]);
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	e2 0f       	add	r30, r18
    2a4e:	f3 1f       	adc	r31, r19
    2a50:	80 81       	ld	r24, Z
    2a52:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_voidSendChar>
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
		 for(  ; i < x; i++)
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	99 81       	ldd	r25, Y+1	; 0x01
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	98 17       	cp	r25, r24
    2a62:	70 f3       	brcs	.-36     	; 0x2a40 <LCD_voidWriteString+0x26>
{
	if(Copy_pu8String != NULL )
	{
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e2 0f       	add	r30, r18
    2a72:	f3 1f       	adc	r31, r19
    2a74:	80 81       	ld	r24, Z
    2a76:	88 23       	and	r24, r24
    2a78:	f9 f6       	brne	.-66     	; 0x2a38 <LCD_voidWriteString+0x1e>
		 }
		 
		}
	}
	
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <LCD_u8_GoTo_XY>:
u8 LCD_u8_GoTo_XY     (u8 Copy_u8X,u8 Copy_u8Y)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <LCD_u8_GoTo_XY+0x6>
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <LCD_u8_GoTo_XY+0x8>
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <LCD_u8_GoTo_XY+0xa>
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	8a 83       	std	Y+2, r24	; 0x02
    2a98:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8X <=1)&&(Copy_u8Y <= 39))
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	82 30       	cpi	r24, 0x02	; 2
    2aa2:	e0 f4       	brcc	.+56     	; 0x2adc <LCD_u8_GoTo_XY+0x54>
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	88 32       	cpi	r24, 0x28	; 40
    2aa8:	c8 f4       	brcc	.+50     	; 0x2adc <LCD_u8_GoTo_XY+0x54>
	{
		switch(Copy_u8X)
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	28 2f       	mov	r18, r24
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	3d 83       	std	Y+5, r19	; 0x05
    2ab2:	2c 83       	std	Y+4, r18	; 0x04
    2ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	31 f0       	breq	.+12     	; 0x2ac8 <LCD_u8_GoTo_XY+0x40>
    2abc:	2c 81       	ldd	r18, Y+4	; 0x04
    2abe:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac0:	21 30       	cpi	r18, 0x01	; 1
    2ac2:	31 05       	cpc	r19, r1
    2ac4:	31 f0       	breq	.+12     	; 0x2ad2 <LCD_u8_GoTo_XY+0x4a>
    2ac6:	0b c0       	rjmp	.+22     	; 0x2ade <LCD_u8_GoTo_XY+0x56>
		{
		case LCD_u8_LINE0 : LCD_voidSendCmnd(0x80 + Copy_u8Y);break;
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	80 58       	subi	r24, 0x80	; 128
    2acc:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2ad0:	06 c0       	rjmp	.+12     	; 0x2ade <LCD_u8_GoTo_XY+0x56>

		case LCD_u8_LINE1 : LCD_voidSendCmnd(0xC0 + Copy_u8Y);break;
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	80 54       	subi	r24, 0x40	; 64
    2ad6:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <LCD_u8_GoTo_XY+0x56>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    2adc:	19 82       	std	Y+1, r1	; 0x01
	}


}
    2ade:	26 96       	adiw	r28, 0x06	; 6
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber (u32  Copy_u32Num)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	66 97       	sbiw	r28, 0x16	; 22
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	6b 8b       	std	Y+19, r22	; 0x13
    2b06:	7c 8b       	std	Y+20, r23	; 0x14
    2b08:	8d 8b       	std	Y+21, r24	; 0x15
    2b0a:	9e 8b       	std	Y+22, r25	; 0x16

	u8 Arr[10];
	u8 Local_Remainder = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	88 87       	std	Y+8, r24	; 0x08
	u32 Local_Number = Copy_u32Num;
    2b10:	8b 89       	ldd	r24, Y+19	; 0x13
    2b12:	9c 89       	ldd	r25, Y+20	; 0x14
    2b14:	ad 89       	ldd	r26, Y+21	; 0x15
    2b16:	be 89       	ldd	r27, Y+22	; 0x16
    2b18:	8c 83       	std	Y+4, r24	; 0x04
    2b1a:	9d 83       	std	Y+5, r25	; 0x05
    2b1c:	ae 83       	std	Y+6, r26	; 0x06
    2b1e:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_Counter = 0;
    2b20:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    2b22:	8a e0       	ldi	r24, 0x0A	; 10
    2b24:	89 83       	std	Y+1, r24	; 0x01
    2b26:	42 c0       	rjmp	.+132    	; 0x2bac <LCD_voidWriteNumber+0xbc>
	{
		Local_Remainder = Local_Number % 10 ;
    2b28:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2c:	ae 81       	ldd	r26, Y+6	; 0x06
    2b2e:	bf 81       	ldd	r27, Y+7	; 0x07
    2b30:	2a e0       	ldi	r18, 0x0A	; 10
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <__udivmodsi4>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	88 87       	std	Y+8, r24	; 0x08
		Local_Number    = Local_Number /10 ;
    2b46:	8c 81       	ldd	r24, Y+4	; 0x04
    2b48:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4a:	ae 81       	ldd	r26, Y+6	; 0x06
    2b4c:	bf 81       	ldd	r27, Y+7	; 0x07
    2b4e:	2a e0       	ldi	r18, 0x0A	; 10
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <__udivmodsi4>
    2b5e:	da 01       	movw	r26, r20
    2b60:	c9 01       	movw	r24, r18
    2b62:	8c 83       	std	Y+4, r24	; 0x04
    2b64:	9d 83       	std	Y+5, r25	; 0x05
    2b66:	ae 83       	std	Y+6, r26	; 0x06
    2b68:	bf 83       	std	Y+7, r27	; 0x07

		if((Local_Remainder ==0) && (Local_Number<1) && (Local_Counter>0) )
    2b6a:	88 85       	ldd	r24, Y+8	; 0x08
    2b6c:	88 23       	and	r24, r24
    2b6e:	59 f4       	brne	.+22     	; 0x2b86 <LCD_voidWriteNumber+0x96>
    2b70:	8c 81       	ldd	r24, Y+4	; 0x04
    2b72:	9d 81       	ldd	r25, Y+5	; 0x05
    2b74:	ae 81       	ldd	r26, Y+6	; 0x06
    2b76:	bf 81       	ldd	r27, Y+7	; 0x07
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	a1 05       	cpc	r26, r1
    2b7c:	b1 05       	cpc	r27, r1
    2b7e:	19 f4       	brne	.+6      	; 0x2b86 <LCD_voidWriteNumber+0x96>
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	88 23       	and	r24, r24
    2b84:	b9 f4       	brne	.+46     	; 0x2bb4 <LCD_voidWriteNumber+0xc4>
		{
			break;
		}
		Local_Counter ++;
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	8f 5f       	subi	r24, 0xFF	; 255
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
		Arr[initial-1] = Local_Remainder ;
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	88 2f       	mov	r24, r24
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9c 01       	movw	r18, r24
    2b94:	21 50       	subi	r18, 0x01	; 1
    2b96:	30 40       	sbci	r19, 0x00	; 0
    2b98:	ce 01       	movw	r24, r28
    2b9a:	09 96       	adiw	r24, 0x09	; 9
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	e2 0f       	add	r30, r18
    2ba0:	f3 1f       	adc	r31, r19
    2ba2:	88 85       	ldd	r24, Y+8	; 0x08
    2ba4:	80 83       	st	Z, r24
	u32 Local_Number = Copy_u32Num;
	u8 Local_Counter = 0;
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	81 50       	subi	r24, 0x01	; 1
    2baa:	89 83       	std	Y+1, r24	; 0x01
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	88 23       	and	r24, r24
    2bb0:	09 f0       	breq	.+2      	; 0x2bb4 <LCD_voidWriteNumber+0xc4>
    2bb2:	ba cf       	rjmp	.-140    	; 0x2b28 <LCD_voidWriteNumber+0x38>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    2bb4:	8a e0       	ldi	r24, 0x0A	; 10
    2bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb8:	89 1b       	sub	r24, r25
    2bba:	8a 83       	std	Y+2, r24	; 0x02
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <LCD_voidWriteNumber+0xec>
	{
		LCD_voidSendChar(Arr[Local_Counter2]+48);
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	09 96       	adiw	r24, 0x09	; 9
    2bc8:	fc 01       	movw	r30, r24
    2bca:	e2 0f       	add	r30, r18
    2bcc:	f3 1f       	adc	r31, r19
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 5d       	subi	r24, 0xD0	; 208
    2bd2:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_voidSendChar>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	8f 5f       	subi	r24, 0xFF	; 255
    2bda:	8a 83       	std	Y+2, r24	; 0x02
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	8a 30       	cpi	r24, 0x0A	; 10
    2be0:	70 f3       	brcs	.-36     	; 0x2bbe <LCD_voidWriteNumber+0xce>
		LCD_voidSendChar(Arr[Local_Counter2]+48);
	}



}
    2be2:	66 96       	adiw	r28, 0x16	; 22
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharNo,u8 Copy_u8X,u8 Copy_u8Y,u8 * Copy_PSpecialChar)
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	28 97       	sbiw	r28, 0x08	; 8
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	8a 83       	std	Y+2, r24	; 0x02
    2c0a:	6b 83       	std	Y+3, r22	; 0x03
    2c0c:	4c 83       	std	Y+4, r20	; 0x04
    2c0e:	3e 83       	std	Y+6, r19	; 0x06
    2c10:	2d 83       	std	Y+5, r18	; 0x05

	switch(Copy_u8CharNo)
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	38 87       	std	Y+8, r19	; 0x08
    2c1a:	2f 83       	std	Y+7, r18	; 0x07
    2c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c1e:	98 85       	ldd	r25, Y+8	; 0x08
    2c20:	83 30       	cpi	r24, 0x03	; 3
    2c22:	91 05       	cpc	r25, r1
    2c24:	a9 f1       	breq	.+106    	; 0x2c90 <LCD_voidSendSpecialChar+0x9c>
    2c26:	2f 81       	ldd	r18, Y+7	; 0x07
    2c28:	38 85       	ldd	r19, Y+8	; 0x08
    2c2a:	24 30       	cpi	r18, 0x04	; 4
    2c2c:	31 05       	cpc	r19, r1
    2c2e:	7c f4       	brge	.+30     	; 0x2c4e <LCD_voidSendSpecialChar+0x5a>
    2c30:	8f 81       	ldd	r24, Y+7	; 0x07
    2c32:	98 85       	ldd	r25, Y+8	; 0x08
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	91 05       	cpc	r25, r1
    2c38:	19 f1       	breq	.+70     	; 0x2c80 <LCD_voidSendSpecialChar+0x8c>
    2c3a:	2f 81       	ldd	r18, Y+7	; 0x07
    2c3c:	38 85       	ldd	r19, Y+8	; 0x08
    2c3e:	22 30       	cpi	r18, 0x02	; 2
    2c40:	31 05       	cpc	r19, r1
    2c42:	14 f5       	brge	.+68     	; 0x2c88 <LCD_voidSendSpecialChar+0x94>
    2c44:	8f 81       	ldd	r24, Y+7	; 0x07
    2c46:	98 85       	ldd	r25, Y+8	; 0x08
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	b1 f0       	breq	.+44     	; 0x2c78 <LCD_voidSendSpecialChar+0x84>
    2c4c:	34 c0       	rjmp	.+104    	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>
    2c4e:	2f 81       	ldd	r18, Y+7	; 0x07
    2c50:	38 85       	ldd	r19, Y+8	; 0x08
    2c52:	25 30       	cpi	r18, 0x05	; 5
    2c54:	31 05       	cpc	r19, r1
    2c56:	21 f1       	breq	.+72     	; 0x2ca0 <LCD_voidSendSpecialChar+0xac>
    2c58:	8f 81       	ldd	r24, Y+7	; 0x07
    2c5a:	98 85       	ldd	r25, Y+8	; 0x08
    2c5c:	85 30       	cpi	r24, 0x05	; 5
    2c5e:	91 05       	cpc	r25, r1
    2c60:	dc f0       	brlt	.+54     	; 0x2c98 <LCD_voidSendSpecialChar+0xa4>
    2c62:	2f 81       	ldd	r18, Y+7	; 0x07
    2c64:	38 85       	ldd	r19, Y+8	; 0x08
    2c66:	26 30       	cpi	r18, 0x06	; 6
    2c68:	31 05       	cpc	r19, r1
    2c6a:	f1 f0       	breq	.+60     	; 0x2ca8 <LCD_voidSendSpecialChar+0xb4>
    2c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c6e:	98 85       	ldd	r25, Y+8	; 0x08
    2c70:	87 30       	cpi	r24, 0x07	; 7
    2c72:	91 05       	cpc	r25, r1
    2c74:	e9 f0       	breq	.+58     	; 0x2cb0 <LCD_voidSendSpecialChar+0xbc>
    2c76:	1f c0       	rjmp	.+62     	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>
	{
	case 0:
		LCD_voidSendCmnd(0b01000000);
    2c78:	80 e4       	ldi	r24, 0x40	; 64
    2c7a:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2c7e:	1b c0       	rjmp	.+54     	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>

		break;
	case 1:
	    LCD_voidSendCmnd(0b01001000);
    2c80:	88 e4       	ldi	r24, 0x48	; 72
    2c82:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2c86:	17 c0       	rjmp	.+46     	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 2:
	    LCD_voidSendCmnd(0b01010000);
    2c88:	80 e5       	ldi	r24, 0x50	; 80
    2c8a:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2c8e:	13 c0       	rjmp	.+38     	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 3:
	    LCD_voidSendCmnd(0b01011000);
    2c90:	88 e5       	ldi	r24, 0x58	; 88
    2c92:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2c96:	0f c0       	rjmp	.+30     	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 4:
	    LCD_voidSendCmnd(0b01100000);
    2c98:	80 e6       	ldi	r24, 0x60	; 96
    2c9a:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2c9e:	0b c0       	rjmp	.+22     	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 5:
	    LCD_voidSendCmnd(0b01101000);
    2ca0:	88 e6       	ldi	r24, 0x68	; 104
    2ca2:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2ca6:	07 c0       	rjmp	.+14     	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 6:
	    LCD_voidSendCmnd(0b01110000);
    2ca8:	80 e7       	ldi	r24, 0x70	; 112
    2caa:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
    2cae:	03 c0       	rjmp	.+6      	; 0x2cb6 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 7:
	    LCD_voidSendCmnd(0b01111000);
    2cb0:	88 e7       	ldi	r24, 0x78	; 120
    2cb2:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    2cb6:	19 82       	std	Y+1, r1	; 0x01
    2cb8:	0e c0       	rjmp	.+28     	; 0x2cd6 <LCD_voidSendSpecialChar+0xe2>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	e2 0f       	add	r30, r18
    2cc8:	f3 1f       	adc	r31, r19
    2cca:	80 81       	ld	r24, Z
    2ccc:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_voidSendChar>
	    LCD_voidSendCmnd(0b01111000);
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	8f 5f       	subi	r24, 0xFF	; 255
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	88 30       	cpi	r24, 0x08	; 8
    2cda:	78 f3       	brcs	.-34     	; 0x2cba <LCD_voidSendSpecialChar+0xc6>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
	 }

	 LCD_u8_GoTo_XY( Copy_u8X, Copy_u8Y);
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	6c 81       	ldd	r22, Y+4	; 0x04
    2ce0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
	 LCD_voidSendChar(Copy_u8CharNo);
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_voidSendChar>


}
    2cea:	28 96       	adiw	r28, 0x08	; 8
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <LCD_voidShiftDispRight>:

void LCD_voidShiftDispRight(void)
{
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011100);
    2d04:	8c e1       	ldi	r24, 0x1C	; 28
    2d06:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
}
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <LCD_voidShiftDispLeft>:
void LCD_voidShiftDispLeft(void)
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011000);
    2d18:	88 e1       	ldi	r24, 0x18	; 24
    2d1a:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidSendCmnd>
}
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <main>:
#include "LCD_interface.h"



int main(void)
{
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	cc 5f       	subi	r28, 0xFC	; 252
    2d32:	d1 40       	sbci	r29, 0x01	; 1
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
						        0b00000100,
						        0b00000111,
						        0b00001100,
						        0b00010100,
						        0b00001010,
						        0b00001010};
    2d3e:	ce 01       	movw	r24, r28
    2d40:	87 53       	subi	r24, 0x37	; 55
    2d42:	9e 4f       	sbci	r25, 0xFE	; 254
    2d44:	c7 51       	subi	r28, 0x17	; 23
    2d46:	de 4f       	sbci	r29, 0xFE	; 254
    2d48:	99 83       	std	Y+1, r25	; 0x01
    2d4a:	88 83       	st	Y, r24
    2d4c:	c9 5e       	subi	r28, 0xE9	; 233
    2d4e:	d1 40       	sbci	r29, 0x01	; 1
    2d50:	88 ea       	ldi	r24, 0xA8	; 168
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	c5 51       	subi	r28, 0x15	; 21
    2d56:	de 4f       	sbci	r29, 0xFE	; 254
    2d58:	99 83       	std	Y+1, r25	; 0x01
    2d5a:	88 83       	st	Y, r24
    2d5c:	cb 5e       	subi	r28, 0xEB	; 235
    2d5e:	d1 40       	sbci	r29, 0x01	; 1
    2d60:	98 e0       	ldi	r25, 0x08	; 8
    2d62:	c3 51       	subi	r28, 0x13	; 19
    2d64:	de 4f       	sbci	r29, 0xFE	; 254
    2d66:	98 83       	st	Y, r25
    2d68:	cd 5e       	subi	r28, 0xED	; 237
    2d6a:	d1 40       	sbci	r29, 0x01	; 1
    2d6c:	c5 51       	subi	r28, 0x15	; 21
    2d6e:	de 4f       	sbci	r29, 0xFE	; 254
    2d70:	e8 81       	ld	r30, Y
    2d72:	f9 81       	ldd	r31, Y+1	; 0x01
    2d74:	cb 5e       	subi	r28, 0xEB	; 235
    2d76:	d1 40       	sbci	r29, 0x01	; 1
    2d78:	00 80       	ld	r0, Z
    2d7a:	c5 51       	subi	r28, 0x15	; 21
    2d7c:	de 4f       	sbci	r29, 0xFE	; 254
    2d7e:	88 81       	ld	r24, Y
    2d80:	99 81       	ldd	r25, Y+1	; 0x01
    2d82:	cb 5e       	subi	r28, 0xEB	; 235
    2d84:	d1 40       	sbci	r29, 0x01	; 1
    2d86:	01 96       	adiw	r24, 0x01	; 1
    2d88:	c5 51       	subi	r28, 0x15	; 21
    2d8a:	de 4f       	sbci	r29, 0xFE	; 254
    2d8c:	99 83       	std	Y+1, r25	; 0x01
    2d8e:	88 83       	st	Y, r24
    2d90:	cb 5e       	subi	r28, 0xEB	; 235
    2d92:	d1 40       	sbci	r29, 0x01	; 1
    2d94:	c7 51       	subi	r28, 0x17	; 23
    2d96:	de 4f       	sbci	r29, 0xFE	; 254
    2d98:	e8 81       	ld	r30, Y
    2d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d9c:	c9 5e       	subi	r28, 0xE9	; 233
    2d9e:	d1 40       	sbci	r29, 0x01	; 1
    2da0:	00 82       	st	Z, r0
    2da2:	c7 51       	subi	r28, 0x17	; 23
    2da4:	de 4f       	sbci	r29, 0xFE	; 254
    2da6:	88 81       	ld	r24, Y
    2da8:	99 81       	ldd	r25, Y+1	; 0x01
    2daa:	c9 5e       	subi	r28, 0xE9	; 233
    2dac:	d1 40       	sbci	r29, 0x01	; 1
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	c7 51       	subi	r28, 0x17	; 23
    2db2:	de 4f       	sbci	r29, 0xFE	; 254
    2db4:	99 83       	std	Y+1, r25	; 0x01
    2db6:	88 83       	st	Y, r24
    2db8:	c9 5e       	subi	r28, 0xE9	; 233
    2dba:	d1 40       	sbci	r29, 0x01	; 1
    2dbc:	c3 51       	subi	r28, 0x13	; 19
    2dbe:	de 4f       	sbci	r29, 0xFE	; 254
    2dc0:	98 81       	ld	r25, Y
    2dc2:	cd 5e       	subi	r28, 0xED	; 237
    2dc4:	d1 40       	sbci	r29, 0x01	; 1
    2dc6:	91 50       	subi	r25, 0x01	; 1
    2dc8:	c3 51       	subi	r28, 0x13	; 19
    2dca:	de 4f       	sbci	r29, 0xFE	; 254
    2dcc:	98 83       	st	Y, r25
    2dce:	cd 5e       	subi	r28, 0xED	; 237
    2dd0:	d1 40       	sbci	r29, 0x01	; 1
    2dd2:	c3 51       	subi	r28, 0x13	; 19
    2dd4:	de 4f       	sbci	r29, 0xFE	; 254
    2dd6:	e8 81       	ld	r30, Y
    2dd8:	cd 5e       	subi	r28, 0xED	; 237
    2dda:	d1 40       	sbci	r29, 0x01	; 1
    2ddc:	ee 23       	and	r30, r30
    2dde:	31 f6       	brne	.-116    	; 0x2d6c <main+0x48>
						       0b00000100,
						       0b00011100,
						       0b00000110,
						       0b00000101,
						       0b00001010,
						       0b00001010};
    2de0:	ce 01       	movw	r24, r28
    2de2:	8f 52       	subi	r24, 0x2F	; 47
    2de4:	9e 4f       	sbci	r25, 0xFE	; 254
    2de6:	c2 51       	subi	r28, 0x12	; 18
    2de8:	de 4f       	sbci	r29, 0xFE	; 254
    2dea:	99 83       	std	Y+1, r25	; 0x01
    2dec:	88 83       	st	Y, r24
    2dee:	ce 5e       	subi	r28, 0xEE	; 238
    2df0:	d1 40       	sbci	r29, 0x01	; 1
    2df2:	80 ea       	ldi	r24, 0xA0	; 160
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	c0 51       	subi	r28, 0x10	; 16
    2df8:	de 4f       	sbci	r29, 0xFE	; 254
    2dfa:	99 83       	std	Y+1, r25	; 0x01
    2dfc:	88 83       	st	Y, r24
    2dfe:	c0 5f       	subi	r28, 0xF0	; 240
    2e00:	d1 40       	sbci	r29, 0x01	; 1
    2e02:	98 e0       	ldi	r25, 0x08	; 8
    2e04:	ce 50       	subi	r28, 0x0E	; 14
    2e06:	de 4f       	sbci	r29, 0xFE	; 254
    2e08:	98 83       	st	Y, r25
    2e0a:	c2 5f       	subi	r28, 0xF2	; 242
    2e0c:	d1 40       	sbci	r29, 0x01	; 1
    2e0e:	c0 51       	subi	r28, 0x10	; 16
    2e10:	de 4f       	sbci	r29, 0xFE	; 254
    2e12:	e8 81       	ld	r30, Y
    2e14:	f9 81       	ldd	r31, Y+1	; 0x01
    2e16:	c0 5f       	subi	r28, 0xF0	; 240
    2e18:	d1 40       	sbci	r29, 0x01	; 1
    2e1a:	00 80       	ld	r0, Z
    2e1c:	c0 51       	subi	r28, 0x10	; 16
    2e1e:	de 4f       	sbci	r29, 0xFE	; 254
    2e20:	88 81       	ld	r24, Y
    2e22:	99 81       	ldd	r25, Y+1	; 0x01
    2e24:	c0 5f       	subi	r28, 0xF0	; 240
    2e26:	d1 40       	sbci	r29, 0x01	; 1
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	c0 51       	subi	r28, 0x10	; 16
    2e2c:	de 4f       	sbci	r29, 0xFE	; 254
    2e2e:	99 83       	std	Y+1, r25	; 0x01
    2e30:	88 83       	st	Y, r24
    2e32:	c0 5f       	subi	r28, 0xF0	; 240
    2e34:	d1 40       	sbci	r29, 0x01	; 1
    2e36:	c2 51       	subi	r28, 0x12	; 18
    2e38:	de 4f       	sbci	r29, 0xFE	; 254
    2e3a:	e8 81       	ld	r30, Y
    2e3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e3e:	ce 5e       	subi	r28, 0xEE	; 238
    2e40:	d1 40       	sbci	r29, 0x01	; 1
    2e42:	00 82       	st	Z, r0
    2e44:	c2 51       	subi	r28, 0x12	; 18
    2e46:	de 4f       	sbci	r29, 0xFE	; 254
    2e48:	88 81       	ld	r24, Y
    2e4a:	99 81       	ldd	r25, Y+1	; 0x01
    2e4c:	ce 5e       	subi	r28, 0xEE	; 238
    2e4e:	d1 40       	sbci	r29, 0x01	; 1
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	c2 51       	subi	r28, 0x12	; 18
    2e54:	de 4f       	sbci	r29, 0xFE	; 254
    2e56:	99 83       	std	Y+1, r25	; 0x01
    2e58:	88 83       	st	Y, r24
    2e5a:	ce 5e       	subi	r28, 0xEE	; 238
    2e5c:	d1 40       	sbci	r29, 0x01	; 1
    2e5e:	ce 50       	subi	r28, 0x0E	; 14
    2e60:	de 4f       	sbci	r29, 0xFE	; 254
    2e62:	98 81       	ld	r25, Y
    2e64:	c2 5f       	subi	r28, 0xF2	; 242
    2e66:	d1 40       	sbci	r29, 0x01	; 1
    2e68:	91 50       	subi	r25, 0x01	; 1
    2e6a:	ce 50       	subi	r28, 0x0E	; 14
    2e6c:	de 4f       	sbci	r29, 0xFE	; 254
    2e6e:	98 83       	st	Y, r25
    2e70:	c2 5f       	subi	r28, 0xF2	; 242
    2e72:	d1 40       	sbci	r29, 0x01	; 1
    2e74:	ce 50       	subi	r28, 0x0E	; 14
    2e76:	de 4f       	sbci	r29, 0xFE	; 254
    2e78:	e8 81       	ld	r30, Y
    2e7a:	c2 5f       	subi	r28, 0xF2	; 242
    2e7c:	d1 40       	sbci	r29, 0x01	; 1
    2e7e:	ee 23       	and	r30, r30
    2e80:	31 f6       	brne	.-116    	; 0x2e0e <main+0xea>
			                  0b00000100,
			                  0b00011111,
			                  0b00000100,
			                  0b00000100,
			                  0b00001010,
			                  0b00001010};
    2e82:	ce 01       	movw	r24, r28
    2e84:	87 52       	subi	r24, 0x27	; 39
    2e86:	9e 4f       	sbci	r25, 0xFE	; 254
    2e88:	cd 50       	subi	r28, 0x0D	; 13
    2e8a:	de 4f       	sbci	r29, 0xFE	; 254
    2e8c:	99 83       	std	Y+1, r25	; 0x01
    2e8e:	88 83       	st	Y, r24
    2e90:	c3 5f       	subi	r28, 0xF3	; 243
    2e92:	d1 40       	sbci	r29, 0x01	; 1
    2e94:	88 e9       	ldi	r24, 0x98	; 152
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	cb 50       	subi	r28, 0x0B	; 11
    2e9a:	de 4f       	sbci	r29, 0xFE	; 254
    2e9c:	99 83       	std	Y+1, r25	; 0x01
    2e9e:	88 83       	st	Y, r24
    2ea0:	c5 5f       	subi	r28, 0xF5	; 245
    2ea2:	d1 40       	sbci	r29, 0x01	; 1
    2ea4:	98 e0       	ldi	r25, 0x08	; 8
    2ea6:	c9 50       	subi	r28, 0x09	; 9
    2ea8:	de 4f       	sbci	r29, 0xFE	; 254
    2eaa:	98 83       	st	Y, r25
    2eac:	c7 5f       	subi	r28, 0xF7	; 247
    2eae:	d1 40       	sbci	r29, 0x01	; 1
    2eb0:	cb 50       	subi	r28, 0x0B	; 11
    2eb2:	de 4f       	sbci	r29, 0xFE	; 254
    2eb4:	e8 81       	ld	r30, Y
    2eb6:	f9 81       	ldd	r31, Y+1	; 0x01
    2eb8:	c5 5f       	subi	r28, 0xF5	; 245
    2eba:	d1 40       	sbci	r29, 0x01	; 1
    2ebc:	00 80       	ld	r0, Z
    2ebe:	cb 50       	subi	r28, 0x0B	; 11
    2ec0:	de 4f       	sbci	r29, 0xFE	; 254
    2ec2:	88 81       	ld	r24, Y
    2ec4:	99 81       	ldd	r25, Y+1	; 0x01
    2ec6:	c5 5f       	subi	r28, 0xF5	; 245
    2ec8:	d1 40       	sbci	r29, 0x01	; 1
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	cb 50       	subi	r28, 0x0B	; 11
    2ece:	de 4f       	sbci	r29, 0xFE	; 254
    2ed0:	99 83       	std	Y+1, r25	; 0x01
    2ed2:	88 83       	st	Y, r24
    2ed4:	c5 5f       	subi	r28, 0xF5	; 245
    2ed6:	d1 40       	sbci	r29, 0x01	; 1
    2ed8:	cd 50       	subi	r28, 0x0D	; 13
    2eda:	de 4f       	sbci	r29, 0xFE	; 254
    2edc:	e8 81       	ld	r30, Y
    2ede:	f9 81       	ldd	r31, Y+1	; 0x01
    2ee0:	c3 5f       	subi	r28, 0xF3	; 243
    2ee2:	d1 40       	sbci	r29, 0x01	; 1
    2ee4:	00 82       	st	Z, r0
    2ee6:	cd 50       	subi	r28, 0x0D	; 13
    2ee8:	de 4f       	sbci	r29, 0xFE	; 254
    2eea:	88 81       	ld	r24, Y
    2eec:	99 81       	ldd	r25, Y+1	; 0x01
    2eee:	c3 5f       	subi	r28, 0xF3	; 243
    2ef0:	d1 40       	sbci	r29, 0x01	; 1
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	cd 50       	subi	r28, 0x0D	; 13
    2ef6:	de 4f       	sbci	r29, 0xFE	; 254
    2ef8:	99 83       	std	Y+1, r25	; 0x01
    2efa:	88 83       	st	Y, r24
    2efc:	c3 5f       	subi	r28, 0xF3	; 243
    2efe:	d1 40       	sbci	r29, 0x01	; 1
    2f00:	c9 50       	subi	r28, 0x09	; 9
    2f02:	de 4f       	sbci	r29, 0xFE	; 254
    2f04:	98 81       	ld	r25, Y
    2f06:	c7 5f       	subi	r28, 0xF7	; 247
    2f08:	d1 40       	sbci	r29, 0x01	; 1
    2f0a:	91 50       	subi	r25, 0x01	; 1
    2f0c:	c9 50       	subi	r28, 0x09	; 9
    2f0e:	de 4f       	sbci	r29, 0xFE	; 254
    2f10:	98 83       	st	Y, r25
    2f12:	c7 5f       	subi	r28, 0xF7	; 247
    2f14:	d1 40       	sbci	r29, 0x01	; 1
    2f16:	c9 50       	subi	r28, 0x09	; 9
    2f18:	de 4f       	sbci	r29, 0xFE	; 254
    2f1a:	e8 81       	ld	r30, Y
    2f1c:	c7 5f       	subi	r28, 0xF7	; 247
    2f1e:	d1 40       	sbci	r29, 0x01	; 1
    2f20:	ee 23       	and	r30, r30
    2f22:	31 f6       	brne	.-116    	; 0x2eb0 <main+0x18c>
						    0b00000100,
						    0b00011111,
						    0b00000100,
						    0b00000100,
						    0b00001010,
						    0b00010001};
    2f24:	ce 01       	movw	r24, r28
    2f26:	8f 51       	subi	r24, 0x1F	; 31
    2f28:	9e 4f       	sbci	r25, 0xFE	; 254
    2f2a:	c8 50       	subi	r28, 0x08	; 8
    2f2c:	de 4f       	sbci	r29, 0xFE	; 254
    2f2e:	99 83       	std	Y+1, r25	; 0x01
    2f30:	88 83       	st	Y, r24
    2f32:	c8 5f       	subi	r28, 0xF8	; 248
    2f34:	d1 40       	sbci	r29, 0x01	; 1
    2f36:	80 e9       	ldi	r24, 0x90	; 144
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	c6 50       	subi	r28, 0x06	; 6
    2f3c:	de 4f       	sbci	r29, 0xFE	; 254
    2f3e:	99 83       	std	Y+1, r25	; 0x01
    2f40:	88 83       	st	Y, r24
    2f42:	ca 5f       	subi	r28, 0xFA	; 250
    2f44:	d1 40       	sbci	r29, 0x01	; 1
    2f46:	98 e0       	ldi	r25, 0x08	; 8
    2f48:	c4 50       	subi	r28, 0x04	; 4
    2f4a:	de 4f       	sbci	r29, 0xFE	; 254
    2f4c:	98 83       	st	Y, r25
    2f4e:	cc 5f       	subi	r28, 0xFC	; 252
    2f50:	d1 40       	sbci	r29, 0x01	; 1
    2f52:	c6 50       	subi	r28, 0x06	; 6
    2f54:	de 4f       	sbci	r29, 0xFE	; 254
    2f56:	e8 81       	ld	r30, Y
    2f58:	f9 81       	ldd	r31, Y+1	; 0x01
    2f5a:	ca 5f       	subi	r28, 0xFA	; 250
    2f5c:	d1 40       	sbci	r29, 0x01	; 1
    2f5e:	00 80       	ld	r0, Z
    2f60:	c6 50       	subi	r28, 0x06	; 6
    2f62:	de 4f       	sbci	r29, 0xFE	; 254
    2f64:	88 81       	ld	r24, Y
    2f66:	99 81       	ldd	r25, Y+1	; 0x01
    2f68:	ca 5f       	subi	r28, 0xFA	; 250
    2f6a:	d1 40       	sbci	r29, 0x01	; 1
    2f6c:	01 96       	adiw	r24, 0x01	; 1
    2f6e:	c6 50       	subi	r28, 0x06	; 6
    2f70:	de 4f       	sbci	r29, 0xFE	; 254
    2f72:	99 83       	std	Y+1, r25	; 0x01
    2f74:	88 83       	st	Y, r24
    2f76:	ca 5f       	subi	r28, 0xFA	; 250
    2f78:	d1 40       	sbci	r29, 0x01	; 1
    2f7a:	c8 50       	subi	r28, 0x08	; 8
    2f7c:	de 4f       	sbci	r29, 0xFE	; 254
    2f7e:	e8 81       	ld	r30, Y
    2f80:	f9 81       	ldd	r31, Y+1	; 0x01
    2f82:	c8 5f       	subi	r28, 0xF8	; 248
    2f84:	d1 40       	sbci	r29, 0x01	; 1
    2f86:	00 82       	st	Z, r0
    2f88:	c8 50       	subi	r28, 0x08	; 8
    2f8a:	de 4f       	sbci	r29, 0xFE	; 254
    2f8c:	88 81       	ld	r24, Y
    2f8e:	99 81       	ldd	r25, Y+1	; 0x01
    2f90:	c8 5f       	subi	r28, 0xF8	; 248
    2f92:	d1 40       	sbci	r29, 0x01	; 1
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	c8 50       	subi	r28, 0x08	; 8
    2f98:	de 4f       	sbci	r29, 0xFE	; 254
    2f9a:	99 83       	std	Y+1, r25	; 0x01
    2f9c:	88 83       	st	Y, r24
    2f9e:	c8 5f       	subi	r28, 0xF8	; 248
    2fa0:	d1 40       	sbci	r29, 0x01	; 1
    2fa2:	c4 50       	subi	r28, 0x04	; 4
    2fa4:	de 4f       	sbci	r29, 0xFE	; 254
    2fa6:	98 81       	ld	r25, Y
    2fa8:	cc 5f       	subi	r28, 0xFC	; 252
    2faa:	d1 40       	sbci	r29, 0x01	; 1
    2fac:	91 50       	subi	r25, 0x01	; 1
    2fae:	c4 50       	subi	r28, 0x04	; 4
    2fb0:	de 4f       	sbci	r29, 0xFE	; 254
    2fb2:	98 83       	st	Y, r25
    2fb4:	cc 5f       	subi	r28, 0xFC	; 252
    2fb6:	d1 40       	sbci	r29, 0x01	; 1
    2fb8:	c4 50       	subi	r28, 0x04	; 4
    2fba:	de 4f       	sbci	r29, 0xFE	; 254
    2fbc:	e8 81       	ld	r30, Y
    2fbe:	cc 5f       	subi	r28, 0xFC	; 252
    2fc0:	d1 40       	sbci	r29, 0x01	; 1
    2fc2:	ee 23       	and	r30, r30
    2fc4:	31 f6       	brne	.-116    	; 0x2f52 <main+0x22e>

		DIO_u8Init();
    2fc6:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_u8Init>
		LCD_voidInit();
    2fca:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_voidInit>
		ADC_voidInit();
    2fce:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
		LCD_voidCursorBlinkerOff();
    2fd2:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_voidCursorBlinkerOff>
		LCD_u8_GoTo_XY(0,0);
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	60 e0       	ldi	r22, 0x00	; 0
    2fda:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    2fde:	80 e6       	ldi	r24, 0x60	; 96
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(0,1,7,Hamokshastanding);
    2fe6:	9e 01       	movw	r18, r28
    2fe8:	27 52       	subi	r18, 0x27	; 39
    2fea:	3e 4f       	sbci	r19, 0xFE	; 254
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	61 e0       	ldi	r22, 0x01	; 1
    2ff0:	47 e0       	ldi	r20, 0x07	; 7
    2ff2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>

//4980mv Dark
		while(1)
		{
			/* Read Analog Signal */
	  ADC_u8GetDigitalValueSunchNonBlocking(ADC_u8_CHANNEL_1,&Local_u16DigitalValue);
    2ff6:	9e 01       	movw	r18, r28
    2ff8:	29 53       	subi	r18, 0x39	; 57
    2ffa:	3e 4f       	sbci	r19, 0xFE	; 254
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	b9 01       	movw	r22, r18
    3000:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValueSunchNonBlocking>
	  Local_u16AnalogValue = (u16)((Local_u16DigitalValue * 5000UL) /1024);
    3004:	fe 01       	movw	r30, r28
    3006:	e9 53       	subi	r30, 0x39	; 57
    3008:	fe 4f       	sbci	r31, 0xFE	; 254
    300a:	80 81       	ld	r24, Z
    300c:	91 81       	ldd	r25, Z+1	; 0x01
    300e:	cc 01       	movw	r24, r24
    3010:	a0 e0       	ldi	r26, 0x00	; 0
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	28 e8       	ldi	r18, 0x88	; 136
    3016:	33 e1       	ldi	r19, 0x13	; 19
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	50 e0       	ldi	r21, 0x00	; 0
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 c1 31 	call	0x6382	; 0x6382 <__mulsi3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	07 2e       	mov	r0, r23
    302a:	7a e0       	ldi	r23, 0x0A	; 10
    302c:	b6 95       	lsr	r27
    302e:	a7 95       	ror	r26
    3030:	97 95       	ror	r25
    3032:	87 95       	ror	r24
    3034:	7a 95       	dec	r23
    3036:	d1 f7       	brne	.-12     	; 0x302c <main+0x308>
    3038:	70 2d       	mov	r23, r0
    303a:	fe 01       	movw	r30, r28
    303c:	eb 53       	subi	r30, 0x3B	; 59
    303e:	fe 4f       	sbci	r31, 0xFE	; 254
    3040:	91 83       	std	Z+1, r25	; 0x01
    3042:	80 83       	st	Z, r24

	  if((Local_u16AnalogValue > Local_u16LastAnalogValue) || (Local_u16AnalogValue < Local_u16Last2AnalogValue))
    3044:	fe 01       	movw	r30, r28
    3046:	eb 53       	subi	r30, 0x3B	; 59
    3048:	fe 4f       	sbci	r31, 0xFE	; 254
    304a:	de 01       	movw	r26, r28
    304c:	ad 53       	subi	r26, 0x3D	; 61
    304e:	be 4f       	sbci	r27, 0xFE	; 254
    3050:	20 81       	ld	r18, Z
    3052:	31 81       	ldd	r19, Z+1	; 0x01
    3054:	8d 91       	ld	r24, X+
    3056:	9c 91       	ld	r25, X
    3058:	11 97       	sbiw	r26, 0x01	; 1
    305a:	82 17       	cp	r24, r18
    305c:	93 07       	cpc	r25, r19
    305e:	78 f0       	brcs	.+30     	; 0x307e <main+0x35a>
    3060:	fe 01       	movw	r30, r28
    3062:	eb 53       	subi	r30, 0x3B	; 59
    3064:	fe 4f       	sbci	r31, 0xFE	; 254
    3066:	de 01       	movw	r26, r28
    3068:	af 53       	subi	r26, 0x3F	; 63
    306a:	be 4f       	sbci	r27, 0xFE	; 254
    306c:	20 81       	ld	r18, Z
    306e:	31 81       	ldd	r19, Z+1	; 0x01
    3070:	8d 91       	ld	r24, X+
    3072:	9c 91       	ld	r25, X
    3074:	11 97       	sbiw	r26, 0x01	; 1
    3076:	28 17       	cp	r18, r24
    3078:	39 07       	cpc	r19, r25
    307a:	08 f0       	brcs	.+2      	; 0x307e <main+0x35a>
    307c:	bc cf       	rjmp	.-136    	; 0x2ff6 <main+0x2d2>
	  {
			LCD_voidClear();
    307e:	0e 94 ad 10 	call	0x215a	; 0x215a <LCD_voidClear>

	  if(Local_u16AnalogValue <= 312)
    3082:	fe 01       	movw	r30, r28
    3084:	eb 53       	subi	r30, 0x3B	; 59
    3086:	fe 4f       	sbci	r31, 0xFE	; 254
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	f1 e0       	ldi	r31, 0x01	; 1
    308e:	89 33       	cpi	r24, 0x39	; 57
    3090:	9f 07       	cpc	r25, r31
    3092:	08 f0       	brcs	.+2      	; 0x3096 <main+0x372>
    3094:	91 c1       	rjmp	.+802    	; 0x33b8 <main+0x694>
	  {
		  LCD_u8_GoTo_XY(0,0);
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    309e:	80 e6       	ldi	r24, 0x60	; 96
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,0,HamokshaRuning);
    30a6:	9e 01       	movw	r18, r28
    30a8:	2f 51       	subi	r18, 0x1F	; 31
    30aa:	3e 4f       	sbci	r19, 0xFE	; 254
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	61 e0       	ldi	r22, 0x01	; 1
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    30b6:	fe 01       	movw	r30, r28
    30b8:	e3 54       	subi	r30, 0x43	; 67
    30ba:	fe 4f       	sbci	r31, 0xFE	; 254
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	a8 e4       	ldi	r26, 0x48	; 72
    30c2:	b3 e4       	ldi	r27, 0x43	; 67
    30c4:	80 83       	st	Z, r24
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	a2 83       	std	Z+2, r26	; 0x02
    30ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30cc:	8e 01       	movw	r16, r28
    30ce:	07 54       	subi	r16, 0x47	; 71
    30d0:	1e 4f       	sbci	r17, 0xFE	; 254
    30d2:	fe 01       	movw	r30, r28
    30d4:	e3 54       	subi	r30, 0x43	; 67
    30d6:	fe 4f       	sbci	r31, 0xFE	; 254
    30d8:	60 81       	ld	r22, Z
    30da:	71 81       	ldd	r23, Z+1	; 0x01
    30dc:	82 81       	ldd	r24, Z+2	; 0x02
    30de:	93 81       	ldd	r25, Z+3	; 0x03
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	4a ef       	ldi	r20, 0xFA	; 250
    30e6:	54 e4       	ldi	r21, 0x44	; 68
    30e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	f8 01       	movw	r30, r16
    30f2:	80 83       	st	Z, r24
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	a2 83       	std	Z+2, r26	; 0x02
    30f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30fa:	fe 01       	movw	r30, r28
    30fc:	e7 54       	subi	r30, 0x47	; 71
    30fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	44 f4       	brge	.+16     	; 0x3128 <main+0x404>
		__ticks = 1;
    3118:	fe 01       	movw	r30, r28
    311a:	e9 54       	subi	r30, 0x49	; 73
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	80 83       	st	Z, r24
    3126:	64 c0       	rjmp	.+200    	; 0x31f0 <main+0x4cc>
	else if (__tmp > 65535)
    3128:	fe 01       	movw	r30, r28
    312a:	e7 54       	subi	r30, 0x47	; 71
    312c:	fe 4f       	sbci	r31, 0xFE	; 254
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	3f ef       	ldi	r19, 0xFF	; 255
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	57 e4       	ldi	r21, 0x47	; 71
    313e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3142:	18 16       	cp	r1, r24
    3144:	0c f0       	brlt	.+2      	; 0x3148 <main+0x424>
    3146:	43 c0       	rjmp	.+134    	; 0x31ce <main+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3148:	fe 01       	movw	r30, r28
    314a:	e3 54       	subi	r30, 0x43	; 67
    314c:	fe 4f       	sbci	r31, 0xFE	; 254
    314e:	60 81       	ld	r22, Z
    3150:	71 81       	ldd	r23, Z+1	; 0x01
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	93 81       	ldd	r25, Z+3	; 0x03
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e2       	ldi	r20, 0x20	; 32
    315c:	51 e4       	ldi	r21, 0x41	; 65
    315e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	8e 01       	movw	r16, r28
    3168:	09 54       	subi	r16, 0x49	; 73
    316a:	1e 4f       	sbci	r17, 0xFE	; 254
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	f8 01       	movw	r30, r16
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	80 83       	st	Z, r24
    317e:	1f c0       	rjmp	.+62     	; 0x31be <main+0x49a>
    3180:	fe 01       	movw	r30, r28
    3182:	eb 54       	subi	r30, 0x4B	; 75
    3184:	fe 4f       	sbci	r31, 0xFE	; 254
    3186:	88 ec       	ldi	r24, 0xC8	; 200
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    318e:	fe 01       	movw	r30, r28
    3190:	eb 54       	subi	r30, 0x4B	; 75
    3192:	fe 4f       	sbci	r31, 0xFE	; 254
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <main+0x474>
    319c:	fe 01       	movw	r30, r28
    319e:	eb 54       	subi	r30, 0x4B	; 75
    31a0:	fe 4f       	sbci	r31, 0xFE	; 254
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	de 01       	movw	r26, r28
    31a8:	a9 54       	subi	r26, 0x49	; 73
    31aa:	be 4f       	sbci	r27, 0xFE	; 254
    31ac:	fe 01       	movw	r30, r28
    31ae:	e9 54       	subi	r30, 0x49	; 73
    31b0:	fe 4f       	sbci	r31, 0xFE	; 254
    31b2:	80 81       	ld	r24, Z
    31b4:	91 81       	ldd	r25, Z+1	; 0x01
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	11 96       	adiw	r26, 0x01	; 1
    31ba:	9c 93       	st	X, r25
    31bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31be:	fe 01       	movw	r30, r28
    31c0:	e9 54       	subi	r30, 0x49	; 73
    31c2:	fe 4f       	sbci	r31, 0xFE	; 254
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	d1 f6       	brne	.-76     	; 0x3180 <main+0x45c>
    31cc:	27 c0       	rjmp	.+78     	; 0x321c <main+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ce:	8e 01       	movw	r16, r28
    31d0:	09 54       	subi	r16, 0x49	; 73
    31d2:	1e 4f       	sbci	r17, 0xFE	; 254
    31d4:	fe 01       	movw	r30, r28
    31d6:	e7 54       	subi	r30, 0x47	; 71
    31d8:	fe 4f       	sbci	r31, 0xFE	; 254
    31da:	60 81       	ld	r22, Z
    31dc:	71 81       	ldd	r23, Z+1	; 0x01
    31de:	82 81       	ldd	r24, Z+2	; 0x02
    31e0:	93 81       	ldd	r25, Z+3	; 0x03
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	f8 01       	movw	r30, r16
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
    31f0:	de 01       	movw	r26, r28
    31f2:	ad 54       	subi	r26, 0x4D	; 77
    31f4:	be 4f       	sbci	r27, 0xFE	; 254
    31f6:	fe 01       	movw	r30, r28
    31f8:	e9 54       	subi	r30, 0x49	; 73
    31fa:	fe 4f       	sbci	r31, 0xFE	; 254
    31fc:	80 81       	ld	r24, Z
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	8d 93       	st	X+, r24
    3202:	9c 93       	st	X, r25
    3204:	fe 01       	movw	r30, r28
    3206:	ed 54       	subi	r30, 0x4D	; 77
    3208:	fe 4f       	sbci	r31, 0xFE	; 254
    320a:	80 81       	ld	r24, Z
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <main+0x4ea>
    3212:	fe 01       	movw	r30, r28
    3214:	ed 54       	subi	r30, 0x4D	; 77
    3216:	fe 4f       	sbci	r31, 0xFE	; 254
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,0,Hamokshastanding);
    321c:	9e 01       	movw	r18, r28
    321e:	27 52       	subi	r18, 0x27	; 39
    3220:	3e 4f       	sbci	r19, 0xFE	; 254
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	40 e0       	ldi	r20, 0x00	; 0
    3228:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    322c:	fe 01       	movw	r30, r28
    322e:	e1 55       	subi	r30, 0x51	; 81
    3230:	fe 4f       	sbci	r31, 0xFE	; 254
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	a8 e4       	ldi	r26, 0x48	; 72
    3238:	b3 e4       	ldi	r27, 0x43	; 67
    323a:	80 83       	st	Z, r24
    323c:	91 83       	std	Z+1, r25	; 0x01
    323e:	a2 83       	std	Z+2, r26	; 0x02
    3240:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3242:	8e 01       	movw	r16, r28
    3244:	05 55       	subi	r16, 0x55	; 85
    3246:	1e 4f       	sbci	r17, 0xFE	; 254
    3248:	fe 01       	movw	r30, r28
    324a:	e1 55       	subi	r30, 0x51	; 81
    324c:	fe 4f       	sbci	r31, 0xFE	; 254
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	4a ef       	ldi	r20, 0xFA	; 250
    325c:	54 e4       	ldi	r21, 0x44	; 68
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	f8 01       	movw	r30, r16
    3268:	80 83       	st	Z, r24
    326a:	91 83       	std	Z+1, r25	; 0x01
    326c:	a2 83       	std	Z+2, r26	; 0x02
    326e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3270:	fe 01       	movw	r30, r28
    3272:	e5 55       	subi	r30, 0x55	; 85
    3274:	fe 4f       	sbci	r31, 0xFE	; 254
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e8       	ldi	r20, 0x80	; 128
    3284:	5f e3       	ldi	r21, 0x3F	; 63
    3286:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    328a:	88 23       	and	r24, r24
    328c:	44 f4       	brge	.+16     	; 0x329e <main+0x57a>
		__ticks = 1;
    328e:	fe 01       	movw	r30, r28
    3290:	e7 55       	subi	r30, 0x57	; 87
    3292:	fe 4f       	sbci	r31, 0xFE	; 254
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	80 83       	st	Z, r24
    329c:	64 c0       	rjmp	.+200    	; 0x3366 <main+0x642>
	else if (__tmp > 65535)
    329e:	fe 01       	movw	r30, r28
    32a0:	e5 55       	subi	r30, 0x55	; 85
    32a2:	fe 4f       	sbci	r31, 0xFE	; 254
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	82 81       	ldd	r24, Z+2	; 0x02
    32aa:	93 81       	ldd	r25, Z+3	; 0x03
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	3f ef       	ldi	r19, 0xFF	; 255
    32b0:	4f e7       	ldi	r20, 0x7F	; 127
    32b2:	57 e4       	ldi	r21, 0x47	; 71
    32b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b8:	18 16       	cp	r1, r24
    32ba:	0c f0       	brlt	.+2      	; 0x32be <main+0x59a>
    32bc:	43 c0       	rjmp	.+134    	; 0x3344 <main+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32be:	fe 01       	movw	r30, r28
    32c0:	e1 55       	subi	r30, 0x51	; 81
    32c2:	fe 4f       	sbci	r31, 0xFE	; 254
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e2       	ldi	r20, 0x20	; 32
    32d2:	51 e4       	ldi	r21, 0x41	; 65
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8e 01       	movw	r16, r28
    32de:	07 55       	subi	r16, 0x57	; 87
    32e0:	1e 4f       	sbci	r17, 0xFE	; 254
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	f8 01       	movw	r30, r16
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
    32f4:	1f c0       	rjmp	.+62     	; 0x3334 <main+0x610>
    32f6:	fe 01       	movw	r30, r28
    32f8:	e9 55       	subi	r30, 0x59	; 89
    32fa:	fe 4f       	sbci	r31, 0xFE	; 254
    32fc:	88 ec       	ldi	r24, 0xC8	; 200
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	80 83       	st	Z, r24
    3304:	fe 01       	movw	r30, r28
    3306:	e9 55       	subi	r30, 0x59	; 89
    3308:	fe 4f       	sbci	r31, 0xFE	; 254
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <main+0x5ea>
    3312:	fe 01       	movw	r30, r28
    3314:	e9 55       	subi	r30, 0x59	; 89
    3316:	fe 4f       	sbci	r31, 0xFE	; 254
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331c:	de 01       	movw	r26, r28
    331e:	a7 55       	subi	r26, 0x57	; 87
    3320:	be 4f       	sbci	r27, 0xFE	; 254
    3322:	fe 01       	movw	r30, r28
    3324:	e7 55       	subi	r30, 0x57	; 87
    3326:	fe 4f       	sbci	r31, 0xFE	; 254
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	11 96       	adiw	r26, 0x01	; 1
    3330:	9c 93       	st	X, r25
    3332:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3334:	fe 01       	movw	r30, r28
    3336:	e7 55       	subi	r30, 0x57	; 87
    3338:	fe 4f       	sbci	r31, 0xFE	; 254
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	d1 f6       	brne	.-76     	; 0x32f6 <main+0x5d2>
    3342:	27 c0       	rjmp	.+78     	; 0x3392 <main+0x66e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3344:	8e 01       	movw	r16, r28
    3346:	07 55       	subi	r16, 0x57	; 87
    3348:	1e 4f       	sbci	r17, 0xFE	; 254
    334a:	fe 01       	movw	r30, r28
    334c:	e5 55       	subi	r30, 0x55	; 85
    334e:	fe 4f       	sbci	r31, 0xFE	; 254
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	f8 01       	movw	r30, r16
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	80 83       	st	Z, r24
    3366:	de 01       	movw	r26, r28
    3368:	ab 55       	subi	r26, 0x5B	; 91
    336a:	be 4f       	sbci	r27, 0xFE	; 254
    336c:	fe 01       	movw	r30, r28
    336e:	e7 55       	subi	r30, 0x57	; 87
    3370:	fe 4f       	sbci	r31, 0xFE	; 254
    3372:	80 81       	ld	r24, Z
    3374:	91 81       	ldd	r25, Z+1	; 0x01
    3376:	8d 93       	st	X+, r24
    3378:	9c 93       	st	X, r25
    337a:	fe 01       	movw	r30, r28
    337c:	eb 55       	subi	r30, 0x5B	; 91
    337e:	fe 4f       	sbci	r31, 0xFE	; 254
    3380:	80 81       	ld	r24, Z
    3382:	91 81       	ldd	r25, Z+1	; 0x01
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <main+0x660>
    3388:	fe 01       	movw	r30, r28
    338a:	eb 55       	subi	r30, 0x5B	; 91
    338c:	fe 4f       	sbci	r31, 0xFE	; 254
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    3392:	de 01       	movw	r26, r28
    3394:	ad 53       	subi	r26, 0x3D	; 61
    3396:	be 4f       	sbci	r27, 0xFE	; 254
    3398:	fe 01       	movw	r30, r28
    339a:	eb 53       	subi	r30, 0x3B	; 59
    339c:	fe 4f       	sbci	r31, 0xFE	; 254
    339e:	80 81       	ld	r24, Z
    33a0:	91 81       	ldd	r25, Z+1	; 0x01
    33a2:	8a 56       	subi	r24, 0x6A	; 106
    33a4:	9f 4f       	sbci	r25, 0xFF	; 255
    33a6:	11 96       	adiw	r26, 0x01	; 1
    33a8:	9c 93       	st	X, r25
    33aa:	8e 93       	st	-X, r24
		  Local_u16Last2AnalogValue =0;
    33ac:	fe 01       	movw	r30, r28
    33ae:	ef 53       	subi	r30, 0x3F	; 63
    33b0:	fe 4f       	sbci	r31, 0xFE	; 254
    33b2:	11 82       	std	Z+1, r1	; 0x01
    33b4:	10 82       	st	Z, r1
    33b6:	1f ce       	rjmp	.-962    	; 0x2ff6 <main+0x2d2>



	  }
	  else if((Local_u16AnalogValue > 312) && (Local_u16AnalogValue <= 624))
    33b8:	fe 01       	movw	r30, r28
    33ba:	eb 53       	subi	r30, 0x3B	; 59
    33bc:	fe 4f       	sbci	r31, 0xFE	; 254
    33be:	80 81       	ld	r24, Z
    33c0:	91 81       	ldd	r25, Z+1	; 0x01
    33c2:	f1 e0       	ldi	r31, 0x01	; 1
    33c4:	89 33       	cpi	r24, 0x39	; 57
    33c6:	9f 07       	cpc	r25, r31
    33c8:	08 f4       	brcc	.+2      	; 0x33cc <main+0x6a8>
    33ca:	a2 c1       	rjmp	.+836    	; 0x3710 <main+0x9ec>
    33cc:	fe 01       	movw	r30, r28
    33ce:	eb 53       	subi	r30, 0x3B	; 59
    33d0:	fe 4f       	sbci	r31, 0xFE	; 254
    33d2:	80 81       	ld	r24, Z
    33d4:	91 81       	ldd	r25, Z+1	; 0x01
    33d6:	22 e0       	ldi	r18, 0x02	; 2
    33d8:	81 37       	cpi	r24, 0x71	; 113
    33da:	92 07       	cpc	r25, r18
    33dc:	08 f0       	brcs	.+2      	; 0x33e0 <main+0x6bc>
    33de:	98 c1       	rjmp	.+816    	; 0x3710 <main+0x9ec>
	  {
		  LCD_u8_GoTo_XY(0,0);
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    33e8:	80 e6       	ldi	r24, 0x60	; 96
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,1,HamokshaRuning);
    33f0:	9e 01       	movw	r18, r28
    33f2:	2f 51       	subi	r18, 0x1F	; 31
    33f4:	3e 4f       	sbci	r19, 0xFE	; 254
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	61 e0       	ldi	r22, 0x01	; 1
    33fa:	41 e0       	ldi	r20, 0x01	; 1
    33fc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    3400:	fe 01       	movw	r30, r28
    3402:	ef 55       	subi	r30, 0x5F	; 95
    3404:	fe 4f       	sbci	r31, 0xFE	; 254
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	a8 e4       	ldi	r26, 0x48	; 72
    340c:	b3 e4       	ldi	r27, 0x43	; 67
    340e:	80 83       	st	Z, r24
    3410:	91 83       	std	Z+1, r25	; 0x01
    3412:	a2 83       	std	Z+2, r26	; 0x02
    3414:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3416:	8e 01       	movw	r16, r28
    3418:	03 56       	subi	r16, 0x63	; 99
    341a:	1e 4f       	sbci	r17, 0xFE	; 254
    341c:	fe 01       	movw	r30, r28
    341e:	ef 55       	subi	r30, 0x5F	; 95
    3420:	fe 4f       	sbci	r31, 0xFE	; 254
    3422:	60 81       	ld	r22, Z
    3424:	71 81       	ldd	r23, Z+1	; 0x01
    3426:	82 81       	ldd	r24, Z+2	; 0x02
    3428:	93 81       	ldd	r25, Z+3	; 0x03
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	4a ef       	ldi	r20, 0xFA	; 250
    3430:	54 e4       	ldi	r21, 0x44	; 68
    3432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	f8 01       	movw	r30, r16
    343c:	80 83       	st	Z, r24
    343e:	91 83       	std	Z+1, r25	; 0x01
    3440:	a2 83       	std	Z+2, r26	; 0x02
    3442:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3444:	fe 01       	movw	r30, r28
    3446:	e3 56       	subi	r30, 0x63	; 99
    3448:	fe 4f       	sbci	r31, 0xFE	; 254
    344a:	60 81       	ld	r22, Z
    344c:	71 81       	ldd	r23, Z+1	; 0x01
    344e:	82 81       	ldd	r24, Z+2	; 0x02
    3450:	93 81       	ldd	r25, Z+3	; 0x03
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e8       	ldi	r20, 0x80	; 128
    3458:	5f e3       	ldi	r21, 0x3F	; 63
    345a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    345e:	88 23       	and	r24, r24
    3460:	44 f4       	brge	.+16     	; 0x3472 <main+0x74e>
		__ticks = 1;
    3462:	fe 01       	movw	r30, r28
    3464:	e5 56       	subi	r30, 0x65	; 101
    3466:	fe 4f       	sbci	r31, 0xFE	; 254
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	91 83       	std	Z+1, r25	; 0x01
    346e:	80 83       	st	Z, r24
    3470:	64 c0       	rjmp	.+200    	; 0x353a <main+0x816>
	else if (__tmp > 65535)
    3472:	fe 01       	movw	r30, r28
    3474:	e3 56       	subi	r30, 0x63	; 99
    3476:	fe 4f       	sbci	r31, 0xFE	; 254
    3478:	60 81       	ld	r22, Z
    347a:	71 81       	ldd	r23, Z+1	; 0x01
    347c:	82 81       	ldd	r24, Z+2	; 0x02
    347e:	93 81       	ldd	r25, Z+3	; 0x03
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	3f ef       	ldi	r19, 0xFF	; 255
    3484:	4f e7       	ldi	r20, 0x7F	; 127
    3486:	57 e4       	ldi	r21, 0x47	; 71
    3488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    348c:	18 16       	cp	r1, r24
    348e:	0c f0       	brlt	.+2      	; 0x3492 <main+0x76e>
    3490:	43 c0       	rjmp	.+134    	; 0x3518 <main+0x7f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3492:	fe 01       	movw	r30, r28
    3494:	ef 55       	subi	r30, 0x5F	; 95
    3496:	fe 4f       	sbci	r31, 0xFE	; 254
    3498:	60 81       	ld	r22, Z
    349a:	71 81       	ldd	r23, Z+1	; 0x01
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e2       	ldi	r20, 0x20	; 32
    34a6:	51 e4       	ldi	r21, 0x41	; 65
    34a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	8e 01       	movw	r16, r28
    34b2:	05 56       	subi	r16, 0x65	; 101
    34b4:	1e 4f       	sbci	r17, 0xFE	; 254
    34b6:	bc 01       	movw	r22, r24
    34b8:	cd 01       	movw	r24, r26
    34ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	f8 01       	movw	r30, r16
    34c4:	91 83       	std	Z+1, r25	; 0x01
    34c6:	80 83       	st	Z, r24
    34c8:	1f c0       	rjmp	.+62     	; 0x3508 <main+0x7e4>
    34ca:	fe 01       	movw	r30, r28
    34cc:	e7 56       	subi	r30, 0x67	; 103
    34ce:	fe 4f       	sbci	r31, 0xFE	; 254
    34d0:	88 ec       	ldi	r24, 0xC8	; 200
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	80 83       	st	Z, r24
    34d8:	fe 01       	movw	r30, r28
    34da:	e7 56       	subi	r30, 0x67	; 103
    34dc:	fe 4f       	sbci	r31, 0xFE	; 254
    34de:	80 81       	ld	r24, Z
    34e0:	91 81       	ldd	r25, Z+1	; 0x01
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <main+0x7be>
    34e6:	fe 01       	movw	r30, r28
    34e8:	e7 56       	subi	r30, 0x67	; 103
    34ea:	fe 4f       	sbci	r31, 0xFE	; 254
    34ec:	91 83       	std	Z+1, r25	; 0x01
    34ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f0:	de 01       	movw	r26, r28
    34f2:	a5 56       	subi	r26, 0x65	; 101
    34f4:	be 4f       	sbci	r27, 0xFE	; 254
    34f6:	fe 01       	movw	r30, r28
    34f8:	e5 56       	subi	r30, 0x65	; 101
    34fa:	fe 4f       	sbci	r31, 0xFE	; 254
    34fc:	80 81       	ld	r24, Z
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	11 96       	adiw	r26, 0x01	; 1
    3504:	9c 93       	st	X, r25
    3506:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3508:	fe 01       	movw	r30, r28
    350a:	e5 56       	subi	r30, 0x65	; 101
    350c:	fe 4f       	sbci	r31, 0xFE	; 254
    350e:	80 81       	ld	r24, Z
    3510:	91 81       	ldd	r25, Z+1	; 0x01
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	d1 f6       	brne	.-76     	; 0x34ca <main+0x7a6>
    3516:	27 c0       	rjmp	.+78     	; 0x3566 <main+0x842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3518:	8e 01       	movw	r16, r28
    351a:	05 56       	subi	r16, 0x65	; 101
    351c:	1e 4f       	sbci	r17, 0xFE	; 254
    351e:	fe 01       	movw	r30, r28
    3520:	e3 56       	subi	r30, 0x63	; 99
    3522:	fe 4f       	sbci	r31, 0xFE	; 254
    3524:	60 81       	ld	r22, Z
    3526:	71 81       	ldd	r23, Z+1	; 0x01
    3528:	82 81       	ldd	r24, Z+2	; 0x02
    352a:	93 81       	ldd	r25, Z+3	; 0x03
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	f8 01       	movw	r30, r16
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	80 83       	st	Z, r24
    353a:	de 01       	movw	r26, r28
    353c:	a9 56       	subi	r26, 0x69	; 105
    353e:	be 4f       	sbci	r27, 0xFE	; 254
    3540:	fe 01       	movw	r30, r28
    3542:	e5 56       	subi	r30, 0x65	; 101
    3544:	fe 4f       	sbci	r31, 0xFE	; 254
    3546:	80 81       	ld	r24, Z
    3548:	91 81       	ldd	r25, Z+1	; 0x01
    354a:	8d 93       	st	X+, r24
    354c:	9c 93       	st	X, r25
    354e:	fe 01       	movw	r30, r28
    3550:	e9 56       	subi	r30, 0x69	; 105
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
    3554:	80 81       	ld	r24, Z
    3556:	91 81       	ldd	r25, Z+1	; 0x01
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <main+0x834>
    355c:	fe 01       	movw	r30, r28
    355e:	e9 56       	subi	r30, 0x69	; 105
    3560:	fe 4f       	sbci	r31, 0xFE	; 254
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,1,Hamokshastanding);
    3566:	9e 01       	movw	r18, r28
    3568:	27 52       	subi	r18, 0x27	; 39
    356a:	3e 4f       	sbci	r19, 0xFE	; 254
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	61 e0       	ldi	r22, 0x01	; 1
    3570:	41 e0       	ldi	r20, 0x01	; 1
    3572:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    3576:	fe 01       	movw	r30, r28
    3578:	ed 56       	subi	r30, 0x6D	; 109
    357a:	fe 4f       	sbci	r31, 0xFE	; 254
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	a8 e4       	ldi	r26, 0x48	; 72
    3582:	b3 e4       	ldi	r27, 0x43	; 67
    3584:	80 83       	st	Z, r24
    3586:	91 83       	std	Z+1, r25	; 0x01
    3588:	a2 83       	std	Z+2, r26	; 0x02
    358a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    358c:	8e 01       	movw	r16, r28
    358e:	01 57       	subi	r16, 0x71	; 113
    3590:	1e 4f       	sbci	r17, 0xFE	; 254
    3592:	fe 01       	movw	r30, r28
    3594:	ed 56       	subi	r30, 0x6D	; 109
    3596:	fe 4f       	sbci	r31, 0xFE	; 254
    3598:	60 81       	ld	r22, Z
    359a:	71 81       	ldd	r23, Z+1	; 0x01
    359c:	82 81       	ldd	r24, Z+2	; 0x02
    359e:	93 81       	ldd	r25, Z+3	; 0x03
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	4a ef       	ldi	r20, 0xFA	; 250
    35a6:	54 e4       	ldi	r21, 0x44	; 68
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	f8 01       	movw	r30, r16
    35b2:	80 83       	st	Z, r24
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	a2 83       	std	Z+2, r26	; 0x02
    35b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ba:	fe 01       	movw	r30, r28
    35bc:	e1 57       	subi	r30, 0x71	; 113
    35be:	fe 4f       	sbci	r31, 0xFE	; 254
    35c0:	60 81       	ld	r22, Z
    35c2:	71 81       	ldd	r23, Z+1	; 0x01
    35c4:	82 81       	ldd	r24, Z+2	; 0x02
    35c6:	93 81       	ldd	r25, Z+3	; 0x03
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	40 e8       	ldi	r20, 0x80	; 128
    35ce:	5f e3       	ldi	r21, 0x3F	; 63
    35d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d4:	88 23       	and	r24, r24
    35d6:	44 f4       	brge	.+16     	; 0x35e8 <main+0x8c4>
		__ticks = 1;
    35d8:	fe 01       	movw	r30, r28
    35da:	e3 57       	subi	r30, 0x73	; 115
    35dc:	fe 4f       	sbci	r31, 0xFE	; 254
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	91 83       	std	Z+1, r25	; 0x01
    35e4:	80 83       	st	Z, r24
    35e6:	64 c0       	rjmp	.+200    	; 0x36b0 <main+0x98c>
	else if (__tmp > 65535)
    35e8:	fe 01       	movw	r30, r28
    35ea:	e1 57       	subi	r30, 0x71	; 113
    35ec:	fe 4f       	sbci	r31, 0xFE	; 254
    35ee:	60 81       	ld	r22, Z
    35f0:	71 81       	ldd	r23, Z+1	; 0x01
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	93 81       	ldd	r25, Z+3	; 0x03
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	3f ef       	ldi	r19, 0xFF	; 255
    35fa:	4f e7       	ldi	r20, 0x7F	; 127
    35fc:	57 e4       	ldi	r21, 0x47	; 71
    35fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3602:	18 16       	cp	r1, r24
    3604:	0c f0       	brlt	.+2      	; 0x3608 <main+0x8e4>
    3606:	43 c0       	rjmp	.+134    	; 0x368e <main+0x96a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3608:	fe 01       	movw	r30, r28
    360a:	ed 56       	subi	r30, 0x6D	; 109
    360c:	fe 4f       	sbci	r31, 0xFE	; 254
    360e:	60 81       	ld	r22, Z
    3610:	71 81       	ldd	r23, Z+1	; 0x01
    3612:	82 81       	ldd	r24, Z+2	; 0x02
    3614:	93 81       	ldd	r25, Z+3	; 0x03
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	40 e2       	ldi	r20, 0x20	; 32
    361c:	51 e4       	ldi	r21, 0x41	; 65
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	8e 01       	movw	r16, r28
    3628:	03 57       	subi	r16, 0x73	; 115
    362a:	1e 4f       	sbci	r17, 0xFE	; 254
    362c:	bc 01       	movw	r22, r24
    362e:	cd 01       	movw	r24, r26
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	f8 01       	movw	r30, r16
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	80 83       	st	Z, r24
    363e:	1f c0       	rjmp	.+62     	; 0x367e <main+0x95a>
    3640:	fe 01       	movw	r30, r28
    3642:	e5 57       	subi	r30, 0x75	; 117
    3644:	fe 4f       	sbci	r31, 0xFE	; 254
    3646:	88 ec       	ldi	r24, 0xC8	; 200
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	80 83       	st	Z, r24
    364e:	fe 01       	movw	r30, r28
    3650:	e5 57       	subi	r30, 0x75	; 117
    3652:	fe 4f       	sbci	r31, 0xFE	; 254
    3654:	80 81       	ld	r24, Z
    3656:	91 81       	ldd	r25, Z+1	; 0x01
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	f1 f7       	brne	.-4      	; 0x3658 <main+0x934>
    365c:	fe 01       	movw	r30, r28
    365e:	e5 57       	subi	r30, 0x75	; 117
    3660:	fe 4f       	sbci	r31, 0xFE	; 254
    3662:	91 83       	std	Z+1, r25	; 0x01
    3664:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3666:	de 01       	movw	r26, r28
    3668:	a3 57       	subi	r26, 0x73	; 115
    366a:	be 4f       	sbci	r27, 0xFE	; 254
    366c:	fe 01       	movw	r30, r28
    366e:	e3 57       	subi	r30, 0x73	; 115
    3670:	fe 4f       	sbci	r31, 0xFE	; 254
    3672:	80 81       	ld	r24, Z
    3674:	91 81       	ldd	r25, Z+1	; 0x01
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	11 96       	adiw	r26, 0x01	; 1
    367a:	9c 93       	st	X, r25
    367c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367e:	fe 01       	movw	r30, r28
    3680:	e3 57       	subi	r30, 0x73	; 115
    3682:	fe 4f       	sbci	r31, 0xFE	; 254
    3684:	80 81       	ld	r24, Z
    3686:	91 81       	ldd	r25, Z+1	; 0x01
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	d1 f6       	brne	.-76     	; 0x3640 <main+0x91c>
    368c:	27 c0       	rjmp	.+78     	; 0x36dc <main+0x9b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368e:	8e 01       	movw	r16, r28
    3690:	03 57       	subi	r16, 0x73	; 115
    3692:	1e 4f       	sbci	r17, 0xFE	; 254
    3694:	fe 01       	movw	r30, r28
    3696:	e1 57       	subi	r30, 0x71	; 113
    3698:	fe 4f       	sbci	r31, 0xFE	; 254
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	82 81       	ldd	r24, Z+2	; 0x02
    36a0:	93 81       	ldd	r25, Z+3	; 0x03
    36a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	f8 01       	movw	r30, r16
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	80 83       	st	Z, r24
    36b0:	de 01       	movw	r26, r28
    36b2:	a7 57       	subi	r26, 0x77	; 119
    36b4:	be 4f       	sbci	r27, 0xFE	; 254
    36b6:	fe 01       	movw	r30, r28
    36b8:	e3 57       	subi	r30, 0x73	; 115
    36ba:	fe 4f       	sbci	r31, 0xFE	; 254
    36bc:	80 81       	ld	r24, Z
    36be:	91 81       	ldd	r25, Z+1	; 0x01
    36c0:	8d 93       	st	X+, r24
    36c2:	9c 93       	st	X, r25
    36c4:	fe 01       	movw	r30, r28
    36c6:	e7 57       	subi	r30, 0x77	; 119
    36c8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ca:	80 81       	ld	r24, Z
    36cc:	91 81       	ldd	r25, Z+1	; 0x01
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	f1 f7       	brne	.-4      	; 0x36ce <main+0x9aa>
    36d2:	fe 01       	movw	r30, r28
    36d4:	e7 57       	subi	r30, 0x77	; 119
    36d6:	fe 4f       	sbci	r31, 0xFE	; 254
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    36dc:	de 01       	movw	r26, r28
    36de:	ad 53       	subi	r26, 0x3D	; 61
    36e0:	be 4f       	sbci	r27, 0xFE	; 254
    36e2:	fe 01       	movw	r30, r28
    36e4:	eb 53       	subi	r30, 0x3B	; 59
    36e6:	fe 4f       	sbci	r31, 0xFE	; 254
    36e8:	80 81       	ld	r24, Z
    36ea:	91 81       	ldd	r25, Z+1	; 0x01
    36ec:	8a 56       	subi	r24, 0x6A	; 106
    36ee:	9f 4f       	sbci	r25, 0xFF	; 255
    36f0:	8d 93       	st	X+, r24
    36f2:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    36f4:	de 01       	movw	r26, r28
    36f6:	af 53       	subi	r26, 0x3F	; 63
    36f8:	be 4f       	sbci	r27, 0xFE	; 254
    36fa:	fe 01       	movw	r30, r28
    36fc:	eb 53       	subi	r30, 0x3B	; 59
    36fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3700:	80 81       	ld	r24, Z
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	86 59       	subi	r24, 0x96	; 150
    3706:	90 40       	sbci	r25, 0x00	; 0
    3708:	11 96       	adiw	r26, 0x01	; 1
    370a:	9c 93       	st	X, r25
    370c:	8e 93       	st	-X, r24
    370e:	73 cc       	rjmp	.-1818   	; 0x2ff6 <main+0x2d2>
	  }
	  else if((Local_u16AnalogValue > 624) && (Local_u16AnalogValue <= 936))
    3710:	fe 01       	movw	r30, r28
    3712:	eb 53       	subi	r30, 0x3B	; 59
    3714:	fe 4f       	sbci	r31, 0xFE	; 254
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	f2 e0       	ldi	r31, 0x02	; 2
    371c:	81 37       	cpi	r24, 0x71	; 113
    371e:	9f 07       	cpc	r25, r31
    3720:	08 f4       	brcc	.+2      	; 0x3724 <main+0xa00>
    3722:	a2 c1       	rjmp	.+836    	; 0x3a68 <main+0xd44>
    3724:	fe 01       	movw	r30, r28
    3726:	eb 53       	subi	r30, 0x3B	; 59
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	80 81       	ld	r24, Z
    372c:	91 81       	ldd	r25, Z+1	; 0x01
    372e:	23 e0       	ldi	r18, 0x03	; 3
    3730:	89 3a       	cpi	r24, 0xA9	; 169
    3732:	92 07       	cpc	r25, r18
    3734:	08 f0       	brcs	.+2      	; 0x3738 <main+0xa14>
    3736:	98 c1       	rjmp	.+816    	; 0x3a68 <main+0xd44>
	  {
		  LCD_u8_GoTo_XY(0,0);
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	60 e0       	ldi	r22, 0x00	; 0
    373c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    3740:	80 e6       	ldi	r24, 0x60	; 96
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,2,HamokshaRuning);
    3748:	9e 01       	movw	r18, r28
    374a:	2f 51       	subi	r18, 0x1F	; 31
    374c:	3e 4f       	sbci	r19, 0xFE	; 254
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	61 e0       	ldi	r22, 0x01	; 1
    3752:	42 e0       	ldi	r20, 0x02	; 2
    3754:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    3758:	fe 01       	movw	r30, r28
    375a:	eb 57       	subi	r30, 0x7B	; 123
    375c:	fe 4f       	sbci	r31, 0xFE	; 254
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	a8 e4       	ldi	r26, 0x48	; 72
    3764:	b3 e4       	ldi	r27, 0x43	; 67
    3766:	80 83       	st	Z, r24
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	a2 83       	std	Z+2, r26	; 0x02
    376c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376e:	8e 01       	movw	r16, r28
    3770:	0f 57       	subi	r16, 0x7F	; 127
    3772:	1e 4f       	sbci	r17, 0xFE	; 254
    3774:	fe 01       	movw	r30, r28
    3776:	eb 57       	subi	r30, 0x7B	; 123
    3778:	fe 4f       	sbci	r31, 0xFE	; 254
    377a:	60 81       	ld	r22, Z
    377c:	71 81       	ldd	r23, Z+1	; 0x01
    377e:	82 81       	ldd	r24, Z+2	; 0x02
    3780:	93 81       	ldd	r25, Z+3	; 0x03
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	4a ef       	ldi	r20, 0xFA	; 250
    3788:	54 e4       	ldi	r21, 0x44	; 68
    378a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	f8 01       	movw	r30, r16
    3794:	80 83       	st	Z, r24
    3796:	91 83       	std	Z+1, r25	; 0x01
    3798:	a2 83       	std	Z+2, r26	; 0x02
    379a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    379c:	fe 01       	movw	r30, r28
    379e:	ef 57       	subi	r30, 0x7F	; 127
    37a0:	fe 4f       	sbci	r31, 0xFE	; 254
    37a2:	60 81       	ld	r22, Z
    37a4:	71 81       	ldd	r23, Z+1	; 0x01
    37a6:	82 81       	ldd	r24, Z+2	; 0x02
    37a8:	93 81       	ldd	r25, Z+3	; 0x03
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	40 e8       	ldi	r20, 0x80	; 128
    37b0:	5f e3       	ldi	r21, 0x3F	; 63
    37b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37b6:	88 23       	and	r24, r24
    37b8:	44 f4       	brge	.+16     	; 0x37ca <main+0xaa6>
		__ticks = 1;
    37ba:	fe 01       	movw	r30, r28
    37bc:	e1 58       	subi	r30, 0x81	; 129
    37be:	fe 4f       	sbci	r31, 0xFE	; 254
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	91 83       	std	Z+1, r25	; 0x01
    37c6:	80 83       	st	Z, r24
    37c8:	64 c0       	rjmp	.+200    	; 0x3892 <main+0xb6e>
	else if (__tmp > 65535)
    37ca:	fe 01       	movw	r30, r28
    37cc:	ef 57       	subi	r30, 0x7F	; 127
    37ce:	fe 4f       	sbci	r31, 0xFE	; 254
    37d0:	60 81       	ld	r22, Z
    37d2:	71 81       	ldd	r23, Z+1	; 0x01
    37d4:	82 81       	ldd	r24, Z+2	; 0x02
    37d6:	93 81       	ldd	r25, Z+3	; 0x03
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	3f ef       	ldi	r19, 0xFF	; 255
    37dc:	4f e7       	ldi	r20, 0x7F	; 127
    37de:	57 e4       	ldi	r21, 0x47	; 71
    37e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e4:	18 16       	cp	r1, r24
    37e6:	0c f0       	brlt	.+2      	; 0x37ea <main+0xac6>
    37e8:	43 c0       	rjmp	.+134    	; 0x3870 <main+0xb4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ea:	fe 01       	movw	r30, r28
    37ec:	eb 57       	subi	r30, 0x7B	; 123
    37ee:	fe 4f       	sbci	r31, 0xFE	; 254
    37f0:	60 81       	ld	r22, Z
    37f2:	71 81       	ldd	r23, Z+1	; 0x01
    37f4:	82 81       	ldd	r24, Z+2	; 0x02
    37f6:	93 81       	ldd	r25, Z+3	; 0x03
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	40 e2       	ldi	r20, 0x20	; 32
    37fe:	51 e4       	ldi	r21, 0x41	; 65
    3800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	8e 01       	movw	r16, r28
    380a:	01 58       	subi	r16, 0x81	; 129
    380c:	1e 4f       	sbci	r17, 0xFE	; 254
    380e:	bc 01       	movw	r22, r24
    3810:	cd 01       	movw	r24, r26
    3812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	f8 01       	movw	r30, r16
    381c:	91 83       	std	Z+1, r25	; 0x01
    381e:	80 83       	st	Z, r24
    3820:	1f c0       	rjmp	.+62     	; 0x3860 <main+0xb3c>
    3822:	fe 01       	movw	r30, r28
    3824:	e3 58       	subi	r30, 0x83	; 131
    3826:	fe 4f       	sbci	r31, 0xFE	; 254
    3828:	88 ec       	ldi	r24, 0xC8	; 200
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	91 83       	std	Z+1, r25	; 0x01
    382e:	80 83       	st	Z, r24
    3830:	fe 01       	movw	r30, r28
    3832:	e3 58       	subi	r30, 0x83	; 131
    3834:	fe 4f       	sbci	r31, 0xFE	; 254
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	01 97       	sbiw	r24, 0x01	; 1
    383c:	f1 f7       	brne	.-4      	; 0x383a <main+0xb16>
    383e:	fe 01       	movw	r30, r28
    3840:	e3 58       	subi	r30, 0x83	; 131
    3842:	fe 4f       	sbci	r31, 0xFE	; 254
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3848:	de 01       	movw	r26, r28
    384a:	a1 58       	subi	r26, 0x81	; 129
    384c:	be 4f       	sbci	r27, 0xFE	; 254
    384e:	fe 01       	movw	r30, r28
    3850:	e1 58       	subi	r30, 0x81	; 129
    3852:	fe 4f       	sbci	r31, 0xFE	; 254
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	11 96       	adiw	r26, 0x01	; 1
    385c:	9c 93       	st	X, r25
    385e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3860:	fe 01       	movw	r30, r28
    3862:	e1 58       	subi	r30, 0x81	; 129
    3864:	fe 4f       	sbci	r31, 0xFE	; 254
    3866:	80 81       	ld	r24, Z
    3868:	91 81       	ldd	r25, Z+1	; 0x01
    386a:	00 97       	sbiw	r24, 0x00	; 0
    386c:	d1 f6       	brne	.-76     	; 0x3822 <main+0xafe>
    386e:	27 c0       	rjmp	.+78     	; 0x38be <main+0xb9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3870:	8e 01       	movw	r16, r28
    3872:	01 58       	subi	r16, 0x81	; 129
    3874:	1e 4f       	sbci	r17, 0xFE	; 254
    3876:	fe 01       	movw	r30, r28
    3878:	ef 57       	subi	r30, 0x7F	; 127
    387a:	fe 4f       	sbci	r31, 0xFE	; 254
    387c:	60 81       	ld	r22, Z
    387e:	71 81       	ldd	r23, Z+1	; 0x01
    3880:	82 81       	ldd	r24, Z+2	; 0x02
    3882:	93 81       	ldd	r25, Z+3	; 0x03
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	f8 01       	movw	r30, r16
    388e:	91 83       	std	Z+1, r25	; 0x01
    3890:	80 83       	st	Z, r24
    3892:	de 01       	movw	r26, r28
    3894:	a5 58       	subi	r26, 0x85	; 133
    3896:	be 4f       	sbci	r27, 0xFE	; 254
    3898:	fe 01       	movw	r30, r28
    389a:	e1 58       	subi	r30, 0x81	; 129
    389c:	fe 4f       	sbci	r31, 0xFE	; 254
    389e:	80 81       	ld	r24, Z
    38a0:	91 81       	ldd	r25, Z+1	; 0x01
    38a2:	8d 93       	st	X+, r24
    38a4:	9c 93       	st	X, r25
    38a6:	fe 01       	movw	r30, r28
    38a8:	e5 58       	subi	r30, 0x85	; 133
    38aa:	fe 4f       	sbci	r31, 0xFE	; 254
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <main+0xb8c>
    38b4:	fe 01       	movw	r30, r28
    38b6:	e5 58       	subi	r30, 0x85	; 133
    38b8:	fe 4f       	sbci	r31, 0xFE	; 254
    38ba:	91 83       	std	Z+1, r25	; 0x01
    38bc:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,2,Hamokshastanding);
    38be:	9e 01       	movw	r18, r28
    38c0:	27 52       	subi	r18, 0x27	; 39
    38c2:	3e 4f       	sbci	r19, 0xFE	; 254
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	61 e0       	ldi	r22, 0x01	; 1
    38c8:	42 e0       	ldi	r20, 0x02	; 2
    38ca:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    38ce:	fe 01       	movw	r30, r28
    38d0:	e9 58       	subi	r30, 0x89	; 137
    38d2:	fe 4f       	sbci	r31, 0xFE	; 254
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	a8 e4       	ldi	r26, 0x48	; 72
    38da:	b3 e4       	ldi	r27, 0x43	; 67
    38dc:	80 83       	st	Z, r24
    38de:	91 83       	std	Z+1, r25	; 0x01
    38e0:	a2 83       	std	Z+2, r26	; 0x02
    38e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e4:	8e 01       	movw	r16, r28
    38e6:	0d 58       	subi	r16, 0x8D	; 141
    38e8:	1e 4f       	sbci	r17, 0xFE	; 254
    38ea:	fe 01       	movw	r30, r28
    38ec:	e9 58       	subi	r30, 0x89	; 137
    38ee:	fe 4f       	sbci	r31, 0xFE	; 254
    38f0:	60 81       	ld	r22, Z
    38f2:	71 81       	ldd	r23, Z+1	; 0x01
    38f4:	82 81       	ldd	r24, Z+2	; 0x02
    38f6:	93 81       	ldd	r25, Z+3	; 0x03
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	4a ef       	ldi	r20, 0xFA	; 250
    38fe:	54 e4       	ldi	r21, 0x44	; 68
    3900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	f8 01       	movw	r30, r16
    390a:	80 83       	st	Z, r24
    390c:	91 83       	std	Z+1, r25	; 0x01
    390e:	a2 83       	std	Z+2, r26	; 0x02
    3910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3912:	fe 01       	movw	r30, r28
    3914:	ed 58       	subi	r30, 0x8D	; 141
    3916:	fe 4f       	sbci	r31, 0xFE	; 254
    3918:	60 81       	ld	r22, Z
    391a:	71 81       	ldd	r23, Z+1	; 0x01
    391c:	82 81       	ldd	r24, Z+2	; 0x02
    391e:	93 81       	ldd	r25, Z+3	; 0x03
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	40 e8       	ldi	r20, 0x80	; 128
    3926:	5f e3       	ldi	r21, 0x3F	; 63
    3928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    392c:	88 23       	and	r24, r24
    392e:	44 f4       	brge	.+16     	; 0x3940 <main+0xc1c>
		__ticks = 1;
    3930:	fe 01       	movw	r30, r28
    3932:	ef 58       	subi	r30, 0x8F	; 143
    3934:	fe 4f       	sbci	r31, 0xFE	; 254
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	91 83       	std	Z+1, r25	; 0x01
    393c:	80 83       	st	Z, r24
    393e:	64 c0       	rjmp	.+200    	; 0x3a08 <main+0xce4>
	else if (__tmp > 65535)
    3940:	fe 01       	movw	r30, r28
    3942:	ed 58       	subi	r30, 0x8D	; 141
    3944:	fe 4f       	sbci	r31, 0xFE	; 254
    3946:	60 81       	ld	r22, Z
    3948:	71 81       	ldd	r23, Z+1	; 0x01
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	3f ef       	ldi	r19, 0xFF	; 255
    3952:	4f e7       	ldi	r20, 0x7F	; 127
    3954:	57 e4       	ldi	r21, 0x47	; 71
    3956:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    395a:	18 16       	cp	r1, r24
    395c:	0c f0       	brlt	.+2      	; 0x3960 <main+0xc3c>
    395e:	43 c0       	rjmp	.+134    	; 0x39e6 <main+0xcc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3960:	fe 01       	movw	r30, r28
    3962:	e9 58       	subi	r30, 0x89	; 137
    3964:	fe 4f       	sbci	r31, 0xFE	; 254
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	82 81       	ldd	r24, Z+2	; 0x02
    396c:	93 81       	ldd	r25, Z+3	; 0x03
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e2       	ldi	r20, 0x20	; 32
    3974:	51 e4       	ldi	r21, 0x41	; 65
    3976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	8e 01       	movw	r16, r28
    3980:	0f 58       	subi	r16, 0x8F	; 143
    3982:	1e 4f       	sbci	r17, 0xFE	; 254
    3984:	bc 01       	movw	r22, r24
    3986:	cd 01       	movw	r24, r26
    3988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	f8 01       	movw	r30, r16
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	80 83       	st	Z, r24
    3996:	1f c0       	rjmp	.+62     	; 0x39d6 <main+0xcb2>
    3998:	fe 01       	movw	r30, r28
    399a:	e1 59       	subi	r30, 0x91	; 145
    399c:	fe 4f       	sbci	r31, 0xFE	; 254
    399e:	88 ec       	ldi	r24, 0xC8	; 200
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	91 83       	std	Z+1, r25	; 0x01
    39a4:	80 83       	st	Z, r24
    39a6:	fe 01       	movw	r30, r28
    39a8:	e1 59       	subi	r30, 0x91	; 145
    39aa:	fe 4f       	sbci	r31, 0xFE	; 254
    39ac:	80 81       	ld	r24, Z
    39ae:	91 81       	ldd	r25, Z+1	; 0x01
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <main+0xc8c>
    39b4:	fe 01       	movw	r30, r28
    39b6:	e1 59       	subi	r30, 0x91	; 145
    39b8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39be:	de 01       	movw	r26, r28
    39c0:	af 58       	subi	r26, 0x8F	; 143
    39c2:	be 4f       	sbci	r27, 0xFE	; 254
    39c4:	fe 01       	movw	r30, r28
    39c6:	ef 58       	subi	r30, 0x8F	; 143
    39c8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ca:	80 81       	ld	r24, Z
    39cc:	91 81       	ldd	r25, Z+1	; 0x01
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	11 96       	adiw	r26, 0x01	; 1
    39d2:	9c 93       	st	X, r25
    39d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d6:	fe 01       	movw	r30, r28
    39d8:	ef 58       	subi	r30, 0x8F	; 143
    39da:	fe 4f       	sbci	r31, 0xFE	; 254
    39dc:	80 81       	ld	r24, Z
    39de:	91 81       	ldd	r25, Z+1	; 0x01
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	d1 f6       	brne	.-76     	; 0x3998 <main+0xc74>
    39e4:	27 c0       	rjmp	.+78     	; 0x3a34 <main+0xd10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e6:	8e 01       	movw	r16, r28
    39e8:	0f 58       	subi	r16, 0x8F	; 143
    39ea:	1e 4f       	sbci	r17, 0xFE	; 254
    39ec:	fe 01       	movw	r30, r28
    39ee:	ed 58       	subi	r30, 0x8D	; 141
    39f0:	fe 4f       	sbci	r31, 0xFE	; 254
    39f2:	60 81       	ld	r22, Z
    39f4:	71 81       	ldd	r23, Z+1	; 0x01
    39f6:	82 81       	ldd	r24, Z+2	; 0x02
    39f8:	93 81       	ldd	r25, Z+3	; 0x03
    39fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	f8 01       	movw	r30, r16
    3a04:	91 83       	std	Z+1, r25	; 0x01
    3a06:	80 83       	st	Z, r24
    3a08:	de 01       	movw	r26, r28
    3a0a:	a3 59       	subi	r26, 0x93	; 147
    3a0c:	be 4f       	sbci	r27, 0xFE	; 254
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ef 58       	subi	r30, 0x8F	; 143
    3a12:	fe 4f       	sbci	r31, 0xFE	; 254
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	8d 93       	st	X+, r24
    3a1a:	9c 93       	st	X, r25
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e3 59       	subi	r30, 0x93	; 147
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	80 81       	ld	r24, Z
    3a24:	91 81       	ldd	r25, Z+1	; 0x01
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	f1 f7       	brne	.-4      	; 0x3a26 <main+0xd02>
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	e3 59       	subi	r30, 0x93	; 147
    3a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a30:	91 83       	std	Z+1, r25	; 0x01
    3a32:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    3a34:	de 01       	movw	r26, r28
    3a36:	ad 53       	subi	r26, 0x3D	; 61
    3a38:	be 4f       	sbci	r27, 0xFE	; 254
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	eb 53       	subi	r30, 0x3B	; 59
    3a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a40:	80 81       	ld	r24, Z
    3a42:	91 81       	ldd	r25, Z+1	; 0x01
    3a44:	8a 56       	subi	r24, 0x6A	; 106
    3a46:	9f 4f       	sbci	r25, 0xFF	; 255
    3a48:	8d 93       	st	X+, r24
    3a4a:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    3a4c:	de 01       	movw	r26, r28
    3a4e:	af 53       	subi	r26, 0x3F	; 63
    3a50:	be 4f       	sbci	r27, 0xFE	; 254
    3a52:	fe 01       	movw	r30, r28
    3a54:	eb 53       	subi	r30, 0x3B	; 59
    3a56:	fe 4f       	sbci	r31, 0xFE	; 254
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	86 59       	subi	r24, 0x96	; 150
    3a5e:	90 40       	sbci	r25, 0x00	; 0
    3a60:	11 96       	adiw	r26, 0x01	; 1
    3a62:	9c 93       	st	X, r25
    3a64:	8e 93       	st	-X, r24
    3a66:	c7 ca       	rjmp	.-2674   	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 936) && (Local_u16AnalogValue <= 1248))
    3a68:	fe 01       	movw	r30, r28
    3a6a:	eb 53       	subi	r30, 0x3B	; 59
    3a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a6e:	80 81       	ld	r24, Z
    3a70:	91 81       	ldd	r25, Z+1	; 0x01
    3a72:	f3 e0       	ldi	r31, 0x03	; 3
    3a74:	89 3a       	cpi	r24, 0xA9	; 169
    3a76:	9f 07       	cpc	r25, r31
    3a78:	08 f4       	brcc	.+2      	; 0x3a7c <main+0xd58>
    3a7a:	a2 c1       	rjmp	.+836    	; 0x3dc0 <main+0x109c>
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	eb 53       	subi	r30, 0x3B	; 59
    3a80:	fe 4f       	sbci	r31, 0xFE	; 254
    3a82:	80 81       	ld	r24, Z
    3a84:	91 81       	ldd	r25, Z+1	; 0x01
    3a86:	24 e0       	ldi	r18, 0x04	; 4
    3a88:	81 3e       	cpi	r24, 0xE1	; 225
    3a8a:	92 07       	cpc	r25, r18
    3a8c:	08 f0       	brcs	.+2      	; 0x3a90 <main+0xd6c>
    3a8e:	98 c1       	rjmp	.+816    	; 0x3dc0 <main+0x109c>
	  {
		  LCD_u8_GoTo_XY(0,0);
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    3a98:	80 e6       	ldi	r24, 0x60	; 96
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,3,HamokshaRuning);
    3aa0:	9e 01       	movw	r18, r28
    3aa2:	2f 51       	subi	r18, 0x1F	; 31
    3aa4:	3e 4f       	sbci	r19, 0xFE	; 254
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	61 e0       	ldi	r22, 0x01	; 1
    3aaa:	43 e0       	ldi	r20, 0x03	; 3
    3aac:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e7 59       	subi	r30, 0x97	; 151
    3ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	a8 e4       	ldi	r26, 0x48	; 72
    3abc:	b3 e4       	ldi	r27, 0x43	; 67
    3abe:	80 83       	st	Z, r24
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	a2 83       	std	Z+2, r26	; 0x02
    3ac4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac6:	8e 01       	movw	r16, r28
    3ac8:	0b 59       	subi	r16, 0x9B	; 155
    3aca:	1e 4f       	sbci	r17, 0xFE	; 254
    3acc:	fe 01       	movw	r30, r28
    3ace:	e7 59       	subi	r30, 0x97	; 151
    3ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad2:	60 81       	ld	r22, Z
    3ad4:	71 81       	ldd	r23, Z+1	; 0x01
    3ad6:	82 81       	ldd	r24, Z+2	; 0x02
    3ad8:	93 81       	ldd	r25, Z+3	; 0x03
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a ef       	ldi	r20, 0xFA	; 250
    3ae0:	54 e4       	ldi	r21, 0x44	; 68
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	f8 01       	movw	r30, r16
    3aec:	80 83       	st	Z, r24
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	a2 83       	std	Z+2, r26	; 0x02
    3af2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3af4:	fe 01       	movw	r30, r28
    3af6:	eb 59       	subi	r30, 0x9B	; 155
    3af8:	fe 4f       	sbci	r31, 0xFE	; 254
    3afa:	60 81       	ld	r22, Z
    3afc:	71 81       	ldd	r23, Z+1	; 0x01
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e8       	ldi	r20, 0x80	; 128
    3b08:	5f e3       	ldi	r21, 0x3F	; 63
    3b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0e:	88 23       	and	r24, r24
    3b10:	44 f4       	brge	.+16     	; 0x3b22 <main+0xdfe>
		__ticks = 1;
    3b12:	fe 01       	movw	r30, r28
    3b14:	ed 59       	subi	r30, 0x9D	; 157
    3b16:	fe 4f       	sbci	r31, 0xFE	; 254
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	80 83       	st	Z, r24
    3b20:	64 c0       	rjmp	.+200    	; 0x3bea <main+0xec6>
	else if (__tmp > 65535)
    3b22:	fe 01       	movw	r30, r28
    3b24:	eb 59       	subi	r30, 0x9B	; 155
    3b26:	fe 4f       	sbci	r31, 0xFE	; 254
    3b28:	60 81       	ld	r22, Z
    3b2a:	71 81       	ldd	r23, Z+1	; 0x01
    3b2c:	82 81       	ldd	r24, Z+2	; 0x02
    3b2e:	93 81       	ldd	r25, Z+3	; 0x03
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	3f ef       	ldi	r19, 0xFF	; 255
    3b34:	4f e7       	ldi	r20, 0x7F	; 127
    3b36:	57 e4       	ldi	r21, 0x47	; 71
    3b38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b3c:	18 16       	cp	r1, r24
    3b3e:	0c f0       	brlt	.+2      	; 0x3b42 <main+0xe1e>
    3b40:	43 c0       	rjmp	.+134    	; 0x3bc8 <main+0xea4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b42:	fe 01       	movw	r30, r28
    3b44:	e7 59       	subi	r30, 0x97	; 151
    3b46:	fe 4f       	sbci	r31, 0xFE	; 254
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e2       	ldi	r20, 0x20	; 32
    3b56:	51 e4       	ldi	r21, 0x41	; 65
    3b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	8e 01       	movw	r16, r28
    3b62:	0d 59       	subi	r16, 0x9D	; 157
    3b64:	1e 4f       	sbci	r17, 0xFE	; 254
    3b66:	bc 01       	movw	r22, r24
    3b68:	cd 01       	movw	r24, r26
    3b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	f8 01       	movw	r30, r16
    3b74:	91 83       	std	Z+1, r25	; 0x01
    3b76:	80 83       	st	Z, r24
    3b78:	1f c0       	rjmp	.+62     	; 0x3bb8 <main+0xe94>
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	ef 59       	subi	r30, 0x9F	; 159
    3b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b80:	88 ec       	ldi	r24, 0xC8	; 200
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
    3b88:	fe 01       	movw	r30, r28
    3b8a:	ef 59       	subi	r30, 0x9F	; 159
    3b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b8e:	80 81       	ld	r24, Z
    3b90:	91 81       	ldd	r25, Z+1	; 0x01
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	f1 f7       	brne	.-4      	; 0x3b92 <main+0xe6e>
    3b96:	fe 01       	movw	r30, r28
    3b98:	ef 59       	subi	r30, 0x9F	; 159
    3b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba0:	de 01       	movw	r26, r28
    3ba2:	ad 59       	subi	r26, 0x9D	; 157
    3ba4:	be 4f       	sbci	r27, 0xFE	; 254
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	ed 59       	subi	r30, 0x9D	; 157
    3baa:	fe 4f       	sbci	r31, 0xFE	; 254
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	11 96       	adiw	r26, 0x01	; 1
    3bb4:	9c 93       	st	X, r25
    3bb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb8:	fe 01       	movw	r30, r28
    3bba:	ed 59       	subi	r30, 0x9D	; 157
    3bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3bbe:	80 81       	ld	r24, Z
    3bc0:	91 81       	ldd	r25, Z+1	; 0x01
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	d1 f6       	brne	.-76     	; 0x3b7a <main+0xe56>
    3bc6:	27 c0       	rjmp	.+78     	; 0x3c16 <main+0xef2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc8:	8e 01       	movw	r16, r28
    3bca:	0d 59       	subi	r16, 0x9D	; 157
    3bcc:	1e 4f       	sbci	r17, 0xFE	; 254
    3bce:	fe 01       	movw	r30, r28
    3bd0:	eb 59       	subi	r30, 0x9B	; 155
    3bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd4:	60 81       	ld	r22, Z
    3bd6:	71 81       	ldd	r23, Z+1	; 0x01
    3bd8:	82 81       	ldd	r24, Z+2	; 0x02
    3bda:	93 81       	ldd	r25, Z+3	; 0x03
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	f8 01       	movw	r30, r16
    3be6:	91 83       	std	Z+1, r25	; 0x01
    3be8:	80 83       	st	Z, r24
    3bea:	de 01       	movw	r26, r28
    3bec:	a1 5a       	subi	r26, 0xA1	; 161
    3bee:	be 4f       	sbci	r27, 0xFE	; 254
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	ed 59       	subi	r30, 0x9D	; 157
    3bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	8d 93       	st	X+, r24
    3bfc:	9c 93       	st	X, r25
    3bfe:	fe 01       	movw	r30, r28
    3c00:	e1 5a       	subi	r30, 0xA1	; 161
    3c02:	fe 4f       	sbci	r31, 0xFE	; 254
    3c04:	80 81       	ld	r24, Z
    3c06:	91 81       	ldd	r25, Z+1	; 0x01
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <main+0xee4>
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e1 5a       	subi	r30, 0xA1	; 161
    3c10:	fe 4f       	sbci	r31, 0xFE	; 254
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,3,Hamokshastanding);
    3c16:	9e 01       	movw	r18, r28
    3c18:	27 52       	subi	r18, 0x27	; 39
    3c1a:	3e 4f       	sbci	r19, 0xFE	; 254
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	61 e0       	ldi	r22, 0x01	; 1
    3c20:	43 e0       	ldi	r20, 0x03	; 3
    3c22:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    3c26:	fe 01       	movw	r30, r28
    3c28:	e5 5a       	subi	r30, 0xA5	; 165
    3c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	a8 e4       	ldi	r26, 0x48	; 72
    3c32:	b3 e4       	ldi	r27, 0x43	; 67
    3c34:	80 83       	st	Z, r24
    3c36:	91 83       	std	Z+1, r25	; 0x01
    3c38:	a2 83       	std	Z+2, r26	; 0x02
    3c3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3c:	8e 01       	movw	r16, r28
    3c3e:	09 5a       	subi	r16, 0xA9	; 169
    3c40:	1e 4f       	sbci	r17, 0xFE	; 254
    3c42:	fe 01       	movw	r30, r28
    3c44:	e5 5a       	subi	r30, 0xA5	; 165
    3c46:	fe 4f       	sbci	r31, 0xFE	; 254
    3c48:	60 81       	ld	r22, Z
    3c4a:	71 81       	ldd	r23, Z+1	; 0x01
    3c4c:	82 81       	ldd	r24, Z+2	; 0x02
    3c4e:	93 81       	ldd	r25, Z+3	; 0x03
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	4a ef       	ldi	r20, 0xFA	; 250
    3c56:	54 e4       	ldi	r21, 0x44	; 68
    3c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	f8 01       	movw	r30, r16
    3c62:	80 83       	st	Z, r24
    3c64:	91 83       	std	Z+1, r25	; 0x01
    3c66:	a2 83       	std	Z+2, r26	; 0x02
    3c68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e9 5a       	subi	r30, 0xA9	; 169
    3c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c70:	60 81       	ld	r22, Z
    3c72:	71 81       	ldd	r23, Z+1	; 0x01
    3c74:	82 81       	ldd	r24, Z+2	; 0x02
    3c76:	93 81       	ldd	r25, Z+3	; 0x03
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	40 e8       	ldi	r20, 0x80	; 128
    3c7e:	5f e3       	ldi	r21, 0x3F	; 63
    3c80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c84:	88 23       	and	r24, r24
    3c86:	44 f4       	brge	.+16     	; 0x3c98 <main+0xf74>
		__ticks = 1;
    3c88:	fe 01       	movw	r30, r28
    3c8a:	eb 5a       	subi	r30, 0xAB	; 171
    3c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c8e:	81 e0       	ldi	r24, 0x01	; 1
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	91 83       	std	Z+1, r25	; 0x01
    3c94:	80 83       	st	Z, r24
    3c96:	64 c0       	rjmp	.+200    	; 0x3d60 <main+0x103c>
	else if (__tmp > 65535)
    3c98:	fe 01       	movw	r30, r28
    3c9a:	e9 5a       	subi	r30, 0xA9	; 169
    3c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9e:	60 81       	ld	r22, Z
    3ca0:	71 81       	ldd	r23, Z+1	; 0x01
    3ca2:	82 81       	ldd	r24, Z+2	; 0x02
    3ca4:	93 81       	ldd	r25, Z+3	; 0x03
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	3f ef       	ldi	r19, 0xFF	; 255
    3caa:	4f e7       	ldi	r20, 0x7F	; 127
    3cac:	57 e4       	ldi	r21, 0x47	; 71
    3cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cb2:	18 16       	cp	r1, r24
    3cb4:	0c f0       	brlt	.+2      	; 0x3cb8 <main+0xf94>
    3cb6:	43 c0       	rjmp	.+134    	; 0x3d3e <main+0x101a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e5 5a       	subi	r30, 0xA5	; 165
    3cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3cbe:	60 81       	ld	r22, Z
    3cc0:	71 81       	ldd	r23, Z+1	; 0x01
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	93 81       	ldd	r25, Z+3	; 0x03
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	40 e2       	ldi	r20, 0x20	; 32
    3ccc:	51 e4       	ldi	r21, 0x41	; 65
    3cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	8e 01       	movw	r16, r28
    3cd8:	0b 5a       	subi	r16, 0xAB	; 171
    3cda:	1e 4f       	sbci	r17, 0xFE	; 254
    3cdc:	bc 01       	movw	r22, r24
    3cde:	cd 01       	movw	r24, r26
    3ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	f8 01       	movw	r30, r16
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
    3cee:	1f c0       	rjmp	.+62     	; 0x3d2e <main+0x100a>
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	ed 5a       	subi	r30, 0xAD	; 173
    3cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf6:	88 ec       	ldi	r24, 0xC8	; 200
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	80 83       	st	Z, r24
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ed 5a       	subi	r30, 0xAD	; 173
    3d02:	fe 4f       	sbci	r31, 0xFE	; 254
    3d04:	80 81       	ld	r24, Z
    3d06:	91 81       	ldd	r25, Z+1	; 0x01
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <main+0xfe4>
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	ed 5a       	subi	r30, 0xAD	; 173
    3d10:	fe 4f       	sbci	r31, 0xFE	; 254
    3d12:	91 83       	std	Z+1, r25	; 0x01
    3d14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d16:	de 01       	movw	r26, r28
    3d18:	ab 5a       	subi	r26, 0xAB	; 171
    3d1a:	be 4f       	sbci	r27, 0xFE	; 254
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	eb 5a       	subi	r30, 0xAB	; 171
    3d20:	fe 4f       	sbci	r31, 0xFE	; 254
    3d22:	80 81       	ld	r24, Z
    3d24:	91 81       	ldd	r25, Z+1	; 0x01
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	11 96       	adiw	r26, 0x01	; 1
    3d2a:	9c 93       	st	X, r25
    3d2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2e:	fe 01       	movw	r30, r28
    3d30:	eb 5a       	subi	r30, 0xAB	; 171
    3d32:	fe 4f       	sbci	r31, 0xFE	; 254
    3d34:	80 81       	ld	r24, Z
    3d36:	91 81       	ldd	r25, Z+1	; 0x01
    3d38:	00 97       	sbiw	r24, 0x00	; 0
    3d3a:	d1 f6       	brne	.-76     	; 0x3cf0 <main+0xfcc>
    3d3c:	27 c0       	rjmp	.+78     	; 0x3d8c <main+0x1068>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3e:	8e 01       	movw	r16, r28
    3d40:	0b 5a       	subi	r16, 0xAB	; 171
    3d42:	1e 4f       	sbci	r17, 0xFE	; 254
    3d44:	fe 01       	movw	r30, r28
    3d46:	e9 5a       	subi	r30, 0xA9	; 169
    3d48:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4a:	60 81       	ld	r22, Z
    3d4c:	71 81       	ldd	r23, Z+1	; 0x01
    3d4e:	82 81       	ldd	r24, Z+2	; 0x02
    3d50:	93 81       	ldd	r25, Z+3	; 0x03
    3d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	f8 01       	movw	r30, r16
    3d5c:	91 83       	std	Z+1, r25	; 0x01
    3d5e:	80 83       	st	Z, r24
    3d60:	de 01       	movw	r26, r28
    3d62:	af 5a       	subi	r26, 0xAF	; 175
    3d64:	be 4f       	sbci	r27, 0xFE	; 254
    3d66:	fe 01       	movw	r30, r28
    3d68:	eb 5a       	subi	r30, 0xAB	; 171
    3d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d6c:	80 81       	ld	r24, Z
    3d6e:	91 81       	ldd	r25, Z+1	; 0x01
    3d70:	8d 93       	st	X+, r24
    3d72:	9c 93       	st	X, r25
    3d74:	fe 01       	movw	r30, r28
    3d76:	ef 5a       	subi	r30, 0xAF	; 175
    3d78:	fe 4f       	sbci	r31, 0xFE	; 254
    3d7a:	80 81       	ld	r24, Z
    3d7c:	91 81       	ldd	r25, Z+1	; 0x01
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <main+0x105a>
    3d82:	fe 01       	movw	r30, r28
    3d84:	ef 5a       	subi	r30, 0xAF	; 175
    3d86:	fe 4f       	sbci	r31, 0xFE	; 254
    3d88:	91 83       	std	Z+1, r25	; 0x01
    3d8a:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    3d8c:	de 01       	movw	r26, r28
    3d8e:	ad 53       	subi	r26, 0x3D	; 61
    3d90:	be 4f       	sbci	r27, 0xFE	; 254
    3d92:	fe 01       	movw	r30, r28
    3d94:	eb 53       	subi	r30, 0x3B	; 59
    3d96:	fe 4f       	sbci	r31, 0xFE	; 254
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	8a 56       	subi	r24, 0x6A	; 106
    3d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3da0:	8d 93       	st	X+, r24
    3da2:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    3da4:	de 01       	movw	r26, r28
    3da6:	af 53       	subi	r26, 0x3F	; 63
    3da8:	be 4f       	sbci	r27, 0xFE	; 254
    3daa:	fe 01       	movw	r30, r28
    3dac:	eb 53       	subi	r30, 0x3B	; 59
    3dae:	fe 4f       	sbci	r31, 0xFE	; 254
    3db0:	80 81       	ld	r24, Z
    3db2:	91 81       	ldd	r25, Z+1	; 0x01
    3db4:	86 59       	subi	r24, 0x96	; 150
    3db6:	90 40       	sbci	r25, 0x00	; 0
    3db8:	11 96       	adiw	r26, 0x01	; 1
    3dba:	9c 93       	st	X, r25
    3dbc:	8e 93       	st	-X, r24
    3dbe:	1b c9       	rjmp	.-3530   	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 1248) && (Local_u16AnalogValue <= 1560 ))
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	eb 53       	subi	r30, 0x3B	; 59
    3dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc6:	80 81       	ld	r24, Z
    3dc8:	91 81       	ldd	r25, Z+1	; 0x01
    3dca:	f4 e0       	ldi	r31, 0x04	; 4
    3dcc:	81 3e       	cpi	r24, 0xE1	; 225
    3dce:	9f 07       	cpc	r25, r31
    3dd0:	08 f4       	brcc	.+2      	; 0x3dd4 <main+0x10b0>
    3dd2:	a3 c1       	rjmp	.+838    	; 0x411a <main+0x13f6>
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	eb 53       	subi	r30, 0x3B	; 59
    3dd8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dda:	80 81       	ld	r24, Z
    3ddc:	91 81       	ldd	r25, Z+1	; 0x01
    3dde:	26 e0       	ldi	r18, 0x06	; 6
    3de0:	89 31       	cpi	r24, 0x19	; 25
    3de2:	92 07       	cpc	r25, r18
    3de4:	08 f0       	brcs	.+2      	; 0x3de8 <main+0x10c4>
    3de6:	99 c1       	rjmp	.+818    	; 0x411a <main+0x13f6>
	  {
		  LCD_u8_GoTo_XY(0,0);
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    3df0:	80 e6       	ldi	r24, 0x60	; 96
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,4,HamokshaRuning);
    3df8:	9e 01       	movw	r18, r28
    3dfa:	2f 51       	subi	r18, 0x1F	; 31
    3dfc:	3e 4f       	sbci	r19, 0xFE	; 254
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	61 e0       	ldi	r22, 0x01	; 1
    3e02:	44 e0       	ldi	r20, 0x04	; 4
    3e04:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    3e08:	fe 01       	movw	r30, r28
    3e0a:	e3 5b       	subi	r30, 0xB3	; 179
    3e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	a8 e4       	ldi	r26, 0x48	; 72
    3e14:	b3 e4       	ldi	r27, 0x43	; 67
    3e16:	80 83       	st	Z, r24
    3e18:	91 83       	std	Z+1, r25	; 0x01
    3e1a:	a2 83       	std	Z+2, r26	; 0x02
    3e1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e1e:	8e 01       	movw	r16, r28
    3e20:	07 5b       	subi	r16, 0xB7	; 183
    3e22:	1e 4f       	sbci	r17, 0xFE	; 254
    3e24:	fe 01       	movw	r30, r28
    3e26:	e3 5b       	subi	r30, 0xB3	; 179
    3e28:	fe 4f       	sbci	r31, 0xFE	; 254
    3e2a:	60 81       	ld	r22, Z
    3e2c:	71 81       	ldd	r23, Z+1	; 0x01
    3e2e:	82 81       	ldd	r24, Z+2	; 0x02
    3e30:	93 81       	ldd	r25, Z+3	; 0x03
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	4a ef       	ldi	r20, 0xFA	; 250
    3e38:	54 e4       	ldi	r21, 0x44	; 68
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	f8 01       	movw	r30, r16
    3e44:	80 83       	st	Z, r24
    3e46:	91 83       	std	Z+1, r25	; 0x01
    3e48:	a2 83       	std	Z+2, r26	; 0x02
    3e4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e7 5b       	subi	r30, 0xB7	; 183
    3e50:	fe 4f       	sbci	r31, 0xFE	; 254
    3e52:	60 81       	ld	r22, Z
    3e54:	71 81       	ldd	r23, Z+1	; 0x01
    3e56:	82 81       	ldd	r24, Z+2	; 0x02
    3e58:	93 81       	ldd	r25, Z+3	; 0x03
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	40 e8       	ldi	r20, 0x80	; 128
    3e60:	5f e3       	ldi	r21, 0x3F	; 63
    3e62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e66:	88 23       	and	r24, r24
    3e68:	44 f4       	brge	.+16     	; 0x3e7a <main+0x1156>
		__ticks = 1;
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	e9 5b       	subi	r30, 0xB9	; 185
    3e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	91 83       	std	Z+1, r25	; 0x01
    3e76:	80 83       	st	Z, r24
    3e78:	64 c0       	rjmp	.+200    	; 0x3f42 <main+0x121e>
	else if (__tmp > 65535)
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e7 5b       	subi	r30, 0xB7	; 183
    3e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e80:	60 81       	ld	r22, Z
    3e82:	71 81       	ldd	r23, Z+1	; 0x01
    3e84:	82 81       	ldd	r24, Z+2	; 0x02
    3e86:	93 81       	ldd	r25, Z+3	; 0x03
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	3f ef       	ldi	r19, 0xFF	; 255
    3e8c:	4f e7       	ldi	r20, 0x7F	; 127
    3e8e:	57 e4       	ldi	r21, 0x47	; 71
    3e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e94:	18 16       	cp	r1, r24
    3e96:	0c f0       	brlt	.+2      	; 0x3e9a <main+0x1176>
    3e98:	43 c0       	rjmp	.+134    	; 0x3f20 <main+0x11fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	e3 5b       	subi	r30, 0xB3	; 179
    3e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea0:	60 81       	ld	r22, Z
    3ea2:	71 81       	ldd	r23, Z+1	; 0x01
    3ea4:	82 81       	ldd	r24, Z+2	; 0x02
    3ea6:	93 81       	ldd	r25, Z+3	; 0x03
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	40 e2       	ldi	r20, 0x20	; 32
    3eae:	51 e4       	ldi	r21, 0x41	; 65
    3eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	8e 01       	movw	r16, r28
    3eba:	09 5b       	subi	r16, 0xB9	; 185
    3ebc:	1e 4f       	sbci	r17, 0xFE	; 254
    3ebe:	bc 01       	movw	r22, r24
    3ec0:	cd 01       	movw	r24, r26
    3ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	f8 01       	movw	r30, r16
    3ecc:	91 83       	std	Z+1, r25	; 0x01
    3ece:	80 83       	st	Z, r24
    3ed0:	1f c0       	rjmp	.+62     	; 0x3f10 <main+0x11ec>
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	eb 5b       	subi	r30, 0xBB	; 187
    3ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed8:	88 ec       	ldi	r24, 0xC8	; 200
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	91 83       	std	Z+1, r25	; 0x01
    3ede:	80 83       	st	Z, r24
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	eb 5b       	subi	r30, 0xBB	; 187
    3ee4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee6:	80 81       	ld	r24, Z
    3ee8:	91 81       	ldd	r25, Z+1	; 0x01
    3eea:	01 97       	sbiw	r24, 0x01	; 1
    3eec:	f1 f7       	brne	.-4      	; 0x3eea <main+0x11c6>
    3eee:	fe 01       	movw	r30, r28
    3ef0:	eb 5b       	subi	r30, 0xBB	; 187
    3ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef4:	91 83       	std	Z+1, r25	; 0x01
    3ef6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef8:	de 01       	movw	r26, r28
    3efa:	a9 5b       	subi	r26, 0xB9	; 185
    3efc:	be 4f       	sbci	r27, 0xFE	; 254
    3efe:	fe 01       	movw	r30, r28
    3f00:	e9 5b       	subi	r30, 0xB9	; 185
    3f02:	fe 4f       	sbci	r31, 0xFE	; 254
    3f04:	80 81       	ld	r24, Z
    3f06:	91 81       	ldd	r25, Z+1	; 0x01
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	11 96       	adiw	r26, 0x01	; 1
    3f0c:	9c 93       	st	X, r25
    3f0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f10:	fe 01       	movw	r30, r28
    3f12:	e9 5b       	subi	r30, 0xB9	; 185
    3f14:	fe 4f       	sbci	r31, 0xFE	; 254
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	d1 f6       	brne	.-76     	; 0x3ed2 <main+0x11ae>
    3f1e:	27 c0       	rjmp	.+78     	; 0x3f6e <main+0x124a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f20:	8e 01       	movw	r16, r28
    3f22:	09 5b       	subi	r16, 0xB9	; 185
    3f24:	1e 4f       	sbci	r17, 0xFE	; 254
    3f26:	fe 01       	movw	r30, r28
    3f28:	e7 5b       	subi	r30, 0xB7	; 183
    3f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f2c:	60 81       	ld	r22, Z
    3f2e:	71 81       	ldd	r23, Z+1	; 0x01
    3f30:	82 81       	ldd	r24, Z+2	; 0x02
    3f32:	93 81       	ldd	r25, Z+3	; 0x03
    3f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	f8 01       	movw	r30, r16
    3f3e:	91 83       	std	Z+1, r25	; 0x01
    3f40:	80 83       	st	Z, r24
    3f42:	de 01       	movw	r26, r28
    3f44:	ad 5b       	subi	r26, 0xBD	; 189
    3f46:	be 4f       	sbci	r27, 0xFE	; 254
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e9 5b       	subi	r30, 0xB9	; 185
    3f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f4e:	80 81       	ld	r24, Z
    3f50:	91 81       	ldd	r25, Z+1	; 0x01
    3f52:	8d 93       	st	X+, r24
    3f54:	9c 93       	st	X, r25
    3f56:	fe 01       	movw	r30, r28
    3f58:	ed 5b       	subi	r30, 0xBD	; 189
    3f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f5c:	80 81       	ld	r24, Z
    3f5e:	91 81       	ldd	r25, Z+1	; 0x01
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	f1 f7       	brne	.-4      	; 0x3f60 <main+0x123c>
    3f64:	fe 01       	movw	r30, r28
    3f66:	ed 5b       	subi	r30, 0xBD	; 189
    3f68:	fe 4f       	sbci	r31, 0xFE	; 254
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,4,Hamokshastanding);
    3f6e:	9e 01       	movw	r18, r28
    3f70:	27 52       	subi	r18, 0x27	; 39
    3f72:	3e 4f       	sbci	r19, 0xFE	; 254
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	61 e0       	ldi	r22, 0x01	; 1
    3f78:	44 e0       	ldi	r20, 0x04	; 4
    3f7a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e1 5c       	subi	r30, 0xC1	; 193
    3f82:	fe 4f       	sbci	r31, 0xFE	; 254
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	a8 e4       	ldi	r26, 0x48	; 72
    3f8a:	b3 e4       	ldi	r27, 0x43	; 67
    3f8c:	80 83       	st	Z, r24
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	a2 83       	std	Z+2, r26	; 0x02
    3f92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f94:	8e 01       	movw	r16, r28
    3f96:	05 5c       	subi	r16, 0xC5	; 197
    3f98:	1e 4f       	sbci	r17, 0xFE	; 254
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	e1 5c       	subi	r30, 0xC1	; 193
    3f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa0:	60 81       	ld	r22, Z
    3fa2:	71 81       	ldd	r23, Z+1	; 0x01
    3fa4:	82 81       	ldd	r24, Z+2	; 0x02
    3fa6:	93 81       	ldd	r25, Z+3	; 0x03
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	4a ef       	ldi	r20, 0xFA	; 250
    3fae:	54 e4       	ldi	r21, 0x44	; 68
    3fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	f8 01       	movw	r30, r16
    3fba:	80 83       	st	Z, r24
    3fbc:	91 83       	std	Z+1, r25	; 0x01
    3fbe:	a2 83       	std	Z+2, r26	; 0x02
    3fc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e5 5c       	subi	r30, 0xC5	; 197
    3fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc8:	60 81       	ld	r22, Z
    3fca:	71 81       	ldd	r23, Z+1	; 0x01
    3fcc:	82 81       	ldd	r24, Z+2	; 0x02
    3fce:	93 81       	ldd	r25, Z+3	; 0x03
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e8       	ldi	r20, 0x80	; 128
    3fd6:	5f e3       	ldi	r21, 0x3F	; 63
    3fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fdc:	88 23       	and	r24, r24
    3fde:	44 f4       	brge	.+16     	; 0x3ff0 <main+0x12cc>
		__ticks = 1;
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	e7 5c       	subi	r30, 0xC7	; 199
    3fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	80 83       	st	Z, r24
    3fee:	64 c0       	rjmp	.+200    	; 0x40b8 <main+0x1394>
	else if (__tmp > 65535)
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e5 5c       	subi	r30, 0xC5	; 197
    3ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff6:	60 81       	ld	r22, Z
    3ff8:	71 81       	ldd	r23, Z+1	; 0x01
    3ffa:	82 81       	ldd	r24, Z+2	; 0x02
    3ffc:	93 81       	ldd	r25, Z+3	; 0x03
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	3f ef       	ldi	r19, 0xFF	; 255
    4002:	4f e7       	ldi	r20, 0x7F	; 127
    4004:	57 e4       	ldi	r21, 0x47	; 71
    4006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    400a:	18 16       	cp	r1, r24
    400c:	0c f0       	brlt	.+2      	; 0x4010 <main+0x12ec>
    400e:	43 c0       	rjmp	.+134    	; 0x4096 <main+0x1372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4010:	fe 01       	movw	r30, r28
    4012:	e1 5c       	subi	r30, 0xC1	; 193
    4014:	fe 4f       	sbci	r31, 0xFE	; 254
    4016:	60 81       	ld	r22, Z
    4018:	71 81       	ldd	r23, Z+1	; 0x01
    401a:	82 81       	ldd	r24, Z+2	; 0x02
    401c:	93 81       	ldd	r25, Z+3	; 0x03
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	40 e2       	ldi	r20, 0x20	; 32
    4024:	51 e4       	ldi	r21, 0x41	; 65
    4026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	8e 01       	movw	r16, r28
    4030:	07 5c       	subi	r16, 0xC7	; 199
    4032:	1e 4f       	sbci	r17, 0xFE	; 254
    4034:	bc 01       	movw	r22, r24
    4036:	cd 01       	movw	r24, r26
    4038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	f8 01       	movw	r30, r16
    4042:	91 83       	std	Z+1, r25	; 0x01
    4044:	80 83       	st	Z, r24
    4046:	1f c0       	rjmp	.+62     	; 0x4086 <main+0x1362>
    4048:	fe 01       	movw	r30, r28
    404a:	e9 5c       	subi	r30, 0xC9	; 201
    404c:	fe 4f       	sbci	r31, 0xFE	; 254
    404e:	88 ec       	ldi	r24, 0xC8	; 200
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	91 83       	std	Z+1, r25	; 0x01
    4054:	80 83       	st	Z, r24
    4056:	fe 01       	movw	r30, r28
    4058:	e9 5c       	subi	r30, 0xC9	; 201
    405a:	fe 4f       	sbci	r31, 0xFE	; 254
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	f1 f7       	brne	.-4      	; 0x4060 <main+0x133c>
    4064:	fe 01       	movw	r30, r28
    4066:	e9 5c       	subi	r30, 0xC9	; 201
    4068:	fe 4f       	sbci	r31, 0xFE	; 254
    406a:	91 83       	std	Z+1, r25	; 0x01
    406c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    406e:	de 01       	movw	r26, r28
    4070:	a7 5c       	subi	r26, 0xC7	; 199
    4072:	be 4f       	sbci	r27, 0xFE	; 254
    4074:	fe 01       	movw	r30, r28
    4076:	e7 5c       	subi	r30, 0xC7	; 199
    4078:	fe 4f       	sbci	r31, 0xFE	; 254
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	11 96       	adiw	r26, 0x01	; 1
    4082:	9c 93       	st	X, r25
    4084:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4086:	fe 01       	movw	r30, r28
    4088:	e7 5c       	subi	r30, 0xC7	; 199
    408a:	fe 4f       	sbci	r31, 0xFE	; 254
    408c:	80 81       	ld	r24, Z
    408e:	91 81       	ldd	r25, Z+1	; 0x01
    4090:	00 97       	sbiw	r24, 0x00	; 0
    4092:	d1 f6       	brne	.-76     	; 0x4048 <main+0x1324>
    4094:	27 c0       	rjmp	.+78     	; 0x40e4 <main+0x13c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4096:	8e 01       	movw	r16, r28
    4098:	07 5c       	subi	r16, 0xC7	; 199
    409a:	1e 4f       	sbci	r17, 0xFE	; 254
    409c:	fe 01       	movw	r30, r28
    409e:	e5 5c       	subi	r30, 0xC5	; 197
    40a0:	fe 4f       	sbci	r31, 0xFE	; 254
    40a2:	60 81       	ld	r22, Z
    40a4:	71 81       	ldd	r23, Z+1	; 0x01
    40a6:	82 81       	ldd	r24, Z+2	; 0x02
    40a8:	93 81       	ldd	r25, Z+3	; 0x03
    40aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	f8 01       	movw	r30, r16
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
    40b8:	de 01       	movw	r26, r28
    40ba:	ab 5c       	subi	r26, 0xCB	; 203
    40bc:	be 4f       	sbci	r27, 0xFE	; 254
    40be:	fe 01       	movw	r30, r28
    40c0:	e7 5c       	subi	r30, 0xC7	; 199
    40c2:	fe 4f       	sbci	r31, 0xFE	; 254
    40c4:	80 81       	ld	r24, Z
    40c6:	91 81       	ldd	r25, Z+1	; 0x01
    40c8:	8d 93       	st	X+, r24
    40ca:	9c 93       	st	X, r25
    40cc:	fe 01       	movw	r30, r28
    40ce:	eb 5c       	subi	r30, 0xCB	; 203
    40d0:	fe 4f       	sbci	r31, 0xFE	; 254
    40d2:	80 81       	ld	r24, Z
    40d4:	91 81       	ldd	r25, Z+1	; 0x01
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	f1 f7       	brne	.-4      	; 0x40d6 <main+0x13b2>
    40da:	fe 01       	movw	r30, r28
    40dc:	eb 5c       	subi	r30, 0xCB	; 203
    40de:	fe 4f       	sbci	r31, 0xFE	; 254
    40e0:	91 83       	std	Z+1, r25	; 0x01
    40e2:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    40e4:	de 01       	movw	r26, r28
    40e6:	ad 53       	subi	r26, 0x3D	; 61
    40e8:	be 4f       	sbci	r27, 0xFE	; 254
    40ea:	fe 01       	movw	r30, r28
    40ec:	eb 53       	subi	r30, 0x3B	; 59
    40ee:	fe 4f       	sbci	r31, 0xFE	; 254
    40f0:	80 81       	ld	r24, Z
    40f2:	91 81       	ldd	r25, Z+1	; 0x01
    40f4:	8a 56       	subi	r24, 0x6A	; 106
    40f6:	9f 4f       	sbci	r25, 0xFF	; 255
    40f8:	8d 93       	st	X+, r24
    40fa:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    40fc:	de 01       	movw	r26, r28
    40fe:	af 53       	subi	r26, 0x3F	; 63
    4100:	be 4f       	sbci	r27, 0xFE	; 254
    4102:	fe 01       	movw	r30, r28
    4104:	eb 53       	subi	r30, 0x3B	; 59
    4106:	fe 4f       	sbci	r31, 0xFE	; 254
    4108:	80 81       	ld	r24, Z
    410a:	91 81       	ldd	r25, Z+1	; 0x01
    410c:	86 59       	subi	r24, 0x96	; 150
    410e:	90 40       	sbci	r25, 0x00	; 0
    4110:	11 96       	adiw	r26, 0x01	; 1
    4112:	9c 93       	st	X, r25
    4114:	8e 93       	st	-X, r24
    4116:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 1560) && (Local_u16AnalogValue <= 1872 ))
    411a:	fe 01       	movw	r30, r28
    411c:	eb 53       	subi	r30, 0x3B	; 59
    411e:	fe 4f       	sbci	r31, 0xFE	; 254
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	f6 e0       	ldi	r31, 0x06	; 6
    4126:	89 31       	cpi	r24, 0x19	; 25
    4128:	9f 07       	cpc	r25, r31
    412a:	08 f4       	brcc	.+2      	; 0x412e <main+0x140a>
    412c:	a3 c1       	rjmp	.+838    	; 0x4474 <main+0x1750>
    412e:	fe 01       	movw	r30, r28
    4130:	eb 53       	subi	r30, 0x3B	; 59
    4132:	fe 4f       	sbci	r31, 0xFE	; 254
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	27 e0       	ldi	r18, 0x07	; 7
    413a:	81 35       	cpi	r24, 0x51	; 81
    413c:	92 07       	cpc	r25, r18
    413e:	08 f0       	brcs	.+2      	; 0x4142 <main+0x141e>
    4140:	99 c1       	rjmp	.+818    	; 0x4474 <main+0x1750>
	  {
		  LCD_u8_GoTo_XY(0,0);
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    414a:	80 e6       	ldi	r24, 0x60	; 96
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,5,HamokshaRuning);
    4152:	9e 01       	movw	r18, r28
    4154:	2f 51       	subi	r18, 0x1F	; 31
    4156:	3e 4f       	sbci	r19, 0xFE	; 254
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	61 e0       	ldi	r22, 0x01	; 1
    415c:	45 e0       	ldi	r20, 0x05	; 5
    415e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    4162:	fe 01       	movw	r30, r28
    4164:	ef 5c       	subi	r30, 0xCF	; 207
    4166:	fe 4f       	sbci	r31, 0xFE	; 254
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	a8 e4       	ldi	r26, 0x48	; 72
    416e:	b3 e4       	ldi	r27, 0x43	; 67
    4170:	80 83       	st	Z, r24
    4172:	91 83       	std	Z+1, r25	; 0x01
    4174:	a2 83       	std	Z+2, r26	; 0x02
    4176:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4178:	8e 01       	movw	r16, r28
    417a:	03 5d       	subi	r16, 0xD3	; 211
    417c:	1e 4f       	sbci	r17, 0xFE	; 254
    417e:	fe 01       	movw	r30, r28
    4180:	ef 5c       	subi	r30, 0xCF	; 207
    4182:	fe 4f       	sbci	r31, 0xFE	; 254
    4184:	60 81       	ld	r22, Z
    4186:	71 81       	ldd	r23, Z+1	; 0x01
    4188:	82 81       	ldd	r24, Z+2	; 0x02
    418a:	93 81       	ldd	r25, Z+3	; 0x03
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	4a ef       	ldi	r20, 0xFA	; 250
    4192:	54 e4       	ldi	r21, 0x44	; 68
    4194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	f8 01       	movw	r30, r16
    419e:	80 83       	st	Z, r24
    41a0:	91 83       	std	Z+1, r25	; 0x01
    41a2:	a2 83       	std	Z+2, r26	; 0x02
    41a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41a6:	fe 01       	movw	r30, r28
    41a8:	e3 5d       	subi	r30, 0xD3	; 211
    41aa:	fe 4f       	sbci	r31, 0xFE	; 254
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	40 e8       	ldi	r20, 0x80	; 128
    41ba:	5f e3       	ldi	r21, 0x3F	; 63
    41bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41c0:	88 23       	and	r24, r24
    41c2:	44 f4       	brge	.+16     	; 0x41d4 <main+0x14b0>
		__ticks = 1;
    41c4:	fe 01       	movw	r30, r28
    41c6:	e5 5d       	subi	r30, 0xD5	; 213
    41c8:	fe 4f       	sbci	r31, 0xFE	; 254
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	91 83       	std	Z+1, r25	; 0x01
    41d0:	80 83       	st	Z, r24
    41d2:	64 c0       	rjmp	.+200    	; 0x429c <main+0x1578>
	else if (__tmp > 65535)
    41d4:	fe 01       	movw	r30, r28
    41d6:	e3 5d       	subi	r30, 0xD3	; 211
    41d8:	fe 4f       	sbci	r31, 0xFE	; 254
    41da:	60 81       	ld	r22, Z
    41dc:	71 81       	ldd	r23, Z+1	; 0x01
    41de:	82 81       	ldd	r24, Z+2	; 0x02
    41e0:	93 81       	ldd	r25, Z+3	; 0x03
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	3f ef       	ldi	r19, 0xFF	; 255
    41e6:	4f e7       	ldi	r20, 0x7F	; 127
    41e8:	57 e4       	ldi	r21, 0x47	; 71
    41ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41ee:	18 16       	cp	r1, r24
    41f0:	0c f0       	brlt	.+2      	; 0x41f4 <main+0x14d0>
    41f2:	43 c0       	rjmp	.+134    	; 0x427a <main+0x1556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f4:	fe 01       	movw	r30, r28
    41f6:	ef 5c       	subi	r30, 0xCF	; 207
    41f8:	fe 4f       	sbci	r31, 0xFE	; 254
    41fa:	60 81       	ld	r22, Z
    41fc:	71 81       	ldd	r23, Z+1	; 0x01
    41fe:	82 81       	ldd	r24, Z+2	; 0x02
    4200:	93 81       	ldd	r25, Z+3	; 0x03
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e2       	ldi	r20, 0x20	; 32
    4208:	51 e4       	ldi	r21, 0x41	; 65
    420a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	8e 01       	movw	r16, r28
    4214:	05 5d       	subi	r16, 0xD5	; 213
    4216:	1e 4f       	sbci	r17, 0xFE	; 254
    4218:	bc 01       	movw	r22, r24
    421a:	cd 01       	movw	r24, r26
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	f8 01       	movw	r30, r16
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	80 83       	st	Z, r24
    422a:	1f c0       	rjmp	.+62     	; 0x426a <main+0x1546>
    422c:	fe 01       	movw	r30, r28
    422e:	e7 5d       	subi	r30, 0xD7	; 215
    4230:	fe 4f       	sbci	r31, 0xFE	; 254
    4232:	88 ec       	ldi	r24, 0xC8	; 200
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	91 83       	std	Z+1, r25	; 0x01
    4238:	80 83       	st	Z, r24
    423a:	fe 01       	movw	r30, r28
    423c:	e7 5d       	subi	r30, 0xD7	; 215
    423e:	fe 4f       	sbci	r31, 0xFE	; 254
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	01 97       	sbiw	r24, 0x01	; 1
    4246:	f1 f7       	brne	.-4      	; 0x4244 <main+0x1520>
    4248:	fe 01       	movw	r30, r28
    424a:	e7 5d       	subi	r30, 0xD7	; 215
    424c:	fe 4f       	sbci	r31, 0xFE	; 254
    424e:	91 83       	std	Z+1, r25	; 0x01
    4250:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4252:	de 01       	movw	r26, r28
    4254:	a5 5d       	subi	r26, 0xD5	; 213
    4256:	be 4f       	sbci	r27, 0xFE	; 254
    4258:	fe 01       	movw	r30, r28
    425a:	e5 5d       	subi	r30, 0xD5	; 213
    425c:	fe 4f       	sbci	r31, 0xFE	; 254
    425e:	80 81       	ld	r24, Z
    4260:	91 81       	ldd	r25, Z+1	; 0x01
    4262:	01 97       	sbiw	r24, 0x01	; 1
    4264:	11 96       	adiw	r26, 0x01	; 1
    4266:	9c 93       	st	X, r25
    4268:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    426a:	fe 01       	movw	r30, r28
    426c:	e5 5d       	subi	r30, 0xD5	; 213
    426e:	fe 4f       	sbci	r31, 0xFE	; 254
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	d1 f6       	brne	.-76     	; 0x422c <main+0x1508>
    4278:	27 c0       	rjmp	.+78     	; 0x42c8 <main+0x15a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427a:	8e 01       	movw	r16, r28
    427c:	05 5d       	subi	r16, 0xD5	; 213
    427e:	1e 4f       	sbci	r17, 0xFE	; 254
    4280:	fe 01       	movw	r30, r28
    4282:	e3 5d       	subi	r30, 0xD3	; 211
    4284:	fe 4f       	sbci	r31, 0xFE	; 254
    4286:	60 81       	ld	r22, Z
    4288:	71 81       	ldd	r23, Z+1	; 0x01
    428a:	82 81       	ldd	r24, Z+2	; 0x02
    428c:	93 81       	ldd	r25, Z+3	; 0x03
    428e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	f8 01       	movw	r30, r16
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
    429c:	de 01       	movw	r26, r28
    429e:	a9 5d       	subi	r26, 0xD9	; 217
    42a0:	be 4f       	sbci	r27, 0xFE	; 254
    42a2:	fe 01       	movw	r30, r28
    42a4:	e5 5d       	subi	r30, 0xD5	; 213
    42a6:	fe 4f       	sbci	r31, 0xFE	; 254
    42a8:	80 81       	ld	r24, Z
    42aa:	91 81       	ldd	r25, Z+1	; 0x01
    42ac:	8d 93       	st	X+, r24
    42ae:	9c 93       	st	X, r25
    42b0:	fe 01       	movw	r30, r28
    42b2:	e9 5d       	subi	r30, 0xD9	; 217
    42b4:	fe 4f       	sbci	r31, 0xFE	; 254
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <main+0x1596>
    42be:	fe 01       	movw	r30, r28
    42c0:	e9 5d       	subi	r30, 0xD9	; 217
    42c2:	fe 4f       	sbci	r31, 0xFE	; 254
    42c4:	91 83       	std	Z+1, r25	; 0x01
    42c6:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,5,Hamokshastanding);
    42c8:	9e 01       	movw	r18, r28
    42ca:	27 52       	subi	r18, 0x27	; 39
    42cc:	3e 4f       	sbci	r19, 0xFE	; 254
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	61 e0       	ldi	r22, 0x01	; 1
    42d2:	45 e0       	ldi	r20, 0x05	; 5
    42d4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    42d8:	fe 01       	movw	r30, r28
    42da:	ed 5d       	subi	r30, 0xDD	; 221
    42dc:	fe 4f       	sbci	r31, 0xFE	; 254
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	a8 e4       	ldi	r26, 0x48	; 72
    42e4:	b3 e4       	ldi	r27, 0x43	; 67
    42e6:	80 83       	st	Z, r24
    42e8:	91 83       	std	Z+1, r25	; 0x01
    42ea:	a2 83       	std	Z+2, r26	; 0x02
    42ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ee:	8e 01       	movw	r16, r28
    42f0:	01 5e       	subi	r16, 0xE1	; 225
    42f2:	1e 4f       	sbci	r17, 0xFE	; 254
    42f4:	fe 01       	movw	r30, r28
    42f6:	ed 5d       	subi	r30, 0xDD	; 221
    42f8:	fe 4f       	sbci	r31, 0xFE	; 254
    42fa:	60 81       	ld	r22, Z
    42fc:	71 81       	ldd	r23, Z+1	; 0x01
    42fe:	82 81       	ldd	r24, Z+2	; 0x02
    4300:	93 81       	ldd	r25, Z+3	; 0x03
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	4a ef       	ldi	r20, 0xFA	; 250
    4308:	54 e4       	ldi	r21, 0x44	; 68
    430a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	f8 01       	movw	r30, r16
    4314:	80 83       	st	Z, r24
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	a2 83       	std	Z+2, r26	; 0x02
    431a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    431c:	fe 01       	movw	r30, r28
    431e:	e1 5e       	subi	r30, 0xE1	; 225
    4320:	fe 4f       	sbci	r31, 0xFE	; 254
    4322:	60 81       	ld	r22, Z
    4324:	71 81       	ldd	r23, Z+1	; 0x01
    4326:	82 81       	ldd	r24, Z+2	; 0x02
    4328:	93 81       	ldd	r25, Z+3	; 0x03
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e8       	ldi	r20, 0x80	; 128
    4330:	5f e3       	ldi	r21, 0x3F	; 63
    4332:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4336:	88 23       	and	r24, r24
    4338:	44 f4       	brge	.+16     	; 0x434a <main+0x1626>
		__ticks = 1;
    433a:	fe 01       	movw	r30, r28
    433c:	e3 5e       	subi	r30, 0xE3	; 227
    433e:	fe 4f       	sbci	r31, 0xFE	; 254
    4340:	81 e0       	ldi	r24, 0x01	; 1
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	91 83       	std	Z+1, r25	; 0x01
    4346:	80 83       	st	Z, r24
    4348:	64 c0       	rjmp	.+200    	; 0x4412 <main+0x16ee>
	else if (__tmp > 65535)
    434a:	fe 01       	movw	r30, r28
    434c:	e1 5e       	subi	r30, 0xE1	; 225
    434e:	fe 4f       	sbci	r31, 0xFE	; 254
    4350:	60 81       	ld	r22, Z
    4352:	71 81       	ldd	r23, Z+1	; 0x01
    4354:	82 81       	ldd	r24, Z+2	; 0x02
    4356:	93 81       	ldd	r25, Z+3	; 0x03
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	3f ef       	ldi	r19, 0xFF	; 255
    435c:	4f e7       	ldi	r20, 0x7F	; 127
    435e:	57 e4       	ldi	r21, 0x47	; 71
    4360:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4364:	18 16       	cp	r1, r24
    4366:	0c f0       	brlt	.+2      	; 0x436a <main+0x1646>
    4368:	43 c0       	rjmp	.+134    	; 0x43f0 <main+0x16cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436a:	fe 01       	movw	r30, r28
    436c:	ed 5d       	subi	r30, 0xDD	; 221
    436e:	fe 4f       	sbci	r31, 0xFE	; 254
    4370:	60 81       	ld	r22, Z
    4372:	71 81       	ldd	r23, Z+1	; 0x01
    4374:	82 81       	ldd	r24, Z+2	; 0x02
    4376:	93 81       	ldd	r25, Z+3	; 0x03
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	40 e2       	ldi	r20, 0x20	; 32
    437e:	51 e4       	ldi	r21, 0x41	; 65
    4380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4384:	dc 01       	movw	r26, r24
    4386:	cb 01       	movw	r24, r22
    4388:	8e 01       	movw	r16, r28
    438a:	03 5e       	subi	r16, 0xE3	; 227
    438c:	1e 4f       	sbci	r17, 0xFE	; 254
    438e:	bc 01       	movw	r22, r24
    4390:	cd 01       	movw	r24, r26
    4392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	f8 01       	movw	r30, r16
    439c:	91 83       	std	Z+1, r25	; 0x01
    439e:	80 83       	st	Z, r24
    43a0:	1f c0       	rjmp	.+62     	; 0x43e0 <main+0x16bc>
    43a2:	fe 01       	movw	r30, r28
    43a4:	e5 5e       	subi	r30, 0xE5	; 229
    43a6:	fe 4f       	sbci	r31, 0xFE	; 254
    43a8:	88 ec       	ldi	r24, 0xC8	; 200
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	91 83       	std	Z+1, r25	; 0x01
    43ae:	80 83       	st	Z, r24
    43b0:	fe 01       	movw	r30, r28
    43b2:	e5 5e       	subi	r30, 0xE5	; 229
    43b4:	fe 4f       	sbci	r31, 0xFE	; 254
    43b6:	80 81       	ld	r24, Z
    43b8:	91 81       	ldd	r25, Z+1	; 0x01
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	f1 f7       	brne	.-4      	; 0x43ba <main+0x1696>
    43be:	fe 01       	movw	r30, r28
    43c0:	e5 5e       	subi	r30, 0xE5	; 229
    43c2:	fe 4f       	sbci	r31, 0xFE	; 254
    43c4:	91 83       	std	Z+1, r25	; 0x01
    43c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c8:	de 01       	movw	r26, r28
    43ca:	a3 5e       	subi	r26, 0xE3	; 227
    43cc:	be 4f       	sbci	r27, 0xFE	; 254
    43ce:	fe 01       	movw	r30, r28
    43d0:	e3 5e       	subi	r30, 0xE3	; 227
    43d2:	fe 4f       	sbci	r31, 0xFE	; 254
    43d4:	80 81       	ld	r24, Z
    43d6:	91 81       	ldd	r25, Z+1	; 0x01
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	11 96       	adiw	r26, 0x01	; 1
    43dc:	9c 93       	st	X, r25
    43de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e0:	fe 01       	movw	r30, r28
    43e2:	e3 5e       	subi	r30, 0xE3	; 227
    43e4:	fe 4f       	sbci	r31, 0xFE	; 254
    43e6:	80 81       	ld	r24, Z
    43e8:	91 81       	ldd	r25, Z+1	; 0x01
    43ea:	00 97       	sbiw	r24, 0x00	; 0
    43ec:	d1 f6       	brne	.-76     	; 0x43a2 <main+0x167e>
    43ee:	27 c0       	rjmp	.+78     	; 0x443e <main+0x171a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f0:	8e 01       	movw	r16, r28
    43f2:	03 5e       	subi	r16, 0xE3	; 227
    43f4:	1e 4f       	sbci	r17, 0xFE	; 254
    43f6:	fe 01       	movw	r30, r28
    43f8:	e1 5e       	subi	r30, 0xE1	; 225
    43fa:	fe 4f       	sbci	r31, 0xFE	; 254
    43fc:	60 81       	ld	r22, Z
    43fe:	71 81       	ldd	r23, Z+1	; 0x01
    4400:	82 81       	ldd	r24, Z+2	; 0x02
    4402:	93 81       	ldd	r25, Z+3	; 0x03
    4404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	f8 01       	movw	r30, r16
    440e:	91 83       	std	Z+1, r25	; 0x01
    4410:	80 83       	st	Z, r24
    4412:	de 01       	movw	r26, r28
    4414:	a7 5e       	subi	r26, 0xE7	; 231
    4416:	be 4f       	sbci	r27, 0xFE	; 254
    4418:	fe 01       	movw	r30, r28
    441a:	e3 5e       	subi	r30, 0xE3	; 227
    441c:	fe 4f       	sbci	r31, 0xFE	; 254
    441e:	80 81       	ld	r24, Z
    4420:	91 81       	ldd	r25, Z+1	; 0x01
    4422:	8d 93       	st	X+, r24
    4424:	9c 93       	st	X, r25
    4426:	fe 01       	movw	r30, r28
    4428:	e7 5e       	subi	r30, 0xE7	; 231
    442a:	fe 4f       	sbci	r31, 0xFE	; 254
    442c:	80 81       	ld	r24, Z
    442e:	91 81       	ldd	r25, Z+1	; 0x01
    4430:	01 97       	sbiw	r24, 0x01	; 1
    4432:	f1 f7       	brne	.-4      	; 0x4430 <main+0x170c>
    4434:	fe 01       	movw	r30, r28
    4436:	e7 5e       	subi	r30, 0xE7	; 231
    4438:	fe 4f       	sbci	r31, 0xFE	; 254
    443a:	91 83       	std	Z+1, r25	; 0x01
    443c:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    443e:	de 01       	movw	r26, r28
    4440:	ad 53       	subi	r26, 0x3D	; 61
    4442:	be 4f       	sbci	r27, 0xFE	; 254
    4444:	fe 01       	movw	r30, r28
    4446:	eb 53       	subi	r30, 0x3B	; 59
    4448:	fe 4f       	sbci	r31, 0xFE	; 254
    444a:	80 81       	ld	r24, Z
    444c:	91 81       	ldd	r25, Z+1	; 0x01
    444e:	8a 56       	subi	r24, 0x6A	; 106
    4450:	9f 4f       	sbci	r25, 0xFF	; 255
    4452:	8d 93       	st	X+, r24
    4454:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    4456:	de 01       	movw	r26, r28
    4458:	af 53       	subi	r26, 0x3F	; 63
    445a:	be 4f       	sbci	r27, 0xFE	; 254
    445c:	fe 01       	movw	r30, r28
    445e:	eb 53       	subi	r30, 0x3B	; 59
    4460:	fe 4f       	sbci	r31, 0xFE	; 254
    4462:	80 81       	ld	r24, Z
    4464:	91 81       	ldd	r25, Z+1	; 0x01
    4466:	86 59       	subi	r24, 0x96	; 150
    4468:	90 40       	sbci	r25, 0x00	; 0
    446a:	11 96       	adiw	r26, 0x01	; 1
    446c:	9c 93       	st	X, r25
    446e:	8e 93       	st	-X, r24
    4470:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 1872) && (Local_u16AnalogValue <= 2184))
    4474:	fe 01       	movw	r30, r28
    4476:	eb 53       	subi	r30, 0x3B	; 59
    4478:	fe 4f       	sbci	r31, 0xFE	; 254
    447a:	80 81       	ld	r24, Z
    447c:	91 81       	ldd	r25, Z+1	; 0x01
    447e:	f7 e0       	ldi	r31, 0x07	; 7
    4480:	81 35       	cpi	r24, 0x51	; 81
    4482:	9f 07       	cpc	r25, r31
    4484:	08 f4       	brcc	.+2      	; 0x4488 <main+0x1764>
    4486:	a3 c1       	rjmp	.+838    	; 0x47ce <main+0x1aaa>
    4488:	fe 01       	movw	r30, r28
    448a:	eb 53       	subi	r30, 0x3B	; 59
    448c:	fe 4f       	sbci	r31, 0xFE	; 254
    448e:	80 81       	ld	r24, Z
    4490:	91 81       	ldd	r25, Z+1	; 0x01
    4492:	28 e0       	ldi	r18, 0x08	; 8
    4494:	89 38       	cpi	r24, 0x89	; 137
    4496:	92 07       	cpc	r25, r18
    4498:	08 f0       	brcs	.+2      	; 0x449c <main+0x1778>
    449a:	99 c1       	rjmp	.+818    	; 0x47ce <main+0x1aaa>
	  {
		  LCD_u8_GoTo_XY(0,0);
    449c:	80 e0       	ldi	r24, 0x00	; 0
    449e:	60 e0       	ldi	r22, 0x00	; 0
    44a0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    44a4:	80 e6       	ldi	r24, 0x60	; 96
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,6,HamokshaRuning);
    44ac:	9e 01       	movw	r18, r28
    44ae:	2f 51       	subi	r18, 0x1F	; 31
    44b0:	3e 4f       	sbci	r19, 0xFE	; 254
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	61 e0       	ldi	r22, 0x01	; 1
    44b6:	46 e0       	ldi	r20, 0x06	; 6
    44b8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    44bc:	fe 01       	movw	r30, r28
    44be:	eb 5e       	subi	r30, 0xEB	; 235
    44c0:	fe 4f       	sbci	r31, 0xFE	; 254
    44c2:	80 e0       	ldi	r24, 0x00	; 0
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	a8 e4       	ldi	r26, 0x48	; 72
    44c8:	b3 e4       	ldi	r27, 0x43	; 67
    44ca:	80 83       	st	Z, r24
    44cc:	91 83       	std	Z+1, r25	; 0x01
    44ce:	a2 83       	std	Z+2, r26	; 0x02
    44d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d2:	8e 01       	movw	r16, r28
    44d4:	0f 5e       	subi	r16, 0xEF	; 239
    44d6:	1e 4f       	sbci	r17, 0xFE	; 254
    44d8:	fe 01       	movw	r30, r28
    44da:	eb 5e       	subi	r30, 0xEB	; 235
    44dc:	fe 4f       	sbci	r31, 0xFE	; 254
    44de:	60 81       	ld	r22, Z
    44e0:	71 81       	ldd	r23, Z+1	; 0x01
    44e2:	82 81       	ldd	r24, Z+2	; 0x02
    44e4:	93 81       	ldd	r25, Z+3	; 0x03
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	4a ef       	ldi	r20, 0xFA	; 250
    44ec:	54 e4       	ldi	r21, 0x44	; 68
    44ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	f8 01       	movw	r30, r16
    44f8:	80 83       	st	Z, r24
    44fa:	91 83       	std	Z+1, r25	; 0x01
    44fc:	a2 83       	std	Z+2, r26	; 0x02
    44fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4500:	fe 01       	movw	r30, r28
    4502:	ef 5e       	subi	r30, 0xEF	; 239
    4504:	fe 4f       	sbci	r31, 0xFE	; 254
    4506:	60 81       	ld	r22, Z
    4508:	71 81       	ldd	r23, Z+1	; 0x01
    450a:	82 81       	ldd	r24, Z+2	; 0x02
    450c:	93 81       	ldd	r25, Z+3	; 0x03
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	40 e8       	ldi	r20, 0x80	; 128
    4514:	5f e3       	ldi	r21, 0x3F	; 63
    4516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    451a:	88 23       	and	r24, r24
    451c:	44 f4       	brge	.+16     	; 0x452e <main+0x180a>
		__ticks = 1;
    451e:	fe 01       	movw	r30, r28
    4520:	e1 5f       	subi	r30, 0xF1	; 241
    4522:	fe 4f       	sbci	r31, 0xFE	; 254
    4524:	81 e0       	ldi	r24, 0x01	; 1
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	91 83       	std	Z+1, r25	; 0x01
    452a:	80 83       	st	Z, r24
    452c:	64 c0       	rjmp	.+200    	; 0x45f6 <main+0x18d2>
	else if (__tmp > 65535)
    452e:	fe 01       	movw	r30, r28
    4530:	ef 5e       	subi	r30, 0xEF	; 239
    4532:	fe 4f       	sbci	r31, 0xFE	; 254
    4534:	60 81       	ld	r22, Z
    4536:	71 81       	ldd	r23, Z+1	; 0x01
    4538:	82 81       	ldd	r24, Z+2	; 0x02
    453a:	93 81       	ldd	r25, Z+3	; 0x03
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	3f ef       	ldi	r19, 0xFF	; 255
    4540:	4f e7       	ldi	r20, 0x7F	; 127
    4542:	57 e4       	ldi	r21, 0x47	; 71
    4544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4548:	18 16       	cp	r1, r24
    454a:	0c f0       	brlt	.+2      	; 0x454e <main+0x182a>
    454c:	43 c0       	rjmp	.+134    	; 0x45d4 <main+0x18b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    454e:	fe 01       	movw	r30, r28
    4550:	eb 5e       	subi	r30, 0xEB	; 235
    4552:	fe 4f       	sbci	r31, 0xFE	; 254
    4554:	60 81       	ld	r22, Z
    4556:	71 81       	ldd	r23, Z+1	; 0x01
    4558:	82 81       	ldd	r24, Z+2	; 0x02
    455a:	93 81       	ldd	r25, Z+3	; 0x03
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	40 e2       	ldi	r20, 0x20	; 32
    4562:	51 e4       	ldi	r21, 0x41	; 65
    4564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4568:	dc 01       	movw	r26, r24
    456a:	cb 01       	movw	r24, r22
    456c:	8e 01       	movw	r16, r28
    456e:	01 5f       	subi	r16, 0xF1	; 241
    4570:	1e 4f       	sbci	r17, 0xFE	; 254
    4572:	bc 01       	movw	r22, r24
    4574:	cd 01       	movw	r24, r26
    4576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	f8 01       	movw	r30, r16
    4580:	91 83       	std	Z+1, r25	; 0x01
    4582:	80 83       	st	Z, r24
    4584:	1f c0       	rjmp	.+62     	; 0x45c4 <main+0x18a0>
    4586:	fe 01       	movw	r30, r28
    4588:	e3 5f       	subi	r30, 0xF3	; 243
    458a:	fe 4f       	sbci	r31, 0xFE	; 254
    458c:	88 ec       	ldi	r24, 0xC8	; 200
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	91 83       	std	Z+1, r25	; 0x01
    4592:	80 83       	st	Z, r24
    4594:	fe 01       	movw	r30, r28
    4596:	e3 5f       	subi	r30, 0xF3	; 243
    4598:	fe 4f       	sbci	r31, 0xFE	; 254
    459a:	80 81       	ld	r24, Z
    459c:	91 81       	ldd	r25, Z+1	; 0x01
    459e:	01 97       	sbiw	r24, 0x01	; 1
    45a0:	f1 f7       	brne	.-4      	; 0x459e <main+0x187a>
    45a2:	fe 01       	movw	r30, r28
    45a4:	e3 5f       	subi	r30, 0xF3	; 243
    45a6:	fe 4f       	sbci	r31, 0xFE	; 254
    45a8:	91 83       	std	Z+1, r25	; 0x01
    45aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ac:	de 01       	movw	r26, r28
    45ae:	a1 5f       	subi	r26, 0xF1	; 241
    45b0:	be 4f       	sbci	r27, 0xFE	; 254
    45b2:	fe 01       	movw	r30, r28
    45b4:	e1 5f       	subi	r30, 0xF1	; 241
    45b6:	fe 4f       	sbci	r31, 0xFE	; 254
    45b8:	80 81       	ld	r24, Z
    45ba:	91 81       	ldd	r25, Z+1	; 0x01
    45bc:	01 97       	sbiw	r24, 0x01	; 1
    45be:	11 96       	adiw	r26, 0x01	; 1
    45c0:	9c 93       	st	X, r25
    45c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c4:	fe 01       	movw	r30, r28
    45c6:	e1 5f       	subi	r30, 0xF1	; 241
    45c8:	fe 4f       	sbci	r31, 0xFE	; 254
    45ca:	80 81       	ld	r24, Z
    45cc:	91 81       	ldd	r25, Z+1	; 0x01
    45ce:	00 97       	sbiw	r24, 0x00	; 0
    45d0:	d1 f6       	brne	.-76     	; 0x4586 <main+0x1862>
    45d2:	27 c0       	rjmp	.+78     	; 0x4622 <main+0x18fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d4:	8e 01       	movw	r16, r28
    45d6:	01 5f       	subi	r16, 0xF1	; 241
    45d8:	1e 4f       	sbci	r17, 0xFE	; 254
    45da:	fe 01       	movw	r30, r28
    45dc:	ef 5e       	subi	r30, 0xEF	; 239
    45de:	fe 4f       	sbci	r31, 0xFE	; 254
    45e0:	60 81       	ld	r22, Z
    45e2:	71 81       	ldd	r23, Z+1	; 0x01
    45e4:	82 81       	ldd	r24, Z+2	; 0x02
    45e6:	93 81       	ldd	r25, Z+3	; 0x03
    45e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	f8 01       	movw	r30, r16
    45f2:	91 83       	std	Z+1, r25	; 0x01
    45f4:	80 83       	st	Z, r24
    45f6:	de 01       	movw	r26, r28
    45f8:	a5 5f       	subi	r26, 0xF5	; 245
    45fa:	be 4f       	sbci	r27, 0xFE	; 254
    45fc:	fe 01       	movw	r30, r28
    45fe:	e1 5f       	subi	r30, 0xF1	; 241
    4600:	fe 4f       	sbci	r31, 0xFE	; 254
    4602:	80 81       	ld	r24, Z
    4604:	91 81       	ldd	r25, Z+1	; 0x01
    4606:	8d 93       	st	X+, r24
    4608:	9c 93       	st	X, r25
    460a:	fe 01       	movw	r30, r28
    460c:	e5 5f       	subi	r30, 0xF5	; 245
    460e:	fe 4f       	sbci	r31, 0xFE	; 254
    4610:	80 81       	ld	r24, Z
    4612:	91 81       	ldd	r25, Z+1	; 0x01
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	f1 f7       	brne	.-4      	; 0x4614 <main+0x18f0>
    4618:	fe 01       	movw	r30, r28
    461a:	e5 5f       	subi	r30, 0xF5	; 245
    461c:	fe 4f       	sbci	r31, 0xFE	; 254
    461e:	91 83       	std	Z+1, r25	; 0x01
    4620:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,6,Hamokshastanding);
    4622:	9e 01       	movw	r18, r28
    4624:	27 52       	subi	r18, 0x27	; 39
    4626:	3e 4f       	sbci	r19, 0xFE	; 254
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	61 e0       	ldi	r22, 0x01	; 1
    462c:	46 e0       	ldi	r20, 0x06	; 6
    462e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    4632:	fe 01       	movw	r30, r28
    4634:	e9 5f       	subi	r30, 0xF9	; 249
    4636:	fe 4f       	sbci	r31, 0xFE	; 254
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	a8 e4       	ldi	r26, 0x48	; 72
    463e:	b3 e4       	ldi	r27, 0x43	; 67
    4640:	80 83       	st	Z, r24
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	a2 83       	std	Z+2, r26	; 0x02
    4646:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4648:	8e 01       	movw	r16, r28
    464a:	0d 5f       	subi	r16, 0xFD	; 253
    464c:	1e 4f       	sbci	r17, 0xFE	; 254
    464e:	fe 01       	movw	r30, r28
    4650:	e9 5f       	subi	r30, 0xF9	; 249
    4652:	fe 4f       	sbci	r31, 0xFE	; 254
    4654:	60 81       	ld	r22, Z
    4656:	71 81       	ldd	r23, Z+1	; 0x01
    4658:	82 81       	ldd	r24, Z+2	; 0x02
    465a:	93 81       	ldd	r25, Z+3	; 0x03
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	4a ef       	ldi	r20, 0xFA	; 250
    4662:	54 e4       	ldi	r21, 0x44	; 68
    4664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	f8 01       	movw	r30, r16
    466e:	80 83       	st	Z, r24
    4670:	91 83       	std	Z+1, r25	; 0x01
    4672:	a2 83       	std	Z+2, r26	; 0x02
    4674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4676:	fe 01       	movw	r30, r28
    4678:	ed 5f       	subi	r30, 0xFD	; 253
    467a:	fe 4f       	sbci	r31, 0xFE	; 254
    467c:	60 81       	ld	r22, Z
    467e:	71 81       	ldd	r23, Z+1	; 0x01
    4680:	82 81       	ldd	r24, Z+2	; 0x02
    4682:	93 81       	ldd	r25, Z+3	; 0x03
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	40 e8       	ldi	r20, 0x80	; 128
    468a:	5f e3       	ldi	r21, 0x3F	; 63
    468c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4690:	88 23       	and	r24, r24
    4692:	44 f4       	brge	.+16     	; 0x46a4 <main+0x1980>
		__ticks = 1;
    4694:	fe 01       	movw	r30, r28
    4696:	ef 5f       	subi	r30, 0xFF	; 255
    4698:	fe 4f       	sbci	r31, 0xFE	; 254
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	80 83       	st	Z, r24
    46a2:	64 c0       	rjmp	.+200    	; 0x476c <main+0x1a48>
	else if (__tmp > 65535)
    46a4:	fe 01       	movw	r30, r28
    46a6:	ed 5f       	subi	r30, 0xFD	; 253
    46a8:	fe 4f       	sbci	r31, 0xFE	; 254
    46aa:	60 81       	ld	r22, Z
    46ac:	71 81       	ldd	r23, Z+1	; 0x01
    46ae:	82 81       	ldd	r24, Z+2	; 0x02
    46b0:	93 81       	ldd	r25, Z+3	; 0x03
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	3f ef       	ldi	r19, 0xFF	; 255
    46b6:	4f e7       	ldi	r20, 0x7F	; 127
    46b8:	57 e4       	ldi	r21, 0x47	; 71
    46ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46be:	18 16       	cp	r1, r24
    46c0:	0c f0       	brlt	.+2      	; 0x46c4 <main+0x19a0>
    46c2:	43 c0       	rjmp	.+134    	; 0x474a <main+0x1a26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c4:	fe 01       	movw	r30, r28
    46c6:	e9 5f       	subi	r30, 0xF9	; 249
    46c8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ca:	60 81       	ld	r22, Z
    46cc:	71 81       	ldd	r23, Z+1	; 0x01
    46ce:	82 81       	ldd	r24, Z+2	; 0x02
    46d0:	93 81       	ldd	r25, Z+3	; 0x03
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	40 e2       	ldi	r20, 0x20	; 32
    46d8:	51 e4       	ldi	r21, 0x41	; 65
    46da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	8e 01       	movw	r16, r28
    46e4:	0f 5f       	subi	r16, 0xFF	; 255
    46e6:	1e 4f       	sbci	r17, 0xFE	; 254
    46e8:	bc 01       	movw	r22, r24
    46ea:	cd 01       	movw	r24, r26
    46ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	f8 01       	movw	r30, r16
    46f6:	91 83       	std	Z+1, r25	; 0x01
    46f8:	80 83       	st	Z, r24
    46fa:	1f c0       	rjmp	.+62     	; 0x473a <main+0x1a16>
    46fc:	fe 01       	movw	r30, r28
    46fe:	e1 50       	subi	r30, 0x01	; 1
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	88 ec       	ldi	r24, 0xC8	; 200
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	80 83       	st	Z, r24
    470a:	fe 01       	movw	r30, r28
    470c:	e1 50       	subi	r30, 0x01	; 1
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	80 81       	ld	r24, Z
    4712:	91 81       	ldd	r25, Z+1	; 0x01
    4714:	01 97       	sbiw	r24, 0x01	; 1
    4716:	f1 f7       	brne	.-4      	; 0x4714 <main+0x19f0>
    4718:	fe 01       	movw	r30, r28
    471a:	e1 50       	subi	r30, 0x01	; 1
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4722:	de 01       	movw	r26, r28
    4724:	af 5f       	subi	r26, 0xFF	; 255
    4726:	be 4f       	sbci	r27, 0xFE	; 254
    4728:	fe 01       	movw	r30, r28
    472a:	ef 5f       	subi	r30, 0xFF	; 255
    472c:	fe 4f       	sbci	r31, 0xFE	; 254
    472e:	80 81       	ld	r24, Z
    4730:	91 81       	ldd	r25, Z+1	; 0x01
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	11 96       	adiw	r26, 0x01	; 1
    4736:	9c 93       	st	X, r25
    4738:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473a:	fe 01       	movw	r30, r28
    473c:	ef 5f       	subi	r30, 0xFF	; 255
    473e:	fe 4f       	sbci	r31, 0xFE	; 254
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	00 97       	sbiw	r24, 0x00	; 0
    4746:	d1 f6       	brne	.-76     	; 0x46fc <main+0x19d8>
    4748:	27 c0       	rjmp	.+78     	; 0x4798 <main+0x1a74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    474a:	8e 01       	movw	r16, r28
    474c:	0f 5f       	subi	r16, 0xFF	; 255
    474e:	1e 4f       	sbci	r17, 0xFE	; 254
    4750:	fe 01       	movw	r30, r28
    4752:	ed 5f       	subi	r30, 0xFD	; 253
    4754:	fe 4f       	sbci	r31, 0xFE	; 254
    4756:	60 81       	ld	r22, Z
    4758:	71 81       	ldd	r23, Z+1	; 0x01
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	f8 01       	movw	r30, r16
    4768:	91 83       	std	Z+1, r25	; 0x01
    476a:	80 83       	st	Z, r24
    476c:	de 01       	movw	r26, r28
    476e:	a3 50       	subi	r26, 0x03	; 3
    4770:	bf 4f       	sbci	r27, 0xFF	; 255
    4772:	fe 01       	movw	r30, r28
    4774:	ef 5f       	subi	r30, 0xFF	; 255
    4776:	fe 4f       	sbci	r31, 0xFE	; 254
    4778:	80 81       	ld	r24, Z
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	8d 93       	st	X+, r24
    477e:	9c 93       	st	X, r25
    4780:	fe 01       	movw	r30, r28
    4782:	e3 50       	subi	r30, 0x03	; 3
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	80 81       	ld	r24, Z
    4788:	91 81       	ldd	r25, Z+1	; 0x01
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <main+0x1a66>
    478e:	fe 01       	movw	r30, r28
    4790:	e3 50       	subi	r30, 0x03	; 3
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	91 83       	std	Z+1, r25	; 0x01
    4796:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    4798:	de 01       	movw	r26, r28
    479a:	ad 53       	subi	r26, 0x3D	; 61
    479c:	be 4f       	sbci	r27, 0xFE	; 254
    479e:	fe 01       	movw	r30, r28
    47a0:	eb 53       	subi	r30, 0x3B	; 59
    47a2:	fe 4f       	sbci	r31, 0xFE	; 254
    47a4:	80 81       	ld	r24, Z
    47a6:	91 81       	ldd	r25, Z+1	; 0x01
    47a8:	8a 56       	subi	r24, 0x6A	; 106
    47aa:	9f 4f       	sbci	r25, 0xFF	; 255
    47ac:	8d 93       	st	X+, r24
    47ae:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    47b0:	de 01       	movw	r26, r28
    47b2:	af 53       	subi	r26, 0x3F	; 63
    47b4:	be 4f       	sbci	r27, 0xFE	; 254
    47b6:	fe 01       	movw	r30, r28
    47b8:	eb 53       	subi	r30, 0x3B	; 59
    47ba:	fe 4f       	sbci	r31, 0xFE	; 254
    47bc:	80 81       	ld	r24, Z
    47be:	91 81       	ldd	r25, Z+1	; 0x01
    47c0:	86 59       	subi	r24, 0x96	; 150
    47c2:	90 40       	sbci	r25, 0x00	; 0
    47c4:	11 96       	adiw	r26, 0x01	; 1
    47c6:	9c 93       	st	X, r25
    47c8:	8e 93       	st	-X, r24
    47ca:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 2184) && (Local_u16AnalogValue <= 2500))
    47ce:	fe 01       	movw	r30, r28
    47d0:	eb 53       	subi	r30, 0x3B	; 59
    47d2:	fe 4f       	sbci	r31, 0xFE	; 254
    47d4:	80 81       	ld	r24, Z
    47d6:	91 81       	ldd	r25, Z+1	; 0x01
    47d8:	f8 e0       	ldi	r31, 0x08	; 8
    47da:	89 38       	cpi	r24, 0x89	; 137
    47dc:	9f 07       	cpc	r25, r31
    47de:	08 f4       	brcc	.+2      	; 0x47e2 <main+0x1abe>
    47e0:	a3 c1       	rjmp	.+838    	; 0x4b28 <main+0x1e04>
    47e2:	fe 01       	movw	r30, r28
    47e4:	eb 53       	subi	r30, 0x3B	; 59
    47e6:	fe 4f       	sbci	r31, 0xFE	; 254
    47e8:	80 81       	ld	r24, Z
    47ea:	91 81       	ldd	r25, Z+1	; 0x01
    47ec:	29 e0       	ldi	r18, 0x09	; 9
    47ee:	85 3c       	cpi	r24, 0xC5	; 197
    47f0:	92 07       	cpc	r25, r18
    47f2:	08 f0       	brcs	.+2      	; 0x47f6 <main+0x1ad2>
    47f4:	99 c1       	rjmp	.+818    	; 0x4b28 <main+0x1e04>
	  {
		  LCD_u8_GoTo_XY(0,0);
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    47fe:	80 e6       	ldi	r24, 0x60	; 96
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,7,HamokshaRuning);
    4806:	9e 01       	movw	r18, r28
    4808:	2f 51       	subi	r18, 0x1F	; 31
    480a:	3e 4f       	sbci	r19, 0xFE	; 254
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	61 e0       	ldi	r22, 0x01	; 1
    4810:	47 e0       	ldi	r20, 0x07	; 7
    4812:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    4816:	fe 01       	movw	r30, r28
    4818:	e7 50       	subi	r30, 0x07	; 7
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	a8 e4       	ldi	r26, 0x48	; 72
    4822:	b3 e4       	ldi	r27, 0x43	; 67
    4824:	80 83       	st	Z, r24
    4826:	91 83       	std	Z+1, r25	; 0x01
    4828:	a2 83       	std	Z+2, r26	; 0x02
    482a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    482c:	8e 01       	movw	r16, r28
    482e:	0b 50       	subi	r16, 0x0B	; 11
    4830:	1f 4f       	sbci	r17, 0xFF	; 255
    4832:	fe 01       	movw	r30, r28
    4834:	e7 50       	subi	r30, 0x07	; 7
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	60 81       	ld	r22, Z
    483a:	71 81       	ldd	r23, Z+1	; 0x01
    483c:	82 81       	ldd	r24, Z+2	; 0x02
    483e:	93 81       	ldd	r25, Z+3	; 0x03
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	4a ef       	ldi	r20, 0xFA	; 250
    4846:	54 e4       	ldi	r21, 0x44	; 68
    4848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    484c:	dc 01       	movw	r26, r24
    484e:	cb 01       	movw	r24, r22
    4850:	f8 01       	movw	r30, r16
    4852:	80 83       	st	Z, r24
    4854:	91 83       	std	Z+1, r25	; 0x01
    4856:	a2 83       	std	Z+2, r26	; 0x02
    4858:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    485a:	fe 01       	movw	r30, r28
    485c:	eb 50       	subi	r30, 0x0B	; 11
    485e:	ff 4f       	sbci	r31, 0xFF	; 255
    4860:	60 81       	ld	r22, Z
    4862:	71 81       	ldd	r23, Z+1	; 0x01
    4864:	82 81       	ldd	r24, Z+2	; 0x02
    4866:	93 81       	ldd	r25, Z+3	; 0x03
    4868:	20 e0       	ldi	r18, 0x00	; 0
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	40 e8       	ldi	r20, 0x80	; 128
    486e:	5f e3       	ldi	r21, 0x3F	; 63
    4870:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4874:	88 23       	and	r24, r24
    4876:	44 f4       	brge	.+16     	; 0x4888 <main+0x1b64>
		__ticks = 1;
    4878:	fe 01       	movw	r30, r28
    487a:	ed 50       	subi	r30, 0x0D	; 13
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	91 83       	std	Z+1, r25	; 0x01
    4884:	80 83       	st	Z, r24
    4886:	64 c0       	rjmp	.+200    	; 0x4950 <main+0x1c2c>
	else if (__tmp > 65535)
    4888:	fe 01       	movw	r30, r28
    488a:	eb 50       	subi	r30, 0x0B	; 11
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	60 81       	ld	r22, Z
    4890:	71 81       	ldd	r23, Z+1	; 0x01
    4892:	82 81       	ldd	r24, Z+2	; 0x02
    4894:	93 81       	ldd	r25, Z+3	; 0x03
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	3f ef       	ldi	r19, 0xFF	; 255
    489a:	4f e7       	ldi	r20, 0x7F	; 127
    489c:	57 e4       	ldi	r21, 0x47	; 71
    489e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48a2:	18 16       	cp	r1, r24
    48a4:	0c f0       	brlt	.+2      	; 0x48a8 <main+0x1b84>
    48a6:	43 c0       	rjmp	.+134    	; 0x492e <main+0x1c0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48a8:	fe 01       	movw	r30, r28
    48aa:	e7 50       	subi	r30, 0x07	; 7
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	60 81       	ld	r22, Z
    48b0:	71 81       	ldd	r23, Z+1	; 0x01
    48b2:	82 81       	ldd	r24, Z+2	; 0x02
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	40 e2       	ldi	r20, 0x20	; 32
    48bc:	51 e4       	ldi	r21, 0x41	; 65
    48be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	8e 01       	movw	r16, r28
    48c8:	0d 50       	subi	r16, 0x0D	; 13
    48ca:	1f 4f       	sbci	r17, 0xFF	; 255
    48cc:	bc 01       	movw	r22, r24
    48ce:	cd 01       	movw	r24, r26
    48d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d4:	dc 01       	movw	r26, r24
    48d6:	cb 01       	movw	r24, r22
    48d8:	f8 01       	movw	r30, r16
    48da:	91 83       	std	Z+1, r25	; 0x01
    48dc:	80 83       	st	Z, r24
    48de:	1f c0       	rjmp	.+62     	; 0x491e <main+0x1bfa>
    48e0:	fe 01       	movw	r30, r28
    48e2:	ef 50       	subi	r30, 0x0F	; 15
    48e4:	ff 4f       	sbci	r31, 0xFF	; 255
    48e6:	88 ec       	ldi	r24, 0xC8	; 200
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	91 83       	std	Z+1, r25	; 0x01
    48ec:	80 83       	st	Z, r24
    48ee:	fe 01       	movw	r30, r28
    48f0:	ef 50       	subi	r30, 0x0F	; 15
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	80 81       	ld	r24, Z
    48f6:	91 81       	ldd	r25, Z+1	; 0x01
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <main+0x1bd4>
    48fc:	fe 01       	movw	r30, r28
    48fe:	ef 50       	subi	r30, 0x0F	; 15
    4900:	ff 4f       	sbci	r31, 0xFF	; 255
    4902:	91 83       	std	Z+1, r25	; 0x01
    4904:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4906:	de 01       	movw	r26, r28
    4908:	ad 50       	subi	r26, 0x0D	; 13
    490a:	bf 4f       	sbci	r27, 0xFF	; 255
    490c:	fe 01       	movw	r30, r28
    490e:	ed 50       	subi	r30, 0x0D	; 13
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	80 81       	ld	r24, Z
    4914:	91 81       	ldd	r25, Z+1	; 0x01
    4916:	01 97       	sbiw	r24, 0x01	; 1
    4918:	11 96       	adiw	r26, 0x01	; 1
    491a:	9c 93       	st	X, r25
    491c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    491e:	fe 01       	movw	r30, r28
    4920:	ed 50       	subi	r30, 0x0D	; 13
    4922:	ff 4f       	sbci	r31, 0xFF	; 255
    4924:	80 81       	ld	r24, Z
    4926:	91 81       	ldd	r25, Z+1	; 0x01
    4928:	00 97       	sbiw	r24, 0x00	; 0
    492a:	d1 f6       	brne	.-76     	; 0x48e0 <main+0x1bbc>
    492c:	27 c0       	rjmp	.+78     	; 0x497c <main+0x1c58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    492e:	8e 01       	movw	r16, r28
    4930:	0d 50       	subi	r16, 0x0D	; 13
    4932:	1f 4f       	sbci	r17, 0xFF	; 255
    4934:	fe 01       	movw	r30, r28
    4936:	eb 50       	subi	r30, 0x0B	; 11
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	60 81       	ld	r22, Z
    493c:	71 81       	ldd	r23, Z+1	; 0x01
    493e:	82 81       	ldd	r24, Z+2	; 0x02
    4940:	93 81       	ldd	r25, Z+3	; 0x03
    4942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4946:	dc 01       	movw	r26, r24
    4948:	cb 01       	movw	r24, r22
    494a:	f8 01       	movw	r30, r16
    494c:	91 83       	std	Z+1, r25	; 0x01
    494e:	80 83       	st	Z, r24
    4950:	de 01       	movw	r26, r28
    4952:	a1 51       	subi	r26, 0x11	; 17
    4954:	bf 4f       	sbci	r27, 0xFF	; 255
    4956:	fe 01       	movw	r30, r28
    4958:	ed 50       	subi	r30, 0x0D	; 13
    495a:	ff 4f       	sbci	r31, 0xFF	; 255
    495c:	80 81       	ld	r24, Z
    495e:	91 81       	ldd	r25, Z+1	; 0x01
    4960:	8d 93       	st	X+, r24
    4962:	9c 93       	st	X, r25
    4964:	fe 01       	movw	r30, r28
    4966:	e1 51       	subi	r30, 0x11	; 17
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	80 81       	ld	r24, Z
    496c:	91 81       	ldd	r25, Z+1	; 0x01
    496e:	01 97       	sbiw	r24, 0x01	; 1
    4970:	f1 f7       	brne	.-4      	; 0x496e <main+0x1c4a>
    4972:	fe 01       	movw	r30, r28
    4974:	e1 51       	subi	r30, 0x11	; 17
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	91 83       	std	Z+1, r25	; 0x01
    497a:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,7,Hamokshastanding);
    497c:	9e 01       	movw	r18, r28
    497e:	27 52       	subi	r18, 0x27	; 39
    4980:	3e 4f       	sbci	r19, 0xFE	; 254
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	61 e0       	ldi	r22, 0x01	; 1
    4986:	47 e0       	ldi	r20, 0x07	; 7
    4988:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    498c:	fe 01       	movw	r30, r28
    498e:	e5 51       	subi	r30, 0x15	; 21
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	a8 e4       	ldi	r26, 0x48	; 72
    4998:	b3 e4       	ldi	r27, 0x43	; 67
    499a:	80 83       	st	Z, r24
    499c:	91 83       	std	Z+1, r25	; 0x01
    499e:	a2 83       	std	Z+2, r26	; 0x02
    49a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49a2:	8e 01       	movw	r16, r28
    49a4:	09 51       	subi	r16, 0x19	; 25
    49a6:	1f 4f       	sbci	r17, 0xFF	; 255
    49a8:	fe 01       	movw	r30, r28
    49aa:	e5 51       	subi	r30, 0x15	; 21
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	60 81       	ld	r22, Z
    49b0:	71 81       	ldd	r23, Z+1	; 0x01
    49b2:	82 81       	ldd	r24, Z+2	; 0x02
    49b4:	93 81       	ldd	r25, Z+3	; 0x03
    49b6:	20 e0       	ldi	r18, 0x00	; 0
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	4a ef       	ldi	r20, 0xFA	; 250
    49bc:	54 e4       	ldi	r21, 0x44	; 68
    49be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	f8 01       	movw	r30, r16
    49c8:	80 83       	st	Z, r24
    49ca:	91 83       	std	Z+1, r25	; 0x01
    49cc:	a2 83       	std	Z+2, r26	; 0x02
    49ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49d0:	fe 01       	movw	r30, r28
    49d2:	e9 51       	subi	r30, 0x19	; 25
    49d4:	ff 4f       	sbci	r31, 0xFF	; 255
    49d6:	60 81       	ld	r22, Z
    49d8:	71 81       	ldd	r23, Z+1	; 0x01
    49da:	82 81       	ldd	r24, Z+2	; 0x02
    49dc:	93 81       	ldd	r25, Z+3	; 0x03
    49de:	20 e0       	ldi	r18, 0x00	; 0
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	40 e8       	ldi	r20, 0x80	; 128
    49e4:	5f e3       	ldi	r21, 0x3F	; 63
    49e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49ea:	88 23       	and	r24, r24
    49ec:	44 f4       	brge	.+16     	; 0x49fe <main+0x1cda>
		__ticks = 1;
    49ee:	fe 01       	movw	r30, r28
    49f0:	eb 51       	subi	r30, 0x1B	; 27
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
    49fc:	64 c0       	rjmp	.+200    	; 0x4ac6 <main+0x1da2>
	else if (__tmp > 65535)
    49fe:	fe 01       	movw	r30, r28
    4a00:	e9 51       	subi	r30, 0x19	; 25
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	60 81       	ld	r22, Z
    4a06:	71 81       	ldd	r23, Z+1	; 0x01
    4a08:	82 81       	ldd	r24, Z+2	; 0x02
    4a0a:	93 81       	ldd	r25, Z+3	; 0x03
    4a0c:	20 e0       	ldi	r18, 0x00	; 0
    4a0e:	3f ef       	ldi	r19, 0xFF	; 255
    4a10:	4f e7       	ldi	r20, 0x7F	; 127
    4a12:	57 e4       	ldi	r21, 0x47	; 71
    4a14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a18:	18 16       	cp	r1, r24
    4a1a:	0c f0       	brlt	.+2      	; 0x4a1e <main+0x1cfa>
    4a1c:	43 c0       	rjmp	.+134    	; 0x4aa4 <main+0x1d80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e5 51       	subi	r30, 0x15	; 21
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	60 81       	ld	r22, Z
    4a26:	71 81       	ldd	r23, Z+1	; 0x01
    4a28:	82 81       	ldd	r24, Z+2	; 0x02
    4a2a:	93 81       	ldd	r25, Z+3	; 0x03
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	40 e2       	ldi	r20, 0x20	; 32
    4a32:	51 e4       	ldi	r21, 0x41	; 65
    4a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	8e 01       	movw	r16, r28
    4a3e:	0b 51       	subi	r16, 0x1B	; 27
    4a40:	1f 4f       	sbci	r17, 0xFF	; 255
    4a42:	bc 01       	movw	r22, r24
    4a44:	cd 01       	movw	r24, r26
    4a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	f8 01       	movw	r30, r16
    4a50:	91 83       	std	Z+1, r25	; 0x01
    4a52:	80 83       	st	Z, r24
    4a54:	1f c0       	rjmp	.+62     	; 0x4a94 <main+0x1d70>
    4a56:	fe 01       	movw	r30, r28
    4a58:	ed 51       	subi	r30, 0x1D	; 29
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	88 ec       	ldi	r24, 0xC8	; 200
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	91 83       	std	Z+1, r25	; 0x01
    4a62:	80 83       	st	Z, r24
    4a64:	fe 01       	movw	r30, r28
    4a66:	ed 51       	subi	r30, 0x1D	; 29
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	01 97       	sbiw	r24, 0x01	; 1
    4a70:	f1 f7       	brne	.-4      	; 0x4a6e <main+0x1d4a>
    4a72:	fe 01       	movw	r30, r28
    4a74:	ed 51       	subi	r30, 0x1D	; 29
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	91 83       	std	Z+1, r25	; 0x01
    4a7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a7c:	de 01       	movw	r26, r28
    4a7e:	ab 51       	subi	r26, 0x1B	; 27
    4a80:	bf 4f       	sbci	r27, 0xFF	; 255
    4a82:	fe 01       	movw	r30, r28
    4a84:	eb 51       	subi	r30, 0x1B	; 27
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	80 81       	ld	r24, Z
    4a8a:	91 81       	ldd	r25, Z+1	; 0x01
    4a8c:	01 97       	sbiw	r24, 0x01	; 1
    4a8e:	11 96       	adiw	r26, 0x01	; 1
    4a90:	9c 93       	st	X, r25
    4a92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a94:	fe 01       	movw	r30, r28
    4a96:	eb 51       	subi	r30, 0x1B	; 27
    4a98:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9a:	80 81       	ld	r24, Z
    4a9c:	91 81       	ldd	r25, Z+1	; 0x01
    4a9e:	00 97       	sbiw	r24, 0x00	; 0
    4aa0:	d1 f6       	brne	.-76     	; 0x4a56 <main+0x1d32>
    4aa2:	27 c0       	rjmp	.+78     	; 0x4af2 <main+0x1dce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aa4:	8e 01       	movw	r16, r28
    4aa6:	0b 51       	subi	r16, 0x1B	; 27
    4aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aaa:	fe 01       	movw	r30, r28
    4aac:	e9 51       	subi	r30, 0x19	; 25
    4aae:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab0:	60 81       	ld	r22, Z
    4ab2:	71 81       	ldd	r23, Z+1	; 0x01
    4ab4:	82 81       	ldd	r24, Z+2	; 0x02
    4ab6:	93 81       	ldd	r25, Z+3	; 0x03
    4ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	f8 01       	movw	r30, r16
    4ac2:	91 83       	std	Z+1, r25	; 0x01
    4ac4:	80 83       	st	Z, r24
    4ac6:	de 01       	movw	r26, r28
    4ac8:	af 51       	subi	r26, 0x1F	; 31
    4aca:	bf 4f       	sbci	r27, 0xFF	; 255
    4acc:	fe 01       	movw	r30, r28
    4ace:	eb 51       	subi	r30, 0x1B	; 27
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	80 81       	ld	r24, Z
    4ad4:	91 81       	ldd	r25, Z+1	; 0x01
    4ad6:	8d 93       	st	X+, r24
    4ad8:	9c 93       	st	X, r25
    4ada:	fe 01       	movw	r30, r28
    4adc:	ef 51       	subi	r30, 0x1F	; 31
    4ade:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae0:	80 81       	ld	r24, Z
    4ae2:	91 81       	ldd	r25, Z+1	; 0x01
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	f1 f7       	brne	.-4      	; 0x4ae4 <main+0x1dc0>
    4ae8:	fe 01       	movw	r30, r28
    4aea:	ef 51       	subi	r30, 0x1F	; 31
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	91 83       	std	Z+1, r25	; 0x01
    4af0:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    4af2:	de 01       	movw	r26, r28
    4af4:	ad 53       	subi	r26, 0x3D	; 61
    4af6:	be 4f       	sbci	r27, 0xFE	; 254
    4af8:	fe 01       	movw	r30, r28
    4afa:	eb 53       	subi	r30, 0x3B	; 59
    4afc:	fe 4f       	sbci	r31, 0xFE	; 254
    4afe:	80 81       	ld	r24, Z
    4b00:	91 81       	ldd	r25, Z+1	; 0x01
    4b02:	8a 56       	subi	r24, 0x6A	; 106
    4b04:	9f 4f       	sbci	r25, 0xFF	; 255
    4b06:	8d 93       	st	X+, r24
    4b08:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    4b0a:	de 01       	movw	r26, r28
    4b0c:	af 53       	subi	r26, 0x3F	; 63
    4b0e:	be 4f       	sbci	r27, 0xFE	; 254
    4b10:	fe 01       	movw	r30, r28
    4b12:	eb 53       	subi	r30, 0x3B	; 59
    4b14:	fe 4f       	sbci	r31, 0xFE	; 254
    4b16:	80 81       	ld	r24, Z
    4b18:	91 81       	ldd	r25, Z+1	; 0x01
    4b1a:	86 59       	subi	r24, 0x96	; 150
    4b1c:	90 40       	sbci	r25, 0x00	; 0
    4b1e:	11 96       	adiw	r26, 0x01	; 1
    4b20:	9c 93       	st	X, r25
    4b22:	8e 93       	st	-X, r24
    4b24:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 2500) && (Local_u16AnalogValue <= 2812))
    4b28:	fe 01       	movw	r30, r28
    4b2a:	eb 53       	subi	r30, 0x3B	; 59
    4b2c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b2e:	80 81       	ld	r24, Z
    4b30:	91 81       	ldd	r25, Z+1	; 0x01
    4b32:	f9 e0       	ldi	r31, 0x09	; 9
    4b34:	85 3c       	cpi	r24, 0xC5	; 197
    4b36:	9f 07       	cpc	r25, r31
    4b38:	08 f4       	brcc	.+2      	; 0x4b3c <main+0x1e18>
    4b3a:	a3 c1       	rjmp	.+838    	; 0x4e82 <main+0x215e>
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	eb 53       	subi	r30, 0x3B	; 59
    4b40:	fe 4f       	sbci	r31, 0xFE	; 254
    4b42:	80 81       	ld	r24, Z
    4b44:	91 81       	ldd	r25, Z+1	; 0x01
    4b46:	2a e0       	ldi	r18, 0x0A	; 10
    4b48:	8d 3f       	cpi	r24, 0xFD	; 253
    4b4a:	92 07       	cpc	r25, r18
    4b4c:	08 f0       	brcs	.+2      	; 0x4b50 <main+0x1e2c>
    4b4e:	99 c1       	rjmp	.+818    	; 0x4e82 <main+0x215e>
	  {
		  LCD_u8_GoTo_XY(0,0);
    4b50:	80 e0       	ldi	r24, 0x00	; 0
    4b52:	60 e0       	ldi	r22, 0x00	; 0
    4b54:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    4b58:	80 e6       	ldi	r24, 0x60	; 96
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,8,HamokshaRuning);
    4b60:	9e 01       	movw	r18, r28
    4b62:	2f 51       	subi	r18, 0x1F	; 31
    4b64:	3e 4f       	sbci	r19, 0xFE	; 254
    4b66:	81 e0       	ldi	r24, 0x01	; 1
    4b68:	61 e0       	ldi	r22, 0x01	; 1
    4b6a:	48 e0       	ldi	r20, 0x08	; 8
    4b6c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    4b70:	fe 01       	movw	r30, r28
    4b72:	e3 52       	subi	r30, 0x23	; 35
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	a8 e4       	ldi	r26, 0x48	; 72
    4b7c:	b3 e4       	ldi	r27, 0x43	; 67
    4b7e:	80 83       	st	Z, r24
    4b80:	91 83       	std	Z+1, r25	; 0x01
    4b82:	a2 83       	std	Z+2, r26	; 0x02
    4b84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b86:	8e 01       	movw	r16, r28
    4b88:	07 52       	subi	r16, 0x27	; 39
    4b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e3 52       	subi	r30, 0x23	; 35
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	60 81       	ld	r22, Z
    4b94:	71 81       	ldd	r23, Z+1	; 0x01
    4b96:	82 81       	ldd	r24, Z+2	; 0x02
    4b98:	93 81       	ldd	r25, Z+3	; 0x03
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	4a ef       	ldi	r20, 0xFA	; 250
    4ba0:	54 e4       	ldi	r21, 0x44	; 68
    4ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	f8 01       	movw	r30, r16
    4bac:	80 83       	st	Z, r24
    4bae:	91 83       	std	Z+1, r25	; 0x01
    4bb0:	a2 83       	std	Z+2, r26	; 0x02
    4bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	e7 52       	subi	r30, 0x27	; 39
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bba:	60 81       	ld	r22, Z
    4bbc:	71 81       	ldd	r23, Z+1	; 0x01
    4bbe:	82 81       	ldd	r24, Z+2	; 0x02
    4bc0:	93 81       	ldd	r25, Z+3	; 0x03
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	40 e8       	ldi	r20, 0x80	; 128
    4bc8:	5f e3       	ldi	r21, 0x3F	; 63
    4bca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bce:	88 23       	and	r24, r24
    4bd0:	44 f4       	brge	.+16     	; 0x4be2 <main+0x1ebe>
		__ticks = 1;
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e9 52       	subi	r30, 0x29	; 41
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	91 83       	std	Z+1, r25	; 0x01
    4bde:	80 83       	st	Z, r24
    4be0:	64 c0       	rjmp	.+200    	; 0x4caa <main+0x1f86>
	else if (__tmp > 65535)
    4be2:	fe 01       	movw	r30, r28
    4be4:	e7 52       	subi	r30, 0x27	; 39
    4be6:	ff 4f       	sbci	r31, 0xFF	; 255
    4be8:	60 81       	ld	r22, Z
    4bea:	71 81       	ldd	r23, Z+1	; 0x01
    4bec:	82 81       	ldd	r24, Z+2	; 0x02
    4bee:	93 81       	ldd	r25, Z+3	; 0x03
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	3f ef       	ldi	r19, 0xFF	; 255
    4bf4:	4f e7       	ldi	r20, 0x7F	; 127
    4bf6:	57 e4       	ldi	r21, 0x47	; 71
    4bf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bfc:	18 16       	cp	r1, r24
    4bfe:	0c f0       	brlt	.+2      	; 0x4c02 <main+0x1ede>
    4c00:	43 c0       	rjmp	.+134    	; 0x4c88 <main+0x1f64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c02:	fe 01       	movw	r30, r28
    4c04:	e3 52       	subi	r30, 0x23	; 35
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	60 81       	ld	r22, Z
    4c0a:	71 81       	ldd	r23, Z+1	; 0x01
    4c0c:	82 81       	ldd	r24, Z+2	; 0x02
    4c0e:	93 81       	ldd	r25, Z+3	; 0x03
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	40 e2       	ldi	r20, 0x20	; 32
    4c16:	51 e4       	ldi	r21, 0x41	; 65
    4c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	8e 01       	movw	r16, r28
    4c22:	09 52       	subi	r16, 0x29	; 41
    4c24:	1f 4f       	sbci	r17, 0xFF	; 255
    4c26:	bc 01       	movw	r22, r24
    4c28:	cd 01       	movw	r24, r26
    4c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	f8 01       	movw	r30, r16
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	80 83       	st	Z, r24
    4c38:	1f c0       	rjmp	.+62     	; 0x4c78 <main+0x1f54>
    4c3a:	fe 01       	movw	r30, r28
    4c3c:	eb 52       	subi	r30, 0x2B	; 43
    4c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c40:	88 ec       	ldi	r24, 0xC8	; 200
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	91 83       	std	Z+1, r25	; 0x01
    4c46:	80 83       	st	Z, r24
    4c48:	fe 01       	movw	r30, r28
    4c4a:	eb 52       	subi	r30, 0x2B	; 43
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	80 81       	ld	r24, Z
    4c50:	91 81       	ldd	r25, Z+1	; 0x01
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	f1 f7       	brne	.-4      	; 0x4c52 <main+0x1f2e>
    4c56:	fe 01       	movw	r30, r28
    4c58:	eb 52       	subi	r30, 0x2B	; 43
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	91 83       	std	Z+1, r25	; 0x01
    4c5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c60:	de 01       	movw	r26, r28
    4c62:	a9 52       	subi	r26, 0x29	; 41
    4c64:	bf 4f       	sbci	r27, 0xFF	; 255
    4c66:	fe 01       	movw	r30, r28
    4c68:	e9 52       	subi	r30, 0x29	; 41
    4c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6c:	80 81       	ld	r24, Z
    4c6e:	91 81       	ldd	r25, Z+1	; 0x01
    4c70:	01 97       	sbiw	r24, 0x01	; 1
    4c72:	11 96       	adiw	r26, 0x01	; 1
    4c74:	9c 93       	st	X, r25
    4c76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c78:	fe 01       	movw	r30, r28
    4c7a:	e9 52       	subi	r30, 0x29	; 41
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	80 81       	ld	r24, Z
    4c80:	91 81       	ldd	r25, Z+1	; 0x01
    4c82:	00 97       	sbiw	r24, 0x00	; 0
    4c84:	d1 f6       	brne	.-76     	; 0x4c3a <main+0x1f16>
    4c86:	27 c0       	rjmp	.+78     	; 0x4cd6 <main+0x1fb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c88:	8e 01       	movw	r16, r28
    4c8a:	09 52       	subi	r16, 0x29	; 41
    4c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8e:	fe 01       	movw	r30, r28
    4c90:	e7 52       	subi	r30, 0x27	; 39
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	60 81       	ld	r22, Z
    4c96:	71 81       	ldd	r23, Z+1	; 0x01
    4c98:	82 81       	ldd	r24, Z+2	; 0x02
    4c9a:	93 81       	ldd	r25, Z+3	; 0x03
    4c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	f8 01       	movw	r30, r16
    4ca6:	91 83       	std	Z+1, r25	; 0x01
    4ca8:	80 83       	st	Z, r24
    4caa:	de 01       	movw	r26, r28
    4cac:	ad 52       	subi	r26, 0x2D	; 45
    4cae:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb0:	fe 01       	movw	r30, r28
    4cb2:	e9 52       	subi	r30, 0x29	; 41
    4cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb6:	80 81       	ld	r24, Z
    4cb8:	91 81       	ldd	r25, Z+1	; 0x01
    4cba:	8d 93       	st	X+, r24
    4cbc:	9c 93       	st	X, r25
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	ed 52       	subi	r30, 0x2D	; 45
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	80 81       	ld	r24, Z
    4cc6:	91 81       	ldd	r25, Z+1	; 0x01
    4cc8:	01 97       	sbiw	r24, 0x01	; 1
    4cca:	f1 f7       	brne	.-4      	; 0x4cc8 <main+0x1fa4>
    4ccc:	fe 01       	movw	r30, r28
    4cce:	ed 52       	subi	r30, 0x2D	; 45
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	91 83       	std	Z+1, r25	; 0x01
    4cd4:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,8,Hamokshastanding);
    4cd6:	9e 01       	movw	r18, r28
    4cd8:	27 52       	subi	r18, 0x27	; 39
    4cda:	3e 4f       	sbci	r19, 0xFE	; 254
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	61 e0       	ldi	r22, 0x01	; 1
    4ce0:	48 e0       	ldi	r20, 0x08	; 8
    4ce2:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	e1 53       	subi	r30, 0x31	; 49
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	a8 e4       	ldi	r26, 0x48	; 72
    4cf2:	b3 e4       	ldi	r27, 0x43	; 67
    4cf4:	80 83       	st	Z, r24
    4cf6:	91 83       	std	Z+1, r25	; 0x01
    4cf8:	a2 83       	std	Z+2, r26	; 0x02
    4cfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cfc:	8e 01       	movw	r16, r28
    4cfe:	05 53       	subi	r16, 0x35	; 53
    4d00:	1f 4f       	sbci	r17, 0xFF	; 255
    4d02:	fe 01       	movw	r30, r28
    4d04:	e1 53       	subi	r30, 0x31	; 49
    4d06:	ff 4f       	sbci	r31, 0xFF	; 255
    4d08:	60 81       	ld	r22, Z
    4d0a:	71 81       	ldd	r23, Z+1	; 0x01
    4d0c:	82 81       	ldd	r24, Z+2	; 0x02
    4d0e:	93 81       	ldd	r25, Z+3	; 0x03
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	4a ef       	ldi	r20, 0xFA	; 250
    4d16:	54 e4       	ldi	r21, 0x44	; 68
    4d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	cb 01       	movw	r24, r22
    4d20:	f8 01       	movw	r30, r16
    4d22:	80 83       	st	Z, r24
    4d24:	91 83       	std	Z+1, r25	; 0x01
    4d26:	a2 83       	std	Z+2, r26	; 0x02
    4d28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	e5 53       	subi	r30, 0x35	; 53
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	60 81       	ld	r22, Z
    4d32:	71 81       	ldd	r23, Z+1	; 0x01
    4d34:	82 81       	ldd	r24, Z+2	; 0x02
    4d36:	93 81       	ldd	r25, Z+3	; 0x03
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	40 e8       	ldi	r20, 0x80	; 128
    4d3e:	5f e3       	ldi	r21, 0x3F	; 63
    4d40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d44:	88 23       	and	r24, r24
    4d46:	44 f4       	brge	.+16     	; 0x4d58 <main+0x2034>
		__ticks = 1;
    4d48:	fe 01       	movw	r30, r28
    4d4a:	e7 53       	subi	r30, 0x37	; 55
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	91 83       	std	Z+1, r25	; 0x01
    4d54:	80 83       	st	Z, r24
    4d56:	64 c0       	rjmp	.+200    	; 0x4e20 <main+0x20fc>
	else if (__tmp > 65535)
    4d58:	fe 01       	movw	r30, r28
    4d5a:	e5 53       	subi	r30, 0x35	; 53
    4d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5e:	60 81       	ld	r22, Z
    4d60:	71 81       	ldd	r23, Z+1	; 0x01
    4d62:	82 81       	ldd	r24, Z+2	; 0x02
    4d64:	93 81       	ldd	r25, Z+3	; 0x03
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	3f ef       	ldi	r19, 0xFF	; 255
    4d6a:	4f e7       	ldi	r20, 0x7F	; 127
    4d6c:	57 e4       	ldi	r21, 0x47	; 71
    4d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d72:	18 16       	cp	r1, r24
    4d74:	0c f0       	brlt	.+2      	; 0x4d78 <main+0x2054>
    4d76:	43 c0       	rjmp	.+134    	; 0x4dfe <main+0x20da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d78:	fe 01       	movw	r30, r28
    4d7a:	e1 53       	subi	r30, 0x31	; 49
    4d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7e:	60 81       	ld	r22, Z
    4d80:	71 81       	ldd	r23, Z+1	; 0x01
    4d82:	82 81       	ldd	r24, Z+2	; 0x02
    4d84:	93 81       	ldd	r25, Z+3	; 0x03
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	40 e2       	ldi	r20, 0x20	; 32
    4d8c:	51 e4       	ldi	r21, 0x41	; 65
    4d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d92:	dc 01       	movw	r26, r24
    4d94:	cb 01       	movw	r24, r22
    4d96:	8e 01       	movw	r16, r28
    4d98:	07 53       	subi	r16, 0x37	; 55
    4d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d9c:	bc 01       	movw	r22, r24
    4d9e:	cd 01       	movw	r24, r26
    4da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da4:	dc 01       	movw	r26, r24
    4da6:	cb 01       	movw	r24, r22
    4da8:	f8 01       	movw	r30, r16
    4daa:	91 83       	std	Z+1, r25	; 0x01
    4dac:	80 83       	st	Z, r24
    4dae:	1f c0       	rjmp	.+62     	; 0x4dee <main+0x20ca>
    4db0:	fe 01       	movw	r30, r28
    4db2:	e9 53       	subi	r30, 0x39	; 57
    4db4:	ff 4f       	sbci	r31, 0xFF	; 255
    4db6:	88 ec       	ldi	r24, 0xC8	; 200
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	91 83       	std	Z+1, r25	; 0x01
    4dbc:	80 83       	st	Z, r24
    4dbe:	fe 01       	movw	r30, r28
    4dc0:	e9 53       	subi	r30, 0x39	; 57
    4dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc4:	80 81       	ld	r24, Z
    4dc6:	91 81       	ldd	r25, Z+1	; 0x01
    4dc8:	01 97       	sbiw	r24, 0x01	; 1
    4dca:	f1 f7       	brne	.-4      	; 0x4dc8 <main+0x20a4>
    4dcc:	fe 01       	movw	r30, r28
    4dce:	e9 53       	subi	r30, 0x39	; 57
    4dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd2:	91 83       	std	Z+1, r25	; 0x01
    4dd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd6:	de 01       	movw	r26, r28
    4dd8:	a7 53       	subi	r26, 0x37	; 55
    4dda:	bf 4f       	sbci	r27, 0xFF	; 255
    4ddc:	fe 01       	movw	r30, r28
    4dde:	e7 53       	subi	r30, 0x37	; 55
    4de0:	ff 4f       	sbci	r31, 0xFF	; 255
    4de2:	80 81       	ld	r24, Z
    4de4:	91 81       	ldd	r25, Z+1	; 0x01
    4de6:	01 97       	sbiw	r24, 0x01	; 1
    4de8:	11 96       	adiw	r26, 0x01	; 1
    4dea:	9c 93       	st	X, r25
    4dec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dee:	fe 01       	movw	r30, r28
    4df0:	e7 53       	subi	r30, 0x37	; 55
    4df2:	ff 4f       	sbci	r31, 0xFF	; 255
    4df4:	80 81       	ld	r24, Z
    4df6:	91 81       	ldd	r25, Z+1	; 0x01
    4df8:	00 97       	sbiw	r24, 0x00	; 0
    4dfa:	d1 f6       	brne	.-76     	; 0x4db0 <main+0x208c>
    4dfc:	27 c0       	rjmp	.+78     	; 0x4e4c <main+0x2128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dfe:	8e 01       	movw	r16, r28
    4e00:	07 53       	subi	r16, 0x37	; 55
    4e02:	1f 4f       	sbci	r17, 0xFF	; 255
    4e04:	fe 01       	movw	r30, r28
    4e06:	e5 53       	subi	r30, 0x35	; 53
    4e08:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0a:	60 81       	ld	r22, Z
    4e0c:	71 81       	ldd	r23, Z+1	; 0x01
    4e0e:	82 81       	ldd	r24, Z+2	; 0x02
    4e10:	93 81       	ldd	r25, Z+3	; 0x03
    4e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e16:	dc 01       	movw	r26, r24
    4e18:	cb 01       	movw	r24, r22
    4e1a:	f8 01       	movw	r30, r16
    4e1c:	91 83       	std	Z+1, r25	; 0x01
    4e1e:	80 83       	st	Z, r24
    4e20:	de 01       	movw	r26, r28
    4e22:	ab 53       	subi	r26, 0x3B	; 59
    4e24:	bf 4f       	sbci	r27, 0xFF	; 255
    4e26:	fe 01       	movw	r30, r28
    4e28:	e7 53       	subi	r30, 0x37	; 55
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	80 81       	ld	r24, Z
    4e2e:	91 81       	ldd	r25, Z+1	; 0x01
    4e30:	8d 93       	st	X+, r24
    4e32:	9c 93       	st	X, r25
    4e34:	fe 01       	movw	r30, r28
    4e36:	eb 53       	subi	r30, 0x3B	; 59
    4e38:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3a:	80 81       	ld	r24, Z
    4e3c:	91 81       	ldd	r25, Z+1	; 0x01
    4e3e:	01 97       	sbiw	r24, 0x01	; 1
    4e40:	f1 f7       	brne	.-4      	; 0x4e3e <main+0x211a>
    4e42:	fe 01       	movw	r30, r28
    4e44:	eb 53       	subi	r30, 0x3B	; 59
    4e46:	ff 4f       	sbci	r31, 0xFF	; 255
    4e48:	91 83       	std	Z+1, r25	; 0x01
    4e4a:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    4e4c:	de 01       	movw	r26, r28
    4e4e:	ad 53       	subi	r26, 0x3D	; 61
    4e50:	be 4f       	sbci	r27, 0xFE	; 254
    4e52:	fe 01       	movw	r30, r28
    4e54:	eb 53       	subi	r30, 0x3B	; 59
    4e56:	fe 4f       	sbci	r31, 0xFE	; 254
    4e58:	80 81       	ld	r24, Z
    4e5a:	91 81       	ldd	r25, Z+1	; 0x01
    4e5c:	8a 56       	subi	r24, 0x6A	; 106
    4e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e60:	8d 93       	st	X+, r24
    4e62:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    4e64:	de 01       	movw	r26, r28
    4e66:	af 53       	subi	r26, 0x3F	; 63
    4e68:	be 4f       	sbci	r27, 0xFE	; 254
    4e6a:	fe 01       	movw	r30, r28
    4e6c:	eb 53       	subi	r30, 0x3B	; 59
    4e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e70:	80 81       	ld	r24, Z
    4e72:	91 81       	ldd	r25, Z+1	; 0x01
    4e74:	86 59       	subi	r24, 0x96	; 150
    4e76:	90 40       	sbci	r25, 0x00	; 0
    4e78:	11 96       	adiw	r26, 0x01	; 1
    4e7a:	9c 93       	st	X, r25
    4e7c:	8e 93       	st	-X, r24
    4e7e:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 2812) && (Local_u16AnalogValue <= 3124))
    4e82:	fe 01       	movw	r30, r28
    4e84:	eb 53       	subi	r30, 0x3B	; 59
    4e86:	fe 4f       	sbci	r31, 0xFE	; 254
    4e88:	80 81       	ld	r24, Z
    4e8a:	91 81       	ldd	r25, Z+1	; 0x01
    4e8c:	fa e0       	ldi	r31, 0x0A	; 10
    4e8e:	8d 3f       	cpi	r24, 0xFD	; 253
    4e90:	9f 07       	cpc	r25, r31
    4e92:	08 f4       	brcc	.+2      	; 0x4e96 <main+0x2172>
    4e94:	a3 c1       	rjmp	.+838    	; 0x51dc <main+0x24b8>
    4e96:	fe 01       	movw	r30, r28
    4e98:	eb 53       	subi	r30, 0x3B	; 59
    4e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e9c:	80 81       	ld	r24, Z
    4e9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ea0:	2c e0       	ldi	r18, 0x0C	; 12
    4ea2:	85 33       	cpi	r24, 0x35	; 53
    4ea4:	92 07       	cpc	r25, r18
    4ea6:	08 f0       	brcs	.+2      	; 0x4eaa <main+0x2186>
    4ea8:	99 c1       	rjmp	.+818    	; 0x51dc <main+0x24b8>
	  {
		  LCD_u8_GoTo_XY(0,0);
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	60 e0       	ldi	r22, 0x00	; 0
    4eae:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    4eb2:	80 e6       	ldi	r24, 0x60	; 96
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,9,HamokshaRuning);
    4eba:	9e 01       	movw	r18, r28
    4ebc:	2f 51       	subi	r18, 0x1F	; 31
    4ebe:	3e 4f       	sbci	r19, 0xFE	; 254
    4ec0:	81 e0       	ldi	r24, 0x01	; 1
    4ec2:	61 e0       	ldi	r22, 0x01	; 1
    4ec4:	49 e0       	ldi	r20, 0x09	; 9
    4ec6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    4eca:	fe 01       	movw	r30, r28
    4ecc:	ef 53       	subi	r30, 0x3F	; 63
    4ece:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	a8 e4       	ldi	r26, 0x48	; 72
    4ed6:	b3 e4       	ldi	r27, 0x43	; 67
    4ed8:	80 83       	st	Z, r24
    4eda:	91 83       	std	Z+1, r25	; 0x01
    4edc:	a2 83       	std	Z+2, r26	; 0x02
    4ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ee0:	8e 01       	movw	r16, r28
    4ee2:	03 54       	subi	r16, 0x43	; 67
    4ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ee6:	fe 01       	movw	r30, r28
    4ee8:	ef 53       	subi	r30, 0x3F	; 63
    4eea:	ff 4f       	sbci	r31, 0xFF	; 255
    4eec:	60 81       	ld	r22, Z
    4eee:	71 81       	ldd	r23, Z+1	; 0x01
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	4a ef       	ldi	r20, 0xFA	; 250
    4efa:	54 e4       	ldi	r21, 0x44	; 68
    4efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f00:	dc 01       	movw	r26, r24
    4f02:	cb 01       	movw	r24, r22
    4f04:	f8 01       	movw	r30, r16
    4f06:	80 83       	st	Z, r24
    4f08:	91 83       	std	Z+1, r25	; 0x01
    4f0a:	a2 83       	std	Z+2, r26	; 0x02
    4f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f0e:	fe 01       	movw	r30, r28
    4f10:	e3 54       	subi	r30, 0x43	; 67
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	60 81       	ld	r22, Z
    4f16:	71 81       	ldd	r23, Z+1	; 0x01
    4f18:	82 81       	ldd	r24, Z+2	; 0x02
    4f1a:	93 81       	ldd	r25, Z+3	; 0x03
    4f1c:	20 e0       	ldi	r18, 0x00	; 0
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	40 e8       	ldi	r20, 0x80	; 128
    4f22:	5f e3       	ldi	r21, 0x3F	; 63
    4f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f28:	88 23       	and	r24, r24
    4f2a:	44 f4       	brge	.+16     	; 0x4f3c <main+0x2218>
		__ticks = 1;
    4f2c:	fe 01       	movw	r30, r28
    4f2e:	e5 54       	subi	r30, 0x45	; 69
    4f30:	ff 4f       	sbci	r31, 0xFF	; 255
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	91 83       	std	Z+1, r25	; 0x01
    4f38:	80 83       	st	Z, r24
    4f3a:	64 c0       	rjmp	.+200    	; 0x5004 <main+0x22e0>
	else if (__tmp > 65535)
    4f3c:	fe 01       	movw	r30, r28
    4f3e:	e3 54       	subi	r30, 0x43	; 67
    4f40:	ff 4f       	sbci	r31, 0xFF	; 255
    4f42:	60 81       	ld	r22, Z
    4f44:	71 81       	ldd	r23, Z+1	; 0x01
    4f46:	82 81       	ldd	r24, Z+2	; 0x02
    4f48:	93 81       	ldd	r25, Z+3	; 0x03
    4f4a:	20 e0       	ldi	r18, 0x00	; 0
    4f4c:	3f ef       	ldi	r19, 0xFF	; 255
    4f4e:	4f e7       	ldi	r20, 0x7F	; 127
    4f50:	57 e4       	ldi	r21, 0x47	; 71
    4f52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f56:	18 16       	cp	r1, r24
    4f58:	0c f0       	brlt	.+2      	; 0x4f5c <main+0x2238>
    4f5a:	43 c0       	rjmp	.+134    	; 0x4fe2 <main+0x22be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	ef 53       	subi	r30, 0x3F	; 63
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	60 81       	ld	r22, Z
    4f64:	71 81       	ldd	r23, Z+1	; 0x01
    4f66:	82 81       	ldd	r24, Z+2	; 0x02
    4f68:	93 81       	ldd	r25, Z+3	; 0x03
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	40 e2       	ldi	r20, 0x20	; 32
    4f70:	51 e4       	ldi	r21, 0x41	; 65
    4f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	8e 01       	movw	r16, r28
    4f7c:	05 54       	subi	r16, 0x45	; 69
    4f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f80:	bc 01       	movw	r22, r24
    4f82:	cd 01       	movw	r24, r26
    4f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f88:	dc 01       	movw	r26, r24
    4f8a:	cb 01       	movw	r24, r22
    4f8c:	f8 01       	movw	r30, r16
    4f8e:	91 83       	std	Z+1, r25	; 0x01
    4f90:	80 83       	st	Z, r24
    4f92:	1f c0       	rjmp	.+62     	; 0x4fd2 <main+0x22ae>
    4f94:	fe 01       	movw	r30, r28
    4f96:	e7 54       	subi	r30, 0x47	; 71
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	88 ec       	ldi	r24, 0xC8	; 200
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	91 83       	std	Z+1, r25	; 0x01
    4fa0:	80 83       	st	Z, r24
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	e7 54       	subi	r30, 0x47	; 71
    4fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa8:	80 81       	ld	r24, Z
    4faa:	91 81       	ldd	r25, Z+1	; 0x01
    4fac:	01 97       	sbiw	r24, 0x01	; 1
    4fae:	f1 f7       	brne	.-4      	; 0x4fac <main+0x2288>
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e7 54       	subi	r30, 0x47	; 71
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	91 83       	std	Z+1, r25	; 0x01
    4fb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fba:	de 01       	movw	r26, r28
    4fbc:	a5 54       	subi	r26, 0x45	; 69
    4fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    4fc0:	fe 01       	movw	r30, r28
    4fc2:	e5 54       	subi	r30, 0x45	; 69
    4fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc6:	80 81       	ld	r24, Z
    4fc8:	91 81       	ldd	r25, Z+1	; 0x01
    4fca:	01 97       	sbiw	r24, 0x01	; 1
    4fcc:	11 96       	adiw	r26, 0x01	; 1
    4fce:	9c 93       	st	X, r25
    4fd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	e5 54       	subi	r30, 0x45	; 69
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	80 81       	ld	r24, Z
    4fda:	91 81       	ldd	r25, Z+1	; 0x01
    4fdc:	00 97       	sbiw	r24, 0x00	; 0
    4fde:	d1 f6       	brne	.-76     	; 0x4f94 <main+0x2270>
    4fe0:	27 c0       	rjmp	.+78     	; 0x5030 <main+0x230c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fe2:	8e 01       	movw	r16, r28
    4fe4:	05 54       	subi	r16, 0x45	; 69
    4fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe8:	fe 01       	movw	r30, r28
    4fea:	e3 54       	subi	r30, 0x43	; 67
    4fec:	ff 4f       	sbci	r31, 0xFF	; 255
    4fee:	60 81       	ld	r22, Z
    4ff0:	71 81       	ldd	r23, Z+1	; 0x01
    4ff2:	82 81       	ldd	r24, Z+2	; 0x02
    4ff4:	93 81       	ldd	r25, Z+3	; 0x03
    4ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ffa:	dc 01       	movw	r26, r24
    4ffc:	cb 01       	movw	r24, r22
    4ffe:	f8 01       	movw	r30, r16
    5000:	91 83       	std	Z+1, r25	; 0x01
    5002:	80 83       	st	Z, r24
    5004:	de 01       	movw	r26, r28
    5006:	a9 54       	subi	r26, 0x49	; 73
    5008:	bf 4f       	sbci	r27, 0xFF	; 255
    500a:	fe 01       	movw	r30, r28
    500c:	e5 54       	subi	r30, 0x45	; 69
    500e:	ff 4f       	sbci	r31, 0xFF	; 255
    5010:	80 81       	ld	r24, Z
    5012:	91 81       	ldd	r25, Z+1	; 0x01
    5014:	8d 93       	st	X+, r24
    5016:	9c 93       	st	X, r25
    5018:	fe 01       	movw	r30, r28
    501a:	e9 54       	subi	r30, 0x49	; 73
    501c:	ff 4f       	sbci	r31, 0xFF	; 255
    501e:	80 81       	ld	r24, Z
    5020:	91 81       	ldd	r25, Z+1	; 0x01
    5022:	01 97       	sbiw	r24, 0x01	; 1
    5024:	f1 f7       	brne	.-4      	; 0x5022 <main+0x22fe>
    5026:	fe 01       	movw	r30, r28
    5028:	e9 54       	subi	r30, 0x49	; 73
    502a:	ff 4f       	sbci	r31, 0xFF	; 255
    502c:	91 83       	std	Z+1, r25	; 0x01
    502e:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,9,Hamokshastanding);
    5030:	9e 01       	movw	r18, r28
    5032:	27 52       	subi	r18, 0x27	; 39
    5034:	3e 4f       	sbci	r19, 0xFE	; 254
    5036:	80 e0       	ldi	r24, 0x00	; 0
    5038:	61 e0       	ldi	r22, 0x01	; 1
    503a:	49 e0       	ldi	r20, 0x09	; 9
    503c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    5040:	fe 01       	movw	r30, r28
    5042:	ed 54       	subi	r30, 0x4D	; 77
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	80 e0       	ldi	r24, 0x00	; 0
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	a8 e4       	ldi	r26, 0x48	; 72
    504c:	b3 e4       	ldi	r27, 0x43	; 67
    504e:	80 83       	st	Z, r24
    5050:	91 83       	std	Z+1, r25	; 0x01
    5052:	a2 83       	std	Z+2, r26	; 0x02
    5054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5056:	8e 01       	movw	r16, r28
    5058:	01 55       	subi	r16, 0x51	; 81
    505a:	1f 4f       	sbci	r17, 0xFF	; 255
    505c:	fe 01       	movw	r30, r28
    505e:	ed 54       	subi	r30, 0x4D	; 77
    5060:	ff 4f       	sbci	r31, 0xFF	; 255
    5062:	60 81       	ld	r22, Z
    5064:	71 81       	ldd	r23, Z+1	; 0x01
    5066:	82 81       	ldd	r24, Z+2	; 0x02
    5068:	93 81       	ldd	r25, Z+3	; 0x03
    506a:	20 e0       	ldi	r18, 0x00	; 0
    506c:	30 e0       	ldi	r19, 0x00	; 0
    506e:	4a ef       	ldi	r20, 0xFA	; 250
    5070:	54 e4       	ldi	r21, 0x44	; 68
    5072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5076:	dc 01       	movw	r26, r24
    5078:	cb 01       	movw	r24, r22
    507a:	f8 01       	movw	r30, r16
    507c:	80 83       	st	Z, r24
    507e:	91 83       	std	Z+1, r25	; 0x01
    5080:	a2 83       	std	Z+2, r26	; 0x02
    5082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5084:	fe 01       	movw	r30, r28
    5086:	e1 55       	subi	r30, 0x51	; 81
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	60 81       	ld	r22, Z
    508c:	71 81       	ldd	r23, Z+1	; 0x01
    508e:	82 81       	ldd	r24, Z+2	; 0x02
    5090:	93 81       	ldd	r25, Z+3	; 0x03
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	40 e8       	ldi	r20, 0x80	; 128
    5098:	5f e3       	ldi	r21, 0x3F	; 63
    509a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    509e:	88 23       	and	r24, r24
    50a0:	44 f4       	brge	.+16     	; 0x50b2 <main+0x238e>
		__ticks = 1;
    50a2:	fe 01       	movw	r30, r28
    50a4:	e3 55       	subi	r30, 0x53	; 83
    50a6:	ff 4f       	sbci	r31, 0xFF	; 255
    50a8:	81 e0       	ldi	r24, 0x01	; 1
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	91 83       	std	Z+1, r25	; 0x01
    50ae:	80 83       	st	Z, r24
    50b0:	64 c0       	rjmp	.+200    	; 0x517a <main+0x2456>
	else if (__tmp > 65535)
    50b2:	fe 01       	movw	r30, r28
    50b4:	e1 55       	subi	r30, 0x51	; 81
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	60 81       	ld	r22, Z
    50ba:	71 81       	ldd	r23, Z+1	; 0x01
    50bc:	82 81       	ldd	r24, Z+2	; 0x02
    50be:	93 81       	ldd	r25, Z+3	; 0x03
    50c0:	20 e0       	ldi	r18, 0x00	; 0
    50c2:	3f ef       	ldi	r19, 0xFF	; 255
    50c4:	4f e7       	ldi	r20, 0x7F	; 127
    50c6:	57 e4       	ldi	r21, 0x47	; 71
    50c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50cc:	18 16       	cp	r1, r24
    50ce:	0c f0       	brlt	.+2      	; 0x50d2 <main+0x23ae>
    50d0:	43 c0       	rjmp	.+134    	; 0x5158 <main+0x2434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50d2:	fe 01       	movw	r30, r28
    50d4:	ed 54       	subi	r30, 0x4D	; 77
    50d6:	ff 4f       	sbci	r31, 0xFF	; 255
    50d8:	60 81       	ld	r22, Z
    50da:	71 81       	ldd	r23, Z+1	; 0x01
    50dc:	82 81       	ldd	r24, Z+2	; 0x02
    50de:	93 81       	ldd	r25, Z+3	; 0x03
    50e0:	20 e0       	ldi	r18, 0x00	; 0
    50e2:	30 e0       	ldi	r19, 0x00	; 0
    50e4:	40 e2       	ldi	r20, 0x20	; 32
    50e6:	51 e4       	ldi	r21, 0x41	; 65
    50e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ec:	dc 01       	movw	r26, r24
    50ee:	cb 01       	movw	r24, r22
    50f0:	8e 01       	movw	r16, r28
    50f2:	03 55       	subi	r16, 0x53	; 83
    50f4:	1f 4f       	sbci	r17, 0xFF	; 255
    50f6:	bc 01       	movw	r22, r24
    50f8:	cd 01       	movw	r24, r26
    50fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50fe:	dc 01       	movw	r26, r24
    5100:	cb 01       	movw	r24, r22
    5102:	f8 01       	movw	r30, r16
    5104:	91 83       	std	Z+1, r25	; 0x01
    5106:	80 83       	st	Z, r24
    5108:	1f c0       	rjmp	.+62     	; 0x5148 <main+0x2424>
    510a:	fe 01       	movw	r30, r28
    510c:	e5 55       	subi	r30, 0x55	; 85
    510e:	ff 4f       	sbci	r31, 0xFF	; 255
    5110:	88 ec       	ldi	r24, 0xC8	; 200
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	91 83       	std	Z+1, r25	; 0x01
    5116:	80 83       	st	Z, r24
    5118:	fe 01       	movw	r30, r28
    511a:	e5 55       	subi	r30, 0x55	; 85
    511c:	ff 4f       	sbci	r31, 0xFF	; 255
    511e:	80 81       	ld	r24, Z
    5120:	91 81       	ldd	r25, Z+1	; 0x01
    5122:	01 97       	sbiw	r24, 0x01	; 1
    5124:	f1 f7       	brne	.-4      	; 0x5122 <main+0x23fe>
    5126:	fe 01       	movw	r30, r28
    5128:	e5 55       	subi	r30, 0x55	; 85
    512a:	ff 4f       	sbci	r31, 0xFF	; 255
    512c:	91 83       	std	Z+1, r25	; 0x01
    512e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5130:	de 01       	movw	r26, r28
    5132:	a3 55       	subi	r26, 0x53	; 83
    5134:	bf 4f       	sbci	r27, 0xFF	; 255
    5136:	fe 01       	movw	r30, r28
    5138:	e3 55       	subi	r30, 0x53	; 83
    513a:	ff 4f       	sbci	r31, 0xFF	; 255
    513c:	80 81       	ld	r24, Z
    513e:	91 81       	ldd	r25, Z+1	; 0x01
    5140:	01 97       	sbiw	r24, 0x01	; 1
    5142:	11 96       	adiw	r26, 0x01	; 1
    5144:	9c 93       	st	X, r25
    5146:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5148:	fe 01       	movw	r30, r28
    514a:	e3 55       	subi	r30, 0x53	; 83
    514c:	ff 4f       	sbci	r31, 0xFF	; 255
    514e:	80 81       	ld	r24, Z
    5150:	91 81       	ldd	r25, Z+1	; 0x01
    5152:	00 97       	sbiw	r24, 0x00	; 0
    5154:	d1 f6       	brne	.-76     	; 0x510a <main+0x23e6>
    5156:	27 c0       	rjmp	.+78     	; 0x51a6 <main+0x2482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5158:	8e 01       	movw	r16, r28
    515a:	03 55       	subi	r16, 0x53	; 83
    515c:	1f 4f       	sbci	r17, 0xFF	; 255
    515e:	fe 01       	movw	r30, r28
    5160:	e1 55       	subi	r30, 0x51	; 81
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	60 81       	ld	r22, Z
    5166:	71 81       	ldd	r23, Z+1	; 0x01
    5168:	82 81       	ldd	r24, Z+2	; 0x02
    516a:	93 81       	ldd	r25, Z+3	; 0x03
    516c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5170:	dc 01       	movw	r26, r24
    5172:	cb 01       	movw	r24, r22
    5174:	f8 01       	movw	r30, r16
    5176:	91 83       	std	Z+1, r25	; 0x01
    5178:	80 83       	st	Z, r24
    517a:	de 01       	movw	r26, r28
    517c:	a7 55       	subi	r26, 0x57	; 87
    517e:	bf 4f       	sbci	r27, 0xFF	; 255
    5180:	fe 01       	movw	r30, r28
    5182:	e3 55       	subi	r30, 0x53	; 83
    5184:	ff 4f       	sbci	r31, 0xFF	; 255
    5186:	80 81       	ld	r24, Z
    5188:	91 81       	ldd	r25, Z+1	; 0x01
    518a:	8d 93       	st	X+, r24
    518c:	9c 93       	st	X, r25
    518e:	fe 01       	movw	r30, r28
    5190:	e7 55       	subi	r30, 0x57	; 87
    5192:	ff 4f       	sbci	r31, 0xFF	; 255
    5194:	80 81       	ld	r24, Z
    5196:	91 81       	ldd	r25, Z+1	; 0x01
    5198:	01 97       	sbiw	r24, 0x01	; 1
    519a:	f1 f7       	brne	.-4      	; 0x5198 <main+0x2474>
    519c:	fe 01       	movw	r30, r28
    519e:	e7 55       	subi	r30, 0x57	; 87
    51a0:	ff 4f       	sbci	r31, 0xFF	; 255
    51a2:	91 83       	std	Z+1, r25	; 0x01
    51a4:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    51a6:	de 01       	movw	r26, r28
    51a8:	ad 53       	subi	r26, 0x3D	; 61
    51aa:	be 4f       	sbci	r27, 0xFE	; 254
    51ac:	fe 01       	movw	r30, r28
    51ae:	eb 53       	subi	r30, 0x3B	; 59
    51b0:	fe 4f       	sbci	r31, 0xFE	; 254
    51b2:	80 81       	ld	r24, Z
    51b4:	91 81       	ldd	r25, Z+1	; 0x01
    51b6:	8a 56       	subi	r24, 0x6A	; 106
    51b8:	9f 4f       	sbci	r25, 0xFF	; 255
    51ba:	8d 93       	st	X+, r24
    51bc:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    51be:	de 01       	movw	r26, r28
    51c0:	af 53       	subi	r26, 0x3F	; 63
    51c2:	be 4f       	sbci	r27, 0xFE	; 254
    51c4:	fe 01       	movw	r30, r28
    51c6:	eb 53       	subi	r30, 0x3B	; 59
    51c8:	fe 4f       	sbci	r31, 0xFE	; 254
    51ca:	80 81       	ld	r24, Z
    51cc:	91 81       	ldd	r25, Z+1	; 0x01
    51ce:	86 59       	subi	r24, 0x96	; 150
    51d0:	90 40       	sbci	r25, 0x00	; 0
    51d2:	11 96       	adiw	r26, 0x01	; 1
    51d4:	9c 93       	st	X, r25
    51d6:	8e 93       	st	-X, r24
    51d8:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 3124) && (Local_u16AnalogValue <= 3436))
    51dc:	fe 01       	movw	r30, r28
    51de:	eb 53       	subi	r30, 0x3B	; 59
    51e0:	fe 4f       	sbci	r31, 0xFE	; 254
    51e2:	80 81       	ld	r24, Z
    51e4:	91 81       	ldd	r25, Z+1	; 0x01
    51e6:	fc e0       	ldi	r31, 0x0C	; 12
    51e8:	85 33       	cpi	r24, 0x35	; 53
    51ea:	9f 07       	cpc	r25, r31
    51ec:	08 f4       	brcc	.+2      	; 0x51f0 <main+0x24cc>
    51ee:	a3 c1       	rjmp	.+838    	; 0x5536 <main+0x2812>
    51f0:	fe 01       	movw	r30, r28
    51f2:	eb 53       	subi	r30, 0x3B	; 59
    51f4:	fe 4f       	sbci	r31, 0xFE	; 254
    51f6:	80 81       	ld	r24, Z
    51f8:	91 81       	ldd	r25, Z+1	; 0x01
    51fa:	2d e0       	ldi	r18, 0x0D	; 13
    51fc:	8d 36       	cpi	r24, 0x6D	; 109
    51fe:	92 07       	cpc	r25, r18
    5200:	08 f0       	brcs	.+2      	; 0x5204 <main+0x24e0>
    5202:	99 c1       	rjmp	.+818    	; 0x5536 <main+0x2812>
	  {
		  LCD_u8_GoTo_XY(0,0);
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	60 e0       	ldi	r22, 0x00	; 0
    5208:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    520c:	80 e6       	ldi	r24, 0x60	; 96
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,10,HamokshaRuning);
    5214:	9e 01       	movw	r18, r28
    5216:	2f 51       	subi	r18, 0x1F	; 31
    5218:	3e 4f       	sbci	r19, 0xFE	; 254
    521a:	81 e0       	ldi	r24, 0x01	; 1
    521c:	61 e0       	ldi	r22, 0x01	; 1
    521e:	4a e0       	ldi	r20, 0x0A	; 10
    5220:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    5224:	fe 01       	movw	r30, r28
    5226:	eb 55       	subi	r30, 0x5B	; 91
    5228:	ff 4f       	sbci	r31, 0xFF	; 255
    522a:	80 e0       	ldi	r24, 0x00	; 0
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	a8 e4       	ldi	r26, 0x48	; 72
    5230:	b3 e4       	ldi	r27, 0x43	; 67
    5232:	80 83       	st	Z, r24
    5234:	91 83       	std	Z+1, r25	; 0x01
    5236:	a2 83       	std	Z+2, r26	; 0x02
    5238:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    523a:	8e 01       	movw	r16, r28
    523c:	0f 55       	subi	r16, 0x5F	; 95
    523e:	1f 4f       	sbci	r17, 0xFF	; 255
    5240:	fe 01       	movw	r30, r28
    5242:	eb 55       	subi	r30, 0x5B	; 91
    5244:	ff 4f       	sbci	r31, 0xFF	; 255
    5246:	60 81       	ld	r22, Z
    5248:	71 81       	ldd	r23, Z+1	; 0x01
    524a:	82 81       	ldd	r24, Z+2	; 0x02
    524c:	93 81       	ldd	r25, Z+3	; 0x03
    524e:	20 e0       	ldi	r18, 0x00	; 0
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	4a ef       	ldi	r20, 0xFA	; 250
    5254:	54 e4       	ldi	r21, 0x44	; 68
    5256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525a:	dc 01       	movw	r26, r24
    525c:	cb 01       	movw	r24, r22
    525e:	f8 01       	movw	r30, r16
    5260:	80 83       	st	Z, r24
    5262:	91 83       	std	Z+1, r25	; 0x01
    5264:	a2 83       	std	Z+2, r26	; 0x02
    5266:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5268:	fe 01       	movw	r30, r28
    526a:	ef 55       	subi	r30, 0x5F	; 95
    526c:	ff 4f       	sbci	r31, 0xFF	; 255
    526e:	60 81       	ld	r22, Z
    5270:	71 81       	ldd	r23, Z+1	; 0x01
    5272:	82 81       	ldd	r24, Z+2	; 0x02
    5274:	93 81       	ldd	r25, Z+3	; 0x03
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	40 e8       	ldi	r20, 0x80	; 128
    527c:	5f e3       	ldi	r21, 0x3F	; 63
    527e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5282:	88 23       	and	r24, r24
    5284:	44 f4       	brge	.+16     	; 0x5296 <main+0x2572>
		__ticks = 1;
    5286:	fe 01       	movw	r30, r28
    5288:	e1 56       	subi	r30, 0x61	; 97
    528a:	ff 4f       	sbci	r31, 0xFF	; 255
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	90 e0       	ldi	r25, 0x00	; 0
    5290:	91 83       	std	Z+1, r25	; 0x01
    5292:	80 83       	st	Z, r24
    5294:	64 c0       	rjmp	.+200    	; 0x535e <main+0x263a>
	else if (__tmp > 65535)
    5296:	fe 01       	movw	r30, r28
    5298:	ef 55       	subi	r30, 0x5F	; 95
    529a:	ff 4f       	sbci	r31, 0xFF	; 255
    529c:	60 81       	ld	r22, Z
    529e:	71 81       	ldd	r23, Z+1	; 0x01
    52a0:	82 81       	ldd	r24, Z+2	; 0x02
    52a2:	93 81       	ldd	r25, Z+3	; 0x03
    52a4:	20 e0       	ldi	r18, 0x00	; 0
    52a6:	3f ef       	ldi	r19, 0xFF	; 255
    52a8:	4f e7       	ldi	r20, 0x7F	; 127
    52aa:	57 e4       	ldi	r21, 0x47	; 71
    52ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52b0:	18 16       	cp	r1, r24
    52b2:	0c f0       	brlt	.+2      	; 0x52b6 <main+0x2592>
    52b4:	43 c0       	rjmp	.+134    	; 0x533c <main+0x2618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52b6:	fe 01       	movw	r30, r28
    52b8:	eb 55       	subi	r30, 0x5B	; 91
    52ba:	ff 4f       	sbci	r31, 0xFF	; 255
    52bc:	60 81       	ld	r22, Z
    52be:	71 81       	ldd	r23, Z+1	; 0x01
    52c0:	82 81       	ldd	r24, Z+2	; 0x02
    52c2:	93 81       	ldd	r25, Z+3	; 0x03
    52c4:	20 e0       	ldi	r18, 0x00	; 0
    52c6:	30 e0       	ldi	r19, 0x00	; 0
    52c8:	40 e2       	ldi	r20, 0x20	; 32
    52ca:	51 e4       	ldi	r21, 0x41	; 65
    52cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52d0:	dc 01       	movw	r26, r24
    52d2:	cb 01       	movw	r24, r22
    52d4:	8e 01       	movw	r16, r28
    52d6:	01 56       	subi	r16, 0x61	; 97
    52d8:	1f 4f       	sbci	r17, 0xFF	; 255
    52da:	bc 01       	movw	r22, r24
    52dc:	cd 01       	movw	r24, r26
    52de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e2:	dc 01       	movw	r26, r24
    52e4:	cb 01       	movw	r24, r22
    52e6:	f8 01       	movw	r30, r16
    52e8:	91 83       	std	Z+1, r25	; 0x01
    52ea:	80 83       	st	Z, r24
    52ec:	1f c0       	rjmp	.+62     	; 0x532c <main+0x2608>
    52ee:	fe 01       	movw	r30, r28
    52f0:	e3 56       	subi	r30, 0x63	; 99
    52f2:	ff 4f       	sbci	r31, 0xFF	; 255
    52f4:	88 ec       	ldi	r24, 0xC8	; 200
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	91 83       	std	Z+1, r25	; 0x01
    52fa:	80 83       	st	Z, r24
    52fc:	fe 01       	movw	r30, r28
    52fe:	e3 56       	subi	r30, 0x63	; 99
    5300:	ff 4f       	sbci	r31, 0xFF	; 255
    5302:	80 81       	ld	r24, Z
    5304:	91 81       	ldd	r25, Z+1	; 0x01
    5306:	01 97       	sbiw	r24, 0x01	; 1
    5308:	f1 f7       	brne	.-4      	; 0x5306 <main+0x25e2>
    530a:	fe 01       	movw	r30, r28
    530c:	e3 56       	subi	r30, 0x63	; 99
    530e:	ff 4f       	sbci	r31, 0xFF	; 255
    5310:	91 83       	std	Z+1, r25	; 0x01
    5312:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5314:	de 01       	movw	r26, r28
    5316:	a1 56       	subi	r26, 0x61	; 97
    5318:	bf 4f       	sbci	r27, 0xFF	; 255
    531a:	fe 01       	movw	r30, r28
    531c:	e1 56       	subi	r30, 0x61	; 97
    531e:	ff 4f       	sbci	r31, 0xFF	; 255
    5320:	80 81       	ld	r24, Z
    5322:	91 81       	ldd	r25, Z+1	; 0x01
    5324:	01 97       	sbiw	r24, 0x01	; 1
    5326:	11 96       	adiw	r26, 0x01	; 1
    5328:	9c 93       	st	X, r25
    532a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    532c:	fe 01       	movw	r30, r28
    532e:	e1 56       	subi	r30, 0x61	; 97
    5330:	ff 4f       	sbci	r31, 0xFF	; 255
    5332:	80 81       	ld	r24, Z
    5334:	91 81       	ldd	r25, Z+1	; 0x01
    5336:	00 97       	sbiw	r24, 0x00	; 0
    5338:	d1 f6       	brne	.-76     	; 0x52ee <main+0x25ca>
    533a:	27 c0       	rjmp	.+78     	; 0x538a <main+0x2666>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    533c:	8e 01       	movw	r16, r28
    533e:	01 56       	subi	r16, 0x61	; 97
    5340:	1f 4f       	sbci	r17, 0xFF	; 255
    5342:	fe 01       	movw	r30, r28
    5344:	ef 55       	subi	r30, 0x5F	; 95
    5346:	ff 4f       	sbci	r31, 0xFF	; 255
    5348:	60 81       	ld	r22, Z
    534a:	71 81       	ldd	r23, Z+1	; 0x01
    534c:	82 81       	ldd	r24, Z+2	; 0x02
    534e:	93 81       	ldd	r25, Z+3	; 0x03
    5350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5354:	dc 01       	movw	r26, r24
    5356:	cb 01       	movw	r24, r22
    5358:	f8 01       	movw	r30, r16
    535a:	91 83       	std	Z+1, r25	; 0x01
    535c:	80 83       	st	Z, r24
    535e:	de 01       	movw	r26, r28
    5360:	a5 56       	subi	r26, 0x65	; 101
    5362:	bf 4f       	sbci	r27, 0xFF	; 255
    5364:	fe 01       	movw	r30, r28
    5366:	e1 56       	subi	r30, 0x61	; 97
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	80 81       	ld	r24, Z
    536c:	91 81       	ldd	r25, Z+1	; 0x01
    536e:	8d 93       	st	X+, r24
    5370:	9c 93       	st	X, r25
    5372:	fe 01       	movw	r30, r28
    5374:	e5 56       	subi	r30, 0x65	; 101
    5376:	ff 4f       	sbci	r31, 0xFF	; 255
    5378:	80 81       	ld	r24, Z
    537a:	91 81       	ldd	r25, Z+1	; 0x01
    537c:	01 97       	sbiw	r24, 0x01	; 1
    537e:	f1 f7       	brne	.-4      	; 0x537c <main+0x2658>
    5380:	fe 01       	movw	r30, r28
    5382:	e5 56       	subi	r30, 0x65	; 101
    5384:	ff 4f       	sbci	r31, 0xFF	; 255
    5386:	91 83       	std	Z+1, r25	; 0x01
    5388:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,10,Hamokshastanding);
    538a:	9e 01       	movw	r18, r28
    538c:	27 52       	subi	r18, 0x27	; 39
    538e:	3e 4f       	sbci	r19, 0xFE	; 254
    5390:	80 e0       	ldi	r24, 0x00	; 0
    5392:	61 e0       	ldi	r22, 0x01	; 1
    5394:	4a e0       	ldi	r20, 0x0A	; 10
    5396:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    539a:	fe 01       	movw	r30, r28
    539c:	e9 56       	subi	r30, 0x69	; 105
    539e:	ff 4f       	sbci	r31, 0xFF	; 255
    53a0:	80 e0       	ldi	r24, 0x00	; 0
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	a8 e4       	ldi	r26, 0x48	; 72
    53a6:	b3 e4       	ldi	r27, 0x43	; 67
    53a8:	80 83       	st	Z, r24
    53aa:	91 83       	std	Z+1, r25	; 0x01
    53ac:	a2 83       	std	Z+2, r26	; 0x02
    53ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b0:	8e 01       	movw	r16, r28
    53b2:	0d 56       	subi	r16, 0x6D	; 109
    53b4:	1f 4f       	sbci	r17, 0xFF	; 255
    53b6:	fe 01       	movw	r30, r28
    53b8:	e9 56       	subi	r30, 0x69	; 105
    53ba:	ff 4f       	sbci	r31, 0xFF	; 255
    53bc:	60 81       	ld	r22, Z
    53be:	71 81       	ldd	r23, Z+1	; 0x01
    53c0:	82 81       	ldd	r24, Z+2	; 0x02
    53c2:	93 81       	ldd	r25, Z+3	; 0x03
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	4a ef       	ldi	r20, 0xFA	; 250
    53ca:	54 e4       	ldi	r21, 0x44	; 68
    53cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d0:	dc 01       	movw	r26, r24
    53d2:	cb 01       	movw	r24, r22
    53d4:	f8 01       	movw	r30, r16
    53d6:	80 83       	st	Z, r24
    53d8:	91 83       	std	Z+1, r25	; 0x01
    53da:	a2 83       	std	Z+2, r26	; 0x02
    53dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53de:	fe 01       	movw	r30, r28
    53e0:	ed 56       	subi	r30, 0x6D	; 109
    53e2:	ff 4f       	sbci	r31, 0xFF	; 255
    53e4:	60 81       	ld	r22, Z
    53e6:	71 81       	ldd	r23, Z+1	; 0x01
    53e8:	82 81       	ldd	r24, Z+2	; 0x02
    53ea:	93 81       	ldd	r25, Z+3	; 0x03
    53ec:	20 e0       	ldi	r18, 0x00	; 0
    53ee:	30 e0       	ldi	r19, 0x00	; 0
    53f0:	40 e8       	ldi	r20, 0x80	; 128
    53f2:	5f e3       	ldi	r21, 0x3F	; 63
    53f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53f8:	88 23       	and	r24, r24
    53fa:	44 f4       	brge	.+16     	; 0x540c <main+0x26e8>
		__ticks = 1;
    53fc:	fe 01       	movw	r30, r28
    53fe:	ef 56       	subi	r30, 0x6F	; 111
    5400:	ff 4f       	sbci	r31, 0xFF	; 255
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	91 83       	std	Z+1, r25	; 0x01
    5408:	80 83       	st	Z, r24
    540a:	64 c0       	rjmp	.+200    	; 0x54d4 <main+0x27b0>
	else if (__tmp > 65535)
    540c:	fe 01       	movw	r30, r28
    540e:	ed 56       	subi	r30, 0x6D	; 109
    5410:	ff 4f       	sbci	r31, 0xFF	; 255
    5412:	60 81       	ld	r22, Z
    5414:	71 81       	ldd	r23, Z+1	; 0x01
    5416:	82 81       	ldd	r24, Z+2	; 0x02
    5418:	93 81       	ldd	r25, Z+3	; 0x03
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	3f ef       	ldi	r19, 0xFF	; 255
    541e:	4f e7       	ldi	r20, 0x7F	; 127
    5420:	57 e4       	ldi	r21, 0x47	; 71
    5422:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5426:	18 16       	cp	r1, r24
    5428:	0c f0       	brlt	.+2      	; 0x542c <main+0x2708>
    542a:	43 c0       	rjmp	.+134    	; 0x54b2 <main+0x278e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    542c:	fe 01       	movw	r30, r28
    542e:	e9 56       	subi	r30, 0x69	; 105
    5430:	ff 4f       	sbci	r31, 0xFF	; 255
    5432:	60 81       	ld	r22, Z
    5434:	71 81       	ldd	r23, Z+1	; 0x01
    5436:	82 81       	ldd	r24, Z+2	; 0x02
    5438:	93 81       	ldd	r25, Z+3	; 0x03
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	40 e2       	ldi	r20, 0x20	; 32
    5440:	51 e4       	ldi	r21, 0x41	; 65
    5442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5446:	dc 01       	movw	r26, r24
    5448:	cb 01       	movw	r24, r22
    544a:	8e 01       	movw	r16, r28
    544c:	0f 56       	subi	r16, 0x6F	; 111
    544e:	1f 4f       	sbci	r17, 0xFF	; 255
    5450:	bc 01       	movw	r22, r24
    5452:	cd 01       	movw	r24, r26
    5454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5458:	dc 01       	movw	r26, r24
    545a:	cb 01       	movw	r24, r22
    545c:	f8 01       	movw	r30, r16
    545e:	91 83       	std	Z+1, r25	; 0x01
    5460:	80 83       	st	Z, r24
    5462:	1f c0       	rjmp	.+62     	; 0x54a2 <main+0x277e>
    5464:	fe 01       	movw	r30, r28
    5466:	e1 57       	subi	r30, 0x71	; 113
    5468:	ff 4f       	sbci	r31, 0xFF	; 255
    546a:	88 ec       	ldi	r24, 0xC8	; 200
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	91 83       	std	Z+1, r25	; 0x01
    5470:	80 83       	st	Z, r24
    5472:	fe 01       	movw	r30, r28
    5474:	e1 57       	subi	r30, 0x71	; 113
    5476:	ff 4f       	sbci	r31, 0xFF	; 255
    5478:	80 81       	ld	r24, Z
    547a:	91 81       	ldd	r25, Z+1	; 0x01
    547c:	01 97       	sbiw	r24, 0x01	; 1
    547e:	f1 f7       	brne	.-4      	; 0x547c <main+0x2758>
    5480:	fe 01       	movw	r30, r28
    5482:	e1 57       	subi	r30, 0x71	; 113
    5484:	ff 4f       	sbci	r31, 0xFF	; 255
    5486:	91 83       	std	Z+1, r25	; 0x01
    5488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    548a:	de 01       	movw	r26, r28
    548c:	af 56       	subi	r26, 0x6F	; 111
    548e:	bf 4f       	sbci	r27, 0xFF	; 255
    5490:	fe 01       	movw	r30, r28
    5492:	ef 56       	subi	r30, 0x6F	; 111
    5494:	ff 4f       	sbci	r31, 0xFF	; 255
    5496:	80 81       	ld	r24, Z
    5498:	91 81       	ldd	r25, Z+1	; 0x01
    549a:	01 97       	sbiw	r24, 0x01	; 1
    549c:	11 96       	adiw	r26, 0x01	; 1
    549e:	9c 93       	st	X, r25
    54a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54a2:	fe 01       	movw	r30, r28
    54a4:	ef 56       	subi	r30, 0x6F	; 111
    54a6:	ff 4f       	sbci	r31, 0xFF	; 255
    54a8:	80 81       	ld	r24, Z
    54aa:	91 81       	ldd	r25, Z+1	; 0x01
    54ac:	00 97       	sbiw	r24, 0x00	; 0
    54ae:	d1 f6       	brne	.-76     	; 0x5464 <main+0x2740>
    54b0:	27 c0       	rjmp	.+78     	; 0x5500 <main+0x27dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54b2:	8e 01       	movw	r16, r28
    54b4:	0f 56       	subi	r16, 0x6F	; 111
    54b6:	1f 4f       	sbci	r17, 0xFF	; 255
    54b8:	fe 01       	movw	r30, r28
    54ba:	ed 56       	subi	r30, 0x6D	; 109
    54bc:	ff 4f       	sbci	r31, 0xFF	; 255
    54be:	60 81       	ld	r22, Z
    54c0:	71 81       	ldd	r23, Z+1	; 0x01
    54c2:	82 81       	ldd	r24, Z+2	; 0x02
    54c4:	93 81       	ldd	r25, Z+3	; 0x03
    54c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ca:	dc 01       	movw	r26, r24
    54cc:	cb 01       	movw	r24, r22
    54ce:	f8 01       	movw	r30, r16
    54d0:	91 83       	std	Z+1, r25	; 0x01
    54d2:	80 83       	st	Z, r24
    54d4:	de 01       	movw	r26, r28
    54d6:	a3 57       	subi	r26, 0x73	; 115
    54d8:	bf 4f       	sbci	r27, 0xFF	; 255
    54da:	fe 01       	movw	r30, r28
    54dc:	ef 56       	subi	r30, 0x6F	; 111
    54de:	ff 4f       	sbci	r31, 0xFF	; 255
    54e0:	80 81       	ld	r24, Z
    54e2:	91 81       	ldd	r25, Z+1	; 0x01
    54e4:	8d 93       	st	X+, r24
    54e6:	9c 93       	st	X, r25
    54e8:	fe 01       	movw	r30, r28
    54ea:	e3 57       	subi	r30, 0x73	; 115
    54ec:	ff 4f       	sbci	r31, 0xFF	; 255
    54ee:	80 81       	ld	r24, Z
    54f0:	91 81       	ldd	r25, Z+1	; 0x01
    54f2:	01 97       	sbiw	r24, 0x01	; 1
    54f4:	f1 f7       	brne	.-4      	; 0x54f2 <main+0x27ce>
    54f6:	fe 01       	movw	r30, r28
    54f8:	e3 57       	subi	r30, 0x73	; 115
    54fa:	ff 4f       	sbci	r31, 0xFF	; 255
    54fc:	91 83       	std	Z+1, r25	; 0x01
    54fe:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    5500:	de 01       	movw	r26, r28
    5502:	ad 53       	subi	r26, 0x3D	; 61
    5504:	be 4f       	sbci	r27, 0xFE	; 254
    5506:	fe 01       	movw	r30, r28
    5508:	eb 53       	subi	r30, 0x3B	; 59
    550a:	fe 4f       	sbci	r31, 0xFE	; 254
    550c:	80 81       	ld	r24, Z
    550e:	91 81       	ldd	r25, Z+1	; 0x01
    5510:	8a 56       	subi	r24, 0x6A	; 106
    5512:	9f 4f       	sbci	r25, 0xFF	; 255
    5514:	8d 93       	st	X+, r24
    5516:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    5518:	de 01       	movw	r26, r28
    551a:	af 53       	subi	r26, 0x3F	; 63
    551c:	be 4f       	sbci	r27, 0xFE	; 254
    551e:	fe 01       	movw	r30, r28
    5520:	eb 53       	subi	r30, 0x3B	; 59
    5522:	fe 4f       	sbci	r31, 0xFE	; 254
    5524:	80 81       	ld	r24, Z
    5526:	91 81       	ldd	r25, Z+1	; 0x01
    5528:	86 59       	subi	r24, 0x96	; 150
    552a:	90 40       	sbci	r25, 0x00	; 0
    552c:	11 96       	adiw	r26, 0x01	; 1
    552e:	9c 93       	st	X, r25
    5530:	8e 93       	st	-X, r24
    5532:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 3436) && (Local_u16AnalogValue <= 3748))
    5536:	fe 01       	movw	r30, r28
    5538:	eb 53       	subi	r30, 0x3B	; 59
    553a:	fe 4f       	sbci	r31, 0xFE	; 254
    553c:	80 81       	ld	r24, Z
    553e:	91 81       	ldd	r25, Z+1	; 0x01
    5540:	fd e0       	ldi	r31, 0x0D	; 13
    5542:	8d 36       	cpi	r24, 0x6D	; 109
    5544:	9f 07       	cpc	r25, r31
    5546:	08 f4       	brcc	.+2      	; 0x554a <main+0x2826>
    5548:	a3 c1       	rjmp	.+838    	; 0x5890 <main+0x2b6c>
    554a:	fe 01       	movw	r30, r28
    554c:	eb 53       	subi	r30, 0x3B	; 59
    554e:	fe 4f       	sbci	r31, 0xFE	; 254
    5550:	80 81       	ld	r24, Z
    5552:	91 81       	ldd	r25, Z+1	; 0x01
    5554:	2e e0       	ldi	r18, 0x0E	; 14
    5556:	85 3a       	cpi	r24, 0xA5	; 165
    5558:	92 07       	cpc	r25, r18
    555a:	08 f0       	brcs	.+2      	; 0x555e <main+0x283a>
    555c:	99 c1       	rjmp	.+818    	; 0x5890 <main+0x2b6c>
	  {
		  LCD_u8_GoTo_XY(0,0);
    555e:	80 e0       	ldi	r24, 0x00	; 0
    5560:	60 e0       	ldi	r22, 0x00	; 0
    5562:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    5566:	80 e6       	ldi	r24, 0x60	; 96
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,11,HamokshaRuning);
    556e:	9e 01       	movw	r18, r28
    5570:	2f 51       	subi	r18, 0x1F	; 31
    5572:	3e 4f       	sbci	r19, 0xFE	; 254
    5574:	81 e0       	ldi	r24, 0x01	; 1
    5576:	61 e0       	ldi	r22, 0x01	; 1
    5578:	4b e0       	ldi	r20, 0x0B	; 11
    557a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    557e:	fe 01       	movw	r30, r28
    5580:	e7 57       	subi	r30, 0x77	; 119
    5582:	ff 4f       	sbci	r31, 0xFF	; 255
    5584:	80 e0       	ldi	r24, 0x00	; 0
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	a8 e4       	ldi	r26, 0x48	; 72
    558a:	b3 e4       	ldi	r27, 0x43	; 67
    558c:	80 83       	st	Z, r24
    558e:	91 83       	std	Z+1, r25	; 0x01
    5590:	a2 83       	std	Z+2, r26	; 0x02
    5592:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5594:	8e 01       	movw	r16, r28
    5596:	0b 57       	subi	r16, 0x7B	; 123
    5598:	1f 4f       	sbci	r17, 0xFF	; 255
    559a:	fe 01       	movw	r30, r28
    559c:	e7 57       	subi	r30, 0x77	; 119
    559e:	ff 4f       	sbci	r31, 0xFF	; 255
    55a0:	60 81       	ld	r22, Z
    55a2:	71 81       	ldd	r23, Z+1	; 0x01
    55a4:	82 81       	ldd	r24, Z+2	; 0x02
    55a6:	93 81       	ldd	r25, Z+3	; 0x03
    55a8:	20 e0       	ldi	r18, 0x00	; 0
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	4a ef       	ldi	r20, 0xFA	; 250
    55ae:	54 e4       	ldi	r21, 0x44	; 68
    55b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55b4:	dc 01       	movw	r26, r24
    55b6:	cb 01       	movw	r24, r22
    55b8:	f8 01       	movw	r30, r16
    55ba:	80 83       	st	Z, r24
    55bc:	91 83       	std	Z+1, r25	; 0x01
    55be:	a2 83       	std	Z+2, r26	; 0x02
    55c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55c2:	fe 01       	movw	r30, r28
    55c4:	eb 57       	subi	r30, 0x7B	; 123
    55c6:	ff 4f       	sbci	r31, 0xFF	; 255
    55c8:	60 81       	ld	r22, Z
    55ca:	71 81       	ldd	r23, Z+1	; 0x01
    55cc:	82 81       	ldd	r24, Z+2	; 0x02
    55ce:	93 81       	ldd	r25, Z+3	; 0x03
    55d0:	20 e0       	ldi	r18, 0x00	; 0
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	40 e8       	ldi	r20, 0x80	; 128
    55d6:	5f e3       	ldi	r21, 0x3F	; 63
    55d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55dc:	88 23       	and	r24, r24
    55de:	44 f4       	brge	.+16     	; 0x55f0 <main+0x28cc>
		__ticks = 1;
    55e0:	fe 01       	movw	r30, r28
    55e2:	ed 57       	subi	r30, 0x7D	; 125
    55e4:	ff 4f       	sbci	r31, 0xFF	; 255
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	80 83       	st	Z, r24
    55ee:	64 c0       	rjmp	.+200    	; 0x56b8 <main+0x2994>
	else if (__tmp > 65535)
    55f0:	fe 01       	movw	r30, r28
    55f2:	eb 57       	subi	r30, 0x7B	; 123
    55f4:	ff 4f       	sbci	r31, 0xFF	; 255
    55f6:	60 81       	ld	r22, Z
    55f8:	71 81       	ldd	r23, Z+1	; 0x01
    55fa:	82 81       	ldd	r24, Z+2	; 0x02
    55fc:	93 81       	ldd	r25, Z+3	; 0x03
    55fe:	20 e0       	ldi	r18, 0x00	; 0
    5600:	3f ef       	ldi	r19, 0xFF	; 255
    5602:	4f e7       	ldi	r20, 0x7F	; 127
    5604:	57 e4       	ldi	r21, 0x47	; 71
    5606:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    560a:	18 16       	cp	r1, r24
    560c:	0c f0       	brlt	.+2      	; 0x5610 <main+0x28ec>
    560e:	43 c0       	rjmp	.+134    	; 0x5696 <main+0x2972>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5610:	fe 01       	movw	r30, r28
    5612:	e7 57       	subi	r30, 0x77	; 119
    5614:	ff 4f       	sbci	r31, 0xFF	; 255
    5616:	60 81       	ld	r22, Z
    5618:	71 81       	ldd	r23, Z+1	; 0x01
    561a:	82 81       	ldd	r24, Z+2	; 0x02
    561c:	93 81       	ldd	r25, Z+3	; 0x03
    561e:	20 e0       	ldi	r18, 0x00	; 0
    5620:	30 e0       	ldi	r19, 0x00	; 0
    5622:	40 e2       	ldi	r20, 0x20	; 32
    5624:	51 e4       	ldi	r21, 0x41	; 65
    5626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    562a:	dc 01       	movw	r26, r24
    562c:	cb 01       	movw	r24, r22
    562e:	8e 01       	movw	r16, r28
    5630:	0d 57       	subi	r16, 0x7D	; 125
    5632:	1f 4f       	sbci	r17, 0xFF	; 255
    5634:	bc 01       	movw	r22, r24
    5636:	cd 01       	movw	r24, r26
    5638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    563c:	dc 01       	movw	r26, r24
    563e:	cb 01       	movw	r24, r22
    5640:	f8 01       	movw	r30, r16
    5642:	91 83       	std	Z+1, r25	; 0x01
    5644:	80 83       	st	Z, r24
    5646:	1f c0       	rjmp	.+62     	; 0x5686 <main+0x2962>
    5648:	fe 01       	movw	r30, r28
    564a:	ef 57       	subi	r30, 0x7F	; 127
    564c:	ff 4f       	sbci	r31, 0xFF	; 255
    564e:	88 ec       	ldi	r24, 0xC8	; 200
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	91 83       	std	Z+1, r25	; 0x01
    5654:	80 83       	st	Z, r24
    5656:	fe 01       	movw	r30, r28
    5658:	ef 57       	subi	r30, 0x7F	; 127
    565a:	ff 4f       	sbci	r31, 0xFF	; 255
    565c:	80 81       	ld	r24, Z
    565e:	91 81       	ldd	r25, Z+1	; 0x01
    5660:	01 97       	sbiw	r24, 0x01	; 1
    5662:	f1 f7       	brne	.-4      	; 0x5660 <main+0x293c>
    5664:	fe 01       	movw	r30, r28
    5666:	ef 57       	subi	r30, 0x7F	; 127
    5668:	ff 4f       	sbci	r31, 0xFF	; 255
    566a:	91 83       	std	Z+1, r25	; 0x01
    566c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    566e:	de 01       	movw	r26, r28
    5670:	ad 57       	subi	r26, 0x7D	; 125
    5672:	bf 4f       	sbci	r27, 0xFF	; 255
    5674:	fe 01       	movw	r30, r28
    5676:	ed 57       	subi	r30, 0x7D	; 125
    5678:	ff 4f       	sbci	r31, 0xFF	; 255
    567a:	80 81       	ld	r24, Z
    567c:	91 81       	ldd	r25, Z+1	; 0x01
    567e:	01 97       	sbiw	r24, 0x01	; 1
    5680:	11 96       	adiw	r26, 0x01	; 1
    5682:	9c 93       	st	X, r25
    5684:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5686:	fe 01       	movw	r30, r28
    5688:	ed 57       	subi	r30, 0x7D	; 125
    568a:	ff 4f       	sbci	r31, 0xFF	; 255
    568c:	80 81       	ld	r24, Z
    568e:	91 81       	ldd	r25, Z+1	; 0x01
    5690:	00 97       	sbiw	r24, 0x00	; 0
    5692:	d1 f6       	brne	.-76     	; 0x5648 <main+0x2924>
    5694:	27 c0       	rjmp	.+78     	; 0x56e4 <main+0x29c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5696:	8e 01       	movw	r16, r28
    5698:	0d 57       	subi	r16, 0x7D	; 125
    569a:	1f 4f       	sbci	r17, 0xFF	; 255
    569c:	fe 01       	movw	r30, r28
    569e:	eb 57       	subi	r30, 0x7B	; 123
    56a0:	ff 4f       	sbci	r31, 0xFF	; 255
    56a2:	60 81       	ld	r22, Z
    56a4:	71 81       	ldd	r23, Z+1	; 0x01
    56a6:	82 81       	ldd	r24, Z+2	; 0x02
    56a8:	93 81       	ldd	r25, Z+3	; 0x03
    56aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	f8 01       	movw	r30, r16
    56b4:	91 83       	std	Z+1, r25	; 0x01
    56b6:	80 83       	st	Z, r24
    56b8:	de 01       	movw	r26, r28
    56ba:	a1 58       	subi	r26, 0x81	; 129
    56bc:	bf 4f       	sbci	r27, 0xFF	; 255
    56be:	fe 01       	movw	r30, r28
    56c0:	ed 57       	subi	r30, 0x7D	; 125
    56c2:	ff 4f       	sbci	r31, 0xFF	; 255
    56c4:	80 81       	ld	r24, Z
    56c6:	91 81       	ldd	r25, Z+1	; 0x01
    56c8:	8d 93       	st	X+, r24
    56ca:	9c 93       	st	X, r25
    56cc:	fe 01       	movw	r30, r28
    56ce:	e1 58       	subi	r30, 0x81	; 129
    56d0:	ff 4f       	sbci	r31, 0xFF	; 255
    56d2:	80 81       	ld	r24, Z
    56d4:	91 81       	ldd	r25, Z+1	; 0x01
    56d6:	01 97       	sbiw	r24, 0x01	; 1
    56d8:	f1 f7       	brne	.-4      	; 0x56d6 <main+0x29b2>
    56da:	fe 01       	movw	r30, r28
    56dc:	e1 58       	subi	r30, 0x81	; 129
    56de:	ff 4f       	sbci	r31, 0xFF	; 255
    56e0:	91 83       	std	Z+1, r25	; 0x01
    56e2:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,11,Hamokshastanding);
    56e4:	9e 01       	movw	r18, r28
    56e6:	27 52       	subi	r18, 0x27	; 39
    56e8:	3e 4f       	sbci	r19, 0xFE	; 254
    56ea:	80 e0       	ldi	r24, 0x00	; 0
    56ec:	61 e0       	ldi	r22, 0x01	; 1
    56ee:	4b e0       	ldi	r20, 0x0B	; 11
    56f0:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    56f4:	fe 01       	movw	r30, r28
    56f6:	e5 58       	subi	r30, 0x85	; 133
    56f8:	ff 4f       	sbci	r31, 0xFF	; 255
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	a8 e4       	ldi	r26, 0x48	; 72
    5700:	b3 e4       	ldi	r27, 0x43	; 67
    5702:	80 83       	st	Z, r24
    5704:	91 83       	std	Z+1, r25	; 0x01
    5706:	a2 83       	std	Z+2, r26	; 0x02
    5708:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    570a:	8e 01       	movw	r16, r28
    570c:	09 58       	subi	r16, 0x89	; 137
    570e:	1f 4f       	sbci	r17, 0xFF	; 255
    5710:	fe 01       	movw	r30, r28
    5712:	e5 58       	subi	r30, 0x85	; 133
    5714:	ff 4f       	sbci	r31, 0xFF	; 255
    5716:	60 81       	ld	r22, Z
    5718:	71 81       	ldd	r23, Z+1	; 0x01
    571a:	82 81       	ldd	r24, Z+2	; 0x02
    571c:	93 81       	ldd	r25, Z+3	; 0x03
    571e:	20 e0       	ldi	r18, 0x00	; 0
    5720:	30 e0       	ldi	r19, 0x00	; 0
    5722:	4a ef       	ldi	r20, 0xFA	; 250
    5724:	54 e4       	ldi	r21, 0x44	; 68
    5726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572a:	dc 01       	movw	r26, r24
    572c:	cb 01       	movw	r24, r22
    572e:	f8 01       	movw	r30, r16
    5730:	80 83       	st	Z, r24
    5732:	91 83       	std	Z+1, r25	; 0x01
    5734:	a2 83       	std	Z+2, r26	; 0x02
    5736:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5738:	fe 01       	movw	r30, r28
    573a:	e9 58       	subi	r30, 0x89	; 137
    573c:	ff 4f       	sbci	r31, 0xFF	; 255
    573e:	60 81       	ld	r22, Z
    5740:	71 81       	ldd	r23, Z+1	; 0x01
    5742:	82 81       	ldd	r24, Z+2	; 0x02
    5744:	93 81       	ldd	r25, Z+3	; 0x03
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	40 e8       	ldi	r20, 0x80	; 128
    574c:	5f e3       	ldi	r21, 0x3F	; 63
    574e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5752:	88 23       	and	r24, r24
    5754:	44 f4       	brge	.+16     	; 0x5766 <main+0x2a42>
		__ticks = 1;
    5756:	fe 01       	movw	r30, r28
    5758:	eb 58       	subi	r30, 0x8B	; 139
    575a:	ff 4f       	sbci	r31, 0xFF	; 255
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	91 83       	std	Z+1, r25	; 0x01
    5762:	80 83       	st	Z, r24
    5764:	64 c0       	rjmp	.+200    	; 0x582e <main+0x2b0a>
	else if (__tmp > 65535)
    5766:	fe 01       	movw	r30, r28
    5768:	e9 58       	subi	r30, 0x89	; 137
    576a:	ff 4f       	sbci	r31, 0xFF	; 255
    576c:	60 81       	ld	r22, Z
    576e:	71 81       	ldd	r23, Z+1	; 0x01
    5770:	82 81       	ldd	r24, Z+2	; 0x02
    5772:	93 81       	ldd	r25, Z+3	; 0x03
    5774:	20 e0       	ldi	r18, 0x00	; 0
    5776:	3f ef       	ldi	r19, 0xFF	; 255
    5778:	4f e7       	ldi	r20, 0x7F	; 127
    577a:	57 e4       	ldi	r21, 0x47	; 71
    577c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5780:	18 16       	cp	r1, r24
    5782:	0c f0       	brlt	.+2      	; 0x5786 <main+0x2a62>
    5784:	43 c0       	rjmp	.+134    	; 0x580c <main+0x2ae8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5786:	fe 01       	movw	r30, r28
    5788:	e5 58       	subi	r30, 0x85	; 133
    578a:	ff 4f       	sbci	r31, 0xFF	; 255
    578c:	60 81       	ld	r22, Z
    578e:	71 81       	ldd	r23, Z+1	; 0x01
    5790:	82 81       	ldd	r24, Z+2	; 0x02
    5792:	93 81       	ldd	r25, Z+3	; 0x03
    5794:	20 e0       	ldi	r18, 0x00	; 0
    5796:	30 e0       	ldi	r19, 0x00	; 0
    5798:	40 e2       	ldi	r20, 0x20	; 32
    579a:	51 e4       	ldi	r21, 0x41	; 65
    579c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57a0:	dc 01       	movw	r26, r24
    57a2:	cb 01       	movw	r24, r22
    57a4:	8e 01       	movw	r16, r28
    57a6:	0b 58       	subi	r16, 0x8B	; 139
    57a8:	1f 4f       	sbci	r17, 0xFF	; 255
    57aa:	bc 01       	movw	r22, r24
    57ac:	cd 01       	movw	r24, r26
    57ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b2:	dc 01       	movw	r26, r24
    57b4:	cb 01       	movw	r24, r22
    57b6:	f8 01       	movw	r30, r16
    57b8:	91 83       	std	Z+1, r25	; 0x01
    57ba:	80 83       	st	Z, r24
    57bc:	1f c0       	rjmp	.+62     	; 0x57fc <main+0x2ad8>
    57be:	fe 01       	movw	r30, r28
    57c0:	ed 58       	subi	r30, 0x8D	; 141
    57c2:	ff 4f       	sbci	r31, 0xFF	; 255
    57c4:	88 ec       	ldi	r24, 0xC8	; 200
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	91 83       	std	Z+1, r25	; 0x01
    57ca:	80 83       	st	Z, r24
    57cc:	fe 01       	movw	r30, r28
    57ce:	ed 58       	subi	r30, 0x8D	; 141
    57d0:	ff 4f       	sbci	r31, 0xFF	; 255
    57d2:	80 81       	ld	r24, Z
    57d4:	91 81       	ldd	r25, Z+1	; 0x01
    57d6:	01 97       	sbiw	r24, 0x01	; 1
    57d8:	f1 f7       	brne	.-4      	; 0x57d6 <main+0x2ab2>
    57da:	fe 01       	movw	r30, r28
    57dc:	ed 58       	subi	r30, 0x8D	; 141
    57de:	ff 4f       	sbci	r31, 0xFF	; 255
    57e0:	91 83       	std	Z+1, r25	; 0x01
    57e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57e4:	de 01       	movw	r26, r28
    57e6:	ab 58       	subi	r26, 0x8B	; 139
    57e8:	bf 4f       	sbci	r27, 0xFF	; 255
    57ea:	fe 01       	movw	r30, r28
    57ec:	eb 58       	subi	r30, 0x8B	; 139
    57ee:	ff 4f       	sbci	r31, 0xFF	; 255
    57f0:	80 81       	ld	r24, Z
    57f2:	91 81       	ldd	r25, Z+1	; 0x01
    57f4:	01 97       	sbiw	r24, 0x01	; 1
    57f6:	11 96       	adiw	r26, 0x01	; 1
    57f8:	9c 93       	st	X, r25
    57fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57fc:	fe 01       	movw	r30, r28
    57fe:	eb 58       	subi	r30, 0x8B	; 139
    5800:	ff 4f       	sbci	r31, 0xFF	; 255
    5802:	80 81       	ld	r24, Z
    5804:	91 81       	ldd	r25, Z+1	; 0x01
    5806:	00 97       	sbiw	r24, 0x00	; 0
    5808:	d1 f6       	brne	.-76     	; 0x57be <main+0x2a9a>
    580a:	27 c0       	rjmp	.+78     	; 0x585a <main+0x2b36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    580c:	8e 01       	movw	r16, r28
    580e:	0b 58       	subi	r16, 0x8B	; 139
    5810:	1f 4f       	sbci	r17, 0xFF	; 255
    5812:	fe 01       	movw	r30, r28
    5814:	e9 58       	subi	r30, 0x89	; 137
    5816:	ff 4f       	sbci	r31, 0xFF	; 255
    5818:	60 81       	ld	r22, Z
    581a:	71 81       	ldd	r23, Z+1	; 0x01
    581c:	82 81       	ldd	r24, Z+2	; 0x02
    581e:	93 81       	ldd	r25, Z+3	; 0x03
    5820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5824:	dc 01       	movw	r26, r24
    5826:	cb 01       	movw	r24, r22
    5828:	f8 01       	movw	r30, r16
    582a:	91 83       	std	Z+1, r25	; 0x01
    582c:	80 83       	st	Z, r24
    582e:	de 01       	movw	r26, r28
    5830:	af 58       	subi	r26, 0x8F	; 143
    5832:	bf 4f       	sbci	r27, 0xFF	; 255
    5834:	fe 01       	movw	r30, r28
    5836:	eb 58       	subi	r30, 0x8B	; 139
    5838:	ff 4f       	sbci	r31, 0xFF	; 255
    583a:	80 81       	ld	r24, Z
    583c:	91 81       	ldd	r25, Z+1	; 0x01
    583e:	8d 93       	st	X+, r24
    5840:	9c 93       	st	X, r25
    5842:	fe 01       	movw	r30, r28
    5844:	ef 58       	subi	r30, 0x8F	; 143
    5846:	ff 4f       	sbci	r31, 0xFF	; 255
    5848:	80 81       	ld	r24, Z
    584a:	91 81       	ldd	r25, Z+1	; 0x01
    584c:	01 97       	sbiw	r24, 0x01	; 1
    584e:	f1 f7       	brne	.-4      	; 0x584c <main+0x2b28>
    5850:	fe 01       	movw	r30, r28
    5852:	ef 58       	subi	r30, 0x8F	; 143
    5854:	ff 4f       	sbci	r31, 0xFF	; 255
    5856:	91 83       	std	Z+1, r25	; 0x01
    5858:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    585a:	de 01       	movw	r26, r28
    585c:	ad 53       	subi	r26, 0x3D	; 61
    585e:	be 4f       	sbci	r27, 0xFE	; 254
    5860:	fe 01       	movw	r30, r28
    5862:	eb 53       	subi	r30, 0x3B	; 59
    5864:	fe 4f       	sbci	r31, 0xFE	; 254
    5866:	80 81       	ld	r24, Z
    5868:	91 81       	ldd	r25, Z+1	; 0x01
    586a:	8a 56       	subi	r24, 0x6A	; 106
    586c:	9f 4f       	sbci	r25, 0xFF	; 255
    586e:	8d 93       	st	X+, r24
    5870:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    5872:	de 01       	movw	r26, r28
    5874:	af 53       	subi	r26, 0x3F	; 63
    5876:	be 4f       	sbci	r27, 0xFE	; 254
    5878:	fe 01       	movw	r30, r28
    587a:	eb 53       	subi	r30, 0x3B	; 59
    587c:	fe 4f       	sbci	r31, 0xFE	; 254
    587e:	80 81       	ld	r24, Z
    5880:	91 81       	ldd	r25, Z+1	; 0x01
    5882:	86 59       	subi	r24, 0x96	; 150
    5884:	90 40       	sbci	r25, 0x00	; 0
    5886:	11 96       	adiw	r26, 0x01	; 1
    5888:	9c 93       	st	X, r25
    588a:	8e 93       	st	-X, r24
    588c:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 3748) && (Local_u16AnalogValue <= 4060))
    5890:	fe 01       	movw	r30, r28
    5892:	eb 53       	subi	r30, 0x3B	; 59
    5894:	fe 4f       	sbci	r31, 0xFE	; 254
    5896:	80 81       	ld	r24, Z
    5898:	91 81       	ldd	r25, Z+1	; 0x01
    589a:	fe e0       	ldi	r31, 0x0E	; 14
    589c:	85 3a       	cpi	r24, 0xA5	; 165
    589e:	9f 07       	cpc	r25, r31
    58a0:	08 f4       	brcc	.+2      	; 0x58a4 <main+0x2b80>
    58a2:	a3 c1       	rjmp	.+838    	; 0x5bea <main+0x2ec6>
    58a4:	fe 01       	movw	r30, r28
    58a6:	eb 53       	subi	r30, 0x3B	; 59
    58a8:	fe 4f       	sbci	r31, 0xFE	; 254
    58aa:	80 81       	ld	r24, Z
    58ac:	91 81       	ldd	r25, Z+1	; 0x01
    58ae:	2f e0       	ldi	r18, 0x0F	; 15
    58b0:	8d 3d       	cpi	r24, 0xDD	; 221
    58b2:	92 07       	cpc	r25, r18
    58b4:	08 f0       	brcs	.+2      	; 0x58b8 <main+0x2b94>
    58b6:	99 c1       	rjmp	.+818    	; 0x5bea <main+0x2ec6>
	  {
		  LCD_u8_GoTo_XY(0,0);
    58b8:	80 e0       	ldi	r24, 0x00	; 0
    58ba:	60 e0       	ldi	r22, 0x00	; 0
    58bc:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    58c0:	80 e6       	ldi	r24, 0x60	; 96
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,12,HamokshaRuning);
    58c8:	9e 01       	movw	r18, r28
    58ca:	2f 51       	subi	r18, 0x1F	; 31
    58cc:	3e 4f       	sbci	r19, 0xFE	; 254
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	61 e0       	ldi	r22, 0x01	; 1
    58d2:	4c e0       	ldi	r20, 0x0C	; 12
    58d4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    58d8:	fe 01       	movw	r30, r28
    58da:	e3 59       	subi	r30, 0x93	; 147
    58dc:	ff 4f       	sbci	r31, 0xFF	; 255
    58de:	80 e0       	ldi	r24, 0x00	; 0
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	a8 e4       	ldi	r26, 0x48	; 72
    58e4:	b3 e4       	ldi	r27, 0x43	; 67
    58e6:	80 83       	st	Z, r24
    58e8:	91 83       	std	Z+1, r25	; 0x01
    58ea:	a2 83       	std	Z+2, r26	; 0x02
    58ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58ee:	8e 01       	movw	r16, r28
    58f0:	07 59       	subi	r16, 0x97	; 151
    58f2:	1f 4f       	sbci	r17, 0xFF	; 255
    58f4:	fe 01       	movw	r30, r28
    58f6:	e3 59       	subi	r30, 0x93	; 147
    58f8:	ff 4f       	sbci	r31, 0xFF	; 255
    58fa:	60 81       	ld	r22, Z
    58fc:	71 81       	ldd	r23, Z+1	; 0x01
    58fe:	82 81       	ldd	r24, Z+2	; 0x02
    5900:	93 81       	ldd	r25, Z+3	; 0x03
    5902:	20 e0       	ldi	r18, 0x00	; 0
    5904:	30 e0       	ldi	r19, 0x00	; 0
    5906:	4a ef       	ldi	r20, 0xFA	; 250
    5908:	54 e4       	ldi	r21, 0x44	; 68
    590a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    590e:	dc 01       	movw	r26, r24
    5910:	cb 01       	movw	r24, r22
    5912:	f8 01       	movw	r30, r16
    5914:	80 83       	st	Z, r24
    5916:	91 83       	std	Z+1, r25	; 0x01
    5918:	a2 83       	std	Z+2, r26	; 0x02
    591a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    591c:	fe 01       	movw	r30, r28
    591e:	e7 59       	subi	r30, 0x97	; 151
    5920:	ff 4f       	sbci	r31, 0xFF	; 255
    5922:	60 81       	ld	r22, Z
    5924:	71 81       	ldd	r23, Z+1	; 0x01
    5926:	82 81       	ldd	r24, Z+2	; 0x02
    5928:	93 81       	ldd	r25, Z+3	; 0x03
    592a:	20 e0       	ldi	r18, 0x00	; 0
    592c:	30 e0       	ldi	r19, 0x00	; 0
    592e:	40 e8       	ldi	r20, 0x80	; 128
    5930:	5f e3       	ldi	r21, 0x3F	; 63
    5932:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5936:	88 23       	and	r24, r24
    5938:	44 f4       	brge	.+16     	; 0x594a <main+0x2c26>
		__ticks = 1;
    593a:	fe 01       	movw	r30, r28
    593c:	e9 59       	subi	r30, 0x99	; 153
    593e:	ff 4f       	sbci	r31, 0xFF	; 255
    5940:	81 e0       	ldi	r24, 0x01	; 1
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	91 83       	std	Z+1, r25	; 0x01
    5946:	80 83       	st	Z, r24
    5948:	64 c0       	rjmp	.+200    	; 0x5a12 <main+0x2cee>
	else if (__tmp > 65535)
    594a:	fe 01       	movw	r30, r28
    594c:	e7 59       	subi	r30, 0x97	; 151
    594e:	ff 4f       	sbci	r31, 0xFF	; 255
    5950:	60 81       	ld	r22, Z
    5952:	71 81       	ldd	r23, Z+1	; 0x01
    5954:	82 81       	ldd	r24, Z+2	; 0x02
    5956:	93 81       	ldd	r25, Z+3	; 0x03
    5958:	20 e0       	ldi	r18, 0x00	; 0
    595a:	3f ef       	ldi	r19, 0xFF	; 255
    595c:	4f e7       	ldi	r20, 0x7F	; 127
    595e:	57 e4       	ldi	r21, 0x47	; 71
    5960:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5964:	18 16       	cp	r1, r24
    5966:	0c f0       	brlt	.+2      	; 0x596a <main+0x2c46>
    5968:	43 c0       	rjmp	.+134    	; 0x59f0 <main+0x2ccc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    596a:	fe 01       	movw	r30, r28
    596c:	e3 59       	subi	r30, 0x93	; 147
    596e:	ff 4f       	sbci	r31, 0xFF	; 255
    5970:	60 81       	ld	r22, Z
    5972:	71 81       	ldd	r23, Z+1	; 0x01
    5974:	82 81       	ldd	r24, Z+2	; 0x02
    5976:	93 81       	ldd	r25, Z+3	; 0x03
    5978:	20 e0       	ldi	r18, 0x00	; 0
    597a:	30 e0       	ldi	r19, 0x00	; 0
    597c:	40 e2       	ldi	r20, 0x20	; 32
    597e:	51 e4       	ldi	r21, 0x41	; 65
    5980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5984:	dc 01       	movw	r26, r24
    5986:	cb 01       	movw	r24, r22
    5988:	8e 01       	movw	r16, r28
    598a:	09 59       	subi	r16, 0x99	; 153
    598c:	1f 4f       	sbci	r17, 0xFF	; 255
    598e:	bc 01       	movw	r22, r24
    5990:	cd 01       	movw	r24, r26
    5992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5996:	dc 01       	movw	r26, r24
    5998:	cb 01       	movw	r24, r22
    599a:	f8 01       	movw	r30, r16
    599c:	91 83       	std	Z+1, r25	; 0x01
    599e:	80 83       	st	Z, r24
    59a0:	1f c0       	rjmp	.+62     	; 0x59e0 <main+0x2cbc>
    59a2:	fe 01       	movw	r30, r28
    59a4:	eb 59       	subi	r30, 0x9B	; 155
    59a6:	ff 4f       	sbci	r31, 0xFF	; 255
    59a8:	88 ec       	ldi	r24, 0xC8	; 200
    59aa:	90 e0       	ldi	r25, 0x00	; 0
    59ac:	91 83       	std	Z+1, r25	; 0x01
    59ae:	80 83       	st	Z, r24
    59b0:	fe 01       	movw	r30, r28
    59b2:	eb 59       	subi	r30, 0x9B	; 155
    59b4:	ff 4f       	sbci	r31, 0xFF	; 255
    59b6:	80 81       	ld	r24, Z
    59b8:	91 81       	ldd	r25, Z+1	; 0x01
    59ba:	01 97       	sbiw	r24, 0x01	; 1
    59bc:	f1 f7       	brne	.-4      	; 0x59ba <main+0x2c96>
    59be:	fe 01       	movw	r30, r28
    59c0:	eb 59       	subi	r30, 0x9B	; 155
    59c2:	ff 4f       	sbci	r31, 0xFF	; 255
    59c4:	91 83       	std	Z+1, r25	; 0x01
    59c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59c8:	de 01       	movw	r26, r28
    59ca:	a9 59       	subi	r26, 0x99	; 153
    59cc:	bf 4f       	sbci	r27, 0xFF	; 255
    59ce:	fe 01       	movw	r30, r28
    59d0:	e9 59       	subi	r30, 0x99	; 153
    59d2:	ff 4f       	sbci	r31, 0xFF	; 255
    59d4:	80 81       	ld	r24, Z
    59d6:	91 81       	ldd	r25, Z+1	; 0x01
    59d8:	01 97       	sbiw	r24, 0x01	; 1
    59da:	11 96       	adiw	r26, 0x01	; 1
    59dc:	9c 93       	st	X, r25
    59de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59e0:	fe 01       	movw	r30, r28
    59e2:	e9 59       	subi	r30, 0x99	; 153
    59e4:	ff 4f       	sbci	r31, 0xFF	; 255
    59e6:	80 81       	ld	r24, Z
    59e8:	91 81       	ldd	r25, Z+1	; 0x01
    59ea:	00 97       	sbiw	r24, 0x00	; 0
    59ec:	d1 f6       	brne	.-76     	; 0x59a2 <main+0x2c7e>
    59ee:	27 c0       	rjmp	.+78     	; 0x5a3e <main+0x2d1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59f0:	8e 01       	movw	r16, r28
    59f2:	09 59       	subi	r16, 0x99	; 153
    59f4:	1f 4f       	sbci	r17, 0xFF	; 255
    59f6:	fe 01       	movw	r30, r28
    59f8:	e7 59       	subi	r30, 0x97	; 151
    59fa:	ff 4f       	sbci	r31, 0xFF	; 255
    59fc:	60 81       	ld	r22, Z
    59fe:	71 81       	ldd	r23, Z+1	; 0x01
    5a00:	82 81       	ldd	r24, Z+2	; 0x02
    5a02:	93 81       	ldd	r25, Z+3	; 0x03
    5a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a08:	dc 01       	movw	r26, r24
    5a0a:	cb 01       	movw	r24, r22
    5a0c:	f8 01       	movw	r30, r16
    5a0e:	91 83       	std	Z+1, r25	; 0x01
    5a10:	80 83       	st	Z, r24
    5a12:	de 01       	movw	r26, r28
    5a14:	ad 59       	subi	r26, 0x9D	; 157
    5a16:	bf 4f       	sbci	r27, 0xFF	; 255
    5a18:	fe 01       	movw	r30, r28
    5a1a:	e9 59       	subi	r30, 0x99	; 153
    5a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1e:	80 81       	ld	r24, Z
    5a20:	91 81       	ldd	r25, Z+1	; 0x01
    5a22:	8d 93       	st	X+, r24
    5a24:	9c 93       	st	X, r25
    5a26:	fe 01       	movw	r30, r28
    5a28:	ed 59       	subi	r30, 0x9D	; 157
    5a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2c:	80 81       	ld	r24, Z
    5a2e:	91 81       	ldd	r25, Z+1	; 0x01
    5a30:	01 97       	sbiw	r24, 0x01	; 1
    5a32:	f1 f7       	brne	.-4      	; 0x5a30 <main+0x2d0c>
    5a34:	fe 01       	movw	r30, r28
    5a36:	ed 59       	subi	r30, 0x9D	; 157
    5a38:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3a:	91 83       	std	Z+1, r25	; 0x01
    5a3c:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,12,Hamokshastanding);
    5a3e:	9e 01       	movw	r18, r28
    5a40:	27 52       	subi	r18, 0x27	; 39
    5a42:	3e 4f       	sbci	r19, 0xFE	; 254
    5a44:	80 e0       	ldi	r24, 0x00	; 0
    5a46:	61 e0       	ldi	r22, 0x01	; 1
    5a48:	4c e0       	ldi	r20, 0x0C	; 12
    5a4a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    5a4e:	fe 01       	movw	r30, r28
    5a50:	e1 5a       	subi	r30, 0xA1	; 161
    5a52:	ff 4f       	sbci	r31, 0xFF	; 255
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	a8 e4       	ldi	r26, 0x48	; 72
    5a5a:	b3 e4       	ldi	r27, 0x43	; 67
    5a5c:	80 83       	st	Z, r24
    5a5e:	91 83       	std	Z+1, r25	; 0x01
    5a60:	a2 83       	std	Z+2, r26	; 0x02
    5a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a64:	8e 01       	movw	r16, r28
    5a66:	05 5a       	subi	r16, 0xA5	; 165
    5a68:	1f 4f       	sbci	r17, 0xFF	; 255
    5a6a:	fe 01       	movw	r30, r28
    5a6c:	e1 5a       	subi	r30, 0xA1	; 161
    5a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a70:	60 81       	ld	r22, Z
    5a72:	71 81       	ldd	r23, Z+1	; 0x01
    5a74:	82 81       	ldd	r24, Z+2	; 0x02
    5a76:	93 81       	ldd	r25, Z+3	; 0x03
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	4a ef       	ldi	r20, 0xFA	; 250
    5a7e:	54 e4       	ldi	r21, 0x44	; 68
    5a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a84:	dc 01       	movw	r26, r24
    5a86:	cb 01       	movw	r24, r22
    5a88:	f8 01       	movw	r30, r16
    5a8a:	80 83       	st	Z, r24
    5a8c:	91 83       	std	Z+1, r25	; 0x01
    5a8e:	a2 83       	std	Z+2, r26	; 0x02
    5a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a92:	fe 01       	movw	r30, r28
    5a94:	e5 5a       	subi	r30, 0xA5	; 165
    5a96:	ff 4f       	sbci	r31, 0xFF	; 255
    5a98:	60 81       	ld	r22, Z
    5a9a:	71 81       	ldd	r23, Z+1	; 0x01
    5a9c:	82 81       	ldd	r24, Z+2	; 0x02
    5a9e:	93 81       	ldd	r25, Z+3	; 0x03
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	30 e0       	ldi	r19, 0x00	; 0
    5aa4:	40 e8       	ldi	r20, 0x80	; 128
    5aa6:	5f e3       	ldi	r21, 0x3F	; 63
    5aa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5aac:	88 23       	and	r24, r24
    5aae:	44 f4       	brge	.+16     	; 0x5ac0 <main+0x2d9c>
		__ticks = 1;
    5ab0:	fe 01       	movw	r30, r28
    5ab2:	e7 5a       	subi	r30, 0xA7	; 167
    5ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab6:	81 e0       	ldi	r24, 0x01	; 1
    5ab8:	90 e0       	ldi	r25, 0x00	; 0
    5aba:	91 83       	std	Z+1, r25	; 0x01
    5abc:	80 83       	st	Z, r24
    5abe:	64 c0       	rjmp	.+200    	; 0x5b88 <main+0x2e64>
	else if (__tmp > 65535)
    5ac0:	fe 01       	movw	r30, r28
    5ac2:	e5 5a       	subi	r30, 0xA5	; 165
    5ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac6:	60 81       	ld	r22, Z
    5ac8:	71 81       	ldd	r23, Z+1	; 0x01
    5aca:	82 81       	ldd	r24, Z+2	; 0x02
    5acc:	93 81       	ldd	r25, Z+3	; 0x03
    5ace:	20 e0       	ldi	r18, 0x00	; 0
    5ad0:	3f ef       	ldi	r19, 0xFF	; 255
    5ad2:	4f e7       	ldi	r20, 0x7F	; 127
    5ad4:	57 e4       	ldi	r21, 0x47	; 71
    5ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ada:	18 16       	cp	r1, r24
    5adc:	0c f0       	brlt	.+2      	; 0x5ae0 <main+0x2dbc>
    5ade:	43 c0       	rjmp	.+134    	; 0x5b66 <main+0x2e42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ae0:	fe 01       	movw	r30, r28
    5ae2:	e1 5a       	subi	r30, 0xA1	; 161
    5ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae6:	60 81       	ld	r22, Z
    5ae8:	71 81       	ldd	r23, Z+1	; 0x01
    5aea:	82 81       	ldd	r24, Z+2	; 0x02
    5aec:	93 81       	ldd	r25, Z+3	; 0x03
    5aee:	20 e0       	ldi	r18, 0x00	; 0
    5af0:	30 e0       	ldi	r19, 0x00	; 0
    5af2:	40 e2       	ldi	r20, 0x20	; 32
    5af4:	51 e4       	ldi	r21, 0x41	; 65
    5af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5afa:	dc 01       	movw	r26, r24
    5afc:	cb 01       	movw	r24, r22
    5afe:	8e 01       	movw	r16, r28
    5b00:	07 5a       	subi	r16, 0xA7	; 167
    5b02:	1f 4f       	sbci	r17, 0xFF	; 255
    5b04:	bc 01       	movw	r22, r24
    5b06:	cd 01       	movw	r24, r26
    5b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b0c:	dc 01       	movw	r26, r24
    5b0e:	cb 01       	movw	r24, r22
    5b10:	f8 01       	movw	r30, r16
    5b12:	91 83       	std	Z+1, r25	; 0x01
    5b14:	80 83       	st	Z, r24
    5b16:	1f c0       	rjmp	.+62     	; 0x5b56 <main+0x2e32>
    5b18:	fe 01       	movw	r30, r28
    5b1a:	e9 5a       	subi	r30, 0xA9	; 169
    5b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1e:	88 ec       	ldi	r24, 0xC8	; 200
    5b20:	90 e0       	ldi	r25, 0x00	; 0
    5b22:	91 83       	std	Z+1, r25	; 0x01
    5b24:	80 83       	st	Z, r24
    5b26:	fe 01       	movw	r30, r28
    5b28:	e9 5a       	subi	r30, 0xA9	; 169
    5b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2c:	80 81       	ld	r24, Z
    5b2e:	91 81       	ldd	r25, Z+1	; 0x01
    5b30:	01 97       	sbiw	r24, 0x01	; 1
    5b32:	f1 f7       	brne	.-4      	; 0x5b30 <main+0x2e0c>
    5b34:	fe 01       	movw	r30, r28
    5b36:	e9 5a       	subi	r30, 0xA9	; 169
    5b38:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3a:	91 83       	std	Z+1, r25	; 0x01
    5b3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b3e:	de 01       	movw	r26, r28
    5b40:	a7 5a       	subi	r26, 0xA7	; 167
    5b42:	bf 4f       	sbci	r27, 0xFF	; 255
    5b44:	fe 01       	movw	r30, r28
    5b46:	e7 5a       	subi	r30, 0xA7	; 167
    5b48:	ff 4f       	sbci	r31, 0xFF	; 255
    5b4a:	80 81       	ld	r24, Z
    5b4c:	91 81       	ldd	r25, Z+1	; 0x01
    5b4e:	01 97       	sbiw	r24, 0x01	; 1
    5b50:	11 96       	adiw	r26, 0x01	; 1
    5b52:	9c 93       	st	X, r25
    5b54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b56:	fe 01       	movw	r30, r28
    5b58:	e7 5a       	subi	r30, 0xA7	; 167
    5b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5c:	80 81       	ld	r24, Z
    5b5e:	91 81       	ldd	r25, Z+1	; 0x01
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	d1 f6       	brne	.-76     	; 0x5b18 <main+0x2df4>
    5b64:	27 c0       	rjmp	.+78     	; 0x5bb4 <main+0x2e90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b66:	8e 01       	movw	r16, r28
    5b68:	07 5a       	subi	r16, 0xA7	; 167
    5b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b6c:	fe 01       	movw	r30, r28
    5b6e:	e5 5a       	subi	r30, 0xA5	; 165
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	60 81       	ld	r22, Z
    5b74:	71 81       	ldd	r23, Z+1	; 0x01
    5b76:	82 81       	ldd	r24, Z+2	; 0x02
    5b78:	93 81       	ldd	r25, Z+3	; 0x03
    5b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b7e:	dc 01       	movw	r26, r24
    5b80:	cb 01       	movw	r24, r22
    5b82:	f8 01       	movw	r30, r16
    5b84:	91 83       	std	Z+1, r25	; 0x01
    5b86:	80 83       	st	Z, r24
    5b88:	de 01       	movw	r26, r28
    5b8a:	ab 5a       	subi	r26, 0xAB	; 171
    5b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b8e:	fe 01       	movw	r30, r28
    5b90:	e7 5a       	subi	r30, 0xA7	; 167
    5b92:	ff 4f       	sbci	r31, 0xFF	; 255
    5b94:	80 81       	ld	r24, Z
    5b96:	91 81       	ldd	r25, Z+1	; 0x01
    5b98:	8d 93       	st	X+, r24
    5b9a:	9c 93       	st	X, r25
    5b9c:	fe 01       	movw	r30, r28
    5b9e:	eb 5a       	subi	r30, 0xAB	; 171
    5ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba2:	80 81       	ld	r24, Z
    5ba4:	91 81       	ldd	r25, Z+1	; 0x01
    5ba6:	01 97       	sbiw	r24, 0x01	; 1
    5ba8:	f1 f7       	brne	.-4      	; 0x5ba6 <main+0x2e82>
    5baa:	fe 01       	movw	r30, r28
    5bac:	eb 5a       	subi	r30, 0xAB	; 171
    5bae:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb0:	91 83       	std	Z+1, r25	; 0x01
    5bb2:	80 83       	st	Z, r24
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    5bb4:	de 01       	movw	r26, r28
    5bb6:	ad 53       	subi	r26, 0x3D	; 61
    5bb8:	be 4f       	sbci	r27, 0xFE	; 254
    5bba:	fe 01       	movw	r30, r28
    5bbc:	eb 53       	subi	r30, 0x3B	; 59
    5bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    5bc0:	80 81       	ld	r24, Z
    5bc2:	91 81       	ldd	r25, Z+1	; 0x01
    5bc4:	8a 56       	subi	r24, 0x6A	; 106
    5bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc8:	8d 93       	st	X+, r24
    5bca:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    5bcc:	de 01       	movw	r26, r28
    5bce:	af 53       	subi	r26, 0x3F	; 63
    5bd0:	be 4f       	sbci	r27, 0xFE	; 254
    5bd2:	fe 01       	movw	r30, r28
    5bd4:	eb 53       	subi	r30, 0x3B	; 59
    5bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bd8:	80 81       	ld	r24, Z
    5bda:	91 81       	ldd	r25, Z+1	; 0x01
    5bdc:	86 59       	subi	r24, 0x96	; 150
    5bde:	90 40       	sbci	r25, 0x00	; 0
    5be0:	11 96       	adiw	r26, 0x01	; 1
    5be2:	9c 93       	st	X, r25
    5be4:	8e 93       	st	-X, r24
    5be6:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 4060) && (Local_u16AnalogValue <= 4372))
    5bea:	fe 01       	movw	r30, r28
    5bec:	eb 53       	subi	r30, 0x3B	; 59
    5bee:	fe 4f       	sbci	r31, 0xFE	; 254
    5bf0:	80 81       	ld	r24, Z
    5bf2:	91 81       	ldd	r25, Z+1	; 0x01
    5bf4:	ff e0       	ldi	r31, 0x0F	; 15
    5bf6:	8d 3d       	cpi	r24, 0xDD	; 221
    5bf8:	9f 07       	cpc	r25, r31
    5bfa:	08 f4       	brcc	.+2      	; 0x5bfe <main+0x2eda>
    5bfc:	75 c1       	rjmp	.+746    	; 0x5ee8 <main+0x31c4>
    5bfe:	fe 01       	movw	r30, r28
    5c00:	eb 53       	subi	r30, 0x3B	; 59
    5c02:	fe 4f       	sbci	r31, 0xFE	; 254
    5c04:	80 81       	ld	r24, Z
    5c06:	91 81       	ldd	r25, Z+1	; 0x01
    5c08:	21 e1       	ldi	r18, 0x11	; 17
    5c0a:	85 31       	cpi	r24, 0x15	; 21
    5c0c:	92 07       	cpc	r25, r18
    5c0e:	08 f0       	brcs	.+2      	; 0x5c12 <main+0x2eee>
    5c10:	6b c1       	rjmp	.+726    	; 0x5ee8 <main+0x31c4>
	  {
		  LCD_u8_GoTo_XY(0,0);
    5c12:	80 e0       	ldi	r24, 0x00	; 0
    5c14:	60 e0       	ldi	r22, 0x00	; 0
    5c16:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    5c1a:	80 e6       	ldi	r24, 0x60	; 96
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,13,HamokshaRuning);
    5c22:	9e 01       	movw	r18, r28
    5c24:	2f 51       	subi	r18, 0x1F	; 31
    5c26:	3e 4f       	sbci	r19, 0xFE	; 254
    5c28:	81 e0       	ldi	r24, 0x01	; 1
    5c2a:	61 e0       	ldi	r22, 0x01	; 1
    5c2c:	4d e0       	ldi	r20, 0x0D	; 13
    5c2e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    5c32:	fe 01       	movw	r30, r28
    5c34:	ef 5a       	subi	r30, 0xAF	; 175
    5c36:	ff 4f       	sbci	r31, 0xFF	; 255
    5c38:	80 e0       	ldi	r24, 0x00	; 0
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	a8 e4       	ldi	r26, 0x48	; 72
    5c3e:	b3 e4       	ldi	r27, 0x43	; 67
    5c40:	80 83       	st	Z, r24
    5c42:	91 83       	std	Z+1, r25	; 0x01
    5c44:	a2 83       	std	Z+2, r26	; 0x02
    5c46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c48:	8e 01       	movw	r16, r28
    5c4a:	03 5b       	subi	r16, 0xB3	; 179
    5c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c4e:	fe 01       	movw	r30, r28
    5c50:	ef 5a       	subi	r30, 0xAF	; 175
    5c52:	ff 4f       	sbci	r31, 0xFF	; 255
    5c54:	60 81       	ld	r22, Z
    5c56:	71 81       	ldd	r23, Z+1	; 0x01
    5c58:	82 81       	ldd	r24, Z+2	; 0x02
    5c5a:	93 81       	ldd	r25, Z+3	; 0x03
    5c5c:	20 e0       	ldi	r18, 0x00	; 0
    5c5e:	30 e0       	ldi	r19, 0x00	; 0
    5c60:	4a ef       	ldi	r20, 0xFA	; 250
    5c62:	54 e4       	ldi	r21, 0x44	; 68
    5c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c68:	dc 01       	movw	r26, r24
    5c6a:	cb 01       	movw	r24, r22
    5c6c:	f8 01       	movw	r30, r16
    5c6e:	80 83       	st	Z, r24
    5c70:	91 83       	std	Z+1, r25	; 0x01
    5c72:	a2 83       	std	Z+2, r26	; 0x02
    5c74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c76:	fe 01       	movw	r30, r28
    5c78:	e3 5b       	subi	r30, 0xB3	; 179
    5c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7c:	60 81       	ld	r22, Z
    5c7e:	71 81       	ldd	r23, Z+1	; 0x01
    5c80:	82 81       	ldd	r24, Z+2	; 0x02
    5c82:	93 81       	ldd	r25, Z+3	; 0x03
    5c84:	20 e0       	ldi	r18, 0x00	; 0
    5c86:	30 e0       	ldi	r19, 0x00	; 0
    5c88:	40 e8       	ldi	r20, 0x80	; 128
    5c8a:	5f e3       	ldi	r21, 0x3F	; 63
    5c8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c90:	88 23       	and	r24, r24
    5c92:	44 f4       	brge	.+16     	; 0x5ca4 <main+0x2f80>
		__ticks = 1;
    5c94:	fe 01       	movw	r30, r28
    5c96:	e5 5b       	subi	r30, 0xB5	; 181
    5c98:	ff 4f       	sbci	r31, 0xFF	; 255
    5c9a:	81 e0       	ldi	r24, 0x01	; 1
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	91 83       	std	Z+1, r25	; 0x01
    5ca0:	80 83       	st	Z, r24
    5ca2:	64 c0       	rjmp	.+200    	; 0x5d6c <main+0x3048>
	else if (__tmp > 65535)
    5ca4:	fe 01       	movw	r30, r28
    5ca6:	e3 5b       	subi	r30, 0xB3	; 179
    5ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    5caa:	60 81       	ld	r22, Z
    5cac:	71 81       	ldd	r23, Z+1	; 0x01
    5cae:	82 81       	ldd	r24, Z+2	; 0x02
    5cb0:	93 81       	ldd	r25, Z+3	; 0x03
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	3f ef       	ldi	r19, 0xFF	; 255
    5cb6:	4f e7       	ldi	r20, 0x7F	; 127
    5cb8:	57 e4       	ldi	r21, 0x47	; 71
    5cba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cbe:	18 16       	cp	r1, r24
    5cc0:	0c f0       	brlt	.+2      	; 0x5cc4 <main+0x2fa0>
    5cc2:	43 c0       	rjmp	.+134    	; 0x5d4a <main+0x3026>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cc4:	fe 01       	movw	r30, r28
    5cc6:	ef 5a       	subi	r30, 0xAF	; 175
    5cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cca:	60 81       	ld	r22, Z
    5ccc:	71 81       	ldd	r23, Z+1	; 0x01
    5cce:	82 81       	ldd	r24, Z+2	; 0x02
    5cd0:	93 81       	ldd	r25, Z+3	; 0x03
    5cd2:	20 e0       	ldi	r18, 0x00	; 0
    5cd4:	30 e0       	ldi	r19, 0x00	; 0
    5cd6:	40 e2       	ldi	r20, 0x20	; 32
    5cd8:	51 e4       	ldi	r21, 0x41	; 65
    5cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cde:	dc 01       	movw	r26, r24
    5ce0:	cb 01       	movw	r24, r22
    5ce2:	8e 01       	movw	r16, r28
    5ce4:	05 5b       	subi	r16, 0xB5	; 181
    5ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce8:	bc 01       	movw	r22, r24
    5cea:	cd 01       	movw	r24, r26
    5cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cf0:	dc 01       	movw	r26, r24
    5cf2:	cb 01       	movw	r24, r22
    5cf4:	f8 01       	movw	r30, r16
    5cf6:	91 83       	std	Z+1, r25	; 0x01
    5cf8:	80 83       	st	Z, r24
    5cfa:	1f c0       	rjmp	.+62     	; 0x5d3a <main+0x3016>
    5cfc:	fe 01       	movw	r30, r28
    5cfe:	e7 5b       	subi	r30, 0xB7	; 183
    5d00:	ff 4f       	sbci	r31, 0xFF	; 255
    5d02:	88 ec       	ldi	r24, 0xC8	; 200
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	91 83       	std	Z+1, r25	; 0x01
    5d08:	80 83       	st	Z, r24
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	e7 5b       	subi	r30, 0xB7	; 183
    5d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d10:	80 81       	ld	r24, Z
    5d12:	91 81       	ldd	r25, Z+1	; 0x01
    5d14:	01 97       	sbiw	r24, 0x01	; 1
    5d16:	f1 f7       	brne	.-4      	; 0x5d14 <main+0x2ff0>
    5d18:	fe 01       	movw	r30, r28
    5d1a:	e7 5b       	subi	r30, 0xB7	; 183
    5d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d1e:	91 83       	std	Z+1, r25	; 0x01
    5d20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d22:	de 01       	movw	r26, r28
    5d24:	a5 5b       	subi	r26, 0xB5	; 181
    5d26:	bf 4f       	sbci	r27, 0xFF	; 255
    5d28:	fe 01       	movw	r30, r28
    5d2a:	e5 5b       	subi	r30, 0xB5	; 181
    5d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2e:	80 81       	ld	r24, Z
    5d30:	91 81       	ldd	r25, Z+1	; 0x01
    5d32:	01 97       	sbiw	r24, 0x01	; 1
    5d34:	11 96       	adiw	r26, 0x01	; 1
    5d36:	9c 93       	st	X, r25
    5d38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d3a:	fe 01       	movw	r30, r28
    5d3c:	e5 5b       	subi	r30, 0xB5	; 181
    5d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d40:	80 81       	ld	r24, Z
    5d42:	91 81       	ldd	r25, Z+1	; 0x01
    5d44:	00 97       	sbiw	r24, 0x00	; 0
    5d46:	d1 f6       	brne	.-76     	; 0x5cfc <main+0x2fd8>
    5d48:	27 c0       	rjmp	.+78     	; 0x5d98 <main+0x3074>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d4a:	8e 01       	movw	r16, r28
    5d4c:	05 5b       	subi	r16, 0xB5	; 181
    5d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d50:	fe 01       	movw	r30, r28
    5d52:	e3 5b       	subi	r30, 0xB3	; 179
    5d54:	ff 4f       	sbci	r31, 0xFF	; 255
    5d56:	60 81       	ld	r22, Z
    5d58:	71 81       	ldd	r23, Z+1	; 0x01
    5d5a:	82 81       	ldd	r24, Z+2	; 0x02
    5d5c:	93 81       	ldd	r25, Z+3	; 0x03
    5d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d62:	dc 01       	movw	r26, r24
    5d64:	cb 01       	movw	r24, r22
    5d66:	f8 01       	movw	r30, r16
    5d68:	91 83       	std	Z+1, r25	; 0x01
    5d6a:	80 83       	st	Z, r24
    5d6c:	de 01       	movw	r26, r28
    5d6e:	a9 5b       	subi	r26, 0xB9	; 185
    5d70:	bf 4f       	sbci	r27, 0xFF	; 255
    5d72:	fe 01       	movw	r30, r28
    5d74:	e5 5b       	subi	r30, 0xB5	; 181
    5d76:	ff 4f       	sbci	r31, 0xFF	; 255
    5d78:	80 81       	ld	r24, Z
    5d7a:	91 81       	ldd	r25, Z+1	; 0x01
    5d7c:	8d 93       	st	X+, r24
    5d7e:	9c 93       	st	X, r25
    5d80:	fe 01       	movw	r30, r28
    5d82:	e9 5b       	subi	r30, 0xB9	; 185
    5d84:	ff 4f       	sbci	r31, 0xFF	; 255
    5d86:	80 81       	ld	r24, Z
    5d88:	91 81       	ldd	r25, Z+1	; 0x01
    5d8a:	01 97       	sbiw	r24, 0x01	; 1
    5d8c:	f1 f7       	brne	.-4      	; 0x5d8a <main+0x3066>
    5d8e:	fe 01       	movw	r30, r28
    5d90:	e9 5b       	subi	r30, 0xB9	; 185
    5d92:	ff 4f       	sbci	r31, 0xFF	; 255
    5d94:	91 83       	std	Z+1, r25	; 0x01
    5d96:	80 83       	st	Z, r24
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,13,Hamokshastanding);
    5d98:	9e 01       	movw	r18, r28
    5d9a:	27 52       	subi	r18, 0x27	; 39
    5d9c:	3e 4f       	sbci	r19, 0xFE	; 254
    5d9e:	80 e0       	ldi	r24, 0x00	; 0
    5da0:	61 e0       	ldi	r22, 0x01	; 1
    5da2:	4d e0       	ldi	r20, 0x0D	; 13
    5da4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    5da8:	fe 01       	movw	r30, r28
    5daa:	ed 5b       	subi	r30, 0xBD	; 189
    5dac:	ff 4f       	sbci	r31, 0xFF	; 255
    5dae:	80 e0       	ldi	r24, 0x00	; 0
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	a8 e4       	ldi	r26, 0x48	; 72
    5db4:	b3 e4       	ldi	r27, 0x43	; 67
    5db6:	80 83       	st	Z, r24
    5db8:	91 83       	std	Z+1, r25	; 0x01
    5dba:	a2 83       	std	Z+2, r26	; 0x02
    5dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dbe:	8e 01       	movw	r16, r28
    5dc0:	01 5c       	subi	r16, 0xC1	; 193
    5dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc4:	fe 01       	movw	r30, r28
    5dc6:	ed 5b       	subi	r30, 0xBD	; 189
    5dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dca:	60 81       	ld	r22, Z
    5dcc:	71 81       	ldd	r23, Z+1	; 0x01
    5dce:	82 81       	ldd	r24, Z+2	; 0x02
    5dd0:	93 81       	ldd	r25, Z+3	; 0x03
    5dd2:	20 e0       	ldi	r18, 0x00	; 0
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	4a ef       	ldi	r20, 0xFA	; 250
    5dd8:	54 e4       	ldi	r21, 0x44	; 68
    5dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dde:	dc 01       	movw	r26, r24
    5de0:	cb 01       	movw	r24, r22
    5de2:	f8 01       	movw	r30, r16
    5de4:	80 83       	st	Z, r24
    5de6:	91 83       	std	Z+1, r25	; 0x01
    5de8:	a2 83       	std	Z+2, r26	; 0x02
    5dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5dec:	fe 01       	movw	r30, r28
    5dee:	ff 96       	adiw	r30, 0x3f	; 63
    5df0:	60 81       	ld	r22, Z
    5df2:	71 81       	ldd	r23, Z+1	; 0x01
    5df4:	82 81       	ldd	r24, Z+2	; 0x02
    5df6:	93 81       	ldd	r25, Z+3	; 0x03
    5df8:	20 e0       	ldi	r18, 0x00	; 0
    5dfa:	30 e0       	ldi	r19, 0x00	; 0
    5dfc:	40 e8       	ldi	r20, 0x80	; 128
    5dfe:	5f e3       	ldi	r21, 0x3F	; 63
    5e00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e04:	88 23       	and	r24, r24
    5e06:	2c f4       	brge	.+10     	; 0x5e12 <main+0x30ee>
		__ticks = 1;
    5e08:	81 e0       	ldi	r24, 0x01	; 1
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	9e af       	std	Y+62, r25	; 0x3e
    5e0e:	8d af       	std	Y+61, r24	; 0x3d
    5e10:	46 c0       	rjmp	.+140    	; 0x5e9e <main+0x317a>
	else if (__tmp > 65535)
    5e12:	fe 01       	movw	r30, r28
    5e14:	ff 96       	adiw	r30, 0x3f	; 63
    5e16:	60 81       	ld	r22, Z
    5e18:	71 81       	ldd	r23, Z+1	; 0x01
    5e1a:	82 81       	ldd	r24, Z+2	; 0x02
    5e1c:	93 81       	ldd	r25, Z+3	; 0x03
    5e1e:	20 e0       	ldi	r18, 0x00	; 0
    5e20:	3f ef       	ldi	r19, 0xFF	; 255
    5e22:	4f e7       	ldi	r20, 0x7F	; 127
    5e24:	57 e4       	ldi	r21, 0x47	; 71
    5e26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e2a:	18 16       	cp	r1, r24
    5e2c:	64 f5       	brge	.+88     	; 0x5e86 <main+0x3162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e2e:	fe 01       	movw	r30, r28
    5e30:	ed 5b       	subi	r30, 0xBD	; 189
    5e32:	ff 4f       	sbci	r31, 0xFF	; 255
    5e34:	60 81       	ld	r22, Z
    5e36:	71 81       	ldd	r23, Z+1	; 0x01
    5e38:	82 81       	ldd	r24, Z+2	; 0x02
    5e3a:	93 81       	ldd	r25, Z+3	; 0x03
    5e3c:	20 e0       	ldi	r18, 0x00	; 0
    5e3e:	30 e0       	ldi	r19, 0x00	; 0
    5e40:	40 e2       	ldi	r20, 0x20	; 32
    5e42:	51 e4       	ldi	r21, 0x41	; 65
    5e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e48:	dc 01       	movw	r26, r24
    5e4a:	cb 01       	movw	r24, r22
    5e4c:	bc 01       	movw	r22, r24
    5e4e:	cd 01       	movw	r24, r26
    5e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e54:	dc 01       	movw	r26, r24
    5e56:	cb 01       	movw	r24, r22
    5e58:	9e af       	std	Y+62, r25	; 0x3e
    5e5a:	8d af       	std	Y+61, r24	; 0x3d
    5e5c:	0f c0       	rjmp	.+30     	; 0x5e7c <main+0x3158>
    5e5e:	88 ec       	ldi	r24, 0xC8	; 200
    5e60:	90 e0       	ldi	r25, 0x00	; 0
    5e62:	9c af       	std	Y+60, r25	; 0x3c
    5e64:	8b af       	std	Y+59, r24	; 0x3b
    5e66:	8b ad       	ldd	r24, Y+59	; 0x3b
    5e68:	9c ad       	ldd	r25, Y+60	; 0x3c
    5e6a:	01 97       	sbiw	r24, 0x01	; 1
    5e6c:	f1 f7       	brne	.-4      	; 0x5e6a <main+0x3146>
    5e6e:	9c af       	std	Y+60, r25	; 0x3c
    5e70:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e72:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e74:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e76:	01 97       	sbiw	r24, 0x01	; 1
    5e78:	9e af       	std	Y+62, r25	; 0x3e
    5e7a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e80:	00 97       	sbiw	r24, 0x00	; 0
    5e82:	69 f7       	brne	.-38     	; 0x5e5e <main+0x313a>
    5e84:	16 c0       	rjmp	.+44     	; 0x5eb2 <main+0x318e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e86:	fe 01       	movw	r30, r28
    5e88:	ff 96       	adiw	r30, 0x3f	; 63
    5e8a:	60 81       	ld	r22, Z
    5e8c:	71 81       	ldd	r23, Z+1	; 0x01
    5e8e:	82 81       	ldd	r24, Z+2	; 0x02
    5e90:	93 81       	ldd	r25, Z+3	; 0x03
    5e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e96:	dc 01       	movw	r26, r24
    5e98:	cb 01       	movw	r24, r22
    5e9a:	9e af       	std	Y+62, r25	; 0x3e
    5e9c:	8d af       	std	Y+61, r24	; 0x3d
    5e9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ea0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ea2:	9a af       	std	Y+58, r25	; 0x3a
    5ea4:	89 af       	std	Y+57, r24	; 0x39
    5ea6:	89 ad       	ldd	r24, Y+57	; 0x39
    5ea8:	9a ad       	ldd	r25, Y+58	; 0x3a
    5eaa:	01 97       	sbiw	r24, 0x01	; 1
    5eac:	f1 f7       	brne	.-4      	; 0x5eaa <main+0x3186>
    5eae:	9a af       	std	Y+58, r25	; 0x3a
    5eb0:	89 af       	std	Y+57, r24	; 0x39
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    5eb2:	de 01       	movw	r26, r28
    5eb4:	ad 53       	subi	r26, 0x3D	; 61
    5eb6:	be 4f       	sbci	r27, 0xFE	; 254
    5eb8:	fe 01       	movw	r30, r28
    5eba:	eb 53       	subi	r30, 0x3B	; 59
    5ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    5ebe:	80 81       	ld	r24, Z
    5ec0:	91 81       	ldd	r25, Z+1	; 0x01
    5ec2:	8a 56       	subi	r24, 0x6A	; 106
    5ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ec6:	8d 93       	st	X+, r24
    5ec8:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    5eca:	de 01       	movw	r26, r28
    5ecc:	af 53       	subi	r26, 0x3F	; 63
    5ece:	be 4f       	sbci	r27, 0xFE	; 254
    5ed0:	fe 01       	movw	r30, r28
    5ed2:	eb 53       	subi	r30, 0x3B	; 59
    5ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ed6:	80 81       	ld	r24, Z
    5ed8:	91 81       	ldd	r25, Z+1	; 0x01
    5eda:	86 59       	subi	r24, 0x96	; 150
    5edc:	90 40       	sbci	r25, 0x00	; 0
    5ede:	11 96       	adiw	r26, 0x01	; 1
    5ee0:	9c 93       	st	X, r25
    5ee2:	8e 93       	st	-X, r24
    5ee4:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 4372) && (Local_u16AnalogValue <= 4684))
    5ee8:	fe 01       	movw	r30, r28
    5eea:	eb 53       	subi	r30, 0x3B	; 59
    5eec:	fe 4f       	sbci	r31, 0xFE	; 254
    5eee:	80 81       	ld	r24, Z
    5ef0:	91 81       	ldd	r25, Z+1	; 0x01
    5ef2:	f1 e1       	ldi	r31, 0x11	; 17
    5ef4:	85 31       	cpi	r24, 0x15	; 21
    5ef6:	9f 07       	cpc	r25, r31
    5ef8:	08 f4       	brcc	.+2      	; 0x5efc <main+0x31d8>
    5efa:	21 c1       	rjmp	.+578    	; 0x613e <main+0x341a>
    5efc:	fe 01       	movw	r30, r28
    5efe:	eb 53       	subi	r30, 0x3B	; 59
    5f00:	fe 4f       	sbci	r31, 0xFE	; 254
    5f02:	80 81       	ld	r24, Z
    5f04:	91 81       	ldd	r25, Z+1	; 0x01
    5f06:	22 e1       	ldi	r18, 0x12	; 18
    5f08:	8d 34       	cpi	r24, 0x4D	; 77
    5f0a:	92 07       	cpc	r25, r18
    5f0c:	08 f0       	brcs	.+2      	; 0x5f10 <main+0x31ec>
    5f0e:	17 c1       	rjmp	.+558    	; 0x613e <main+0x341a>
	  {
		  LCD_u8_GoTo_XY(0,0);
    5f10:	80 e0       	ldi	r24, 0x00	; 0
    5f12:	60 e0       	ldi	r22, 0x00	; 0
    5f14:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    5f18:	80 e6       	ldi	r24, 0x60	; 96
    5f1a:	90 e0       	ldi	r25, 0x00	; 0
    5f1c:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,14,HamokshaRuning);
    5f20:	9e 01       	movw	r18, r28
    5f22:	2f 51       	subi	r18, 0x1F	; 31
    5f24:	3e 4f       	sbci	r19, 0xFE	; 254
    5f26:	81 e0       	ldi	r24, 0x01	; 1
    5f28:	61 e0       	ldi	r22, 0x01	; 1
    5f2a:	4e e0       	ldi	r20, 0x0E	; 14
    5f2c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    5f30:	80 e0       	ldi	r24, 0x00	; 0
    5f32:	90 e0       	ldi	r25, 0x00	; 0
    5f34:	a8 e4       	ldi	r26, 0x48	; 72
    5f36:	b3 e4       	ldi	r27, 0x43	; 67
    5f38:	8d ab       	std	Y+53, r24	; 0x35
    5f3a:	9e ab       	std	Y+54, r25	; 0x36
    5f3c:	af ab       	std	Y+55, r26	; 0x37
    5f3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f40:	6d a9       	ldd	r22, Y+53	; 0x35
    5f42:	7e a9       	ldd	r23, Y+54	; 0x36
    5f44:	8f a9       	ldd	r24, Y+55	; 0x37
    5f46:	98 ad       	ldd	r25, Y+56	; 0x38
    5f48:	20 e0       	ldi	r18, 0x00	; 0
    5f4a:	30 e0       	ldi	r19, 0x00	; 0
    5f4c:	4a ef       	ldi	r20, 0xFA	; 250
    5f4e:	54 e4       	ldi	r21, 0x44	; 68
    5f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f54:	dc 01       	movw	r26, r24
    5f56:	cb 01       	movw	r24, r22
    5f58:	89 ab       	std	Y+49, r24	; 0x31
    5f5a:	9a ab       	std	Y+50, r25	; 0x32
    5f5c:	ab ab       	std	Y+51, r26	; 0x33
    5f5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5f60:	69 a9       	ldd	r22, Y+49	; 0x31
    5f62:	7a a9       	ldd	r23, Y+50	; 0x32
    5f64:	8b a9       	ldd	r24, Y+51	; 0x33
    5f66:	9c a9       	ldd	r25, Y+52	; 0x34
    5f68:	20 e0       	ldi	r18, 0x00	; 0
    5f6a:	30 e0       	ldi	r19, 0x00	; 0
    5f6c:	40 e8       	ldi	r20, 0x80	; 128
    5f6e:	5f e3       	ldi	r21, 0x3F	; 63
    5f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f74:	88 23       	and	r24, r24
    5f76:	2c f4       	brge	.+10     	; 0x5f82 <main+0x325e>
		__ticks = 1;
    5f78:	81 e0       	ldi	r24, 0x01	; 1
    5f7a:	90 e0       	ldi	r25, 0x00	; 0
    5f7c:	98 ab       	std	Y+48, r25	; 0x30
    5f7e:	8f a7       	std	Y+47, r24	; 0x2f
    5f80:	3f c0       	rjmp	.+126    	; 0x6000 <main+0x32dc>
	else if (__tmp > 65535)
    5f82:	69 a9       	ldd	r22, Y+49	; 0x31
    5f84:	7a a9       	ldd	r23, Y+50	; 0x32
    5f86:	8b a9       	ldd	r24, Y+51	; 0x33
    5f88:	9c a9       	ldd	r25, Y+52	; 0x34
    5f8a:	20 e0       	ldi	r18, 0x00	; 0
    5f8c:	3f ef       	ldi	r19, 0xFF	; 255
    5f8e:	4f e7       	ldi	r20, 0x7F	; 127
    5f90:	57 e4       	ldi	r21, 0x47	; 71
    5f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f96:	18 16       	cp	r1, r24
    5f98:	4c f5       	brge	.+82     	; 0x5fec <main+0x32c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    5f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    5f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    5fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    5fa2:	20 e0       	ldi	r18, 0x00	; 0
    5fa4:	30 e0       	ldi	r19, 0x00	; 0
    5fa6:	40 e2       	ldi	r20, 0x20	; 32
    5fa8:	51 e4       	ldi	r21, 0x41	; 65
    5faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fae:	dc 01       	movw	r26, r24
    5fb0:	cb 01       	movw	r24, r22
    5fb2:	bc 01       	movw	r22, r24
    5fb4:	cd 01       	movw	r24, r26
    5fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fba:	dc 01       	movw	r26, r24
    5fbc:	cb 01       	movw	r24, r22
    5fbe:	98 ab       	std	Y+48, r25	; 0x30
    5fc0:	8f a7       	std	Y+47, r24	; 0x2f
    5fc2:	0f c0       	rjmp	.+30     	; 0x5fe2 <main+0x32be>
    5fc4:	88 ec       	ldi	r24, 0xC8	; 200
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	9e a7       	std	Y+46, r25	; 0x2e
    5fca:	8d a7       	std	Y+45, r24	; 0x2d
    5fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    5fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    5fd0:	01 97       	sbiw	r24, 0x01	; 1
    5fd2:	f1 f7       	brne	.-4      	; 0x5fd0 <main+0x32ac>
    5fd4:	9e a7       	std	Y+46, r25	; 0x2e
    5fd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fda:	98 a9       	ldd	r25, Y+48	; 0x30
    5fdc:	01 97       	sbiw	r24, 0x01	; 1
    5fde:	98 ab       	std	Y+48, r25	; 0x30
    5fe0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    5fe6:	00 97       	sbiw	r24, 0x00	; 0
    5fe8:	69 f7       	brne	.-38     	; 0x5fc4 <main+0x32a0>
    5fea:	14 c0       	rjmp	.+40     	; 0x6014 <main+0x32f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fec:	69 a9       	ldd	r22, Y+49	; 0x31
    5fee:	7a a9       	ldd	r23, Y+50	; 0x32
    5ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    5ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    5ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ff8:	dc 01       	movw	r26, r24
    5ffa:	cb 01       	movw	r24, r22
    5ffc:	98 ab       	std	Y+48, r25	; 0x30
    5ffe:	8f a7       	std	Y+47, r24	; 0x2f
    6000:	8f a5       	ldd	r24, Y+47	; 0x2f
    6002:	98 a9       	ldd	r25, Y+48	; 0x30
    6004:	9c a7       	std	Y+44, r25	; 0x2c
    6006:	8b a7       	std	Y+43, r24	; 0x2b
    6008:	8b a5       	ldd	r24, Y+43	; 0x2b
    600a:	9c a5       	ldd	r25, Y+44	; 0x2c
    600c:	01 97       	sbiw	r24, 0x01	; 1
    600e:	f1 f7       	brne	.-4      	; 0x600c <main+0x32e8>
    6010:	9c a7       	std	Y+44, r25	; 0x2c
    6012:	8b a7       	std	Y+43, r24	; 0x2b
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,14,Hamokshastanding);
    6014:	9e 01       	movw	r18, r28
    6016:	27 52       	subi	r18, 0x27	; 39
    6018:	3e 4f       	sbci	r19, 0xFE	; 254
    601a:	80 e0       	ldi	r24, 0x00	; 0
    601c:	61 e0       	ldi	r22, 0x01	; 1
    601e:	4e e0       	ldi	r20, 0x0E	; 14
    6020:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    6024:	80 e0       	ldi	r24, 0x00	; 0
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	a8 e4       	ldi	r26, 0x48	; 72
    602a:	b3 e4       	ldi	r27, 0x43	; 67
    602c:	8f a3       	std	Y+39, r24	; 0x27
    602e:	98 a7       	std	Y+40, r25	; 0x28
    6030:	a9 a7       	std	Y+41, r26	; 0x29
    6032:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6034:	6f a1       	ldd	r22, Y+39	; 0x27
    6036:	78 a5       	ldd	r23, Y+40	; 0x28
    6038:	89 a5       	ldd	r24, Y+41	; 0x29
    603a:	9a a5       	ldd	r25, Y+42	; 0x2a
    603c:	20 e0       	ldi	r18, 0x00	; 0
    603e:	30 e0       	ldi	r19, 0x00	; 0
    6040:	4a ef       	ldi	r20, 0xFA	; 250
    6042:	54 e4       	ldi	r21, 0x44	; 68
    6044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6048:	dc 01       	movw	r26, r24
    604a:	cb 01       	movw	r24, r22
    604c:	8b a3       	std	Y+35, r24	; 0x23
    604e:	9c a3       	std	Y+36, r25	; 0x24
    6050:	ad a3       	std	Y+37, r26	; 0x25
    6052:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6054:	6b a1       	ldd	r22, Y+35	; 0x23
    6056:	7c a1       	ldd	r23, Y+36	; 0x24
    6058:	8d a1       	ldd	r24, Y+37	; 0x25
    605a:	9e a1       	ldd	r25, Y+38	; 0x26
    605c:	20 e0       	ldi	r18, 0x00	; 0
    605e:	30 e0       	ldi	r19, 0x00	; 0
    6060:	40 e8       	ldi	r20, 0x80	; 128
    6062:	5f e3       	ldi	r21, 0x3F	; 63
    6064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6068:	88 23       	and	r24, r24
    606a:	2c f4       	brge	.+10     	; 0x6076 <main+0x3352>
		__ticks = 1;
    606c:	81 e0       	ldi	r24, 0x01	; 1
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	9a a3       	std	Y+34, r25	; 0x22
    6072:	89 a3       	std	Y+33, r24	; 0x21
    6074:	3f c0       	rjmp	.+126    	; 0x60f4 <main+0x33d0>
	else if (__tmp > 65535)
    6076:	6b a1       	ldd	r22, Y+35	; 0x23
    6078:	7c a1       	ldd	r23, Y+36	; 0x24
    607a:	8d a1       	ldd	r24, Y+37	; 0x25
    607c:	9e a1       	ldd	r25, Y+38	; 0x26
    607e:	20 e0       	ldi	r18, 0x00	; 0
    6080:	3f ef       	ldi	r19, 0xFF	; 255
    6082:	4f e7       	ldi	r20, 0x7F	; 127
    6084:	57 e4       	ldi	r21, 0x47	; 71
    6086:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    608a:	18 16       	cp	r1, r24
    608c:	4c f5       	brge	.+82     	; 0x60e0 <main+0x33bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    608e:	6f a1       	ldd	r22, Y+39	; 0x27
    6090:	78 a5       	ldd	r23, Y+40	; 0x28
    6092:	89 a5       	ldd	r24, Y+41	; 0x29
    6094:	9a a5       	ldd	r25, Y+42	; 0x2a
    6096:	20 e0       	ldi	r18, 0x00	; 0
    6098:	30 e0       	ldi	r19, 0x00	; 0
    609a:	40 e2       	ldi	r20, 0x20	; 32
    609c:	51 e4       	ldi	r21, 0x41	; 65
    609e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60a2:	dc 01       	movw	r26, r24
    60a4:	cb 01       	movw	r24, r22
    60a6:	bc 01       	movw	r22, r24
    60a8:	cd 01       	movw	r24, r26
    60aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ae:	dc 01       	movw	r26, r24
    60b0:	cb 01       	movw	r24, r22
    60b2:	9a a3       	std	Y+34, r25	; 0x22
    60b4:	89 a3       	std	Y+33, r24	; 0x21
    60b6:	0f c0       	rjmp	.+30     	; 0x60d6 <main+0x33b2>
    60b8:	88 ec       	ldi	r24, 0xC8	; 200
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	98 a3       	std	Y+32, r25	; 0x20
    60be:	8f 8f       	std	Y+31, r24	; 0x1f
    60c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60c2:	98 a1       	ldd	r25, Y+32	; 0x20
    60c4:	01 97       	sbiw	r24, 0x01	; 1
    60c6:	f1 f7       	brne	.-4      	; 0x60c4 <main+0x33a0>
    60c8:	98 a3       	std	Y+32, r25	; 0x20
    60ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60cc:	89 a1       	ldd	r24, Y+33	; 0x21
    60ce:	9a a1       	ldd	r25, Y+34	; 0x22
    60d0:	01 97       	sbiw	r24, 0x01	; 1
    60d2:	9a a3       	std	Y+34, r25	; 0x22
    60d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60d6:	89 a1       	ldd	r24, Y+33	; 0x21
    60d8:	9a a1       	ldd	r25, Y+34	; 0x22
    60da:	00 97       	sbiw	r24, 0x00	; 0
    60dc:	69 f7       	brne	.-38     	; 0x60b8 <main+0x3394>
    60de:	14 c0       	rjmp	.+40     	; 0x6108 <main+0x33e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60e0:	6b a1       	ldd	r22, Y+35	; 0x23
    60e2:	7c a1       	ldd	r23, Y+36	; 0x24
    60e4:	8d a1       	ldd	r24, Y+37	; 0x25
    60e6:	9e a1       	ldd	r25, Y+38	; 0x26
    60e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ec:	dc 01       	movw	r26, r24
    60ee:	cb 01       	movw	r24, r22
    60f0:	9a a3       	std	Y+34, r25	; 0x22
    60f2:	89 a3       	std	Y+33, r24	; 0x21
    60f4:	89 a1       	ldd	r24, Y+33	; 0x21
    60f6:	9a a1       	ldd	r25, Y+34	; 0x22
    60f8:	9e 8f       	std	Y+30, r25	; 0x1e
    60fa:	8d 8f       	std	Y+29, r24	; 0x1d
    60fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    60fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6100:	01 97       	sbiw	r24, 0x01	; 1
    6102:	f1 f7       	brne	.-4      	; 0x6100 <main+0x33dc>
    6104:	9e 8f       	std	Y+30, r25	; 0x1e
    6106:	8d 8f       	std	Y+29, r24	; 0x1d
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    6108:	de 01       	movw	r26, r28
    610a:	ad 53       	subi	r26, 0x3D	; 61
    610c:	be 4f       	sbci	r27, 0xFE	; 254
    610e:	fe 01       	movw	r30, r28
    6110:	eb 53       	subi	r30, 0x3B	; 59
    6112:	fe 4f       	sbci	r31, 0xFE	; 254
    6114:	80 81       	ld	r24, Z
    6116:	91 81       	ldd	r25, Z+1	; 0x01
    6118:	8a 56       	subi	r24, 0x6A	; 106
    611a:	9f 4f       	sbci	r25, 0xFF	; 255
    611c:	8d 93       	st	X+, r24
    611e:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    6120:	de 01       	movw	r26, r28
    6122:	af 53       	subi	r26, 0x3F	; 63
    6124:	be 4f       	sbci	r27, 0xFE	; 254
    6126:	fe 01       	movw	r30, r28
    6128:	eb 53       	subi	r30, 0x3B	; 59
    612a:	fe 4f       	sbci	r31, 0xFE	; 254
    612c:	80 81       	ld	r24, Z
    612e:	91 81       	ldd	r25, Z+1	; 0x01
    6130:	86 59       	subi	r24, 0x96	; 150
    6132:	90 40       	sbci	r25, 0x00	; 0
    6134:	11 96       	adiw	r26, 0x01	; 1
    6136:	9c 93       	st	X, r25
    6138:	8e 93       	st	-X, r24
    613a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

	  }
	  else if((Local_u16AnalogValue > 4684))
    613e:	fe 01       	movw	r30, r28
    6140:	eb 53       	subi	r30, 0x3B	; 59
    6142:	fe 4f       	sbci	r31, 0xFE	; 254
    6144:	80 81       	ld	r24, Z
    6146:	91 81       	ldd	r25, Z+1	; 0x01
    6148:	e2 e1       	ldi	r30, 0x12	; 18
    614a:	8d 34       	cpi	r24, 0x4D	; 77
    614c:	9e 07       	cpc	r25, r30
    614e:	10 f4       	brcc	.+4      	; 0x6154 <main+0x3430>
    6150:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>
	  {
		  LCD_u8_GoTo_XY(0,0);
    6154:	80 e0       	ldi	r24, 0x00	; 0
    6156:	60 e0       	ldi	r22, 0x00	; 0
    6158:	0e 94 44 15 	call	0x2a88	; 0x2a88 <LCD_u8_GoTo_XY>
		  LCD_voidWriteString("Adjust Potentio");
    615c:	80 e6       	ldi	r24, 0x60	; 96
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_voidWriteString>
		  LCD_voidSendSpecialChar(1,1,15,HamokshaRuning);
    6164:	9e 01       	movw	r18, r28
    6166:	2f 51       	subi	r18, 0x1F	; 31
    6168:	3e 4f       	sbci	r19, 0xFE	; 254
    616a:	81 e0       	ldi	r24, 0x01	; 1
    616c:	61 e0       	ldi	r22, 0x01	; 1
    616e:	4f e0       	ldi	r20, 0x0F	; 15
    6170:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    6174:	80 e0       	ldi	r24, 0x00	; 0
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	a8 e4       	ldi	r26, 0x48	; 72
    617a:	b3 e4       	ldi	r27, 0x43	; 67
    617c:	89 8f       	std	Y+25, r24	; 0x19
    617e:	9a 8f       	std	Y+26, r25	; 0x1a
    6180:	ab 8f       	std	Y+27, r26	; 0x1b
    6182:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6184:	69 8d       	ldd	r22, Y+25	; 0x19
    6186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    618a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    618c:	20 e0       	ldi	r18, 0x00	; 0
    618e:	30 e0       	ldi	r19, 0x00	; 0
    6190:	4a ef       	ldi	r20, 0xFA	; 250
    6192:	54 e4       	ldi	r21, 0x44	; 68
    6194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6198:	dc 01       	movw	r26, r24
    619a:	cb 01       	movw	r24, r22
    619c:	8d 8b       	std	Y+21, r24	; 0x15
    619e:	9e 8b       	std	Y+22, r25	; 0x16
    61a0:	af 8b       	std	Y+23, r26	; 0x17
    61a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    61a4:	6d 89       	ldd	r22, Y+21	; 0x15
    61a6:	7e 89       	ldd	r23, Y+22	; 0x16
    61a8:	8f 89       	ldd	r24, Y+23	; 0x17
    61aa:	98 8d       	ldd	r25, Y+24	; 0x18
    61ac:	20 e0       	ldi	r18, 0x00	; 0
    61ae:	30 e0       	ldi	r19, 0x00	; 0
    61b0:	40 e8       	ldi	r20, 0x80	; 128
    61b2:	5f e3       	ldi	r21, 0x3F	; 63
    61b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61b8:	88 23       	and	r24, r24
    61ba:	2c f4       	brge	.+10     	; 0x61c6 <main+0x34a2>
		__ticks = 1;
    61bc:	81 e0       	ldi	r24, 0x01	; 1
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	9c 8b       	std	Y+20, r25	; 0x14
    61c2:	8b 8b       	std	Y+19, r24	; 0x13
    61c4:	3f c0       	rjmp	.+126    	; 0x6244 <main+0x3520>
	else if (__tmp > 65535)
    61c6:	6d 89       	ldd	r22, Y+21	; 0x15
    61c8:	7e 89       	ldd	r23, Y+22	; 0x16
    61ca:	8f 89       	ldd	r24, Y+23	; 0x17
    61cc:	98 8d       	ldd	r25, Y+24	; 0x18
    61ce:	20 e0       	ldi	r18, 0x00	; 0
    61d0:	3f ef       	ldi	r19, 0xFF	; 255
    61d2:	4f e7       	ldi	r20, 0x7F	; 127
    61d4:	57 e4       	ldi	r21, 0x47	; 71
    61d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61da:	18 16       	cp	r1, r24
    61dc:	4c f5       	brge	.+82     	; 0x6230 <main+0x350c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61de:	69 8d       	ldd	r22, Y+25	; 0x19
    61e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    61e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    61e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    61e6:	20 e0       	ldi	r18, 0x00	; 0
    61e8:	30 e0       	ldi	r19, 0x00	; 0
    61ea:	40 e2       	ldi	r20, 0x20	; 32
    61ec:	51 e4       	ldi	r21, 0x41	; 65
    61ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61f2:	dc 01       	movw	r26, r24
    61f4:	cb 01       	movw	r24, r22
    61f6:	bc 01       	movw	r22, r24
    61f8:	cd 01       	movw	r24, r26
    61fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61fe:	dc 01       	movw	r26, r24
    6200:	cb 01       	movw	r24, r22
    6202:	9c 8b       	std	Y+20, r25	; 0x14
    6204:	8b 8b       	std	Y+19, r24	; 0x13
    6206:	0f c0       	rjmp	.+30     	; 0x6226 <main+0x3502>
    6208:	88 ec       	ldi	r24, 0xC8	; 200
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	9a 8b       	std	Y+18, r25	; 0x12
    620e:	89 8b       	std	Y+17, r24	; 0x11
    6210:	89 89       	ldd	r24, Y+17	; 0x11
    6212:	9a 89       	ldd	r25, Y+18	; 0x12
    6214:	01 97       	sbiw	r24, 0x01	; 1
    6216:	f1 f7       	brne	.-4      	; 0x6214 <main+0x34f0>
    6218:	9a 8b       	std	Y+18, r25	; 0x12
    621a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    621c:	8b 89       	ldd	r24, Y+19	; 0x13
    621e:	9c 89       	ldd	r25, Y+20	; 0x14
    6220:	01 97       	sbiw	r24, 0x01	; 1
    6222:	9c 8b       	std	Y+20, r25	; 0x14
    6224:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6226:	8b 89       	ldd	r24, Y+19	; 0x13
    6228:	9c 89       	ldd	r25, Y+20	; 0x14
    622a:	00 97       	sbiw	r24, 0x00	; 0
    622c:	69 f7       	brne	.-38     	; 0x6208 <main+0x34e4>
    622e:	14 c0       	rjmp	.+40     	; 0x6258 <main+0x3534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6230:	6d 89       	ldd	r22, Y+21	; 0x15
    6232:	7e 89       	ldd	r23, Y+22	; 0x16
    6234:	8f 89       	ldd	r24, Y+23	; 0x17
    6236:	98 8d       	ldd	r25, Y+24	; 0x18
    6238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    623c:	dc 01       	movw	r26, r24
    623e:	cb 01       	movw	r24, r22
    6240:	9c 8b       	std	Y+20, r25	; 0x14
    6242:	8b 8b       	std	Y+19, r24	; 0x13
    6244:	8b 89       	ldd	r24, Y+19	; 0x13
    6246:	9c 89       	ldd	r25, Y+20	; 0x14
    6248:	98 8b       	std	Y+16, r25	; 0x10
    624a:	8f 87       	std	Y+15, r24	; 0x0f
    624c:	8f 85       	ldd	r24, Y+15	; 0x0f
    624e:	98 89       	ldd	r25, Y+16	; 0x10
    6250:	01 97       	sbiw	r24, 0x01	; 1
    6252:	f1 f7       	brne	.-4      	; 0x6250 <main+0x352c>
    6254:	98 8b       	std	Y+16, r25	; 0x10
    6256:	8f 87       	std	Y+15, r24	; 0x0f
		  _delay_ms(200);
		  LCD_voidSendSpecialChar(0,1,15,Hamokshastanding);
    6258:	9e 01       	movw	r18, r28
    625a:	27 52       	subi	r18, 0x27	; 39
    625c:	3e 4f       	sbci	r19, 0xFE	; 254
    625e:	80 e0       	ldi	r24, 0x00	; 0
    6260:	61 e0       	ldi	r22, 0x01	; 1
    6262:	4f e0       	ldi	r20, 0x0F	; 15
    6264:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <LCD_voidSendSpecialChar>
    6268:	80 e0       	ldi	r24, 0x00	; 0
    626a:	90 e0       	ldi	r25, 0x00	; 0
    626c:	a8 e4       	ldi	r26, 0x48	; 72
    626e:	b3 e4       	ldi	r27, 0x43	; 67
    6270:	8b 87       	std	Y+11, r24	; 0x0b
    6272:	9c 87       	std	Y+12, r25	; 0x0c
    6274:	ad 87       	std	Y+13, r26	; 0x0d
    6276:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6278:	6b 85       	ldd	r22, Y+11	; 0x0b
    627a:	7c 85       	ldd	r23, Y+12	; 0x0c
    627c:	8d 85       	ldd	r24, Y+13	; 0x0d
    627e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6280:	20 e0       	ldi	r18, 0x00	; 0
    6282:	30 e0       	ldi	r19, 0x00	; 0
    6284:	4a ef       	ldi	r20, 0xFA	; 250
    6286:	54 e4       	ldi	r21, 0x44	; 68
    6288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    628c:	dc 01       	movw	r26, r24
    628e:	cb 01       	movw	r24, r22
    6290:	8f 83       	std	Y+7, r24	; 0x07
    6292:	98 87       	std	Y+8, r25	; 0x08
    6294:	a9 87       	std	Y+9, r26	; 0x09
    6296:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6298:	6f 81       	ldd	r22, Y+7	; 0x07
    629a:	78 85       	ldd	r23, Y+8	; 0x08
    629c:	89 85       	ldd	r24, Y+9	; 0x09
    629e:	9a 85       	ldd	r25, Y+10	; 0x0a
    62a0:	20 e0       	ldi	r18, 0x00	; 0
    62a2:	30 e0       	ldi	r19, 0x00	; 0
    62a4:	40 e8       	ldi	r20, 0x80	; 128
    62a6:	5f e3       	ldi	r21, 0x3F	; 63
    62a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    62ac:	88 23       	and	r24, r24
    62ae:	2c f4       	brge	.+10     	; 0x62ba <main+0x3596>
		__ticks = 1;
    62b0:	81 e0       	ldi	r24, 0x01	; 1
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	9e 83       	std	Y+6, r25	; 0x06
    62b6:	8d 83       	std	Y+5, r24	; 0x05
    62b8:	3f c0       	rjmp	.+126    	; 0x6338 <main+0x3614>
	else if (__tmp > 65535)
    62ba:	6f 81       	ldd	r22, Y+7	; 0x07
    62bc:	78 85       	ldd	r23, Y+8	; 0x08
    62be:	89 85       	ldd	r24, Y+9	; 0x09
    62c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    62c2:	20 e0       	ldi	r18, 0x00	; 0
    62c4:	3f ef       	ldi	r19, 0xFF	; 255
    62c6:	4f e7       	ldi	r20, 0x7F	; 127
    62c8:	57 e4       	ldi	r21, 0x47	; 71
    62ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62ce:	18 16       	cp	r1, r24
    62d0:	4c f5       	brge	.+82     	; 0x6324 <main+0x3600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    62d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    62d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    62d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    62da:	20 e0       	ldi	r18, 0x00	; 0
    62dc:	30 e0       	ldi	r19, 0x00	; 0
    62de:	40 e2       	ldi	r20, 0x20	; 32
    62e0:	51 e4       	ldi	r21, 0x41	; 65
    62e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62e6:	dc 01       	movw	r26, r24
    62e8:	cb 01       	movw	r24, r22
    62ea:	bc 01       	movw	r22, r24
    62ec:	cd 01       	movw	r24, r26
    62ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62f2:	dc 01       	movw	r26, r24
    62f4:	cb 01       	movw	r24, r22
    62f6:	9e 83       	std	Y+6, r25	; 0x06
    62f8:	8d 83       	std	Y+5, r24	; 0x05
    62fa:	0f c0       	rjmp	.+30     	; 0x631a <main+0x35f6>
    62fc:	88 ec       	ldi	r24, 0xC8	; 200
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	9c 83       	std	Y+4, r25	; 0x04
    6302:	8b 83       	std	Y+3, r24	; 0x03
    6304:	8b 81       	ldd	r24, Y+3	; 0x03
    6306:	9c 81       	ldd	r25, Y+4	; 0x04
    6308:	01 97       	sbiw	r24, 0x01	; 1
    630a:	f1 f7       	brne	.-4      	; 0x6308 <main+0x35e4>
    630c:	9c 83       	std	Y+4, r25	; 0x04
    630e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6310:	8d 81       	ldd	r24, Y+5	; 0x05
    6312:	9e 81       	ldd	r25, Y+6	; 0x06
    6314:	01 97       	sbiw	r24, 0x01	; 1
    6316:	9e 83       	std	Y+6, r25	; 0x06
    6318:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    631a:	8d 81       	ldd	r24, Y+5	; 0x05
    631c:	9e 81       	ldd	r25, Y+6	; 0x06
    631e:	00 97       	sbiw	r24, 0x00	; 0
    6320:	69 f7       	brne	.-38     	; 0x62fc <main+0x35d8>
    6322:	14 c0       	rjmp	.+40     	; 0x634c <main+0x3628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6324:	6f 81       	ldd	r22, Y+7	; 0x07
    6326:	78 85       	ldd	r23, Y+8	; 0x08
    6328:	89 85       	ldd	r24, Y+9	; 0x09
    632a:	9a 85       	ldd	r25, Y+10	; 0x0a
    632c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6330:	dc 01       	movw	r26, r24
    6332:	cb 01       	movw	r24, r22
    6334:	9e 83       	std	Y+6, r25	; 0x06
    6336:	8d 83       	std	Y+5, r24	; 0x05
    6338:	8d 81       	ldd	r24, Y+5	; 0x05
    633a:	9e 81       	ldd	r25, Y+6	; 0x06
    633c:	9a 83       	std	Y+2, r25	; 0x02
    633e:	89 83       	std	Y+1, r24	; 0x01
    6340:	89 81       	ldd	r24, Y+1	; 0x01
    6342:	9a 81       	ldd	r25, Y+2	; 0x02
    6344:	01 97       	sbiw	r24, 0x01	; 1
    6346:	f1 f7       	brne	.-4      	; 0x6344 <main+0x3620>
    6348:	9a 83       	std	Y+2, r25	; 0x02
    634a:	89 83       	std	Y+1, r24	; 0x01
		  _delay_ms(200);
		  Local_u16LastAnalogValue = Local_u16AnalogValue + 150;
    634c:	de 01       	movw	r26, r28
    634e:	ad 53       	subi	r26, 0x3D	; 61
    6350:	be 4f       	sbci	r27, 0xFE	; 254
    6352:	fe 01       	movw	r30, r28
    6354:	eb 53       	subi	r30, 0x3B	; 59
    6356:	fe 4f       	sbci	r31, 0xFE	; 254
    6358:	80 81       	ld	r24, Z
    635a:	91 81       	ldd	r25, Z+1	; 0x01
    635c:	8a 56       	subi	r24, 0x6A	; 106
    635e:	9f 4f       	sbci	r25, 0xFF	; 255
    6360:	8d 93       	st	X+, r24
    6362:	9c 93       	st	X, r25
		  Local_u16Last2AnalogValue = Local_u16AnalogValue - 150;
    6364:	de 01       	movw	r26, r28
    6366:	af 53       	subi	r26, 0x3F	; 63
    6368:	be 4f       	sbci	r27, 0xFE	; 254
    636a:	fe 01       	movw	r30, r28
    636c:	eb 53       	subi	r30, 0x3B	; 59
    636e:	fe 4f       	sbci	r31, 0xFE	; 254
    6370:	80 81       	ld	r24, Z
    6372:	91 81       	ldd	r25, Z+1	; 0x01
    6374:	86 59       	subi	r24, 0x96	; 150
    6376:	90 40       	sbci	r25, 0x00	; 0
    6378:	11 96       	adiw	r26, 0x01	; 1
    637a:	9c 93       	st	X, r25
    637c:	8e 93       	st	-X, r24
    637e:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <main+0x2d2>

00006382 <__mulsi3>:
    6382:	62 9f       	mul	r22, r18
    6384:	d0 01       	movw	r26, r0
    6386:	73 9f       	mul	r23, r19
    6388:	f0 01       	movw	r30, r0
    638a:	82 9f       	mul	r24, r18
    638c:	e0 0d       	add	r30, r0
    638e:	f1 1d       	adc	r31, r1
    6390:	64 9f       	mul	r22, r20
    6392:	e0 0d       	add	r30, r0
    6394:	f1 1d       	adc	r31, r1
    6396:	92 9f       	mul	r25, r18
    6398:	f0 0d       	add	r31, r0
    639a:	83 9f       	mul	r24, r19
    639c:	f0 0d       	add	r31, r0
    639e:	74 9f       	mul	r23, r20
    63a0:	f0 0d       	add	r31, r0
    63a2:	65 9f       	mul	r22, r21
    63a4:	f0 0d       	add	r31, r0
    63a6:	99 27       	eor	r25, r25
    63a8:	72 9f       	mul	r23, r18
    63aa:	b0 0d       	add	r27, r0
    63ac:	e1 1d       	adc	r30, r1
    63ae:	f9 1f       	adc	r31, r25
    63b0:	63 9f       	mul	r22, r19
    63b2:	b0 0d       	add	r27, r0
    63b4:	e1 1d       	adc	r30, r1
    63b6:	f9 1f       	adc	r31, r25
    63b8:	bd 01       	movw	r22, r26
    63ba:	cf 01       	movw	r24, r30
    63bc:	11 24       	eor	r1, r1
    63be:	08 95       	ret

000063c0 <__udivmodsi4>:
    63c0:	a1 e2       	ldi	r26, 0x21	; 33
    63c2:	1a 2e       	mov	r1, r26
    63c4:	aa 1b       	sub	r26, r26
    63c6:	bb 1b       	sub	r27, r27
    63c8:	fd 01       	movw	r30, r26
    63ca:	0d c0       	rjmp	.+26     	; 0x63e6 <__udivmodsi4_ep>

000063cc <__udivmodsi4_loop>:
    63cc:	aa 1f       	adc	r26, r26
    63ce:	bb 1f       	adc	r27, r27
    63d0:	ee 1f       	adc	r30, r30
    63d2:	ff 1f       	adc	r31, r31
    63d4:	a2 17       	cp	r26, r18
    63d6:	b3 07       	cpc	r27, r19
    63d8:	e4 07       	cpc	r30, r20
    63da:	f5 07       	cpc	r31, r21
    63dc:	20 f0       	brcs	.+8      	; 0x63e6 <__udivmodsi4_ep>
    63de:	a2 1b       	sub	r26, r18
    63e0:	b3 0b       	sbc	r27, r19
    63e2:	e4 0b       	sbc	r30, r20
    63e4:	f5 0b       	sbc	r31, r21

000063e6 <__udivmodsi4_ep>:
    63e6:	66 1f       	adc	r22, r22
    63e8:	77 1f       	adc	r23, r23
    63ea:	88 1f       	adc	r24, r24
    63ec:	99 1f       	adc	r25, r25
    63ee:	1a 94       	dec	r1
    63f0:	69 f7       	brne	.-38     	; 0x63cc <__udivmodsi4_loop>
    63f2:	60 95       	com	r22
    63f4:	70 95       	com	r23
    63f6:	80 95       	com	r24
    63f8:	90 95       	com	r25
    63fa:	9b 01       	movw	r18, r22
    63fc:	ac 01       	movw	r20, r24
    63fe:	bd 01       	movw	r22, r26
    6400:	cf 01       	movw	r24, r30
    6402:	08 95       	ret

00006404 <__prologue_saves__>:
    6404:	2f 92       	push	r2
    6406:	3f 92       	push	r3
    6408:	4f 92       	push	r4
    640a:	5f 92       	push	r5
    640c:	6f 92       	push	r6
    640e:	7f 92       	push	r7
    6410:	8f 92       	push	r8
    6412:	9f 92       	push	r9
    6414:	af 92       	push	r10
    6416:	bf 92       	push	r11
    6418:	cf 92       	push	r12
    641a:	df 92       	push	r13
    641c:	ef 92       	push	r14
    641e:	ff 92       	push	r15
    6420:	0f 93       	push	r16
    6422:	1f 93       	push	r17
    6424:	cf 93       	push	r28
    6426:	df 93       	push	r29
    6428:	cd b7       	in	r28, 0x3d	; 61
    642a:	de b7       	in	r29, 0x3e	; 62
    642c:	ca 1b       	sub	r28, r26
    642e:	db 0b       	sbc	r29, r27
    6430:	0f b6       	in	r0, 0x3f	; 63
    6432:	f8 94       	cli
    6434:	de bf       	out	0x3e, r29	; 62
    6436:	0f be       	out	0x3f, r0	; 63
    6438:	cd bf       	out	0x3d, r28	; 61
    643a:	09 94       	ijmp

0000643c <__epilogue_restores__>:
    643c:	2a 88       	ldd	r2, Y+18	; 0x12
    643e:	39 88       	ldd	r3, Y+17	; 0x11
    6440:	48 88       	ldd	r4, Y+16	; 0x10
    6442:	5f 84       	ldd	r5, Y+15	; 0x0f
    6444:	6e 84       	ldd	r6, Y+14	; 0x0e
    6446:	7d 84       	ldd	r7, Y+13	; 0x0d
    6448:	8c 84       	ldd	r8, Y+12	; 0x0c
    644a:	9b 84       	ldd	r9, Y+11	; 0x0b
    644c:	aa 84       	ldd	r10, Y+10	; 0x0a
    644e:	b9 84       	ldd	r11, Y+9	; 0x09
    6450:	c8 84       	ldd	r12, Y+8	; 0x08
    6452:	df 80       	ldd	r13, Y+7	; 0x07
    6454:	ee 80       	ldd	r14, Y+6	; 0x06
    6456:	fd 80       	ldd	r15, Y+5	; 0x05
    6458:	0c 81       	ldd	r16, Y+4	; 0x04
    645a:	1b 81       	ldd	r17, Y+3	; 0x03
    645c:	aa 81       	ldd	r26, Y+2	; 0x02
    645e:	b9 81       	ldd	r27, Y+1	; 0x01
    6460:	ce 0f       	add	r28, r30
    6462:	d1 1d       	adc	r29, r1
    6464:	0f b6       	in	r0, 0x3f	; 63
    6466:	f8 94       	cli
    6468:	de bf       	out	0x3e, r29	; 62
    646a:	0f be       	out	0x3f, r0	; 63
    646c:	cd bf       	out	0x3d, r28	; 61
    646e:	ed 01       	movw	r28, r26
    6470:	08 95       	ret

00006472 <_exit>:
    6472:	f8 94       	cli

00006474 <__stop_program>:
    6474:	ff cf       	rjmp	.-2      	; 0x6474 <__stop_program>
