
EEPROM_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e9c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002e9c  00002f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027b4  00000000  00000000  00002f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000efb  00000000  00000000  000056cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000065c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006727  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000068b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000088fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000099fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ab00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000adc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <main>
      7a:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	0f 92       	push	r0
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     c98:	ea e3       	ldi	r30, 0x3A	; 58
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	10 82       	st	Z, r1
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     ca4:	e4 e3       	ldi	r30, 0x34	; 52
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 ee       	ldi	r24, 0xE0	; 224
     caa:	80 83       	st	Z, r24
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     cac:	e1 e3       	ldi	r30, 0x31	; 49
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     cb4:	eb e3       	ldi	r30, 0x3B	; 59
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     cba:	e8 e3       	ldi	r30, 0x38	; 56
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     cc0:	e5 e3       	ldi	r30, 0x35	; 53
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     cc6:	e2 e3       	ldi	r30, 0x32	; 50
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	2e 97       	sbiw	r28, 0x0e	; 14
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	8a 83       	std	Y+2, r24	; 0x02
     cea:	6b 83       	std	Y+3, r22	; 0x03
     cec:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	84 30       	cpi	r24, 0x04	; 4
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <DIO_u8SetPinDirection+0x26>
     cf8:	0c c1       	rjmp	.+536    	; 0xf12 <DIO_u8SetPinDirection+0x23e>
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	88 30       	cpi	r24, 0x08	; 8
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <DIO_u8SetPinDirection+0x2e>
     d00:	08 c1       	rjmp	.+528    	; 0xf12 <DIO_u8SetPinDirection+0x23e>
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	88 23       	and	r24, r24
     d06:	21 f0       	breq	.+8      	; 0xd10 <DIO_u8SetPinDirection+0x3c>
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	09 f0       	breq	.+2      	; 0xd10 <DIO_u8SetPinDirection+0x3c>
     d0e:	01 c1       	rjmp	.+514    	; 0xf12 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3e 87       	std	Y+14, r19	; 0x0e
     d18:	2d 87       	std	Y+13, r18	; 0x0d
     d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_u8SetPinDirection+0x52>
     d24:	4f c0       	rjmp	.+158    	; 0xdc4 <DIO_u8SetPinDirection+0xf0>
     d26:	2d 85       	ldd	r18, Y+13	; 0x0d
     d28:	3e 85       	ldd	r19, Y+14	; 0x0e
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	2c f4       	brge	.+10     	; 0xd3a <DIO_u8SetPinDirection+0x66>
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	71 f0       	breq	.+28     	; 0xd54 <DIO_u8SetPinDirection+0x80>
     d38:	ed c0       	rjmp	.+474    	; 0xf14 <DIO_u8SetPinDirection+0x240>
     d3a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_u8SetPinDirection+0x72>
     d44:	77 c0       	rjmp	.+238    	; 0xe34 <DIO_u8SetPinDirection+0x160>
     d46:	8d 85       	ldd	r24, Y+13	; 0x0d
     d48:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_u8SetPinDirection+0x7e>
     d50:	a9 c0       	rjmp	.+338    	; 0xea4 <DIO_u8SetPinDirection+0x1d0>
     d52:	e0 c0       	rjmp	.+448    	; 0xf14 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3c 87       	std	Y+12, r19	; 0x0c
     d5c:	2b 87       	std	Y+11, r18	; 0x0b
     d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d60:	9c 85       	ldd	r25, Y+12	; 0x0c
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	d1 f0       	breq	.+52     	; 0xd9a <DIO_u8SetPinDirection+0xc6>
     d66:	2b 85       	ldd	r18, Y+11	; 0x0b
     d68:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6a:	21 30       	cpi	r18, 0x01	; 1
     d6c:	31 05       	cpc	r19, r1
     d6e:	09 f0       	breq	.+2      	; 0xd72 <DIO_u8SetPinDirection+0x9e>
     d70:	d1 c0       	rjmp	.+418    	; 0xf14 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     d72:	aa e3       	ldi	r26, 0x3A	; 58
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ea e3       	ldi	r30, 0x3A	; 58
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_u8SetPinDirection+0xbc>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_u8SetPinDirection+0xb8>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	bd c0       	rjmp	.+378    	; 0xf14 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     d9a:	aa e3       	ldi	r26, 0x3A	; 58
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e3       	ldi	r30, 0x3A	; 58
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_u8SetPinDirection+0xe4>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_u8SetPinDirection+0xe0>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	a8 c0       	rjmp	.+336    	; 0xf14 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3a 87       	std	Y+10, r19	; 0x0a
     dcc:	29 87       	std	Y+9, r18	; 0x09
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <DIO_u8SetPinDirection+0x136>
     dd6:	29 85       	ldd	r18, Y+9	; 0x09
     dd8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dda:	21 30       	cpi	r18, 0x01	; 1
     ddc:	31 05       	cpc	r19, r1
     dde:	09 f0       	breq	.+2      	; 0xde2 <DIO_u8SetPinDirection+0x10e>
     de0:	99 c0       	rjmp	.+306    	; 0xf14 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     de2:	a7 e3       	ldi	r26, 0x37	; 55
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_u8SetPinDirection+0x12c>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_u8SetPinDirection+0x128>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	85 c0       	rjmp	.+266    	; 0xf14 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     e0a:	a7 e3       	ldi	r26, 0x37	; 55
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e7 e3       	ldi	r30, 0x37	; 55
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_u8SetPinDirection+0x154>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_u8SetPinDirection+0x150>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	70 c0       	rjmp	.+224    	; 0xf14 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	38 87       	std	Y+8, r19	; 0x08
     e3c:	2f 83       	std	Y+7, r18	; 0x07
     e3e:	8f 81       	ldd	r24, Y+7	; 0x07
     e40:	98 85       	ldd	r25, Y+8	; 0x08
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	d1 f0       	breq	.+52     	; 0xe7a <DIO_u8SetPinDirection+0x1a6>
     e46:	2f 81       	ldd	r18, Y+7	; 0x07
     e48:	38 85       	ldd	r19, Y+8	; 0x08
     e4a:	21 30       	cpi	r18, 0x01	; 1
     e4c:	31 05       	cpc	r19, r1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <DIO_u8SetPinDirection+0x17e>
     e50:	61 c0       	rjmp	.+194    	; 0xf14 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     e52:	a4 e3       	ldi	r26, 0x34	; 52
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e4 e3       	ldi	r30, 0x34	; 52
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_u8SetPinDirection+0x19c>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_u8SetPinDirection+0x198>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	4d c0       	rjmp	.+154    	; 0xf14 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     e7a:	a4 e3       	ldi	r26, 0x34	; 52
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e4 e3       	ldi	r30, 0x34	; 52
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_u8SetPinDirection+0x1c4>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_u8SetPinDirection+0x1c0>
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	38 c0       	rjmp	.+112    	; 0xf14 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3e 83       	std	Y+6, r19	; 0x06
     eac:	2d 83       	std	Y+5, r18	; 0x05
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	c9 f0       	breq	.+50     	; 0xee8 <DIO_u8SetPinDirection+0x214>
     eb6:	2d 81       	ldd	r18, Y+5	; 0x05
     eb8:	3e 81       	ldd	r19, Y+6	; 0x06
     eba:	21 30       	cpi	r18, 0x01	; 1
     ebc:	31 05       	cpc	r19, r1
     ebe:	51 f5       	brne	.+84     	; 0xf14 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
     ec0:	a1 e3       	ldi	r26, 0x31	; 49
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e1 e3       	ldi	r30, 0x31	; 49
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_u8SetPinDirection+0x20a>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_u8SetPinDirection+0x206>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	16 c0       	rjmp	.+44     	; 0xf14 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
     ee8:	a1 e3       	ldi	r26, 0x31	; 49
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e1 e3       	ldi	r30, 0x31	; 49
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_u8SetPinDirection+0x232>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_u8SetPinDirection+0x22e>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     f12:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
}
     f16:	2e 96       	adiw	r28, 0x0e	; 14
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	2e 97       	sbiw	r28, 0x0e	; 14
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	6b 83       	std	Y+3, r22	; 0x03
     f40:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	84 30       	cpi	r24, 0x04	; 4
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <DIO_u8SetPinValue+0x26>
     f4c:	0c c1       	rjmp	.+536    	; 0x1166 <DIO_u8SetPinValue+0x23e>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	08 f0       	brcs	.+2      	; 0xf56 <DIO_u8SetPinValue+0x2e>
     f54:	08 c1       	rjmp	.+528    	; 0x1166 <DIO_u8SetPinValue+0x23e>
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	21 f0       	breq	.+8      	; 0xf64 <DIO_u8SetPinValue+0x3c>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	88 23       	and	r24, r24
     f60:	09 f0       	breq	.+2      	; 0xf64 <DIO_u8SetPinValue+0x3c>
     f62:	01 c1       	rjmp	.+514    	; 0x1166 <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3e 87       	std	Y+14, r19	; 0x0e
     f6c:	2d 87       	std	Y+13, r18	; 0x0d
     f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f70:	9e 85       	ldd	r25, Y+14	; 0x0e
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	91 05       	cpc	r25, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <DIO_u8SetPinValue+0x52>
     f78:	4f c0       	rjmp	.+158    	; 0x1018 <DIO_u8SetPinValue+0xf0>
     f7a:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7c:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	2c f4       	brge	.+10     	; 0xf8e <DIO_u8SetPinValue+0x66>
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <DIO_u8SetPinValue+0x80>
     f8c:	ed c0       	rjmp	.+474    	; 0x1168 <DIO_u8SetPinValue+0x240>
     f8e:	2d 85       	ldd	r18, Y+13	; 0x0d
     f90:	3e 85       	ldd	r19, Y+14	; 0x0e
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <DIO_u8SetPinValue+0x72>
     f98:	77 c0       	rjmp	.+238    	; 0x1088 <DIO_u8SetPinValue+0x160>
     f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <DIO_u8SetPinValue+0x7e>
     fa4:	a9 c0       	rjmp	.+338    	; 0x10f8 <DIO_u8SetPinValue+0x1d0>
     fa6:	e0 c0       	rjmp	.+448    	; 0x1168 <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3c 87       	std	Y+12, r19	; 0x0c
     fb0:	2b 87       	std	Y+11, r18	; 0x0b
     fb2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	d1 f0       	breq	.+52     	; 0xfee <DIO_u8SetPinValue+0xc6>
     fba:	2b 85       	ldd	r18, Y+11	; 0x0b
     fbc:	3c 85       	ldd	r19, Y+12	; 0x0c
     fbe:	21 30       	cpi	r18, 0x01	; 1
     fc0:	31 05       	cpc	r19, r1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <DIO_u8SetPinValue+0x9e>
     fc4:	d1 c0       	rjmp	.+418    	; 0x1168 <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
     fc6:	ab e3       	ldi	r26, 0x3B	; 59
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	eb e3       	ldi	r30, 0x3B	; 59
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_u8SetPinValue+0xbc>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_u8SetPinValue+0xb8>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	bd c0       	rjmp	.+378    	; 0x1168 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
     fee:	ab e3       	ldi	r26, 0x3B	; 59
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	eb e3       	ldi	r30, 0x3B	; 59
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_u8SetPinValue+0xe4>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_u8SetPinValue+0xe0>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	a8 c0       	rjmp	.+336    	; 0x1168 <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3a 87       	std	Y+10, r19	; 0x0a
    1020:	29 87       	std	Y+9, r18	; 0x09
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	d1 f0       	breq	.+52     	; 0x105e <DIO_u8SetPinValue+0x136>
    102a:	29 85       	ldd	r18, Y+9	; 0x09
    102c:	3a 85       	ldd	r19, Y+10	; 0x0a
    102e:	21 30       	cpi	r18, 0x01	; 1
    1030:	31 05       	cpc	r19, r1
    1032:	09 f0       	breq	.+2      	; 0x1036 <DIO_u8SetPinValue+0x10e>
    1034:	99 c0       	rjmp	.+306    	; 0x1168 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    1036:	a8 e3       	ldi	r26, 0x38	; 56
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 e3       	ldi	r30, 0x38	; 56
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_u8SetPinValue+0x12c>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_u8SetPinValue+0x128>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	85 c0       	rjmp	.+266    	; 0x1168 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    105e:	a8 e3       	ldi	r26, 0x38	; 56
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e3       	ldi	r30, 0x38	; 56
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_u8SetPinValue+0x154>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_u8SetPinValue+0x150>
    1080:	80 95       	com	r24
    1082:	84 23       	and	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	70 c0       	rjmp	.+224    	; 0x1168 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	38 87       	std	Y+8, r19	; 0x08
    1090:	2f 83       	std	Y+7, r18	; 0x07
    1092:	8f 81       	ldd	r24, Y+7	; 0x07
    1094:	98 85       	ldd	r25, Y+8	; 0x08
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	d1 f0       	breq	.+52     	; 0x10ce <DIO_u8SetPinValue+0x1a6>
    109a:	2f 81       	ldd	r18, Y+7	; 0x07
    109c:	38 85       	ldd	r19, Y+8	; 0x08
    109e:	21 30       	cpi	r18, 0x01	; 1
    10a0:	31 05       	cpc	r19, r1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <DIO_u8SetPinValue+0x17e>
    10a4:	61 c0       	rjmp	.+194    	; 0x1168 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    10a6:	a5 e3       	ldi	r26, 0x35	; 53
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_u8SetPinValue+0x19c>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_u8SetPinValue+0x198>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	4d c0       	rjmp	.+154    	; 0x1168 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_u8SetPinValue+0x1c4>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_u8SetPinValue+0x1c0>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	38 c0       	rjmp	.+112    	; 0x1168 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3e 83       	std	Y+6, r19	; 0x06
    1100:	2d 83       	std	Y+5, r18	; 0x05
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	c9 f0       	breq	.+50     	; 0x113c <DIO_u8SetPinValue+0x214>
    110a:	2d 81       	ldd	r18, Y+5	; 0x05
    110c:	3e 81       	ldd	r19, Y+6	; 0x06
    110e:	21 30       	cpi	r18, 0x01	; 1
    1110:	31 05       	cpc	r19, r1
    1112:	51 f5       	brne	.+84     	; 0x1168 <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    1114:	a2 e3       	ldi	r26, 0x32	; 50
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_u8SetPinValue+0x20a>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_u8SetPinValue+0x206>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	16 c0       	rjmp	.+44     	; 0x1168 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    113c:	a2 e3       	ldi	r26, 0x32	; 50
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_u8SetPinValue+0x232>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_u8SetPinValue+0x22e>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    1166:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
}
    116a:	2e 96       	adiw	r28, 0x0e	; 14
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	27 97       	sbiw	r28, 0x07	; 7
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	6b 83       	std	Y+3, r22	; 0x03
    1194:	5d 83       	std	Y+5, r21	; 0x05
    1196:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	84 30       	cpi	r24, 0x04	; 4
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <DIO_u8GetPinValue+0x28>
    11a2:	ea c0       	rjmp	.+468    	; 0x1378 <DIO_u8GetPinValue+0x1fc>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 30       	cpi	r24, 0x08	; 8
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <DIO_u8GetPinValue+0x30>
    11aa:	e6 c0       	rjmp	.+460    	; 0x1378 <DIO_u8GetPinValue+0x1fc>
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_u8GetPinValue+0x3a>
    11b4:	e1 c0       	rjmp	.+450    	; 0x1378 <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3f 83       	std	Y+7, r19	; 0x07
    11be:	2e 83       	std	Y+6, r18	; 0x06
    11c0:	4e 81       	ldd	r20, Y+6	; 0x06
    11c2:	5f 81       	ldd	r21, Y+7	; 0x07
    11c4:	41 30       	cpi	r20, 0x01	; 1
    11c6:	51 05       	cpc	r21, r1
    11c8:	09 f4       	brne	.+2      	; 0x11cc <DIO_u8GetPinValue+0x50>
    11ca:	48 c0       	rjmp	.+144    	; 0x125c <DIO_u8GetPinValue+0xe0>
    11cc:	8e 81       	ldd	r24, Y+6	; 0x06
    11ce:	9f 81       	ldd	r25, Y+7	; 0x07
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	91 05       	cpc	r25, r1
    11d4:	34 f4       	brge	.+12     	; 0x11e2 <DIO_u8GetPinValue+0x66>
    11d6:	2e 81       	ldd	r18, Y+6	; 0x06
    11d8:	3f 81       	ldd	r19, Y+7	; 0x07
    11da:	21 15       	cp	r18, r1
    11dc:	31 05       	cpc	r19, r1
    11de:	71 f0       	breq	.+28     	; 0x11fc <DIO_u8GetPinValue+0x80>
    11e0:	cc c0       	rjmp	.+408    	; 0x137a <DIO_u8GetPinValue+0x1fe>
    11e2:	4e 81       	ldd	r20, Y+6	; 0x06
    11e4:	5f 81       	ldd	r21, Y+7	; 0x07
    11e6:	42 30       	cpi	r20, 0x02	; 2
    11e8:	51 05       	cpc	r21, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <DIO_u8GetPinValue+0x72>
    11ec:	67 c0       	rjmp	.+206    	; 0x12bc <DIO_u8GetPinValue+0x140>
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	9f 81       	ldd	r25, Y+7	; 0x07
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <DIO_u8GetPinValue+0x7e>
    11f8:	90 c0       	rjmp	.+288    	; 0x131a <DIO_u8GetPinValue+0x19e>
    11fa:	bf c0       	rjmp	.+382    	; 0x137a <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    11fc:	e9 e3       	ldi	r30, 0x39	; 57
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_u8GetPinValue+0x98>
    1210:	55 95       	asr	r21
    1212:	47 95       	ror	r20
    1214:	8a 95       	dec	r24
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_u8GetPinValue+0x94>
    1218:	ca 01       	movw	r24, r20
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	90 70       	andi	r25, 0x00	; 0
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	21 f4       	brne	.+8      	; 0x122a <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1222:	ec 81       	ldd	r30, Y+4	; 0x04
    1224:	fd 81       	ldd	r31, Y+5	; 0x05
    1226:	10 82       	st	Z, r1
    1228:	a8 c0       	rjmp	.+336    	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    122a:	e9 e3       	ldi	r30, 0x39	; 57
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_u8GetPinValue+0xc6>
    123e:	55 95       	asr	r21
    1240:	47 95       	ror	r20
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_u8GetPinValue+0xc2>
    1246:	ca 01       	movw	r24, r20
    1248:	81 70       	andi	r24, 0x01	; 1
    124a:	90 70       	andi	r25, 0x00	; 0
    124c:	88 23       	and	r24, r24
    124e:	09 f4       	brne	.+2      	; 0x1252 <DIO_u8GetPinValue+0xd6>
    1250:	94 c0       	rjmp	.+296    	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1252:	ec 81       	ldd	r30, Y+4	; 0x04
    1254:	fd 81       	ldd	r31, Y+5	; 0x05
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	80 83       	st	Z, r24
    125a:	8f c0       	rjmp	.+286    	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    125c:	e6 e3       	ldi	r30, 0x36	; 54
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a9 01       	movw	r20, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_u8GetPinValue+0xf8>
    1270:	55 95       	asr	r21
    1272:	47 95       	ror	r20
    1274:	8a 95       	dec	r24
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_u8GetPinValue+0xf4>
    1278:	ca 01       	movw	r24, r20
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	90 70       	andi	r25, 0x00	; 0
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	21 f4       	brne	.+8      	; 0x128a <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1282:	ec 81       	ldd	r30, Y+4	; 0x04
    1284:	fd 81       	ldd	r31, Y+5	; 0x05
    1286:	10 82       	st	Z, r1
    1288:	78 c0       	rjmp	.+240    	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    128a:	e6 e3       	ldi	r30, 0x36	; 54
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_u8GetPinValue+0x126>
    129e:	55 95       	asr	r21
    12a0:	47 95       	ror	r20
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_u8GetPinValue+0x122>
    12a6:	ca 01       	movw	r24, r20
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	90 70       	andi	r25, 0x00	; 0
    12ac:	88 23       	and	r24, r24
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <DIO_u8GetPinValue+0x136>
    12b0:	64 c0       	rjmp	.+200    	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    12b2:	ec 81       	ldd	r30, Y+4	; 0x04
    12b4:	fd 81       	ldd	r31, Y+5	; 0x05
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 83       	st	Z, r24
    12ba:	5f c0       	rjmp	.+190    	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    12bc:	e3 e3       	ldi	r30, 0x33	; 51
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_u8GetPinValue+0x158>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_u8GetPinValue+0x154>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	90 70       	andi	r25, 0x00	; 0
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	21 f4       	brne	.+8      	; 0x12ea <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12e2:	ec 81       	ldd	r30, Y+4	; 0x04
    12e4:	fd 81       	ldd	r31, Y+5	; 0x05
    12e6:	10 82       	st	Z, r1
    12e8:	48 c0       	rjmp	.+144    	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    12ea:	e3 e3       	ldi	r30, 0x33	; 51
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_u8GetPinValue+0x186>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_u8GetPinValue+0x182>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	88 23       	and	r24, r24
    130e:	a9 f1       	breq	.+106    	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1310:	ec 81       	ldd	r30, Y+4	; 0x04
    1312:	fd 81       	ldd	r31, Y+5	; 0x05
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	80 83       	st	Z, r24
    1318:	30 c0       	rjmp	.+96     	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    131a:	e0 e3       	ldi	r30, 0x30	; 48
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a9 01       	movw	r20, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_u8GetPinValue+0x1b6>
    132e:	55 95       	asr	r21
    1330:	47 95       	ror	r20
    1332:	8a 95       	dec	r24
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_u8GetPinValue+0x1b2>
    1336:	ca 01       	movw	r24, r20
    1338:	81 70       	andi	r24, 0x01	; 1
    133a:	90 70       	andi	r25, 0x00	; 0
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	21 f4       	brne	.+8      	; 0x1348 <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1340:	ec 81       	ldd	r30, Y+4	; 0x04
    1342:	fd 81       	ldd	r31, Y+5	; 0x05
    1344:	10 82       	st	Z, r1
    1346:	19 c0       	rjmp	.+50     	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    1348:	e0 e3       	ldi	r30, 0x30	; 48
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8GetPinValue+0x1e4>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_u8GetPinValue+0x1e0>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	90 70       	andi	r25, 0x00	; 0
    136a:	88 23       	and	r24, r24
    136c:	31 f0       	breq	.+12     	; 0x137a <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    136e:	ec 81       	ldd	r30, Y+4	; 0x04
    1370:	fd 81       	ldd	r31, Y+5	; 0x05
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	80 83       	st	Z, r24
    1376:	01 c0       	rjmp	.+2      	; 0x137a <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1378:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	27 96       	adiw	r28, 0x07	; 7
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	2d 97       	sbiw	r28, 0x0d	; 13
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <DIO_u8SetPortDirection+0x24>
    13b0:	87 c0       	rjmp	.+270    	; 0x14c0 <DIO_u8SetPortDirection+0x132>
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	21 f0       	breq	.+8      	; 0x13c0 <DIO_u8SetPortDirection+0x32>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 23       	and	r24, r24
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <DIO_u8SetPortDirection+0x32>
    13be:	80 c0       	rjmp	.+256    	; 0x14c0 <DIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3d 87       	std	Y+13, r19	; 0x0d
    13c8:	2c 87       	std	Y+12, r18	; 0x0c
    13ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    13cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	71 f1       	breq	.+92     	; 0x1430 <DIO_u8SetPortDirection+0xa2>
    13d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <DIO_u8SetPortDirection+0x5a>
    13de:	8c 85       	ldd	r24, Y+12	; 0x0c
    13e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	69 f0       	breq	.+26     	; 0x1400 <DIO_u8SetPortDirection+0x72>
    13e6:	6d c0       	rjmp	.+218    	; 0x14c2 <DIO_u8SetPortDirection+0x134>
    13e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ea:	3d 85       	ldd	r19, Y+13	; 0x0d
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	b9 f1       	breq	.+110    	; 0x1460 <DIO_u8SetPortDirection+0xd2>
    13f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <DIO_u8SetPortDirection+0x70>
    13fc:	49 c0       	rjmp	.+146    	; 0x1490 <DIO_u8SetPortDirection+0x102>
    13fe:	61 c0       	rjmp	.+194    	; 0x14c2 <DIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3b 87       	std	Y+11, r19	; 0x0b
    1408:	2a 87       	std	Y+10, r18	; 0x0a
    140a:	8a 85       	ldd	r24, Y+10	; 0x0a
    140c:	9b 85       	ldd	r25, Y+11	; 0x0b
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	31 f0       	breq	.+12     	; 0x141e <DIO_u8SetPortDirection+0x90>
    1412:	2a 85       	ldd	r18, Y+10	; 0x0a
    1414:	3b 85       	ldd	r19, Y+11	; 0x0b
    1416:	21 30       	cpi	r18, 0x01	; 1
    1418:	31 05       	cpc	r19, r1
    141a:	29 f0       	breq	.+10     	; 0x1426 <DIO_u8SetPortDirection+0x98>
    141c:	52 c0       	rjmp	.+164    	; 0x14c2 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    141e:	ea e3       	ldi	r30, 0x3A	; 58
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	10 82       	st	Z, r1
    1424:	4e c0       	rjmp	.+156    	; 0x14c2 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    1426:	ea e3       	ldi	r30, 0x3A	; 58
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	80 83       	st	Z, r24
    142e:	49 c0       	rjmp	.+146    	; 0x14c2 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	39 87       	std	Y+9, r19	; 0x09
    1438:	28 87       	std	Y+8, r18	; 0x08
    143a:	88 85       	ldd	r24, Y+8	; 0x08
    143c:	99 85       	ldd	r25, Y+9	; 0x09
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	31 f0       	breq	.+12     	; 0x144e <DIO_u8SetPortDirection+0xc0>
    1442:	28 85       	ldd	r18, Y+8	; 0x08
    1444:	39 85       	ldd	r19, Y+9	; 0x09
    1446:	21 30       	cpi	r18, 0x01	; 1
    1448:	31 05       	cpc	r19, r1
    144a:	29 f0       	breq	.+10     	; 0x1456 <DIO_u8SetPortDirection+0xc8>
    144c:	3a c0       	rjmp	.+116    	; 0x14c2 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    144e:	e7 e3       	ldi	r30, 0x37	; 55
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	10 82       	st	Z, r1
    1454:	36 c0       	rjmp	.+108    	; 0x14c2 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    1456:	e7 e3       	ldi	r30, 0x37	; 55
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	80 83       	st	Z, r24
    145e:	31 c0       	rjmp	.+98     	; 0x14c2 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3f 83       	std	Y+7, r19	; 0x07
    1468:	2e 83       	std	Y+6, r18	; 0x06
    146a:	8e 81       	ldd	r24, Y+6	; 0x06
    146c:	9f 81       	ldd	r25, Y+7	; 0x07
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	31 f0       	breq	.+12     	; 0x147e <DIO_u8SetPortDirection+0xf0>
    1472:	2e 81       	ldd	r18, Y+6	; 0x06
    1474:	3f 81       	ldd	r19, Y+7	; 0x07
    1476:	21 30       	cpi	r18, 0x01	; 1
    1478:	31 05       	cpc	r19, r1
    147a:	29 f0       	breq	.+10     	; 0x1486 <DIO_u8SetPortDirection+0xf8>
    147c:	22 c0       	rjmp	.+68     	; 0x14c2 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    147e:	e4 e3       	ldi	r30, 0x34	; 52
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	10 82       	st	Z, r1
    1484:	1e c0       	rjmp	.+60     	; 0x14c2 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    1486:	e4 e3       	ldi	r30, 0x34	; 52
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	80 83       	st	Z, r24
    148e:	19 c0       	rjmp	.+50     	; 0x14c2 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3d 83       	std	Y+5, r19	; 0x05
    1498:	2c 83       	std	Y+4, r18	; 0x04
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	31 f0       	breq	.+12     	; 0x14ae <DIO_u8SetPortDirection+0x120>
    14a2:	2c 81       	ldd	r18, Y+4	; 0x04
    14a4:	3d 81       	ldd	r19, Y+5	; 0x05
    14a6:	21 30       	cpi	r18, 0x01	; 1
    14a8:	31 05       	cpc	r19, r1
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <DIO_u8SetPortDirection+0x128>
    14ac:	0a c0       	rjmp	.+20     	; 0x14c2 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    14ae:	e1 e3       	ldi	r30, 0x31	; 49
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	10 82       	st	Z, r1
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    14b6:	e1 e3       	ldi	r30, 0x31	; 49
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	80 83       	st	Z, r24
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <DIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    14c0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c4:	2d 96       	adiw	r28, 0x0d	; 13
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <DIO_u8SetPortValue+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <DIO_u8SetPortValue+0x8>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3d 83       	std	Y+5, r19	; 0x05
    14f4:	2c 83       	std	Y+4, r18	; 0x04
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <DIO_u8SetPortValue+0x5e>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <DIO_u8SetPortValue+0x3e>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <DIO_u8SetPortValue+0x54>
    1512:	1f c0       	rjmp	.+62     	; 0x1552 <DIO_u8SetPortValue+0x7c>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <DIO_u8SetPortValue+0x68>
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <DIO_u8SetPortValue+0x72>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    152a:	eb e3       	ldi	r30, 0x3B	; 59
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	80 83       	st	Z, r24
    1532:	10 c0       	rjmp	.+32     	; 0x1554 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	80 83       	st	Z, r24
    153c:	0b c0       	rjmp	.+22     	; 0x1554 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    153e:	e5 e3       	ldi	r30, 0x35	; 53
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	80 83       	st	Z, r24
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	80 83       	st	Z, r24
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    1552:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1554:	89 81       	ldd	r24, Y+1	; 0x01
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <DIO_u8GetPortValue+0x6>
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_u8GetPortValue+0x8>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_u8GetPortValue+0xa>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	8a 83       	std	Y+2, r24	; 0x02
    1576:	7c 83       	std	Y+4, r23	; 0x04
    1578:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	e9 f1       	breq	.+122    	; 0x1600 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3e 83       	std	Y+6, r19	; 0x06
    158e:	2d 83       	std	Y+5, r18	; 0x05
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	e1 f0       	breq	.+56     	; 0x15d2 <DIO_u8GetPortValue+0x6c>
    159a:	2d 81       	ldd	r18, Y+5	; 0x05
    159c:	3e 81       	ldd	r19, Y+6	; 0x06
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	2c f4       	brge	.+10     	; 0x15ae <DIO_u8GetPortValue+0x48>
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	61 f0       	breq	.+24     	; 0x15c4 <DIO_u8GetPortValue+0x5e>
    15ac:	27 c0       	rjmp	.+78     	; 0x15fc <DIO_u8GetPortValue+0x96>
    15ae:	2d 81       	ldd	r18, Y+5	; 0x05
    15b0:	3e 81       	ldd	r19, Y+6	; 0x06
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	a1 f0       	breq	.+40     	; 0x15e0 <DIO_u8GetPortValue+0x7a>
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	b1 f0       	breq	.+44     	; 0x15ee <DIO_u8GetPortValue+0x88>
    15c2:	1c c0       	rjmp	.+56     	; 0x15fc <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    15c4:	e9 e3       	ldi	r30, 0x39	; 57
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	eb 81       	ldd	r30, Y+3	; 0x03
    15cc:	fc 81       	ldd	r31, Y+4	; 0x04
    15ce:	80 83       	st	Z, r24
    15d0:	18 c0       	rjmp	.+48     	; 0x1602 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    15d2:	e6 e3       	ldi	r30, 0x36	; 54
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	eb 81       	ldd	r30, Y+3	; 0x03
    15da:	fc 81       	ldd	r31, Y+4	; 0x04
    15dc:	80 83       	st	Z, r24
    15de:	11 c0       	rjmp	.+34     	; 0x1602 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    15e0:	e3 e3       	ldi	r30, 0x33	; 51
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	eb 81       	ldd	r30, Y+3	; 0x03
    15e8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ea:	80 83       	st	Z, r24
    15ec:	0a c0       	rjmp	.+20     	; 0x1602 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    15ee:	e0 e3       	ldi	r30, 0x30	; 48
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	eb 81       	ldd	r30, Y+3	; 0x03
    15f6:	fc 81       	ldd	r31, Y+4	; 0x04
    15f8:	80 83       	st	Z, r24
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    15fc:	19 82       	std	Y+1, r1	; 0x01
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1600:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	26 96       	adiw	r28, 0x06	; 6
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <EEPROM_voidInit>:
#include "EEPROM_private.h"
#include "EERPROM_interface.h"


void EEPROM_voidInit(void)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit();
    161e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <TWI_voidMasterInit>
}
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <EEPROM_u8WriteDataByte>:

u8   EEPROM_u8WriteDataByte(u8 Copy_u8Data,u16 Copy_u16ByteAddress)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	63 97       	sbiw	r28, 0x13	; 19
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	89 8b       	std	Y+17, r24	; 0x11
    163e:	7b 8b       	std	Y+19, r23	; 0x13
    1640:	6a 8b       	std	Y+18, r22	; 0x12
	u8             Local_u8ErrorState     = STD_TYPES_OK;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	88 8b       	std	Y+16, r24	; 0x10
	TWI_ErrorState Local_enuTWIErrorState = TWI_OK;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	8f 87       	std	Y+15, r24	; 0x0f
	/* Start Condition */
	Local_enuTWIErrorState = TWI_enuSendStartCondition();
    164a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <TWI_enuSendStartCondition>
    164e:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    1650:	8f 85       	ldd	r24, Y+15	; 0x0f
    1652:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    1656:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Slave Address with Write Bit */
	Local_enuTWIErrorState = TWI_enuSendSlaveWithWrite((EEPROM_u8_FIXED_ADDRESS)|(EEPROM_u8_A2_VALUE<<2)|((u8)(Copy_u16ByteAddress>>8)));
    1658:	8a 89       	ldd	r24, Y+18	; 0x12
    165a:	9b 89       	ldd	r25, Y+19	; 0x13
    165c:	89 2f       	mov	r24, r25
    165e:	99 27       	eor	r25, r25
    1660:	80 65       	ori	r24, 0x50	; 80
    1662:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <TWI_enuSendSlaveWithWrite>
    1666:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    1668:	8f 85       	ldd	r24, Y+15	; 0x0f
    166a:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    166e:	88 8b       	std	Y+16, r24	; 0x10

	/* Send The Rest Of The Byte Address */
	Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    1670:	8a 89       	ldd	r24, Y+18	; 0x12
    1672:	0e 94 5d 16 	call	0x2cba	; 0x2cba <TWI_enuSendDataByte>
    1676:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    1678:	8f 85       	ldd	r24, Y+15	; 0x0f
    167a:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    167e:	88 8b       	std	Y+16, r24	; 0x10

	/* Send The Data Byte */
	Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u8Data);
    1680:	89 89       	ldd	r24, Y+17	; 0x11
    1682:	0e 94 5d 16 	call	0x2cba	; 0x2cba <TWI_enuSendDataByte>
    1686:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    1688:	8f 85       	ldd	r24, Y+15	; 0x0f
    168a:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    168e:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Stop Condition */
	TWI_voidSendStopCondition();
    1690:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <TWI_voidSendStopCondition>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a0 ea       	ldi	r26, 0xA0	; 160
    169a:	b0 e4       	ldi	r27, 0x40	; 64
    169c:	8b 87       	std	Y+11, r24	; 0x0b
    169e:	9c 87       	std	Y+12, r25	; 0x0c
    16a0:	ad 87       	std	Y+13, r26	; 0x0d
    16a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a ef       	ldi	r20, 0xFA	; 250
    16b2:	54 e4       	ldi	r21, 0x44	; 68
    16b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8f 83       	std	Y+7, r24	; 0x07
    16be:	98 87       	std	Y+8, r25	; 0x08
    16c0:	a9 87       	std	Y+9, r26	; 0x09
    16c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c4:	6f 81       	ldd	r22, Y+7	; 0x07
    16c6:	78 85       	ldd	r23, Y+8	; 0x08
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <EEPROM_u8WriteDataByte+0xbe>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <EEPROM_u8WriteDataByte+0x13c>
	else if (__tmp > 65535)
    16e6:	6f 81       	ldd	r22, Y+7	; 0x07
    16e8:	78 85       	ldd	r23, Y+8	; 0x08
    16ea:	89 85       	ldd	r24, Y+9	; 0x09
    16ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <EEPROM_u8WriteDataByte+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1700:	7c 85       	ldd	r23, Y+12	; 0x0c
    1702:	8d 85       	ldd	r24, Y+13	; 0x0d
    1704:	9e 85       	ldd	r25, Y+14	; 0x0e
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <EEPROM_u8WriteDataByte+0x11e>
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <EEPROM_u8WriteDataByte+0x10c>
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <EEPROM_u8WriteDataByte+0x100>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <EEPROM_u8WriteDataByte+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	6f 81       	ldd	r22, Y+7	; 0x07
    1752:	78 85       	ldd	r23, Y+8	; 0x08
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <EEPROM_u8WriteDataByte+0x148>
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	return Local_u8ErrorState;
    1778:	88 89       	ldd	r24, Y+16	; 0x10
}
    177a:	63 96       	adiw	r28, 0x13	; 19
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <EEPROM_u8ReadDataByte>:

u8   EEPROM_u8ReadDataByte(u8 * Copy_pu8ReceivedData ,u16 Copy_u16ByteAddress )
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	65 97       	sbiw	r28, 0x15	; 21
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	9b 8b       	std	Y+19, r25	; 0x13
    17a2:	8a 8b       	std	Y+18, r24	; 0x12
    17a4:	7d 8b       	std	Y+21, r23	; 0x15
    17a6:	6c 8b       	std	Y+20, r22	; 0x14
	u8             Local_u8ErrorState     = STD_TYPES_OK;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 8b       	std	Y+17, r24	; 0x11
	TWI_ErrorState Local_enuTWIErrorState = TWI_OK;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	88 8b       	std	Y+16, r24	; 0x10
	if(Copy_pu8ReceivedData != NULL)
    17b0:	8a 89       	ldd	r24, Y+18	; 0x12
    17b2:	9b 89       	ldd	r25, Y+19	; 0x13
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	09 f4       	brne	.+2      	; 0x17ba <EEPROM_u8ReadDataByte+0x2e>
    17b8:	aa c0       	rjmp	.+340    	; 0x190e <EEPROM_u8ReadDataByte+0x182>
	{
		u8 Local_u8EEPROMAddress = (EEPROM_u8_FIXED_ADDRESS)|(EEPROM_u8_A2_VALUE<<2)|((u8)(Copy_u16ByteAddress>>8));
    17ba:	8c 89       	ldd	r24, Y+20	; 0x14
    17bc:	9d 89       	ldd	r25, Y+21	; 0x15
    17be:	89 2f       	mov	r24, r25
    17c0:	99 27       	eor	r25, r25
    17c2:	80 65       	ori	r24, 0x50	; 80
    17c4:	8f 87       	std	Y+15, r24	; 0x0f
		/* Send Start Condition */
		Local_enuTWIErrorState = TWI_enuSendStartCondition();
    17c6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <TWI_enuSendStartCondition>
    17ca:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    17cc:	88 89       	ldd	r24, Y+16	; 0x10
    17ce:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    17d2:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Slave Address with Write Bit */
		Local_enuTWIErrorState = TWI_enuSendSlaveWithWrite(Local_u8EEPROMAddress);
    17d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d6:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <TWI_enuSendSlaveWithWrite>
    17da:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    17dc:	88 89       	ldd	r24, Y+16	; 0x10
    17de:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    17e2:	89 8b       	std	Y+17, r24	; 0x11

		/* Send The Rest Of The Byte Address */
		Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    17e4:	8c 89       	ldd	r24, Y+20	; 0x14
    17e6:	0e 94 5d 16 	call	0x2cba	; 0x2cba <TWI_enuSendDataByte>
    17ea:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    17ec:	88 89       	ldd	r24, Y+16	; 0x10
    17ee:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    17f2:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Repeated Start Condition */
		Local_enuTWIErrorState = TWI_enuSendRepeatedStartCondition();
    17f4:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <TWI_enuSendRepeatedStartCondition>
    17f8:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    17fa:	88 89       	ldd	r24, Y+16	; 0x10
    17fc:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    1800:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Slave Address with Read Bit */
		Local_enuTWIErrorState = TWI_enuSendSlaveWithRead(Local_u8EEPROMAddress);
    1802:	8f 85       	ldd	r24, Y+15	; 0x0f
    1804:	0e 94 24 16 	call	0x2c48	; 0x2c48 <TWI_enuSendSlaveWithRead>
    1808:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    180a:	88 89       	ldd	r24, Y+16	; 0x10
    180c:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    1810:	89 8b       	std	Y+17, r24	; 0x11

		/* Read Data */
		Local_enuTWIErrorState = TWI_enuReceiveDataByte(Copy_pu8ReceivedData);
    1812:	8a 89       	ldd	r24, Y+18	; 0x12
    1814:	9b 89       	ldd	r25, Y+19	; 0x13
    1816:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <TWI_enuReceiveDataByte>
    181a:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    181c:	88 89       	ldd	r24, Y+16	; 0x10
    181e:	0e 94 92 0c 	call	0x1924	; 0x1924 <Private_u8ErrorStateCheck>
    1822:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Stop Condition */
		TWI_voidSendStopCondition();
    1824:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <TWI_voidSendStopCondition>
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a0 ea       	ldi	r26, 0xA0	; 160
    182e:	b0 e4       	ldi	r27, 0x40	; 64
    1830:	8b 87       	std	Y+11, r24	; 0x0b
    1832:	9c 87       	std	Y+12, r25	; 0x0c
    1834:	ad 87       	std	Y+13, r26	; 0x0d
    1836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a ef       	ldi	r20, 0xFA	; 250
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8f 83       	std	Y+7, r24	; 0x07
    1852:	98 87       	std	Y+8, r25	; 0x08
    1854:	a9 87       	std	Y+9, r26	; 0x09
    1856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1858:	6f 81       	ldd	r22, Y+7	; 0x07
    185a:	78 85       	ldd	r23, Y+8	; 0x08
    185c:	89 85       	ldd	r24, Y+9	; 0x09
    185e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    186c:	88 23       	and	r24, r24
    186e:	2c f4       	brge	.+10     	; 0x187a <EEPROM_u8ReadDataByte+0xee>
		__ticks = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9e 83       	std	Y+6, r25	; 0x06
    1876:	8d 83       	std	Y+5, r24	; 0x05
    1878:	3f c0       	rjmp	.+126    	; 0x18f8 <EEPROM_u8ReadDataByte+0x16c>
	else if (__tmp > 65535)
    187a:	6f 81       	ldd	r22, Y+7	; 0x07
    187c:	78 85       	ldd	r23, Y+8	; 0x08
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	9a 85       	ldd	r25, Y+10	; 0x0a
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	4f e7       	ldi	r20, 0x7F	; 127
    1888:	57 e4       	ldi	r21, 0x47	; 71
    188a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    188e:	18 16       	cp	r1, r24
    1890:	4c f5       	brge	.+82     	; 0x18e4 <EEPROM_u8ReadDataByte+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	7c 85       	ldd	r23, Y+12	; 0x0c
    1896:	8d 85       	ldd	r24, Y+13	; 0x0d
    1898:	9e 85       	ldd	r25, Y+14	; 0x0e
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <EEPROM_u8ReadDataByte+0x14e>
    18bc:	88 ec       	ldi	r24, 0xC8	; 200
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <EEPROM_u8ReadDataByte+0x13c>
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	69 f7       	brne	.-38     	; 0x18bc <EEPROM_u8ReadDataByte+0x130>
    18e2:	16 c0       	rjmp	.+44     	; 0x1910 <EEPROM_u8ReadDataByte+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	9a 83       	std	Y+2, r25	; 0x02
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <EEPROM_u8ReadDataByte+0x178>
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <EEPROM_u8ReadDataByte+0x184>


	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    190e:	19 8a       	std	Y+17, r1	; 0x11
	}
	return Local_u8ErrorState;
    1910:	89 89       	ldd	r24, Y+17	; 0x11

}
    1912:	65 96       	adiw	r28, 0x15	; 21
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <Private_u8ErrorStateCheck>:

static u8   Private_u8ErrorStateCheck(TWI_ErrorState Copy_enuErrorState)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <Private_u8ErrorStateCheck+0x6>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuErrorState != TWI_OK)
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	09 f0       	breq	.+2      	; 0x193c <Private_u8ErrorStateCheck+0x18>
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    193a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit     (void)
{
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	cc 54       	subi	r28, 0x4C	; 76
    1956:	d0 40       	sbci	r29, 0x00	; 0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	fe 01       	movw	r30, r28
    1964:	e7 5b       	subi	r30, 0xB7	; 183
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	ac e0       	ldi	r26, 0x0C	; 12
    196e:	b2 e4       	ldi	r27, 0x42	; 66
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	8e 01       	movw	r16, r28
    197a:	0b 5b       	subi	r16, 0xBB	; 187
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e7 5b       	subi	r30, 0xB7	; 183
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a6:	fe 01       	movw	r30, r28
    19a8:	eb 5b       	subi	r30, 0xBB	; 187
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	44 f4       	brge	.+16     	; 0x19d4 <LCD_voidInit+0x8c>
		__ticks = 1;
    19c4:	fe 01       	movw	r30, r28
    19c6:	ed 5b       	subi	r30, 0xBD	; 189
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	64 c0       	rjmp	.+200    	; 0x1a9c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    19d4:	fe 01       	movw	r30, r28
    19d6:	eb 5b       	subi	r30, 0xBB	; 187
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	0c f0       	brlt	.+2      	; 0x19f4 <LCD_voidInit+0xac>
    19f2:	43 c0       	rjmp	.+134    	; 0x1a7a <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	fe 01       	movw	r30, r28
    19f6:	e7 5b       	subi	r30, 0xB7	; 183
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8e 01       	movw	r16, r28
    1a14:	0d 5b       	subi	r16, 0xBD	; 189
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	1f c0       	rjmp	.+62     	; 0x1a6a <LCD_voidInit+0x122>
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ef 5b       	subi	r30, 0xBF	; 191
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ef 5b       	subi	r30, 0xBF	; 191
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_voidInit+0xfc>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ef 5b       	subi	r30, 0xBF	; 191
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	de 01       	movw	r26, r28
    1a54:	ad 5b       	subi	r26, 0xBD	; 189
    1a56:	bf 4f       	sbci	r27, 0xFF	; 255
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ed 5b       	subi	r30, 0xBD	; 189
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	9c 93       	st	X, r25
    1a68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 5b       	subi	r30, 0xBD	; 189
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	d1 f6       	brne	.-76     	; 0x1a2c <LCD_voidInit+0xe4>
    1a78:	24 c0       	rjmp	.+72     	; 0x1ac2 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	8e 01       	movw	r16, r28
    1a7c:	0d 5b       	subi	r16, 0xBD	; 189
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	fe 01       	movw	r30, r28
    1a82:	eb 5b       	subi	r30, 0xBB	; 187
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	f8 01       	movw	r30, r16
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ed 5b       	subi	r30, 0xBD	; 189
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ff 96       	adiw	r30, 0x3f	; 63
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ff 96       	adiw	r30, 0x3f	; 63
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_voidInit+0x16e>
    1aba:	fe 01       	movw	r30, r28
    1abc:	ff 96       	adiw	r30, 0x3f	; 63
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd 0b00111000 */
	LCD_voidSendCmnd(0b00111000);
    1ac2:	88 e3       	ldi	r24, 0x38	; 56
    1ac4:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a0 e2       	ldi	r26, 0x20	; 32
    1ace:	b2 e4       	ldi	r27, 0x42	; 66
    1ad0:	8b af       	std	Y+59, r24	; 0x3b
    1ad2:	9c af       	std	Y+60, r25	; 0x3c
    1ad4:	ad af       	std	Y+61, r26	; 0x3d
    1ad6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ad8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ada:	7c ad       	ldd	r23, Y+60	; 0x3c
    1adc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ade:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ae0:	2b ea       	ldi	r18, 0xAB	; 171
    1ae2:	3a ea       	ldi	r19, 0xAA	; 170
    1ae4:	4a e2       	ldi	r20, 0x2A	; 42
    1ae6:	50 e4       	ldi	r21, 0x40	; 64
    1ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8f ab       	std	Y+55, r24	; 0x37
    1af2:	98 af       	std	Y+56, r25	; 0x38
    1af4:	a9 af       	std	Y+57, r26	; 0x39
    1af6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1af8:	6f a9       	ldd	r22, Y+55	; 0x37
    1afa:	78 ad       	ldd	r23, Y+56	; 0x38
    1afc:	89 ad       	ldd	r24, Y+57	; 0x39
    1afe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e8       	ldi	r20, 0x80	; 128
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	1c f4       	brge	.+6      	; 0x1b16 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	8e ab       	std	Y+54, r24	; 0x36
    1b14:	91 c0       	rjmp	.+290    	; 0x1c38 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1b16:	6f a9       	ldd	r22, Y+55	; 0x37
    1b18:	78 ad       	ldd	r23, Y+56	; 0x38
    1b1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	53 e4       	ldi	r21, 0x43	; 67
    1b26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	0c f0       	brlt	.+2      	; 0x1b30 <LCD_voidInit+0x1e8>
    1b2e:	7b c0       	rjmp	.+246    	; 0x1c26 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1b30:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b32:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a e7       	ldi	r20, 0x7A	; 122
    1b3e:	54 e4       	ldi	r21, 0x44	; 68
    1b40:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8a ab       	std	Y+50, r24	; 0x32
    1b4a:	9b ab       	std	Y+51, r25	; 0x33
    1b4c:	ac ab       	std	Y+52, r26	; 0x34
    1b4e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	6a a9       	ldd	r22, Y+50	; 0x32
    1b52:	7b a9       	ldd	r23, Y+51	; 0x33
    1b54:	8c a9       	ldd	r24, Y+52	; 0x34
    1b56:	9d a9       	ldd	r25, Y+53	; 0x35
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a ef       	ldi	r20, 0xFA	; 250
    1b5e:	54 e4       	ldi	r21, 0x44	; 68
    1b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8e a7       	std	Y+46, r24	; 0x2e
    1b6a:	9f a7       	std	Y+47, r25	; 0x2f
    1b6c:	a8 ab       	std	Y+48, r26	; 0x30
    1b6e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1b70:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b72:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b74:	88 a9       	ldd	r24, Y+48	; 0x30
    1b76:	99 a9       	ldd	r25, Y+49	; 0x31
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_voidInit+0x24a>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9d a7       	std	Y+45, r25	; 0x2d
    1b8e:	8c a7       	std	Y+44, r24	; 0x2c
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1b92:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b94:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b96:	88 a9       	ldd	r24, Y+48	; 0x30
    1b98:	99 a9       	ldd	r25, Y+49	; 0x31
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	6a a9       	ldd	r22, Y+50	; 0x32
    1bac:	7b a9       	ldd	r23, Y+51	; 0x33
    1bae:	8c a9       	ldd	r24, Y+52	; 0x34
    1bb0:	9d a9       	ldd	r25, Y+53	; 0x35
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9d a7       	std	Y+45, r25	; 0x2d
    1bd0:	8c a7       	std	Y+44, r24	; 0x2c
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_voidInit+0x2aa>
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9b a7       	std	Y+43, r25	; 0x2b
    1bda:	8a a7       	std	Y+42, r24	; 0x2a
    1bdc:	8a a5       	ldd	r24, Y+42	; 0x2a
    1bde:	9b a5       	ldd	r25, Y+43	; 0x2b
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_voidInit+0x298>
    1be4:	9b a7       	std	Y+43, r25	; 0x2b
    1be6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bea:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9d a7       	std	Y+45, r25	; 0x2d
    1bf0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bf4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_voidInit+0x28c>
    1bfa:	24 c0       	rjmp	.+72     	; 0x1c44 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bfe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c00:	88 a9       	ldd	r24, Y+48	; 0x30
    1c02:	99 a9       	ldd	r25, Y+49	; 0x31
    1c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9d a7       	std	Y+45, r25	; 0x2d
    1c0e:	8c a7       	std	Y+44, r24	; 0x2c
    1c10:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c12:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c14:	99 a7       	std	Y+41, r25	; 0x29
    1c16:	88 a7       	std	Y+40, r24	; 0x28
    1c18:	88 a5       	ldd	r24, Y+40	; 0x28
    1c1a:	99 a5       	ldd	r25, Y+41	; 0x29
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_voidInit+0x2d4>
    1c20:	99 a7       	std	Y+41, r25	; 0x29
    1c22:	88 a7       	std	Y+40, r24	; 0x28
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c26:	6f a9       	ldd	r22, Y+55	; 0x37
    1c28:	78 ad       	ldd	r23, Y+56	; 0x38
    1c2a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c2c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8e ab       	std	Y+54, r24	; 0x36
    1c38:	8e a9       	ldd	r24, Y+54	; 0x36
    1c3a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c3c:	8f a1       	ldd	r24, Y+39	; 0x27
    1c3e:	8a 95       	dec	r24
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_voidInit+0x2f6>
    1c42:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    1c44:	8f e0       	ldi	r24, 0x0F	; 15
    1c46:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e2       	ldi	r26, 0x20	; 32
    1c50:	b2 e4       	ldi	r27, 0x42	; 66
    1c52:	8b a3       	std	Y+35, r24	; 0x23
    1c54:	9c a3       	std	Y+36, r25	; 0x24
    1c56:	ad a3       	std	Y+37, r26	; 0x25
    1c58:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c60:	9e a1       	ldd	r25, Y+38	; 0x26
    1c62:	2b ea       	ldi	r18, 0xAB	; 171
    1c64:	3a ea       	ldi	r19, 0xAA	; 170
    1c66:	4a e2       	ldi	r20, 0x2A	; 42
    1c68:	50 e4       	ldi	r21, 0x40	; 64
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	8f 8f       	std	Y+31, r24	; 0x1f
    1c74:	98 a3       	std	Y+32, r25	; 0x20
    1c76:	a9 a3       	std	Y+33, r26	; 0x21
    1c78:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c7a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c7c:	78 a1       	ldd	r23, Y+32	; 0x20
    1c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c80:	9a a1       	ldd	r25, Y+34	; 0x22
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	1c f4       	brge	.+6      	; 0x1c98 <LCD_voidInit+0x350>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	8e 8f       	std	Y+30, r24	; 0x1e
    1c96:	91 c0       	rjmp	.+290    	; 0x1dba <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1c98:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c9a:	78 a1       	ldd	r23, Y+32	; 0x20
    1c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	53 e4       	ldi	r21, 0x43	; 67
    1ca8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	0c f0       	brlt	.+2      	; 0x1cb2 <LCD_voidInit+0x36a>
    1cb0:	7b c0       	rjmp	.+246    	; 0x1da8 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1cb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8a 8f       	std	Y+26, r24	; 0x1a
    1ccc:	9b 8f       	std	Y+27, r25	; 0x1b
    1cce:	ac 8f       	std	Y+28, r26	; 0x1c
    1cd0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cd4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cd6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cd8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a ef       	ldi	r20, 0xFA	; 250
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8e 8b       	std	Y+22, r24	; 0x16
    1cec:	9f 8b       	std	Y+23, r25	; 0x17
    1cee:	a8 8f       	std	Y+24, r26	; 0x18
    1cf0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1cf2:	6e 89       	ldd	r22, Y+22	; 0x16
    1cf4:	7f 89       	ldd	r23, Y+23	; 0x17
    1cf6:	88 8d       	ldd	r24, Y+24	; 0x18
    1cf8:	99 8d       	ldd	r25, Y+25	; 0x19
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9d 8b       	std	Y+21, r25	; 0x15
    1d10:	8c 8b       	std	Y+20, r24	; 0x14
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1d14:	6e 89       	ldd	r22, Y+22	; 0x16
    1d16:	7f 89       	ldd	r23, Y+23	; 0x17
    1d18:	88 8d       	ldd	r24, Y+24	; 0x18
    1d1a:	99 8d       	ldd	r25, Y+25	; 0x19
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d2e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d32:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9d 8b       	std	Y+21, r25	; 0x15
    1d52:	8c 8b       	std	Y+20, r24	; 0x14
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_voidInit+0x42c>
    1d56:	88 ec       	ldi	r24, 0xC8	; 200
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9b 8b       	std	Y+19, r25	; 0x13
    1d5c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d5e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d60:	9b 89       	ldd	r25, Y+19	; 0x13
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_voidInit+0x41a>
    1d66:	9b 8b       	std	Y+19, r25	; 0x13
    1d68:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d6c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9d 8b       	std	Y+21, r25	; 0x15
    1d72:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8c 89       	ldd	r24, Y+20	; 0x14
    1d76:	9d 89       	ldd	r25, Y+21	; 0x15
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_voidInit+0x40e>
    1d7c:	24 c0       	rjmp	.+72     	; 0x1dc6 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6e 89       	ldd	r22, Y+22	; 0x16
    1d80:	7f 89       	ldd	r23, Y+23	; 0x17
    1d82:	88 8d       	ldd	r24, Y+24	; 0x18
    1d84:	99 8d       	ldd	r25, Y+25	; 0x19
    1d86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9d 8b       	std	Y+21, r25	; 0x15
    1d90:	8c 8b       	std	Y+20, r24	; 0x14
    1d92:	8c 89       	ldd	r24, Y+20	; 0x14
    1d94:	9d 89       	ldd	r25, Y+21	; 0x15
    1d96:	99 8b       	std	Y+17, r25	; 0x11
    1d98:	88 8b       	std	Y+16, r24	; 0x10
    1d9a:	88 89       	ldd	r24, Y+16	; 0x10
    1d9c:	99 89       	ldd	r25, Y+17	; 0x11
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_voidInit+0x456>
    1da2:	99 8b       	std	Y+17, r25	; 0x11
    1da4:	88 8b       	std	Y+16, r24	; 0x10
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1da8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1daa:	78 a1       	ldd	r23, Y+32	; 0x20
    1dac:	89 a1       	ldd	r24, Y+33	; 0x21
    1dae:	9a a1       	ldd	r25, Y+34	; 0x22
    1db0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8e 8f       	std	Y+30, r24	; 0x1e
    1dba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dbc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc0:	8a 95       	dec	r24
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_voidInit+0x478>
    1dc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e0       	ldi	r26, 0x00	; 0
    1dd2:	b0 e4       	ldi	r27, 0x40	; 64
    1dd4:	8b 87       	std	Y+11, r24	; 0x0b
    1dd6:	9c 87       	std	Y+12, r25	; 0x0c
    1dd8:	ad 87       	std	Y+13, r26	; 0x0d
    1dda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a ef       	ldi	r20, 0xFA	; 250
    1dea:	54 e4       	ldi	r21, 0x44	; 68
    1dec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8f 83       	std	Y+7, r24	; 0x07
    1df6:	98 87       	std	Y+8, r25	; 0x08
    1df8:	a9 87       	std	Y+9, r26	; 0x09
    1dfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <LCD_voidInit+0x4d6>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e20:	78 85       	ldd	r23, Y+8	; 0x08
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <LCD_voidInit+0x536>
    1e60:	88 ec       	ldi	r24, 0xC8	; 200
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_voidInit+0x524>
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <LCD_voidInit+0x518>
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_voidInit+0x560>
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    1eb0:	86 e0       	ldi	r24, 0x06	; 6
    1eb2:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
	
}
    1eb6:	c4 5b       	subi	r28, 0xB4	; 180
    1eb8:	df 4f       	sbci	r29, 0xFF	; 255
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	08 95       	ret

00001ece <LCD_voidClear>:

void LCD_voidClear       (void)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00000001);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 ea       	ldi	r26, 0xA0	; 160
    1eee:	b1 e4       	ldi	r27, 0x41	; 65
    1ef0:	8b 87       	std	Y+11, r24	; 0x0b
    1ef2:	9c 87       	std	Y+12, r25	; 0x0c
    1ef4:	ad 87       	std	Y+13, r26	; 0x0d
    1ef6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a ef       	ldi	r20, 0xFA	; 250
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8f 83       	std	Y+7, r24	; 0x07
    1f12:	98 87       	std	Y+8, r25	; 0x08
    1f14:	a9 87       	std	Y+9, r26	; 0x09
    1f16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <LCD_voidClear+0x6c>
		__ticks = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	3f c0       	rjmp	.+126    	; 0x1fb8 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3c:	78 85       	ldd	r23, Y+8	; 0x08
    1f3e:	89 85       	ldd	r24, Y+9	; 0x09
    1f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	4f e7       	ldi	r20, 0x7F	; 127
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	4c f5       	brge	.+82     	; 0x1fa4 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9e 83       	std	Y+6, r25	; 0x06
    1f78:	8d 83       	std	Y+5, r24	; 0x05
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <LCD_voidClear+0xcc>
    1f7c:	88 ec       	ldi	r24, 0xC8	; 200
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9c 83       	std	Y+4, r25	; 0x04
    1f82:	8b 83       	std	Y+3, r24	; 0x03
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_voidClear+0xba>
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	69 f7       	brne	.-38     	; 0x1f7c <LCD_voidClear+0xae>
    1fa2:	14 c0       	rjmp	.+40     	; 0x1fcc <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa6:	78 85       	ldd	r23, Y+8	; 0x08
    1fa8:	89 85       	ldd	r24, Y+9	; 0x09
    1faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9e 83       	std	Y+6, r25	; 0x06
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <LCD_voidClear+0xf6>
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    1fcc:	2e 96       	adiw	r28, 0x0e	; 14
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <LCD_voidCursorBlinkerOff>:

void LCD_voidCursorBlinkerOff(void)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	2e 97       	sbiw	r28, 0x0e	; 14
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00001100);
    1ff2:	8c e0       	ldi	r24, 0x0C	; 12
    1ff4:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a0 ea       	ldi	r26, 0xA0	; 160
    1ffe:	b1 e4       	ldi	r27, 0x41	; 65
    2000:	8b 87       	std	Y+11, r24	; 0x0b
    2002:	9c 87       	std	Y+12, r25	; 0x0c
    2004:	ad 87       	std	Y+13, r26	; 0x0d
    2006:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	6b 85       	ldd	r22, Y+11	; 0x0b
    200a:	7c 85       	ldd	r23, Y+12	; 0x0c
    200c:	8d 85       	ldd	r24, Y+13	; 0x0d
    200e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a ef       	ldi	r20, 0xFA	; 250
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8f 83       	std	Y+7, r24	; 0x07
    2022:	98 87       	std	Y+8, r25	; 0x08
    2024:	a9 87       	std	Y+9, r26	; 0x09
    2026:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2028:	6f 81       	ldd	r22, Y+7	; 0x07
    202a:	78 85       	ldd	r23, Y+8	; 0x08
    202c:	89 85       	ldd	r24, Y+9	; 0x09
    202e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    203c:	88 23       	and	r24, r24
    203e:	2c f4       	brge	.+10     	; 0x204a <LCD_voidCursorBlinkerOff+0x6c>
		__ticks = 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	3f c0       	rjmp	.+126    	; 0x20c8 <LCD_voidCursorBlinkerOff+0xea>
	else if (__tmp > 65535)
    204a:	6f 81       	ldd	r22, Y+7	; 0x07
    204c:	78 85       	ldd	r23, Y+8	; 0x08
    204e:	89 85       	ldd	r24, Y+9	; 0x09
    2050:	9a 85       	ldd	r25, Y+10	; 0x0a
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	4c f5       	brge	.+82     	; 0x20b4 <LCD_voidCursorBlinkerOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e2       	ldi	r20, 0x20	; 32
    2070:	51 e4       	ldi	r21, 0x41	; 65
    2072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	8d 83       	std	Y+5, r24	; 0x05
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <LCD_voidCursorBlinkerOff+0xcc>
    208c:	88 ec       	ldi	r24, 0xC8	; 200
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <LCD_voidCursorBlinkerOff+0xba>
    209c:	9c 83       	std	Y+4, r25	; 0x04
    209e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	69 f7       	brne	.-38     	; 0x208c <LCD_voidCursorBlinkerOff+0xae>
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <LCD_voidCursorBlinkerOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b4:	6f 81       	ldd	r22, Y+7	; 0x07
    20b6:	78 85       	ldd	r23, Y+8	; 0x08
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_voidCursorBlinkerOff+0xf6>
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    20dc:	2e 96       	adiw	r28, 0x0e	; 14
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <LCD_voidSendCmnd>:

void LCD_voidSendCmnd (u8 Copy_u8Cmnd)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	e1 97       	sbiw	r28, 0x31	; 49
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	65 e0       	ldi	r22, 0x05	; 5
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	66 e0       	ldi	r22, 0x06	; 6
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
	/* Send Cmnd byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	69 a9       	ldd	r22, Y+49	; 0x31
    211c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	67 e0       	ldi	r22, 0x07	; 7
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 e8       	ldi	r26, 0x80	; 128
    2130:	bf e3       	ldi	r27, 0x3F	; 63
    2132:	8d a7       	std	Y+45, r24	; 0x2d
    2134:	9e a7       	std	Y+46, r25	; 0x2e
    2136:	af a7       	std	Y+47, r26	; 0x2f
    2138:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    213a:	6d a5       	ldd	r22, Y+45	; 0x2d
    213c:	7e a5       	ldd	r23, Y+46	; 0x2e
    213e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2140:	98 a9       	ldd	r25, Y+48	; 0x30
    2142:	2b ea       	ldi	r18, 0xAB	; 171
    2144:	3a ea       	ldi	r19, 0xAA	; 170
    2146:	4a e2       	ldi	r20, 0x2A	; 42
    2148:	50 e4       	ldi	r21, 0x40	; 64
    214a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	89 a7       	std	Y+41, r24	; 0x29
    2154:	9a a7       	std	Y+42, r25	; 0x2a
    2156:	ab a7       	std	Y+43, r26	; 0x2b
    2158:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    215a:	69 a5       	ldd	r22, Y+41	; 0x29
    215c:	7a a5       	ldd	r23, Y+42	; 0x2a
    215e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2160:	9c a5       	ldd	r25, Y+44	; 0x2c
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	1c f4       	brge	.+6      	; 0x2178 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	88 a7       	std	Y+40, r24	; 0x28
    2176:	91 c0       	rjmp	.+290    	; 0x229a <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2178:	69 a5       	ldd	r22, Y+41	; 0x29
    217a:	7a a5       	ldd	r23, Y+42	; 0x2a
    217c:	8b a5       	ldd	r24, Y+43	; 0x2b
    217e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	53 e4       	ldi	r21, 0x43	; 67
    2188:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	0c f0       	brlt	.+2      	; 0x2192 <LCD_voidSendCmnd+0xa4>
    2190:	7b c0       	rjmp	.+246    	; 0x2288 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2192:	6d a5       	ldd	r22, Y+45	; 0x2d
    2194:	7e a5       	ldd	r23, Y+46	; 0x2e
    2196:	8f a5       	ldd	r24, Y+47	; 0x2f
    2198:	98 a9       	ldd	r25, Y+48	; 0x30
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8c a3       	std	Y+36, r24	; 0x24
    21ac:	9d a3       	std	Y+37, r25	; 0x25
    21ae:	ae a3       	std	Y+38, r26	; 0x26
    21b0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6c a1       	ldd	r22, Y+36	; 0x24
    21b4:	7d a1       	ldd	r23, Y+37	; 0x25
    21b6:	8e a1       	ldd	r24, Y+38	; 0x26
    21b8:	9f a1       	ldd	r25, Y+39	; 0x27
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	88 a3       	std	Y+32, r24	; 0x20
    21cc:	99 a3       	std	Y+33, r25	; 0x21
    21ce:	aa a3       	std	Y+34, r26	; 0x22
    21d0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21d2:	68 a1       	ldd	r22, Y+32	; 0x20
    21d4:	79 a1       	ldd	r23, Y+33	; 0x21
    21d6:	8a a1       	ldd	r24, Y+34	; 0x22
    21d8:	9b a1       	ldd	r25, Y+35	; 0x23
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9f 8f       	std	Y+31, r25	; 0x1f
    21f0:	8e 8f       	std	Y+30, r24	; 0x1e
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    21f4:	68 a1       	ldd	r22, Y+32	; 0x20
    21f6:	79 a1       	ldd	r23, Y+33	; 0x21
    21f8:	8a a1       	ldd	r24, Y+34	; 0x22
    21fa:	9b a1       	ldd	r25, Y+35	; 0x23
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6c a1       	ldd	r22, Y+36	; 0x24
    220e:	7d a1       	ldd	r23, Y+37	; 0x25
    2210:	8e a1       	ldd	r24, Y+38	; 0x26
    2212:	9f a1       	ldd	r25, Y+39	; 0x27
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9f 8f       	std	Y+31, r25	; 0x1f
    2232:	8e 8f       	std	Y+30, r24	; 0x1e
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <LCD_voidSendCmnd+0x166>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9d 8f       	std	Y+29, r25	; 0x1d
    223c:	8c 8f       	std	Y+28, r24	; 0x1c
    223e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2240:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_voidSendCmnd+0x154>
    2246:	9d 8f       	std	Y+29, r25	; 0x1d
    2248:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    224c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9f 8f       	std	Y+31, r25	; 0x1f
    2252:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2256:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <LCD_voidSendCmnd+0x148>
    225c:	24 c0       	rjmp	.+72     	; 0x22a6 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	68 a1       	ldd	r22, Y+32	; 0x20
    2260:	79 a1       	ldd	r23, Y+33	; 0x21
    2262:	8a a1       	ldd	r24, Y+34	; 0x22
    2264:	9b a1       	ldd	r25, Y+35	; 0x23
    2266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9f 8f       	std	Y+31, r25	; 0x1f
    2270:	8e 8f       	std	Y+30, r24	; 0x1e
    2272:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2274:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2276:	9b 8f       	std	Y+27, r25	; 0x1b
    2278:	8a 8f       	std	Y+26, r24	; 0x1a
    227a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    227c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_voidSendCmnd+0x190>
    2282:	9b 8f       	std	Y+27, r25	; 0x1b
    2284:	8a 8f       	std	Y+26, r24	; 0x1a
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2288:	69 a5       	ldd	r22, Y+41	; 0x29
    228a:	7a a5       	ldd	r23, Y+42	; 0x2a
    228c:	8b a5       	ldd	r24, Y+43	; 0x2b
    228e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	88 a7       	std	Y+40, r24	; 0x28
    229a:	88 a5       	ldd	r24, Y+40	; 0x28
    229c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    229e:	89 8d       	ldd	r24, Y+25	; 0x19
    22a0:	8a 95       	dec	r24
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <LCD_voidSendCmnd+0x1b2>
    22a4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	67 e0       	ldi	r22, 0x07	; 7
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e8       	ldi	r26, 0x80	; 128
    22b6:	bf e3       	ldi	r27, 0x3F	; 63
    22b8:	8d 8b       	std	Y+21, r24	; 0x15
    22ba:	9e 8b       	std	Y+22, r25	; 0x16
    22bc:	af 8b       	std	Y+23, r26	; 0x17
    22be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22c0:	6d 89       	ldd	r22, Y+21	; 0x15
    22c2:	7e 89       	ldd	r23, Y+22	; 0x16
    22c4:	8f 89       	ldd	r24, Y+23	; 0x17
    22c6:	98 8d       	ldd	r25, Y+24	; 0x18
    22c8:	2b ea       	ldi	r18, 0xAB	; 171
    22ca:	3a ea       	ldi	r19, 0xAA	; 170
    22cc:	4a e2       	ldi	r20, 0x2A	; 42
    22ce:	50 e4       	ldi	r21, 0x40	; 64
    22d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	89 8b       	std	Y+17, r24	; 0x11
    22da:	9a 8b       	std	Y+18, r25	; 0x12
    22dc:	ab 8b       	std	Y+19, r26	; 0x13
    22de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22e0:	69 89       	ldd	r22, Y+17	; 0x11
    22e2:	7a 89       	ldd	r23, Y+18	; 0x12
    22e4:	8b 89       	ldd	r24, Y+19	; 0x13
    22e6:	9c 89       	ldd	r25, Y+20	; 0x14
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	1c f4       	brge	.+6      	; 0x22fe <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	88 8b       	std	Y+16, r24	; 0x10
    22fc:	91 c0       	rjmp	.+290    	; 0x2420 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    22fe:	69 89       	ldd	r22, Y+17	; 0x11
    2300:	7a 89       	ldd	r23, Y+18	; 0x12
    2302:	8b 89       	ldd	r24, Y+19	; 0x13
    2304:	9c 89       	ldd	r25, Y+20	; 0x14
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	53 e4       	ldi	r21, 0x43	; 67
    230e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	0c f0       	brlt	.+2      	; 0x2318 <LCD_voidSendCmnd+0x22a>
    2316:	7b c0       	rjmp	.+246    	; 0x240e <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    2318:	6d 89       	ldd	r22, Y+21	; 0x15
    231a:	7e 89       	ldd	r23, Y+22	; 0x16
    231c:	8f 89       	ldd	r24, Y+23	; 0x17
    231e:	98 8d       	ldd	r25, Y+24	; 0x18
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a e7       	ldi	r20, 0x7A	; 122
    2326:	54 e4       	ldi	r21, 0x44	; 68
    2328:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8c 87       	std	Y+12, r24	; 0x0c
    2332:	9d 87       	std	Y+13, r25	; 0x0d
    2334:	ae 87       	std	Y+14, r26	; 0x0e
    2336:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	6c 85       	ldd	r22, Y+12	; 0x0c
    233a:	7d 85       	ldd	r23, Y+13	; 0x0d
    233c:	8e 85       	ldd	r24, Y+14	; 0x0e
    233e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a ef       	ldi	r20, 0xFA	; 250
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	88 87       	std	Y+8, r24	; 0x08
    2352:	99 87       	std	Y+9, r25	; 0x09
    2354:	aa 87       	std	Y+10, r26	; 0x0a
    2356:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2358:	68 85       	ldd	r22, Y+8	; 0x08
    235a:	79 85       	ldd	r23, Y+9	; 0x09
    235c:	8a 85       	ldd	r24, Y+10	; 0x0a
    235e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	2c f4       	brge	.+10     	; 0x237a <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9f 83       	std	Y+7, r25	; 0x07
    2376:	8e 83       	std	Y+6, r24	; 0x06
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    237a:	68 85       	ldd	r22, Y+8	; 0x08
    237c:	79 85       	ldd	r23, Y+9	; 0x09
    237e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2380:	9b 85       	ldd	r25, Y+11	; 0x0b
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	4f e7       	ldi	r20, 0x7F	; 127
    2388:	57 e4       	ldi	r21, 0x47	; 71
    238a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    238e:	18 16       	cp	r1, r24
    2390:	4c f5       	brge	.+82     	; 0x23e4 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	6c 85       	ldd	r22, Y+12	; 0x0c
    2394:	7d 85       	ldd	r23, Y+13	; 0x0d
    2396:	8e 85       	ldd	r24, Y+14	; 0x0e
    2398:	9f 85       	ldd	r25, Y+15	; 0x0f
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e2       	ldi	r20, 0x20	; 32
    23a0:	51 e4       	ldi	r21, 0x41	; 65
    23a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	9f 83       	std	Y+7, r25	; 0x07
    23b8:	8e 83       	std	Y+6, r24	; 0x06
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <LCD_voidSendCmnd+0x2ec>
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9d 83       	std	Y+5, r25	; 0x05
    23c2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c4:	8c 81       	ldd	r24, Y+4	; 0x04
    23c6:	9d 81       	ldd	r25, Y+5	; 0x05
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_voidSendCmnd+0x2da>
    23cc:	9d 83       	std	Y+5, r25	; 0x05
    23ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	8e 81       	ldd	r24, Y+6	; 0x06
    23d2:	9f 81       	ldd	r25, Y+7	; 0x07
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	9f 83       	std	Y+7, r25	; 0x07
    23d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23da:	8e 81       	ldd	r24, Y+6	; 0x06
    23dc:	9f 81       	ldd	r25, Y+7	; 0x07
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	69 f7       	brne	.-38     	; 0x23bc <LCD_voidSendCmnd+0x2ce>
    23e2:	24 c0       	rjmp	.+72     	; 0x242c <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	68 85       	ldd	r22, Y+8	; 0x08
    23e6:	79 85       	ldd	r23, Y+9	; 0x09
    23e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9f 83       	std	Y+7, r25	; 0x07
    23f6:	8e 83       	std	Y+6, r24	; 0x06
    23f8:	8e 81       	ldd	r24, Y+6	; 0x06
    23fa:	9f 81       	ldd	r25, Y+7	; 0x07
    23fc:	9b 83       	std	Y+3, r25	; 0x03
    23fe:	8a 83       	std	Y+2, r24	; 0x02
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_voidSendCmnd+0x316>
    2408:	9b 83       	std	Y+3, r25	; 0x03
    240a:	8a 83       	std	Y+2, r24	; 0x02
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    240e:	69 89       	ldd	r22, Y+17	; 0x11
    2410:	7a 89       	ldd	r23, Y+18	; 0x12
    2412:	8b 89       	ldd	r24, Y+19	; 0x13
    2414:	9c 89       	ldd	r25, Y+20	; 0x14
    2416:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	88 8b       	std	Y+16, r24	; 0x10
    2420:	88 89       	ldd	r24, Y+16	; 0x10
    2422:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	8a 95       	dec	r24
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_voidSendCmnd+0x338>
    242a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    242c:	e1 96       	adiw	r28, 0x31	; 49
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <LCD_voidSendChar>:
void LCD_voidSendChar (u8 Copy_u8Char)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	e1 97       	sbiw	r28, 0x31	; 49
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 1 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	65 e0       	ldi	r22, 0x05	; 5
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    245e:	82 e0       	ldi	r24, 0x02	; 2
    2460:	66 e0       	ldi	r22, 0x06	; 6
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
	/* Send Char byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	69 a9       	ldd	r22, Y+49	; 0x31
    246c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	67 e0       	ldi	r22, 0x07	; 7
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e8       	ldi	r26, 0x80	; 128
    2480:	bf e3       	ldi	r27, 0x3F	; 63
    2482:	8d a7       	std	Y+45, r24	; 0x2d
    2484:	9e a7       	std	Y+46, r25	; 0x2e
    2486:	af a7       	std	Y+47, r26	; 0x2f
    2488:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    248a:	6d a5       	ldd	r22, Y+45	; 0x2d
    248c:	7e a5       	ldd	r23, Y+46	; 0x2e
    248e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2490:	98 a9       	ldd	r25, Y+48	; 0x30
    2492:	2b ea       	ldi	r18, 0xAB	; 171
    2494:	3a ea       	ldi	r19, 0xAA	; 170
    2496:	4a e2       	ldi	r20, 0x2A	; 42
    2498:	50 e4       	ldi	r21, 0x40	; 64
    249a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	89 a7       	std	Y+41, r24	; 0x29
    24a4:	9a a7       	std	Y+42, r25	; 0x2a
    24a6:	ab a7       	std	Y+43, r26	; 0x2b
    24a8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    24aa:	69 a5       	ldd	r22, Y+41	; 0x29
    24ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    24ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    24b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	1c f4       	brge	.+6      	; 0x24c8 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	88 a7       	std	Y+40, r24	; 0x28
    24c6:	91 c0       	rjmp	.+290    	; 0x25ea <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    24c8:	69 a5       	ldd	r22, Y+41	; 0x29
    24ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    24cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	53 e4       	ldi	r21, 0x43	; 67
    24d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	0c f0       	brlt	.+2      	; 0x24e2 <LCD_voidSendChar+0xa4>
    24e0:	7b c0       	rjmp	.+246    	; 0x25d8 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    24e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    24e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    24e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4a e7       	ldi	r20, 0x7A	; 122
    24f0:	54 e4       	ldi	r21, 0x44	; 68
    24f2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	8c a3       	std	Y+36, r24	; 0x24
    24fc:	9d a3       	std	Y+37, r25	; 0x25
    24fe:	ae a3       	std	Y+38, r26	; 0x26
    2500:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2502:	6c a1       	ldd	r22, Y+36	; 0x24
    2504:	7d a1       	ldd	r23, Y+37	; 0x25
    2506:	8e a1       	ldd	r24, Y+38	; 0x26
    2508:	9f a1       	ldd	r25, Y+39	; 0x27
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4a ef       	ldi	r20, 0xFA	; 250
    2510:	54 e4       	ldi	r21, 0x44	; 68
    2512:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	88 a3       	std	Y+32, r24	; 0x20
    251c:	99 a3       	std	Y+33, r25	; 0x21
    251e:	aa a3       	std	Y+34, r26	; 0x22
    2520:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2522:	68 a1       	ldd	r22, Y+32	; 0x20
    2524:	79 a1       	ldd	r23, Y+33	; 0x21
    2526:	8a a1       	ldd	r24, Y+34	; 0x22
    2528:	9b a1       	ldd	r25, Y+35	; 0x23
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <LCD_voidSendChar+0x106>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9f 8f       	std	Y+31, r25	; 0x1f
    2540:	8e 8f       	std	Y+30, r24	; 0x1e
    2542:	3f c0       	rjmp	.+126    	; 0x25c2 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2544:	68 a1       	ldd	r22, Y+32	; 0x20
    2546:	79 a1       	ldd	r23, Y+33	; 0x21
    2548:	8a a1       	ldd	r24, Y+34	; 0x22
    254a:	9b a1       	ldd	r25, Y+35	; 0x23
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	57 e4       	ldi	r21, 0x47	; 71
    2554:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	4c f5       	brge	.+82     	; 0x25ae <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	6c a1       	ldd	r22, Y+36	; 0x24
    255e:	7d a1       	ldd	r23, Y+37	; 0x25
    2560:	8e a1       	ldd	r24, Y+38	; 0x26
    2562:	9f a1       	ldd	r25, Y+39	; 0x27
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9f 8f       	std	Y+31, r25	; 0x1f
    2582:	8e 8f       	std	Y+30, r24	; 0x1e
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <LCD_voidSendChar+0x166>
    2586:	88 ec       	ldi	r24, 0xC8	; 200
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9d 8f       	std	Y+29, r25	; 0x1d
    258c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    258e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2590:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_voidSendChar+0x154>
    2596:	9d 8f       	std	Y+29, r25	; 0x1d
    2598:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    259c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9f 8f       	std	Y+31, r25	; 0x1f
    25a2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <LCD_voidSendChar+0x148>
    25ac:	24 c0       	rjmp	.+72     	; 0x25f6 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	68 a1       	ldd	r22, Y+32	; 0x20
    25b0:	79 a1       	ldd	r23, Y+33	; 0x21
    25b2:	8a a1       	ldd	r24, Y+34	; 0x22
    25b4:	9b a1       	ldd	r25, Y+35	; 0x23
    25b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9f 8f       	std	Y+31, r25	; 0x1f
    25c0:	8e 8f       	std	Y+30, r24	; 0x1e
    25c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25c6:	9b 8f       	std	Y+27, r25	; 0x1b
    25c8:	8a 8f       	std	Y+26, r24	; 0x1a
    25ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_voidSendChar+0x190>
    25d2:	9b 8f       	std	Y+27, r25	; 0x1b
    25d4:	8a 8f       	std	Y+26, r24	; 0x1a
    25d6:	0f c0       	rjmp	.+30     	; 0x25f6 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25d8:	69 a5       	ldd	r22, Y+41	; 0x29
    25da:	7a a5       	ldd	r23, Y+42	; 0x2a
    25dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25de:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	88 a7       	std	Y+40, r24	; 0x28
    25ea:	88 a5       	ldd	r24, Y+40	; 0x28
    25ec:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25ee:	89 8d       	ldd	r24, Y+25	; 0x19
    25f0:	8a 95       	dec	r24
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <LCD_voidSendChar+0x1b2>
    25f4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	67 e0       	ldi	r22, 0x07	; 7
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_u8SetPinValue>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	8d 8b       	std	Y+21, r24	; 0x15
    260a:	9e 8b       	std	Y+22, r25	; 0x16
    260c:	af 8b       	std	Y+23, r26	; 0x17
    260e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2610:	6d 89       	ldd	r22, Y+21	; 0x15
    2612:	7e 89       	ldd	r23, Y+22	; 0x16
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	2b ea       	ldi	r18, 0xAB	; 171
    261a:	3a ea       	ldi	r19, 0xAA	; 170
    261c:	4a e2       	ldi	r20, 0x2A	; 42
    261e:	50 e4       	ldi	r21, 0x40	; 64
    2620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	89 8b       	std	Y+17, r24	; 0x11
    262a:	9a 8b       	std	Y+18, r25	; 0x12
    262c:	ab 8b       	std	Y+19, r26	; 0x13
    262e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2630:	69 89       	ldd	r22, Y+17	; 0x11
    2632:	7a 89       	ldd	r23, Y+18	; 0x12
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	1c f4       	brge	.+6      	; 0x264e <LCD_voidSendChar+0x210>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	88 8b       	std	Y+16, r24	; 0x10
    264c:	91 c0       	rjmp	.+290    	; 0x2770 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    264e:	69 89       	ldd	r22, Y+17	; 0x11
    2650:	7a 89       	ldd	r23, Y+18	; 0x12
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	9c 89       	ldd	r25, Y+20	; 0x14
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	53 e4       	ldi	r21, 0x43	; 67
    265e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2662:	18 16       	cp	r1, r24
    2664:	0c f0       	brlt	.+2      	; 0x2668 <LCD_voidSendChar+0x22a>
    2666:	7b c0       	rjmp	.+246    	; 0x275e <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2668:	6d 89       	ldd	r22, Y+21	; 0x15
    266a:	7e 89       	ldd	r23, Y+22	; 0x16
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	98 8d       	ldd	r25, Y+24	; 0x18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a e7       	ldi	r20, 0x7A	; 122
    2676:	54 e4       	ldi	r21, 0x44	; 68
    2678:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8c 87       	std	Y+12, r24	; 0x0c
    2682:	9d 87       	std	Y+13, r25	; 0x0d
    2684:	ae 87       	std	Y+14, r26	; 0x0e
    2686:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2688:	6c 85       	ldd	r22, Y+12	; 0x0c
    268a:	7d 85       	ldd	r23, Y+13	; 0x0d
    268c:	8e 85       	ldd	r24, Y+14	; 0x0e
    268e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a ef       	ldi	r20, 0xFA	; 250
    2696:	54 e4       	ldi	r21, 0x44	; 68
    2698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	88 87       	std	Y+8, r24	; 0x08
    26a2:	99 87       	std	Y+9, r25	; 0x09
    26a4:	aa 87       	std	Y+10, r26	; 0x0a
    26a6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26a8:	68 85       	ldd	r22, Y+8	; 0x08
    26aa:	79 85       	ldd	r23, Y+9	; 0x09
    26ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	2c f4       	brge	.+10     	; 0x26ca <LCD_voidSendChar+0x28c>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9f 83       	std	Y+7, r25	; 0x07
    26c6:	8e 83       	std	Y+6, r24	; 0x06
    26c8:	3f c0       	rjmp	.+126    	; 0x2748 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    26ca:	68 85       	ldd	r22, Y+8	; 0x08
    26cc:	79 85       	ldd	r23, Y+9	; 0x09
    26ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	4c f5       	brge	.+82     	; 0x2734 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e2       	ldi	r20, 0x20	; 32
    26f0:	51 e4       	ldi	r21, 0x41	; 65
    26f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9f 83       	std	Y+7, r25	; 0x07
    2708:	8e 83       	std	Y+6, r24	; 0x06
    270a:	0f c0       	rjmp	.+30     	; 0x272a <LCD_voidSendChar+0x2ec>
    270c:	88 ec       	ldi	r24, 0xC8	; 200
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9d 83       	std	Y+5, r25	; 0x05
    2712:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	9d 81       	ldd	r25, Y+5	; 0x05
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_voidSendChar+0x2da>
    271c:	9d 83       	std	Y+5, r25	; 0x05
    271e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	8e 81       	ldd	r24, Y+6	; 0x06
    2722:	9f 81       	ldd	r25, Y+7	; 0x07
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	9f 83       	std	Y+7, r25	; 0x07
    2728:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	8e 81       	ldd	r24, Y+6	; 0x06
    272c:	9f 81       	ldd	r25, Y+7	; 0x07
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	69 f7       	brne	.-38     	; 0x270c <LCD_voidSendChar+0x2ce>
    2732:	24 c0       	rjmp	.+72     	; 0x277c <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	68 85       	ldd	r22, Y+8	; 0x08
    2736:	79 85       	ldd	r23, Y+9	; 0x09
    2738:	8a 85       	ldd	r24, Y+10	; 0x0a
    273a:	9b 85       	ldd	r25, Y+11	; 0x0b
    273c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9f 83       	std	Y+7, r25	; 0x07
    2746:	8e 83       	std	Y+6, r24	; 0x06
    2748:	8e 81       	ldd	r24, Y+6	; 0x06
    274a:	9f 81       	ldd	r25, Y+7	; 0x07
    274c:	9b 83       	std	Y+3, r25	; 0x03
    274e:	8a 83       	std	Y+2, r24	; 0x02
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_voidSendChar+0x316>
    2758:	9b 83       	std	Y+3, r25	; 0x03
    275a:	8a 83       	std	Y+2, r24	; 0x02
    275c:	0f c0       	rjmp	.+30     	; 0x277c <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    275e:	69 89       	ldd	r22, Y+17	; 0x11
    2760:	7a 89       	ldd	r23, Y+18	; 0x12
    2762:	8b 89       	ldd	r24, Y+19	; 0x13
    2764:	9c 89       	ldd	r25, Y+20	; 0x14
    2766:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	88 8b       	std	Y+16, r24	; 0x10
    2770:	88 89       	ldd	r24, Y+16	; 0x10
    2772:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	8a 95       	dec	r24
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_voidSendChar+0x338>
    277a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    277c:	e1 96       	adiw	r28, 0x31	; 49
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <LCD_voidWriteString>:
void LCD_voidWriteString (u8 * Copy_pu8String)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <LCD_voidWriteString+0x6>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <LCD_voidWriteString+0x8>
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	9c 83       	std	Y+4, r25	; 0x04
    279c:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8String != NULL )
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	21 f1       	breq	.+72     	; 0x27ee <LCD_voidWriteString+0x60>
	{
	    u8 x = 0;
    27a6:	1a 82       	std	Y+2, r1	; 0x02
	    u8 i = 0;
    27a8:	19 82       	std	Y+1, r1	; 0x01
    27aa:	16 c0       	rjmp	.+44     	; 0x27d8 <LCD_voidWriteString+0x4a>
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	8f 5f       	subi	r24, 0xFF	; 255
    27b0:	8a 83       	std	Y+2, r24	; 0x02
    27b2:	0e c0       	rjmp	.+28     	; 0x27d0 <LCD_voidWriteString+0x42>
		 for(  ; i < x; i++)
		 {
		  /* Write Character on LCD */
		  LCD_voidSendChar (Copy_pu8String[i]);
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	fc 01       	movw	r30, r24
    27c0:	e2 0f       	add	r30, r18
    27c2:	f3 1f       	adc	r31, r19
    27c4:	80 81       	ld	r24, Z
    27c6:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_voidSendChar>
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
		 for(  ; i < x; i++)
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	99 81       	ldd	r25, Y+1	; 0x01
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	98 17       	cp	r25, r24
    27d6:	70 f3       	brcs	.-36     	; 0x27b4 <LCD_voidWriteString+0x26>
{
	if(Copy_pu8String != NULL )
	{
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	28 2f       	mov	r18, r24
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	fc 01       	movw	r30, r24
    27e4:	e2 0f       	add	r30, r18
    27e6:	f3 1f       	adc	r31, r19
    27e8:	80 81       	ld	r24, Z
    27ea:	88 23       	and	r24, r24
    27ec:	f9 f6       	brne	.-66     	; 0x27ac <LCD_voidWriteString+0x1e>
		 }
		 
		}
	}
	
}
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <LCD_u8_GoTo_XY>:
u8 LCD_u8_GoTo_XY     (u8 Copy_u8X,u8 Copy_u8Y)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <LCD_u8_GoTo_XY+0x6>
    2802:	00 d0       	rcall	.+0      	; 0x2804 <LCD_u8_GoTo_XY+0x8>
    2804:	00 d0       	rcall	.+0      	; 0x2806 <LCD_u8_GoTo_XY+0xa>
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	8a 83       	std	Y+2, r24	; 0x02
    280c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8X <=1)&&(Copy_u8Y <= 39))
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	82 30       	cpi	r24, 0x02	; 2
    2816:	e0 f4       	brcc	.+56     	; 0x2850 <LCD_u8_GoTo_XY+0x54>
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	88 32       	cpi	r24, 0x28	; 40
    281c:	c8 f4       	brcc	.+50     	; 0x2850 <LCD_u8_GoTo_XY+0x54>
	{
		switch(Copy_u8X)
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	3d 83       	std	Y+5, r19	; 0x05
    2826:	2c 83       	std	Y+4, r18	; 0x04
    2828:	8c 81       	ldd	r24, Y+4	; 0x04
    282a:	9d 81       	ldd	r25, Y+5	; 0x05
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	31 f0       	breq	.+12     	; 0x283c <LCD_u8_GoTo_XY+0x40>
    2830:	2c 81       	ldd	r18, Y+4	; 0x04
    2832:	3d 81       	ldd	r19, Y+5	; 0x05
    2834:	21 30       	cpi	r18, 0x01	; 1
    2836:	31 05       	cpc	r19, r1
    2838:	31 f0       	breq	.+12     	; 0x2846 <LCD_u8_GoTo_XY+0x4a>
    283a:	0b c0       	rjmp	.+22     	; 0x2852 <LCD_u8_GoTo_XY+0x56>
		{
		case LCD_u8_LINE0 : LCD_voidSendCmnd(0x80 + Copy_u8Y);break;
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	80 58       	subi	r24, 0x80	; 128
    2840:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    2844:	06 c0       	rjmp	.+12     	; 0x2852 <LCD_u8_GoTo_XY+0x56>

		case LCD_u8_LINE1 : LCD_voidSendCmnd(0xC0 + Copy_u8Y);break;
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	80 54       	subi	r24, 0x40	; 64
    284a:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <LCD_u8_GoTo_XY+0x56>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    2850:	19 82       	std	Y+1, r1	; 0x01
	}


}
    2852:	26 96       	adiw	r28, 0x06	; 6
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber (u32  Copy_u32Num)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	66 97       	sbiw	r28, 0x16	; 22
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	6b 8b       	std	Y+19, r22	; 0x13
    287a:	7c 8b       	std	Y+20, r23	; 0x14
    287c:	8d 8b       	std	Y+21, r24	; 0x15
    287e:	9e 8b       	std	Y+22, r25	; 0x16

	u8 Arr[10];
	u8 Local_Remainder = 1;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	88 87       	std	Y+8, r24	; 0x08
	u32 Local_Number = Copy_u32Num;
    2884:	8b 89       	ldd	r24, Y+19	; 0x13
    2886:	9c 89       	ldd	r25, Y+20	; 0x14
    2888:	ad 89       	ldd	r26, Y+21	; 0x15
    288a:	be 89       	ldd	r27, Y+22	; 0x16
    288c:	8c 83       	std	Y+4, r24	; 0x04
    288e:	9d 83       	std	Y+5, r25	; 0x05
    2890:	ae 83       	std	Y+6, r26	; 0x06
    2892:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_Counter = 0;
    2894:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    2896:	8a e0       	ldi	r24, 0x0A	; 10
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	42 c0       	rjmp	.+132    	; 0x2920 <LCD_voidWriteNumber+0xbc>
	{
		Local_Remainder = Local_Number % 10 ;
    289c:	8c 81       	ldd	r24, Y+4	; 0x04
    289e:	9d 81       	ldd	r25, Y+5	; 0x05
    28a0:	ae 81       	ldd	r26, Y+6	; 0x06
    28a2:	bf 81       	ldd	r27, Y+7	; 0x07
    28a4:	2a e0       	ldi	r18, 0x0A	; 10
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	88 87       	std	Y+8, r24	; 0x08
		Local_Number    = Local_Number /10 ;
    28ba:	8c 81       	ldd	r24, Y+4	; 0x04
    28bc:	9d 81       	ldd	r25, Y+5	; 0x05
    28be:	ae 81       	ldd	r26, Y+6	; 0x06
    28c0:	bf 81       	ldd	r27, Y+7	; 0x07
    28c2:	2a e0       	ldi	r18, 0x0A	; 10
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__udivmodsi4>
    28d2:	da 01       	movw	r26, r20
    28d4:	c9 01       	movw	r24, r18
    28d6:	8c 83       	std	Y+4, r24	; 0x04
    28d8:	9d 83       	std	Y+5, r25	; 0x05
    28da:	ae 83       	std	Y+6, r26	; 0x06
    28dc:	bf 83       	std	Y+7, r27	; 0x07

		if((Local_Remainder ==0) && (Local_Number<1) && (Local_Counter>0) )
    28de:	88 85       	ldd	r24, Y+8	; 0x08
    28e0:	88 23       	and	r24, r24
    28e2:	59 f4       	brne	.+22     	; 0x28fa <LCD_voidWriteNumber+0x96>
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	9d 81       	ldd	r25, Y+5	; 0x05
    28e8:	ae 81       	ldd	r26, Y+6	; 0x06
    28ea:	bf 81       	ldd	r27, Y+7	; 0x07
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	a1 05       	cpc	r26, r1
    28f0:	b1 05       	cpc	r27, r1
    28f2:	19 f4       	brne	.+6      	; 0x28fa <LCD_voidWriteNumber+0x96>
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	88 23       	and	r24, r24
    28f8:	b9 f4       	brne	.+46     	; 0x2928 <LCD_voidWriteNumber+0xc4>
		{
			break;
		}
		Local_Counter ++;
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	8f 5f       	subi	r24, 0xFF	; 255
    28fe:	8b 83       	std	Y+3, r24	; 0x03
		Arr[initial-1] = Local_Remainder ;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	88 2f       	mov	r24, r24
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	9c 01       	movw	r18, r24
    2908:	21 50       	subi	r18, 0x01	; 1
    290a:	30 40       	sbci	r19, 0x00	; 0
    290c:	ce 01       	movw	r24, r28
    290e:	09 96       	adiw	r24, 0x09	; 9
    2910:	fc 01       	movw	r30, r24
    2912:	e2 0f       	add	r30, r18
    2914:	f3 1f       	adc	r31, r19
    2916:	88 85       	ldd	r24, Y+8	; 0x08
    2918:	80 83       	st	Z, r24
	u32 Local_Number = Copy_u32Num;
	u8 Local_Counter = 0;
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	81 50       	subi	r24, 0x01	; 1
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	88 23       	and	r24, r24
    2924:	09 f0       	breq	.+2      	; 0x2928 <LCD_voidWriteNumber+0xc4>
    2926:	ba cf       	rjmp	.-140    	; 0x289c <LCD_voidWriteNumber+0x38>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    2928:	8a e0       	ldi	r24, 0x0A	; 10
    292a:	9b 81       	ldd	r25, Y+3	; 0x03
    292c:	89 1b       	sub	r24, r25
    292e:	8a 83       	std	Y+2, r24	; 0x02
    2930:	0f c0       	rjmp	.+30     	; 0x2950 <LCD_voidWriteNumber+0xec>
	{
		LCD_voidSendChar(Arr[Local_Counter2]+48);
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	28 2f       	mov	r18, r24
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	ce 01       	movw	r24, r28
    293a:	09 96       	adiw	r24, 0x09	; 9
    293c:	fc 01       	movw	r30, r24
    293e:	e2 0f       	add	r30, r18
    2940:	f3 1f       	adc	r31, r19
    2942:	80 81       	ld	r24, Z
    2944:	80 5d       	subi	r24, 0xD0	; 208
    2946:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_voidSendChar>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	8a 83       	std	Y+2, r24	; 0x02
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	8a 30       	cpi	r24, 0x0A	; 10
    2954:	70 f3       	brcs	.-36     	; 0x2932 <LCD_voidWriteNumber+0xce>
		LCD_voidSendChar(Arr[Local_Counter2]+48);
	}



}
    2956:	66 96       	adiw	r28, 0x16	; 22
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharNo,u8 Copy_u8X,u8 Copy_u8Y,u8 * Copy_PSpecialChar)
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	28 97       	sbiw	r28, 0x08	; 8
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	8a 83       	std	Y+2, r24	; 0x02
    297e:	6b 83       	std	Y+3, r22	; 0x03
    2980:	4c 83       	std	Y+4, r20	; 0x04
    2982:	3e 83       	std	Y+6, r19	; 0x06
    2984:	2d 83       	std	Y+5, r18	; 0x05

	switch(Copy_u8CharNo)
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	38 87       	std	Y+8, r19	; 0x08
    298e:	2f 83       	std	Y+7, r18	; 0x07
    2990:	8f 81       	ldd	r24, Y+7	; 0x07
    2992:	98 85       	ldd	r25, Y+8	; 0x08
    2994:	83 30       	cpi	r24, 0x03	; 3
    2996:	91 05       	cpc	r25, r1
    2998:	a9 f1       	breq	.+106    	; 0x2a04 <LCD_voidSendSpecialChar+0x9c>
    299a:	2f 81       	ldd	r18, Y+7	; 0x07
    299c:	38 85       	ldd	r19, Y+8	; 0x08
    299e:	24 30       	cpi	r18, 0x04	; 4
    29a0:	31 05       	cpc	r19, r1
    29a2:	7c f4       	brge	.+30     	; 0x29c2 <LCD_voidSendSpecialChar+0x5a>
    29a4:	8f 81       	ldd	r24, Y+7	; 0x07
    29a6:	98 85       	ldd	r25, Y+8	; 0x08
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	91 05       	cpc	r25, r1
    29ac:	19 f1       	breq	.+70     	; 0x29f4 <LCD_voidSendSpecialChar+0x8c>
    29ae:	2f 81       	ldd	r18, Y+7	; 0x07
    29b0:	38 85       	ldd	r19, Y+8	; 0x08
    29b2:	22 30       	cpi	r18, 0x02	; 2
    29b4:	31 05       	cpc	r19, r1
    29b6:	14 f5       	brge	.+68     	; 0x29fc <LCD_voidSendSpecialChar+0x94>
    29b8:	8f 81       	ldd	r24, Y+7	; 0x07
    29ba:	98 85       	ldd	r25, Y+8	; 0x08
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	b1 f0       	breq	.+44     	; 0x29ec <LCD_voidSendSpecialChar+0x84>
    29c0:	34 c0       	rjmp	.+104    	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>
    29c2:	2f 81       	ldd	r18, Y+7	; 0x07
    29c4:	38 85       	ldd	r19, Y+8	; 0x08
    29c6:	25 30       	cpi	r18, 0x05	; 5
    29c8:	31 05       	cpc	r19, r1
    29ca:	21 f1       	breq	.+72     	; 0x2a14 <LCD_voidSendSpecialChar+0xac>
    29cc:	8f 81       	ldd	r24, Y+7	; 0x07
    29ce:	98 85       	ldd	r25, Y+8	; 0x08
    29d0:	85 30       	cpi	r24, 0x05	; 5
    29d2:	91 05       	cpc	r25, r1
    29d4:	dc f0       	brlt	.+54     	; 0x2a0c <LCD_voidSendSpecialChar+0xa4>
    29d6:	2f 81       	ldd	r18, Y+7	; 0x07
    29d8:	38 85       	ldd	r19, Y+8	; 0x08
    29da:	26 30       	cpi	r18, 0x06	; 6
    29dc:	31 05       	cpc	r19, r1
    29de:	f1 f0       	breq	.+60     	; 0x2a1c <LCD_voidSendSpecialChar+0xb4>
    29e0:	8f 81       	ldd	r24, Y+7	; 0x07
    29e2:	98 85       	ldd	r25, Y+8	; 0x08
    29e4:	87 30       	cpi	r24, 0x07	; 7
    29e6:	91 05       	cpc	r25, r1
    29e8:	e9 f0       	breq	.+58     	; 0x2a24 <LCD_voidSendSpecialChar+0xbc>
    29ea:	1f c0       	rjmp	.+62     	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>
	{
	case 0:
		LCD_voidSendCmnd(0b01000000);
    29ec:	80 e4       	ldi	r24, 0x40	; 64
    29ee:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    29f2:	1b c0       	rjmp	.+54     	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>

		break;
	case 1:
	    LCD_voidSendCmnd(0b01001000);
    29f4:	88 e4       	ldi	r24, 0x48	; 72
    29f6:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    29fa:	17 c0       	rjmp	.+46     	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>
		break;
	case 2:
	    LCD_voidSendCmnd(0b01010000);
    29fc:	80 e5       	ldi	r24, 0x50	; 80
    29fe:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    2a02:	13 c0       	rjmp	.+38     	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>
		break;
	case 3:
	    LCD_voidSendCmnd(0b01011000);
    2a04:	88 e5       	ldi	r24, 0x58	; 88
    2a06:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>
		break;
	case 4:
	    LCD_voidSendCmnd(0b01100000);
    2a0c:	80 e6       	ldi	r24, 0x60	; 96
    2a0e:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    2a12:	0b c0       	rjmp	.+22     	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>
		break;
	case 5:
	    LCD_voidSendCmnd(0b01101000);
    2a14:	88 e6       	ldi	r24, 0x68	; 104
    2a16:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    2a1a:	07 c0       	rjmp	.+14     	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>
		break;
	case 6:
	    LCD_voidSendCmnd(0b01110000);
    2a1c:	80 e7       	ldi	r24, 0x70	; 112
    2a1e:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
    2a22:	03 c0       	rjmp	.+6      	; 0x2a2a <LCD_voidSendSpecialChar+0xc2>
		break;
	case 7:
	    LCD_voidSendCmnd(0b01111000);
    2a24:	88 e7       	ldi	r24, 0x78	; 120
    2a26:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    2a2a:	19 82       	std	Y+1, r1	; 0x01
    2a2c:	0e c0       	rjmp	.+28     	; 0x2a4a <LCD_voidSendSpecialChar+0xe2>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e2 0f       	add	r30, r18
    2a3c:	f3 1f       	adc	r31, r19
    2a3e:	80 81       	ld	r24, Z
    2a40:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_voidSendChar>
	    LCD_voidSendCmnd(0b01111000);
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	8f 5f       	subi	r24, 0xFF	; 255
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	88 30       	cpi	r24, 0x08	; 8
    2a4e:	78 f3       	brcs	.-34     	; 0x2a2e <LCD_voidSendSpecialChar+0xc6>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
	 }

	 LCD_u8_GoTo_XY( Copy_u8X, Copy_u8Y);
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	6c 81       	ldd	r22, Y+4	; 0x04
    2a54:	0e 94 fe 13 	call	0x27fc	; 0x27fc <LCD_u8_GoTo_XY>
	 LCD_voidSendChar(Copy_u8CharNo);
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_voidSendChar>


}
    2a5e:	28 96       	adiw	r28, 0x08	; 8
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <LCD_voidShiftDispRight>:

void LCD_voidShiftDispRight(void)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011100);
    2a78:	8c e1       	ldi	r24, 0x1C	; 28
    2a7a:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <LCD_voidShiftDispLeft>:
void LCD_voidShiftDispLeft(void)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011000);
    2a8c:	88 e1       	ldi	r24, 0x18	; 24
    2a8e:	0e 94 77 10 	call	0x20ee	; 0x20ee <LCD_voidSendCmnd>
}
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void)
{
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
	/* Set Prescaler Value */
	CLR_BIT(TWI_u8_TWSR_REG,1);
    2aa0:	a1 e2       	ldi	r26, 0x21	; 33
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e1 e2       	ldi	r30, 0x21	; 33
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8d 7f       	andi	r24, 0xFD	; 253
    2aac:	8c 93       	st	X, r24
	CLR_BIT(TWI_u8_TWSR_REG,0);
    2aae:	a1 e2       	ldi	r26, 0x21	; 33
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	e1 e2       	ldi	r30, 0x21	; 33
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8e 7f       	andi	r24, 0xFE	; 254
    2aba:	8c 93       	st	X, r24
	
	/* Set TWBR Value 200KHZ */
	TWI_u8_TWBR_REG = 12;
    2abc:	e0 e2       	ldi	r30, 0x20	; 32
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	8c e0       	ldi	r24, 0x0C	; 12
    2ac2:	80 83       	st	Z, r24
	
	/* Enable ACKnowledgemnet */
	SET_BIT(TWI_u8_TWCR_REG,6);
    2ac4:	a6 e5       	ldi	r26, 0x56	; 86
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e6 e5       	ldi	r30, 0x56	; 86
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	80 64       	ori	r24, 0x40	; 64
    2ad0:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWI_u8_TWCR_REG,2);
    2ad2:	a6 e5       	ldi	r26, 0x56	; 86
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e6 e5       	ldi	r30, 0x56	; 86
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	84 60       	ori	r24, 0x04	; 4
    2ade:	8c 93       	st	X, r24
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <TWI_u8SlaveInit>:

u8   TWI_u8SlaveInit(u8 Copy_u8SlaveAddress)
{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <TWI_u8SlaveInit+0x6>
    2aec:	0f 92       	push	r0
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	89 83       	std	Y+1, r24	; 0x01
	/* Set Slave Adress IN TWAR REG */
	TWI_u8_TWAR_REG = Copy_u8SlaveAddress << 1;
    2af8:	e2 e2       	ldi	r30, 0x22	; 34
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	88 0f       	add	r24, r24
    2b00:	80 83       	st	Z, r24
	
    /* Enable ACKnowledgemnet */
	SET_BIT(TWI_u8_TWCR_REG,6);
    2b02:	a6 e5       	ldi	r26, 0x56	; 86
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e6 e5       	ldi	r30, 0x56	; 86
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	80 64       	ori	r24, 0x40	; 64
    2b0e:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWI_u8_TWCR_REG,2);
    2b10:	a6 e5       	ldi	r26, 0x56	; 86
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e6 e5       	ldi	r30, 0x56	; 86
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	84 60       	ori	r24, 0x04	; 4
    2b1c:	8c 93       	st	X, r24
}
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <TWI_enuSendStartCondition>:

TWI_ErrorState   TWI_enuSendStartCondition(void)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	0f 92       	push	r0
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWI_u8_TWCR_REG,5);
    2b38:	a6 e5       	ldi	r26, 0x56	; 86
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e6 e5       	ldi	r30, 0x56	; 86
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	80 62       	ori	r24, 0x20	; 32
    2b44:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,7);
    2b46:	a6 e5       	ldi	r26, 0x56	; 86
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e6 e5       	ldi	r30, 0x56	; 86
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	80 68       	ori	r24, 0x80	; 128
    2b52:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWI_u8_TWCR_REG,7)));
    2b54:	e6 e5       	ldi	r30, 0x56	; 86
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	88 23       	and	r24, r24
    2b5c:	dc f7       	brge	.-10     	; 0x2b54 <TWI_enuSendStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x08 )
    2b5e:	e1 e2       	ldi	r30, 0x21	; 33
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	88 2f       	mov	r24, r24
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	88 7f       	andi	r24, 0xF8	; 248
    2b6a:	90 70       	andi	r25, 0x00	; 0
    2b6c:	88 30       	cpi	r24, 0x08	; 8
    2b6e:	91 05       	cpc	r25, r1
    2b70:	11 f0       	breq	.+4      	; 0x2b76 <TWI_enuSendStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_SC_ERROR;
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b78:	0f 90       	pop	r0
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <TWI_enuSendRepeatedStartCondition>:

TWI_ErrorState   TWI_enuSendRepeatedStartCondition(void)
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	0f 92       	push	r0
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWI_u8_TWCR_REG,5);
    2b8e:	a6 e5       	ldi	r26, 0x56	; 86
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e6 e5       	ldi	r30, 0x56	; 86
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	80 62       	ori	r24, 0x20	; 32
    2b9a:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,7);
    2b9c:	a6 e5       	ldi	r26, 0x56	; 86
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e6 e5       	ldi	r30, 0x56	; 86
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 68       	ori	r24, 0x80	; 128
    2ba8:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWI_u8_TWCR_REG,7)));
    2baa:	e6 e5       	ldi	r30, 0x56	; 86
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	88 23       	and	r24, r24
    2bb2:	dc f7       	brge	.-10     	; 0x2baa <TWI_enuSendRepeatedStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x10 )
    2bb4:	e1 e2       	ldi	r30, 0x21	; 33
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	88 2f       	mov	r24, r24
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	88 7f       	andi	r24, 0xF8	; 248
    2bc0:	90 70       	andi	r25, 0x00	; 0
    2bc2:	80 31       	cpi	r24, 0x10	; 16
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	11 f0       	breq	.+4      	; 0x2bcc <TWI_enuSendRepeatedStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_RSC_ERROR;
    2bc8:	83 e0       	ldi	r24, 0x03	; 3
    2bca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <TWI_enuSendSlaveWithWrite>:

TWI_ErrorState   TWI_enuSendSlaveWithWrite(u8 Copy_u8SlaveAddress)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <TWI_enuSendSlaveWithWrite+0x6>
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWI_u8_TWDR_REG = Copy_u8SlaveAddress << 1;
    2be6:	e3 e2       	ldi	r30, 0x23	; 35
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	88 0f       	add	r24, r24
    2bee:	80 83       	st	Z, r24
	CLR_BIT(TWI_u8_TWDR_REG,0);
    2bf0:	a3 e2       	ldi	r26, 0x23	; 35
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e3 e2       	ldi	r30, 0x23	; 35
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	8e 7f       	andi	r24, 0xFE	; 254
    2bfc:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWI_u8_TWCR_REG,5);
    2bfe:	a6 e5       	ldi	r26, 0x56	; 86
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e6 e5       	ldi	r30, 0x56	; 86
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	8f 7d       	andi	r24, 0xDF	; 223
    2c0a:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,7);
    2c0c:	a6 e5       	ldi	r26, 0x56	; 86
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e6 e5       	ldi	r30, 0x56	; 86
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	80 68       	ori	r24, 0x80	; 128
    2c18:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWI_u8_TWCR_REG,7)));
    2c1a:	e6 e5       	ldi	r30, 0x56	; 86
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	dc f7       	brge	.-10     	; 0x2c1a <TWI_enuSendSlaveWithWrite+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x18 )
    2c24:	e1 e2       	ldi	r30, 0x21	; 33
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	88 7f       	andi	r24, 0xF8	; 248
    2c30:	90 70       	andi	r25, 0x00	; 0
    2c32:	88 31       	cpi	r24, 0x18	; 24
    2c34:	91 05       	cpc	r25, r1
    2c36:	11 f0       	breq	.+4      	; 0x2c3c <TWI_enuSendSlaveWithWrite+0x66>
	{
		Local_enuErrorState = TWI_SLA_W_ERROR;
    2c38:	84 e0       	ldi	r24, 0x04	; 4
    2c3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <TWI_enuSendSlaveWithRead>:

TWI_ErrorState   TWI_enuSendSlaveWithRead(u8 Copy_u8SlaveAddress)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <TWI_enuSendSlaveWithRead+0x6>
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWI_u8_TWDR_REG = Copy_u8SlaveAddress << 1;
    2c58:	e3 e2       	ldi	r30, 0x23	; 35
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	88 0f       	add	r24, r24
    2c60:	80 83       	st	Z, r24
	SET_BIT(TWI_u8_TWDR_REG,0);
    2c62:	a3 e2       	ldi	r26, 0x23	; 35
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e3 e2       	ldi	r30, 0x23	; 35
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	81 60       	ori	r24, 0x01	; 1
    2c6e:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWI_u8_TWCR_REG,5);
    2c70:	a6 e5       	ldi	r26, 0x56	; 86
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	e6 e5       	ldi	r30, 0x56	; 86
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	8f 7d       	andi	r24, 0xDF	; 223
    2c7c:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,7);
    2c7e:	a6 e5       	ldi	r26, 0x56	; 86
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e6 e5       	ldi	r30, 0x56	; 86
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	80 68       	ori	r24, 0x80	; 128
    2c8a:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWI_u8_TWCR_REG,7)));
    2c8c:	e6 e5       	ldi	r30, 0x56	; 86
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	88 23       	and	r24, r24
    2c94:	dc f7       	brge	.-10     	; 0x2c8c <TWI_enuSendSlaveWithRead+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x40 )
    2c96:	e1 e2       	ldi	r30, 0x21	; 33
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	88 7f       	andi	r24, 0xF8	; 248
    2ca2:	90 70       	andi	r25, 0x00	; 0
    2ca4:	80 34       	cpi	r24, 0x40	; 64
    2ca6:	91 05       	cpc	r25, r1
    2ca8:	11 f0       	breq	.+4      	; 0x2cae <TWI_enuSendSlaveWithRead+0x66>
	{
		Local_enuErrorState = TWI_SLA_R_ERROR;
    2caa:	85 e0       	ldi	r24, 0x05	; 5
    2cac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <TWI_enuSendDataByte>:

TWI_ErrorState   TWI_enuSendDataByte(u8 Copy_u8Data)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <TWI_enuSendDataByte+0x6>
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = Data + Read*/
	TWI_u8_TWDR_REG = Copy_u8Data;
    2cca:	e3 e2       	ldi	r30, 0x23	; 35
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	80 83       	st	Z, r24

	/* Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,7);
    2cd2:	a6 e5       	ldi	r26, 0x56	; 86
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e6 e5       	ldi	r30, 0x56	; 86
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	80 68       	ori	r24, 0x80	; 128
    2cde:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWI_u8_TWCR_REG,7)));
    2ce0:	e6 e5       	ldi	r30, 0x56	; 86
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	88 23       	and	r24, r24
    2ce8:	dc f7       	brge	.-10     	; 0x2ce0 <TWI_enuSendDataByte+0x26>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWI_u8_TWSR_REG & 0xF8) != 0x28 )
    2cea:	e1 e2       	ldi	r30, 0x21	; 33
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	88 2f       	mov	r24, r24
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	88 7f       	andi	r24, 0xF8	; 248
    2cf6:	90 70       	andi	r25, 0x00	; 0
    2cf8:	88 32       	cpi	r24, 0x28	; 40
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	11 f0       	breq	.+4      	; 0x2d02 <TWI_enuSendDataByte+0x48>
	{
		Local_enuErrorState = TWI_DATA_W_ERROR;
    2cfe:	86 e0       	ldi	r24, 0x06	; 6
    2d00:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <TWI_enuReceiveDataByte>:

TWI_ErrorState   TWI_enuReceiveDataByte(u8 * Copy_pu8ReceivedData)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <TWI_enuReceiveDataByte+0x6>
    2d14:	0f 92       	push	r0
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	9b 83       	std	Y+3, r25	; 0x03
    2d1c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	89 83       	std	Y+1, r24	; 0x01

	/* Check pointer */
	if(Copy_pu8ReceivedData != NULL)
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	9b 81       	ldd	r25, Y+3	; 0x03
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	01 f1       	breq	.+64     	; 0x2d6a <TWI_enuReceiveDataByte+0x5c>
	{

		/* Clear Flag */
		SET_BIT(TWI_u8_TWCR_REG,7);
    2d2a:	a6 e5       	ldi	r26, 0x56	; 86
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e6 e5       	ldi	r30, 0x56	; 86
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 68       	ori	r24, 0x80	; 128
    2d36:	8c 93       	st	X, r24

		/* Wait for the Flag */
		while(!(GET_BIT(TWI_u8_TWCR_REG,7)));
    2d38:	e6 e5       	ldi	r30, 0x56	; 86
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 23       	and	r24, r24
    2d40:	dc f7       	brge	.-10     	; 0x2d38 <TWI_enuReceiveDataByte+0x2a>

		/* Check ACKnowledgemnt => Slave Address + W */
		if((TWI_u8_TWSR_REG & 0xF8) != 0x50 )
    2d42:	e1 e2       	ldi	r30, 0x21	; 33
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	88 2f       	mov	r24, r24
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	88 7f       	andi	r24, 0xF8	; 248
    2d4e:	90 70       	andi	r25, 0x00	; 0
    2d50:	80 35       	cpi	r24, 0x50	; 80
    2d52:	91 05       	cpc	r25, r1
    2d54:	19 f0       	breq	.+6      	; 0x2d5c <TWI_enuReceiveDataByte+0x4e>
		{
			Local_enuErrorState = TWI_DATA_R_ERROR;
    2d56:	88 e0       	ldi	r24, 0x08	; 8
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	09 c0       	rjmp	.+18     	; 0x2d6e <TWI_enuReceiveDataByte+0x60>
		}
		else
		{
			/* Read Data */
			*Copy_pu8ReceivedData = TWI_u8_TWDR_REG;
    2d5c:	e3 e2       	ldi	r30, 0x23	; 35
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	ea 81       	ldd	r30, Y+2	; 0x02
    2d64:	fb 81       	ldd	r31, Y+3	; 0x03
    2d66:	80 83       	st	Z, r24
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <TWI_enuReceiveDataByte+0x60>
		}
	}
	else
	{
		Local_enuErrorState = TWI_NULL_POINTER;
    2d6a:	87 e0       	ldi	r24, 0x07	; 7
    2d6c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop Condition */
	SET_BIT(TWI_u8_TWCR_REG,4);
    2d84:	a6 e5       	ldi	r26, 0x56	; 86
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e6 e5       	ldi	r30, 0x56	; 86
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	80 61       	ori	r24, 0x10	; 16
    2d90:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,7);
    2d92:	a6 e5       	ldi	r26, 0x56	; 86
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e6 e5       	ldi	r30, 0x56	; 86
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	80 68       	ori	r24, 0x80	; 128
    2d9e:	8c 93       	st	X, r24
}
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <main>:
/* HAL */
#include "LCD_interface.h"
#include "EERPROM_interface.h"

int main(void)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	0f 92       	push	r0
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Data;

	DIO_u8Init();
    2db0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_u8Init>

	EEPROM_voidInit();
    2db4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <EEPROM_voidInit>

	LCD_voidInit();
    2db8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <LCD_voidInit>

	EEPROM_u8WriteDataByte(5,20);
    2dbc:	85 e0       	ldi	r24, 0x05	; 5
    2dbe:	64 e1       	ldi	r22, 0x14	; 20
    2dc0:	70 e0       	ldi	r23, 0x00	; 0
    2dc2:	0e 94 14 0b 	call	0x1628	; 0x1628 <EEPROM_u8WriteDataByte>

	EEPROM_u8ReadDataByte(&Local_u8Data,20);
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	64 e1       	ldi	r22, 0x14	; 20
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	0e 94 c6 0b 	call	0x178c	; 0x178c <EEPROM_u8ReadDataByte>

	LCD_voidWriteNumber(Local_u8Data);
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a0 e0       	ldi	r26, 0x00	; 0
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 32 14 	call	0x2864	; 0x2864 <LCD_voidWriteNumber>
    2de4:	ff cf       	rjmp	.-2      	; 0x2de4 <main+0x3e>

00002de6 <__udivmodsi4>:
    2de6:	a1 e2       	ldi	r26, 0x21	; 33
    2de8:	1a 2e       	mov	r1, r26
    2dea:	aa 1b       	sub	r26, r26
    2dec:	bb 1b       	sub	r27, r27
    2dee:	fd 01       	movw	r30, r26
    2df0:	0d c0       	rjmp	.+26     	; 0x2e0c <__udivmodsi4_ep>

00002df2 <__udivmodsi4_loop>:
    2df2:	aa 1f       	adc	r26, r26
    2df4:	bb 1f       	adc	r27, r27
    2df6:	ee 1f       	adc	r30, r30
    2df8:	ff 1f       	adc	r31, r31
    2dfa:	a2 17       	cp	r26, r18
    2dfc:	b3 07       	cpc	r27, r19
    2dfe:	e4 07       	cpc	r30, r20
    2e00:	f5 07       	cpc	r31, r21
    2e02:	20 f0       	brcs	.+8      	; 0x2e0c <__udivmodsi4_ep>
    2e04:	a2 1b       	sub	r26, r18
    2e06:	b3 0b       	sbc	r27, r19
    2e08:	e4 0b       	sbc	r30, r20
    2e0a:	f5 0b       	sbc	r31, r21

00002e0c <__udivmodsi4_ep>:
    2e0c:	66 1f       	adc	r22, r22
    2e0e:	77 1f       	adc	r23, r23
    2e10:	88 1f       	adc	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	1a 94       	dec	r1
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <__udivmodsi4_loop>
    2e18:	60 95       	com	r22
    2e1a:	70 95       	com	r23
    2e1c:	80 95       	com	r24
    2e1e:	90 95       	com	r25
    2e20:	9b 01       	movw	r18, r22
    2e22:	ac 01       	movw	r20, r24
    2e24:	bd 01       	movw	r22, r26
    2e26:	cf 01       	movw	r24, r30
    2e28:	08 95       	ret

00002e2a <__prologue_saves__>:
    2e2a:	2f 92       	push	r2
    2e2c:	3f 92       	push	r3
    2e2e:	4f 92       	push	r4
    2e30:	5f 92       	push	r5
    2e32:	6f 92       	push	r6
    2e34:	7f 92       	push	r7
    2e36:	8f 92       	push	r8
    2e38:	9f 92       	push	r9
    2e3a:	af 92       	push	r10
    2e3c:	bf 92       	push	r11
    2e3e:	cf 92       	push	r12
    2e40:	df 92       	push	r13
    2e42:	ef 92       	push	r14
    2e44:	ff 92       	push	r15
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	ca 1b       	sub	r28, r26
    2e54:	db 0b       	sbc	r29, r27
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	09 94       	ijmp

00002e62 <__epilogue_restores__>:
    2e62:	2a 88       	ldd	r2, Y+18	; 0x12
    2e64:	39 88       	ldd	r3, Y+17	; 0x11
    2e66:	48 88       	ldd	r4, Y+16	; 0x10
    2e68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e74:	b9 84       	ldd	r11, Y+9	; 0x09
    2e76:	c8 84       	ldd	r12, Y+8	; 0x08
    2e78:	df 80       	ldd	r13, Y+7	; 0x07
    2e7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e80:	1b 81       	ldd	r17, Y+3	; 0x03
    2e82:	aa 81       	ldd	r26, Y+2	; 0x02
    2e84:	b9 81       	ldd	r27, Y+1	; 0x01
    2e86:	ce 0f       	add	r28, r30
    2e88:	d1 1d       	adc	r29, r1
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	ed 01       	movw	r28, r26
    2e96:	08 95       	ret

00002e98 <_exit>:
    2e98:	f8 94       	cli

00002e9a <__stop_program>:
    2e9a:	ff cf       	rjmp	.-2      	; 0x2e9a <__stop_program>
