
TIMER_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001c  00800060  00800060  00001644  2**0
                  ALLOC
  2 .stab         00001c2c  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e73  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__vector_1>
       8:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__vector_2>
       c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_6>
      1c:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_7>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_10>
      2c:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 37       	cpi	r26, 0x7C	; 124
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <main>
      74:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	0f 92       	push	r0
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
      86:	ea e3       	ldi	r30, 0x3A	; 58
      88:	f0 e0       	ldi	r31, 0x00	; 0
      8a:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
      8c:	e7 e3       	ldi	r30, 0x37	; 55
      8e:	f0 e0       	ldi	r31, 0x00	; 0
      90:	81 e0       	ldi	r24, 0x01	; 1
      92:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
      94:	e4 e3       	ldi	r30, 0x34	; 52
      96:	f0 e0       	ldi	r31, 0x00	; 0
      98:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
      9a:	e1 e3       	ldi	r30, 0x31	; 49
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	10 82       	st	Z, r1
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
      a0:	eb e3       	ldi	r30, 0x3B	; 59
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
      a6:	e8 e3       	ldi	r30, 0x38	; 56
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
      ac:	e5 e3       	ldi	r30, 0x35	; 53
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
      b2:	e2 e3       	ldi	r30, 0x32	; 50
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
      b8:	0f 90       	pop	r0
      ba:	cf 91       	pop	r28
      bc:	df 91       	pop	r29
      be:	08 95       	ret

000000c0 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
      c0:	df 93       	push	r29
      c2:	cf 93       	push	r28
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	2e 97       	sbiw	r28, 0x0e	; 14
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	f8 94       	cli
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	0f be       	out	0x3f, r0	; 63
      d2:	cd bf       	out	0x3d, r28	; 61
      d4:	8a 83       	std	Y+2, r24	; 0x02
      d6:	6b 83       	std	Y+3, r22	; 0x03
      d8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
      de:	8a 81       	ldd	r24, Y+2	; 0x02
      e0:	84 30       	cpi	r24, 0x04	; 4
      e2:	08 f0       	brcs	.+2      	; 0xe6 <DIO_u8SetPinDirection+0x26>
      e4:	0c c1       	rjmp	.+536    	; 0x2fe <DIO_u8SetPinDirection+0x23e>
      e6:	8b 81       	ldd	r24, Y+3	; 0x03
      e8:	88 30       	cpi	r24, 0x08	; 8
      ea:	08 f0       	brcs	.+2      	; 0xee <DIO_u8SetPinDirection+0x2e>
      ec:	08 c1       	rjmp	.+528    	; 0x2fe <DIO_u8SetPinDirection+0x23e>
      ee:	8c 81       	ldd	r24, Y+4	; 0x04
      f0:	88 23       	and	r24, r24
      f2:	21 f0       	breq	.+8      	; 0xfc <DIO_u8SetPinDirection+0x3c>
      f4:	8c 81       	ldd	r24, Y+4	; 0x04
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	09 f0       	breq	.+2      	; 0xfc <DIO_u8SetPinDirection+0x3c>
      fa:	01 c1       	rjmp	.+514    	; 0x2fe <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
      fc:	8a 81       	ldd	r24, Y+2	; 0x02
      fe:	28 2f       	mov	r18, r24
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	3e 87       	std	Y+14, r19	; 0x0e
     104:	2d 87       	std	Y+13, r18	; 0x0d
     106:	8d 85       	ldd	r24, Y+13	; 0x0d
     108:	9e 85       	ldd	r25, Y+14	; 0x0e
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	91 05       	cpc	r25, r1
     10e:	09 f4       	brne	.+2      	; 0x112 <DIO_u8SetPinDirection+0x52>
     110:	4f c0       	rjmp	.+158    	; 0x1b0 <DIO_u8SetPinDirection+0xf0>
     112:	2d 85       	ldd	r18, Y+13	; 0x0d
     114:	3e 85       	ldd	r19, Y+14	; 0x0e
     116:	22 30       	cpi	r18, 0x02	; 2
     118:	31 05       	cpc	r19, r1
     11a:	2c f4       	brge	.+10     	; 0x126 <DIO_u8SetPinDirection+0x66>
     11c:	8d 85       	ldd	r24, Y+13	; 0x0d
     11e:	9e 85       	ldd	r25, Y+14	; 0x0e
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	71 f0       	breq	.+28     	; 0x140 <DIO_u8SetPinDirection+0x80>
     124:	ed c0       	rjmp	.+474    	; 0x300 <DIO_u8SetPinDirection+0x240>
     126:	2d 85       	ldd	r18, Y+13	; 0x0d
     128:	3e 85       	ldd	r19, Y+14	; 0x0e
     12a:	22 30       	cpi	r18, 0x02	; 2
     12c:	31 05       	cpc	r19, r1
     12e:	09 f4       	brne	.+2      	; 0x132 <DIO_u8SetPinDirection+0x72>
     130:	77 c0       	rjmp	.+238    	; 0x220 <DIO_u8SetPinDirection+0x160>
     132:	8d 85       	ldd	r24, Y+13	; 0x0d
     134:	9e 85       	ldd	r25, Y+14	; 0x0e
     136:	83 30       	cpi	r24, 0x03	; 3
     138:	91 05       	cpc	r25, r1
     13a:	09 f4       	brne	.+2      	; 0x13e <DIO_u8SetPinDirection+0x7e>
     13c:	a9 c0       	rjmp	.+338    	; 0x290 <DIO_u8SetPinDirection+0x1d0>
     13e:	e0 c0       	rjmp	.+448    	; 0x300 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     140:	8c 81       	ldd	r24, Y+4	; 0x04
     142:	28 2f       	mov	r18, r24
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	3c 87       	std	Y+12, r19	; 0x0c
     148:	2b 87       	std	Y+11, r18	; 0x0b
     14a:	8b 85       	ldd	r24, Y+11	; 0x0b
     14c:	9c 85       	ldd	r25, Y+12	; 0x0c
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	d1 f0       	breq	.+52     	; 0x186 <DIO_u8SetPinDirection+0xc6>
     152:	2b 85       	ldd	r18, Y+11	; 0x0b
     154:	3c 85       	ldd	r19, Y+12	; 0x0c
     156:	21 30       	cpi	r18, 0x01	; 1
     158:	31 05       	cpc	r19, r1
     15a:	09 f0       	breq	.+2      	; 0x15e <DIO_u8SetPinDirection+0x9e>
     15c:	d1 c0       	rjmp	.+418    	; 0x300 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     15e:	aa e3       	ldi	r26, 0x3A	; 58
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ea e3       	ldi	r30, 0x3A	; 58
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	48 2f       	mov	r20, r24
     16a:	8b 81       	ldd	r24, Y+3	; 0x03
     16c:	28 2f       	mov	r18, r24
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	02 2e       	mov	r0, r18
     176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_u8SetPinDirection+0xbc>
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	0a 94       	dec	r0
     17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_u8SetPinDirection+0xb8>
     180:	84 2b       	or	r24, r20
     182:	8c 93       	st	X, r24
     184:	bd c0       	rjmp	.+378    	; 0x300 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     186:	aa e3       	ldi	r26, 0x3A	; 58
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	ea e3       	ldi	r30, 0x3A	; 58
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	48 2f       	mov	r20, r24
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	28 2f       	mov	r18, r24
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	02 2e       	mov	r0, r18
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_u8SetPinDirection+0xe4>
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	0a 94       	dec	r0
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_u8SetPinDirection+0xe0>
     1a8:	80 95       	com	r24
     1aa:	84 23       	and	r24, r20
     1ac:	8c 93       	st	X, r24
     1ae:	a8 c0       	rjmp	.+336    	; 0x300 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     1b0:	8c 81       	ldd	r24, Y+4	; 0x04
     1b2:	28 2f       	mov	r18, r24
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	3a 87       	std	Y+10, r19	; 0x0a
     1b8:	29 87       	std	Y+9, r18	; 0x09
     1ba:	89 85       	ldd	r24, Y+9	; 0x09
     1bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     1be:	00 97       	sbiw	r24, 0x00	; 0
     1c0:	d1 f0       	breq	.+52     	; 0x1f6 <DIO_u8SetPinDirection+0x136>
     1c2:	29 85       	ldd	r18, Y+9	; 0x09
     1c4:	3a 85       	ldd	r19, Y+10	; 0x0a
     1c6:	21 30       	cpi	r18, 0x01	; 1
     1c8:	31 05       	cpc	r19, r1
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_u8SetPinDirection+0x10e>
     1cc:	99 c0       	rjmp	.+306    	; 0x300 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     1ce:	a7 e3       	ldi	r26, 0x37	; 55
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e7 e3       	ldi	r30, 0x37	; 55
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	48 2f       	mov	r20, r24
     1da:	8b 81       	ldd	r24, Y+3	; 0x03
     1dc:	28 2f       	mov	r18, r24
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	02 2e       	mov	r0, r18
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_u8SetPinDirection+0x12c>
     1e8:	88 0f       	add	r24, r24
     1ea:	99 1f       	adc	r25, r25
     1ec:	0a 94       	dec	r0
     1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_u8SetPinDirection+0x128>
     1f0:	84 2b       	or	r24, r20
     1f2:	8c 93       	st	X, r24
     1f4:	85 c0       	rjmp	.+266    	; 0x300 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     1f6:	a7 e3       	ldi	r26, 0x37	; 55
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e7 e3       	ldi	r30, 0x37	; 55
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	48 2f       	mov	r20, r24
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	28 2f       	mov	r18, r24
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 2e       	mov	r0, r18
     20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_u8SetPinDirection+0x154>
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	0a 94       	dec	r0
     216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_u8SetPinDirection+0x150>
     218:	80 95       	com	r24
     21a:	84 23       	and	r24, r20
     21c:	8c 93       	st	X, r24
     21e:	70 c0       	rjmp	.+224    	; 0x300 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     220:	8c 81       	ldd	r24, Y+4	; 0x04
     222:	28 2f       	mov	r18, r24
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	38 87       	std	Y+8, r19	; 0x08
     228:	2f 83       	std	Y+7, r18	; 0x07
     22a:	8f 81       	ldd	r24, Y+7	; 0x07
     22c:	98 85       	ldd	r25, Y+8	; 0x08
     22e:	00 97       	sbiw	r24, 0x00	; 0
     230:	d1 f0       	breq	.+52     	; 0x266 <DIO_u8SetPinDirection+0x1a6>
     232:	2f 81       	ldd	r18, Y+7	; 0x07
     234:	38 85       	ldd	r19, Y+8	; 0x08
     236:	21 30       	cpi	r18, 0x01	; 1
     238:	31 05       	cpc	r19, r1
     23a:	09 f0       	breq	.+2      	; 0x23e <DIO_u8SetPinDirection+0x17e>
     23c:	61 c0       	rjmp	.+194    	; 0x300 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     23e:	a4 e3       	ldi	r26, 0x34	; 52
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	e4 e3       	ldi	r30, 0x34	; 52
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	48 2f       	mov	r20, r24
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	28 2f       	mov	r18, r24
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 2e       	mov	r0, r18
     256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_u8SetPinDirection+0x19c>
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	0a 94       	dec	r0
     25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_u8SetPinDirection+0x198>
     260:	84 2b       	or	r24, r20
     262:	8c 93       	st	X, r24
     264:	4d c0       	rjmp	.+154    	; 0x300 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     266:	a4 e3       	ldi	r26, 0x34	; 52
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	e4 e3       	ldi	r30, 0x34	; 52
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	48 2f       	mov	r20, r24
     272:	8b 81       	ldd	r24, Y+3	; 0x03
     274:	28 2f       	mov	r18, r24
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	02 2e       	mov	r0, r18
     27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_u8SetPinDirection+0x1c4>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_u8SetPinDirection+0x1c0>
     288:	80 95       	com	r24
     28a:	84 23       	and	r24, r20
     28c:	8c 93       	st	X, r24
     28e:	38 c0       	rjmp	.+112    	; 0x300 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
     290:	8c 81       	ldd	r24, Y+4	; 0x04
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	3e 83       	std	Y+6, r19	; 0x06
     298:	2d 83       	std	Y+5, r18	; 0x05
     29a:	8d 81       	ldd	r24, Y+5	; 0x05
     29c:	9e 81       	ldd	r25, Y+6	; 0x06
     29e:	00 97       	sbiw	r24, 0x00	; 0
     2a0:	c9 f0       	breq	.+50     	; 0x2d4 <DIO_u8SetPinDirection+0x214>
     2a2:	2d 81       	ldd	r18, Y+5	; 0x05
     2a4:	3e 81       	ldd	r19, Y+6	; 0x06
     2a6:	21 30       	cpi	r18, 0x01	; 1
     2a8:	31 05       	cpc	r19, r1
     2aa:	51 f5       	brne	.+84     	; 0x300 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
     2ac:	a1 e3       	ldi	r26, 0x31	; 49
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	e1 e3       	ldi	r30, 0x31	; 49
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	48 2f       	mov	r20, r24
     2b8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ba:	28 2f       	mov	r18, r24
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 2e       	mov	r0, r18
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_u8SetPinDirection+0x20a>
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	0a 94       	dec	r0
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_u8SetPinDirection+0x206>
     2ce:	84 2b       	or	r24, r20
     2d0:	8c 93       	st	X, r24
     2d2:	16 c0       	rjmp	.+44     	; 0x300 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
     2d4:	a1 e3       	ldi	r26, 0x31	; 49
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e1 e3       	ldi	r30, 0x31	; 49
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	48 2f       	mov	r20, r24
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	28 2f       	mov	r18, r24
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 2e       	mov	r0, r18
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8SetPinDirection+0x232>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8SetPinDirection+0x22e>
     2f6:	80 95       	com	r24
     2f8:	84 23       	and	r24, r20
     2fa:	8c 93       	st	X, r24
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     2fe:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     300:	89 81       	ldd	r24, Y+1	; 0x01
}
     302:	2e 96       	adiw	r28, 0x0e	; 14
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	08 95       	ret

00000314 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2e 97       	sbiw	r28, 0x0e	; 14
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	8a 83       	std	Y+2, r24	; 0x02
     32a:	6b 83       	std	Y+3, r22	; 0x03
     32c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	84 30       	cpi	r24, 0x04	; 4
     336:	08 f0       	brcs	.+2      	; 0x33a <DIO_u8SetPinValue+0x26>
     338:	0c c1       	rjmp	.+536    	; 0x552 <DIO_u8SetPinValue+0x23e>
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	88 30       	cpi	r24, 0x08	; 8
     33e:	08 f0       	brcs	.+2      	; 0x342 <DIO_u8SetPinValue+0x2e>
     340:	08 c1       	rjmp	.+528    	; 0x552 <DIO_u8SetPinValue+0x23e>
     342:	8c 81       	ldd	r24, Y+4	; 0x04
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	21 f0       	breq	.+8      	; 0x350 <DIO_u8SetPinValue+0x3c>
     348:	8c 81       	ldd	r24, Y+4	; 0x04
     34a:	88 23       	and	r24, r24
     34c:	09 f0       	breq	.+2      	; 0x350 <DIO_u8SetPinValue+0x3c>
     34e:	01 c1       	rjmp	.+514    	; 0x552 <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
     350:	8a 81       	ldd	r24, Y+2	; 0x02
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	3e 87       	std	Y+14, r19	; 0x0e
     358:	2d 87       	std	Y+13, r18	; 0x0d
     35a:	8d 85       	ldd	r24, Y+13	; 0x0d
     35c:	9e 85       	ldd	r25, Y+14	; 0x0e
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	91 05       	cpc	r25, r1
     362:	09 f4       	brne	.+2      	; 0x366 <DIO_u8SetPinValue+0x52>
     364:	4f c0       	rjmp	.+158    	; 0x404 <DIO_u8SetPinValue+0xf0>
     366:	2d 85       	ldd	r18, Y+13	; 0x0d
     368:	3e 85       	ldd	r19, Y+14	; 0x0e
     36a:	22 30       	cpi	r18, 0x02	; 2
     36c:	31 05       	cpc	r19, r1
     36e:	2c f4       	brge	.+10     	; 0x37a <DIO_u8SetPinValue+0x66>
     370:	8d 85       	ldd	r24, Y+13	; 0x0d
     372:	9e 85       	ldd	r25, Y+14	; 0x0e
     374:	00 97       	sbiw	r24, 0x00	; 0
     376:	71 f0       	breq	.+28     	; 0x394 <DIO_u8SetPinValue+0x80>
     378:	ed c0       	rjmp	.+474    	; 0x554 <DIO_u8SetPinValue+0x240>
     37a:	2d 85       	ldd	r18, Y+13	; 0x0d
     37c:	3e 85       	ldd	r19, Y+14	; 0x0e
     37e:	22 30       	cpi	r18, 0x02	; 2
     380:	31 05       	cpc	r19, r1
     382:	09 f4       	brne	.+2      	; 0x386 <DIO_u8SetPinValue+0x72>
     384:	77 c0       	rjmp	.+238    	; 0x474 <DIO_u8SetPinValue+0x160>
     386:	8d 85       	ldd	r24, Y+13	; 0x0d
     388:	9e 85       	ldd	r25, Y+14	; 0x0e
     38a:	83 30       	cpi	r24, 0x03	; 3
     38c:	91 05       	cpc	r25, r1
     38e:	09 f4       	brne	.+2      	; 0x392 <DIO_u8SetPinValue+0x7e>
     390:	a9 c0       	rjmp	.+338    	; 0x4e4 <DIO_u8SetPinValue+0x1d0>
     392:	e0 c0       	rjmp	.+448    	; 0x554 <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
     394:	8c 81       	ldd	r24, Y+4	; 0x04
     396:	28 2f       	mov	r18, r24
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	3c 87       	std	Y+12, r19	; 0x0c
     39c:	2b 87       	std	Y+11, r18	; 0x0b
     39e:	8b 85       	ldd	r24, Y+11	; 0x0b
     3a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	d1 f0       	breq	.+52     	; 0x3da <DIO_u8SetPinValue+0xc6>
     3a6:	2b 85       	ldd	r18, Y+11	; 0x0b
     3a8:	3c 85       	ldd	r19, Y+12	; 0x0c
     3aa:	21 30       	cpi	r18, 0x01	; 1
     3ac:	31 05       	cpc	r19, r1
     3ae:	09 f0       	breq	.+2      	; 0x3b2 <DIO_u8SetPinValue+0x9e>
     3b0:	d1 c0       	rjmp	.+418    	; 0x554 <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
     3b2:	ab e3       	ldi	r26, 0x3B	; 59
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	eb e3       	ldi	r30, 0x3B	; 59
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	48 2f       	mov	r20, r24
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	28 2f       	mov	r18, r24
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	02 2e       	mov	r0, r18
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8SetPinValue+0xbc>
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	0a 94       	dec	r0
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8SetPinValue+0xb8>
     3d4:	84 2b       	or	r24, r20
     3d6:	8c 93       	st	X, r24
     3d8:	bd c0       	rjmp	.+378    	; 0x554 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
     3da:	ab e3       	ldi	r26, 0x3B	; 59
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	eb e3       	ldi	r30, 0x3B	; 59
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	48 2f       	mov	r20, r24
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 2e       	mov	r0, r18
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8SetPinValue+0xe4>
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	0a 94       	dec	r0
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8SetPinValue+0xe0>
     3fc:	80 95       	com	r24
     3fe:	84 23       	and	r24, r20
     400:	8c 93       	st	X, r24
     402:	a8 c0       	rjmp	.+336    	; 0x554 <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	28 2f       	mov	r18, r24
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	3a 87       	std	Y+10, r19	; 0x0a
     40c:	29 87       	std	Y+9, r18	; 0x09
     40e:	89 85       	ldd	r24, Y+9	; 0x09
     410:	9a 85       	ldd	r25, Y+10	; 0x0a
     412:	00 97       	sbiw	r24, 0x00	; 0
     414:	d1 f0       	breq	.+52     	; 0x44a <DIO_u8SetPinValue+0x136>
     416:	29 85       	ldd	r18, Y+9	; 0x09
     418:	3a 85       	ldd	r19, Y+10	; 0x0a
     41a:	21 30       	cpi	r18, 0x01	; 1
     41c:	31 05       	cpc	r19, r1
     41e:	09 f0       	breq	.+2      	; 0x422 <DIO_u8SetPinValue+0x10e>
     420:	99 c0       	rjmp	.+306    	; 0x554 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
     422:	a8 e3       	ldi	r26, 0x38	; 56
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e8 e3       	ldi	r30, 0x38	; 56
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	48 2f       	mov	r20, r24
     42e:	8b 81       	ldd	r24, Y+3	; 0x03
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	02 2e       	mov	r0, r18
     43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8SetPinValue+0x12c>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	0a 94       	dec	r0
     442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_u8SetPinValue+0x128>
     444:	84 2b       	or	r24, r20
     446:	8c 93       	st	X, r24
     448:	85 c0       	rjmp	.+266    	; 0x554 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
     44a:	a8 e3       	ldi	r26, 0x38	; 56
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	e8 e3       	ldi	r30, 0x38	; 56
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	80 81       	ld	r24, Z
     454:	48 2f       	mov	r20, r24
     456:	8b 81       	ldd	r24, Y+3	; 0x03
     458:	28 2f       	mov	r18, r24
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	02 2e       	mov	r0, r18
     462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_u8SetPinValue+0x154>
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_u8SetPinValue+0x150>
     46c:	80 95       	com	r24
     46e:	84 23       	and	r24, r20
     470:	8c 93       	st	X, r24
     472:	70 c0       	rjmp	.+224    	; 0x554 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
     474:	8c 81       	ldd	r24, Y+4	; 0x04
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	38 87       	std	Y+8, r19	; 0x08
     47c:	2f 83       	std	Y+7, r18	; 0x07
     47e:	8f 81       	ldd	r24, Y+7	; 0x07
     480:	98 85       	ldd	r25, Y+8	; 0x08
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	d1 f0       	breq	.+52     	; 0x4ba <DIO_u8SetPinValue+0x1a6>
     486:	2f 81       	ldd	r18, Y+7	; 0x07
     488:	38 85       	ldd	r19, Y+8	; 0x08
     48a:	21 30       	cpi	r18, 0x01	; 1
     48c:	31 05       	cpc	r19, r1
     48e:	09 f0       	breq	.+2      	; 0x492 <DIO_u8SetPinValue+0x17e>
     490:	61 c0       	rjmp	.+194    	; 0x554 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
     492:	a5 e3       	ldi	r26, 0x35	; 53
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	e5 e3       	ldi	r30, 0x35	; 53
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	48 2f       	mov	r20, r24
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	28 2f       	mov	r18, r24
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 2e       	mov	r0, r18
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_u8SetPinValue+0x19c>
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	0a 94       	dec	r0
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_u8SetPinValue+0x198>
     4b4:	84 2b       	or	r24, r20
     4b6:	8c 93       	st	X, r24
     4b8:	4d c0       	rjmp	.+154    	; 0x554 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
     4ba:	a5 e3       	ldi	r26, 0x35	; 53
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e5 e3       	ldi	r30, 0x35	; 53
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	48 2f       	mov	r20, r24
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	28 2f       	mov	r18, r24
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 2e       	mov	r0, r18
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8SetPinValue+0x1c4>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	0a 94       	dec	r0
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8SetPinValue+0x1c0>
     4dc:	80 95       	com	r24
     4de:	84 23       	and	r24, r20
     4e0:	8c 93       	st	X, r24
     4e2:	38 c0       	rjmp	.+112    	; 0x554 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
     4e4:	8c 81       	ldd	r24, Y+4	; 0x04
     4e6:	28 2f       	mov	r18, r24
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	3e 83       	std	Y+6, r19	; 0x06
     4ec:	2d 83       	std	Y+5, r18	; 0x05
     4ee:	8d 81       	ldd	r24, Y+5	; 0x05
     4f0:	9e 81       	ldd	r25, Y+6	; 0x06
     4f2:	00 97       	sbiw	r24, 0x00	; 0
     4f4:	c9 f0       	breq	.+50     	; 0x528 <DIO_u8SetPinValue+0x214>
     4f6:	2d 81       	ldd	r18, Y+5	; 0x05
     4f8:	3e 81       	ldd	r19, Y+6	; 0x06
     4fa:	21 30       	cpi	r18, 0x01	; 1
     4fc:	31 05       	cpc	r19, r1
     4fe:	51 f5       	brne	.+84     	; 0x554 <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
     500:	a2 e3       	ldi	r26, 0x32	; 50
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e2 e3       	ldi	r30, 0x32	; 50
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	48 2f       	mov	r20, r24
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	28 2f       	mov	r18, r24
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	02 2e       	mov	r0, r18
     518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_u8SetPinValue+0x20a>
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	0a 94       	dec	r0
     520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_u8SetPinValue+0x206>
     522:	84 2b       	or	r24, r20
     524:	8c 93       	st	X, r24
     526:	16 c0       	rjmp	.+44     	; 0x554 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
     528:	a2 e3       	ldi	r26, 0x32	; 50
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	e2 e3       	ldi	r30, 0x32	; 50
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	48 2f       	mov	r20, r24
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 2e       	mov	r0, r18
     540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_u8SetPinValue+0x232>
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	0a 94       	dec	r0
     548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_u8SetPinValue+0x22e>
     54a:	80 95       	com	r24
     54c:	84 23       	and	r24, r20
     54e:	8c 93       	st	X, r24
     550:	01 c0       	rjmp	.+2      	; 0x554 <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
     552:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
     554:	89 81       	ldd	r24, Y+1	; 0x01
}
     556:	2e 96       	adiw	r28, 0x0e	; 14
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
     568:	df 93       	push	r29
     56a:	cf 93       	push	r28
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	27 97       	sbiw	r28, 0x07	; 7
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	8a 83       	std	Y+2, r24	; 0x02
     57e:	6b 83       	std	Y+3, r22	; 0x03
     580:	5d 83       	std	Y+5, r21	; 0x05
     582:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	08 f0       	brcs	.+2      	; 0x590 <DIO_u8GetPinValue+0x28>
     58e:	ea c0       	rjmp	.+468    	; 0x764 <DIO_u8GetPinValue+0x1fc>
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	88 30       	cpi	r24, 0x08	; 8
     594:	08 f0       	brcs	.+2      	; 0x598 <DIO_u8GetPinValue+0x30>
     596:	e6 c0       	rjmp	.+460    	; 0x764 <DIO_u8GetPinValue+0x1fc>
     598:	8c 81       	ldd	r24, Y+4	; 0x04
     59a:	9d 81       	ldd	r25, Y+5	; 0x05
     59c:	00 97       	sbiw	r24, 0x00	; 0
     59e:	09 f4       	brne	.+2      	; 0x5a2 <DIO_u8GetPinValue+0x3a>
     5a0:	e1 c0       	rjmp	.+450    	; 0x764 <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	28 2f       	mov	r18, r24
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	3f 83       	std	Y+7, r19	; 0x07
     5aa:	2e 83       	std	Y+6, r18	; 0x06
     5ac:	4e 81       	ldd	r20, Y+6	; 0x06
     5ae:	5f 81       	ldd	r21, Y+7	; 0x07
     5b0:	41 30       	cpi	r20, 0x01	; 1
     5b2:	51 05       	cpc	r21, r1
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <DIO_u8GetPinValue+0x50>
     5b6:	48 c0       	rjmp	.+144    	; 0x648 <DIO_u8GetPinValue+0xe0>
     5b8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ba:	9f 81       	ldd	r25, Y+7	; 0x07
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	91 05       	cpc	r25, r1
     5c0:	34 f4       	brge	.+12     	; 0x5ce <DIO_u8GetPinValue+0x66>
     5c2:	2e 81       	ldd	r18, Y+6	; 0x06
     5c4:	3f 81       	ldd	r19, Y+7	; 0x07
     5c6:	21 15       	cp	r18, r1
     5c8:	31 05       	cpc	r19, r1
     5ca:	71 f0       	breq	.+28     	; 0x5e8 <DIO_u8GetPinValue+0x80>
     5cc:	cc c0       	rjmp	.+408    	; 0x766 <DIO_u8GetPinValue+0x1fe>
     5ce:	4e 81       	ldd	r20, Y+6	; 0x06
     5d0:	5f 81       	ldd	r21, Y+7	; 0x07
     5d2:	42 30       	cpi	r20, 0x02	; 2
     5d4:	51 05       	cpc	r21, r1
     5d6:	09 f4       	brne	.+2      	; 0x5da <DIO_u8GetPinValue+0x72>
     5d8:	67 c0       	rjmp	.+206    	; 0x6a8 <DIO_u8GetPinValue+0x140>
     5da:	8e 81       	ldd	r24, Y+6	; 0x06
     5dc:	9f 81       	ldd	r25, Y+7	; 0x07
     5de:	83 30       	cpi	r24, 0x03	; 3
     5e0:	91 05       	cpc	r25, r1
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <DIO_u8GetPinValue+0x7e>
     5e4:	90 c0       	rjmp	.+288    	; 0x706 <DIO_u8GetPinValue+0x19e>
     5e6:	bf c0       	rjmp	.+382    	; 0x766 <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
     5e8:	e9 e3       	ldi	r30, 0x39	; 57
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	28 2f       	mov	r18, r24
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	88 2f       	mov	r24, r24
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a9 01       	movw	r20, r18
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_u8GetPinValue+0x98>
     5fc:	55 95       	asr	r21
     5fe:	47 95       	ror	r20
     600:	8a 95       	dec	r24
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_u8GetPinValue+0x94>
     604:	ca 01       	movw	r24, r20
     606:	81 70       	andi	r24, 0x01	; 1
     608:	90 70       	andi	r25, 0x00	; 0
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	21 f4       	brne	.+8      	; 0x616 <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     60e:	ec 81       	ldd	r30, Y+4	; 0x04
     610:	fd 81       	ldd	r31, Y+5	; 0x05
     612:	10 82       	st	Z, r1
     614:	a8 c0       	rjmp	.+336    	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
     616:	e9 e3       	ldi	r30, 0x39	; 57
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	28 2f       	mov	r18, r24
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	a9 01       	movw	r20, r18
     628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_u8GetPinValue+0xc6>
     62a:	55 95       	asr	r21
     62c:	47 95       	ror	r20
     62e:	8a 95       	dec	r24
     630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_u8GetPinValue+0xc2>
     632:	ca 01       	movw	r24, r20
     634:	81 70       	andi	r24, 0x01	; 1
     636:	90 70       	andi	r25, 0x00	; 0
     638:	88 23       	and	r24, r24
     63a:	09 f4       	brne	.+2      	; 0x63e <DIO_u8GetPinValue+0xd6>
     63c:	94 c0       	rjmp	.+296    	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
     63e:	ec 81       	ldd	r30, Y+4	; 0x04
     640:	fd 81       	ldd	r31, Y+5	; 0x05
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 83       	st	Z, r24
     646:	8f c0       	rjmp	.+286    	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
     648:	e6 e3       	ldi	r30, 0x36	; 54
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	28 2f       	mov	r18, r24
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	88 2f       	mov	r24, r24
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	a9 01       	movw	r20, r18
     65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_u8GetPinValue+0xf8>
     65c:	55 95       	asr	r21
     65e:	47 95       	ror	r20
     660:	8a 95       	dec	r24
     662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_u8GetPinValue+0xf4>
     664:	ca 01       	movw	r24, r20
     666:	81 70       	andi	r24, 0x01	; 1
     668:	90 70       	andi	r25, 0x00	; 0
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	21 f4       	brne	.+8      	; 0x676 <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     66e:	ec 81       	ldd	r30, Y+4	; 0x04
     670:	fd 81       	ldd	r31, Y+5	; 0x05
     672:	10 82       	st	Z, r1
     674:	78 c0       	rjmp	.+240    	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
     676:	e6 e3       	ldi	r30, 0x36	; 54
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	88 2f       	mov	r24, r24
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	a9 01       	movw	r20, r18
     688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_u8GetPinValue+0x126>
     68a:	55 95       	asr	r21
     68c:	47 95       	ror	r20
     68e:	8a 95       	dec	r24
     690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_u8GetPinValue+0x122>
     692:	ca 01       	movw	r24, r20
     694:	81 70       	andi	r24, 0x01	; 1
     696:	90 70       	andi	r25, 0x00	; 0
     698:	88 23       	and	r24, r24
     69a:	09 f4       	brne	.+2      	; 0x69e <DIO_u8GetPinValue+0x136>
     69c:	64 c0       	rjmp	.+200    	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
     69e:	ec 81       	ldd	r30, Y+4	; 0x04
     6a0:	fd 81       	ldd	r31, Y+5	; 0x05
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 83       	st	Z, r24
     6a6:	5f c0       	rjmp	.+190    	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
     6a8:	e3 e3       	ldi	r30, 0x33	; 51
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	28 2f       	mov	r18, r24
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	88 2f       	mov	r24, r24
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	a9 01       	movw	r20, r18
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_u8GetPinValue+0x158>
     6bc:	55 95       	asr	r21
     6be:	47 95       	ror	r20
     6c0:	8a 95       	dec	r24
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_u8GetPinValue+0x154>
     6c4:	ca 01       	movw	r24, r20
     6c6:	81 70       	andi	r24, 0x01	; 1
     6c8:	90 70       	andi	r25, 0x00	; 0
     6ca:	00 97       	sbiw	r24, 0x00	; 0
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     6ce:	ec 81       	ldd	r30, Y+4	; 0x04
     6d0:	fd 81       	ldd	r31, Y+5	; 0x05
     6d2:	10 82       	st	Z, r1
     6d4:	48 c0       	rjmp	.+144    	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
     6d6:	e3 e3       	ldi	r30, 0x33	; 51
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	80 81       	ld	r24, Z
     6dc:	28 2f       	mov	r18, r24
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	88 2f       	mov	r24, r24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	a9 01       	movw	r20, r18
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_u8GetPinValue+0x186>
     6ea:	55 95       	asr	r21
     6ec:	47 95       	ror	r20
     6ee:	8a 95       	dec	r24
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_u8GetPinValue+0x182>
     6f2:	ca 01       	movw	r24, r20
     6f4:	81 70       	andi	r24, 0x01	; 1
     6f6:	90 70       	andi	r25, 0x00	; 0
     6f8:	88 23       	and	r24, r24
     6fa:	a9 f1       	breq	.+106    	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
     6fc:	ec 81       	ldd	r30, Y+4	; 0x04
     6fe:	fd 81       	ldd	r31, Y+5	; 0x05
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
     704:	30 c0       	rjmp	.+96     	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
     706:	e0 e3       	ldi	r30, 0x30	; 48
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	28 2f       	mov	r18, r24
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a9 01       	movw	r20, r18
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_u8GetPinValue+0x1b6>
     71a:	55 95       	asr	r21
     71c:	47 95       	ror	r20
     71e:	8a 95       	dec	r24
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_u8GetPinValue+0x1b2>
     722:	ca 01       	movw	r24, r20
     724:	81 70       	andi	r24, 0x01	; 1
     726:	90 70       	andi	r25, 0x00	; 0
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	21 f4       	brne	.+8      	; 0x734 <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     72c:	ec 81       	ldd	r30, Y+4	; 0x04
     72e:	fd 81       	ldd	r31, Y+5	; 0x05
     730:	10 82       	st	Z, r1
     732:	19 c0       	rjmp	.+50     	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
     734:	e0 e3       	ldi	r30, 0x30	; 48
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	28 2f       	mov	r18, r24
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	8b 81       	ldd	r24, Y+3	; 0x03
     740:	88 2f       	mov	r24, r24
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	a9 01       	movw	r20, r18
     746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_u8GetPinValue+0x1e4>
     748:	55 95       	asr	r21
     74a:	47 95       	ror	r20
     74c:	8a 95       	dec	r24
     74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_u8GetPinValue+0x1e0>
     750:	ca 01       	movw	r24, r20
     752:	81 70       	andi	r24, 0x01	; 1
     754:	90 70       	andi	r25, 0x00	; 0
     756:	88 23       	and	r24, r24
     758:	31 f0       	breq	.+12     	; 0x766 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
     75a:	ec 81       	ldd	r30, Y+4	; 0x04
     75c:	fd 81       	ldd	r31, Y+5	; 0x05
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 83       	st	Z, r24
     762:	01 c0       	rjmp	.+2      	; 0x766 <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     764:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     766:	89 81       	ldd	r24, Y+1	; 0x01
}
     768:	27 96       	adiw	r28, 0x07	; 7
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	cf 91       	pop	r28
     776:	df 91       	pop	r29
     778:	08 95       	ret

0000077a <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	2d 97       	sbiw	r28, 0x0d	; 13
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	8a 83       	std	Y+2, r24	; 0x02
     790:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
     796:	8a 81       	ldd	r24, Y+2	; 0x02
     798:	84 30       	cpi	r24, 0x04	; 4
     79a:	08 f0       	brcs	.+2      	; 0x79e <DIO_u8SetPortDirection+0x24>
     79c:	87 c0       	rjmp	.+270    	; 0x8ac <__stack+0x4d>
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	21 f0       	breq	.+8      	; 0x7ac <DIO_u8SetPortDirection+0x32>
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	88 23       	and	r24, r24
     7a8:	09 f0       	breq	.+2      	; 0x7ac <DIO_u8SetPortDirection+0x32>
     7aa:	80 c0       	rjmp	.+256    	; 0x8ac <__stack+0x4d>
	{
		switch(Copy_u8PortID)
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	28 2f       	mov	r18, r24
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	3d 87       	std	Y+13, r19	; 0x0d
     7b4:	2c 87       	std	Y+12, r18	; 0x0c
     7b6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	91 05       	cpc	r25, r1
     7be:	71 f1       	breq	.+92     	; 0x81c <DIO_u8SetPortDirection+0xa2>
     7c0:	2c 85       	ldd	r18, Y+12	; 0x0c
     7c2:	3d 85       	ldd	r19, Y+13	; 0x0d
     7c4:	22 30       	cpi	r18, 0x02	; 2
     7c6:	31 05       	cpc	r19, r1
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <DIO_u8SetPortDirection+0x5a>
     7ca:	8c 85       	ldd	r24, Y+12	; 0x0c
     7cc:	9d 85       	ldd	r25, Y+13	; 0x0d
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	69 f0       	breq	.+26     	; 0x7ec <DIO_u8SetPortDirection+0x72>
     7d2:	6d c0       	rjmp	.+218    	; 0x8ae <__stack+0x4f>
     7d4:	2c 85       	ldd	r18, Y+12	; 0x0c
     7d6:	3d 85       	ldd	r19, Y+13	; 0x0d
     7d8:	22 30       	cpi	r18, 0x02	; 2
     7da:	31 05       	cpc	r19, r1
     7dc:	b9 f1       	breq	.+110    	; 0x84c <DIO_u8SetPortDirection+0xd2>
     7de:	8c 85       	ldd	r24, Y+12	; 0x0c
     7e0:	9d 85       	ldd	r25, Y+13	; 0x0d
     7e2:	83 30       	cpi	r24, 0x03	; 3
     7e4:	91 05       	cpc	r25, r1
     7e6:	09 f4       	brne	.+2      	; 0x7ea <DIO_u8SetPortDirection+0x70>
     7e8:	49 c0       	rjmp	.+146    	; 0x87c <__stack+0x1d>
     7ea:	61 c0       	rjmp	.+194    	; 0x8ae <__stack+0x4f>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	28 2f       	mov	r18, r24
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	3b 87       	std	Y+11, r19	; 0x0b
     7f4:	2a 87       	std	Y+10, r18	; 0x0a
     7f6:	8a 85       	ldd	r24, Y+10	; 0x0a
     7f8:	9b 85       	ldd	r25, Y+11	; 0x0b
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	31 f0       	breq	.+12     	; 0x80a <DIO_u8SetPortDirection+0x90>
     7fe:	2a 85       	ldd	r18, Y+10	; 0x0a
     800:	3b 85       	ldd	r19, Y+11	; 0x0b
     802:	21 30       	cpi	r18, 0x01	; 1
     804:	31 05       	cpc	r19, r1
     806:	29 f0       	breq	.+10     	; 0x812 <DIO_u8SetPortDirection+0x98>
     808:	52 c0       	rjmp	.+164    	; 0x8ae <__stack+0x4f>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
     80a:	ea e3       	ldi	r30, 0x3A	; 58
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	10 82       	st	Z, r1
     810:	4e c0       	rjmp	.+156    	; 0x8ae <__stack+0x4f>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
     812:	ea e3       	ldi	r30, 0x3A	; 58
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	80 83       	st	Z, r24
     81a:	49 c0       	rjmp	.+146    	; 0x8ae <__stack+0x4f>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	39 87       	std	Y+9, r19	; 0x09
     824:	28 87       	std	Y+8, r18	; 0x08
     826:	88 85       	ldd	r24, Y+8	; 0x08
     828:	99 85       	ldd	r25, Y+9	; 0x09
     82a:	00 97       	sbiw	r24, 0x00	; 0
     82c:	31 f0       	breq	.+12     	; 0x83a <DIO_u8SetPortDirection+0xc0>
     82e:	28 85       	ldd	r18, Y+8	; 0x08
     830:	39 85       	ldd	r19, Y+9	; 0x09
     832:	21 30       	cpi	r18, 0x01	; 1
     834:	31 05       	cpc	r19, r1
     836:	29 f0       	breq	.+10     	; 0x842 <DIO_u8SetPortDirection+0xc8>
     838:	3a c0       	rjmp	.+116    	; 0x8ae <__stack+0x4f>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
     83a:	e7 e3       	ldi	r30, 0x37	; 55
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	10 82       	st	Z, r1
     840:	36 c0       	rjmp	.+108    	; 0x8ae <__stack+0x4f>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
     842:	e7 e3       	ldi	r30, 0x37	; 55
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	80 83       	st	Z, r24
     84a:	31 c0       	rjmp	.+98     	; 0x8ae <__stack+0x4f>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	28 2f       	mov	r18, r24
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	3f 83       	std	Y+7, r19	; 0x07
     854:	2e 83       	std	Y+6, r18	; 0x06
     856:	8e 81       	ldd	r24, Y+6	; 0x06
     858:	9f 81       	ldd	r25, Y+7	; 0x07
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	31 f0       	breq	.+12     	; 0x86a <__stack+0xb>
     85e:	2e 81       	ldd	r18, Y+6	; 0x06
     860:	3f 81       	ldd	r19, Y+7	; 0x07
     862:	21 30       	cpi	r18, 0x01	; 1
     864:	31 05       	cpc	r19, r1
     866:	29 f0       	breq	.+10     	; 0x872 <__stack+0x13>
     868:	22 c0       	rjmp	.+68     	; 0x8ae <__stack+0x4f>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
     86a:	e4 e3       	ldi	r30, 0x34	; 52
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	10 82       	st	Z, r1
     870:	1e c0       	rjmp	.+60     	; 0x8ae <__stack+0x4f>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
     872:	e4 e3       	ldi	r30, 0x34	; 52
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	80 83       	st	Z, r24
     87a:	19 c0       	rjmp	.+50     	; 0x8ae <__stack+0x4f>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	28 2f       	mov	r18, r24
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	3d 83       	std	Y+5, r19	; 0x05
     884:	2c 83       	std	Y+4, r18	; 0x04
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	31 f0       	breq	.+12     	; 0x89a <__stack+0x3b>
     88e:	2c 81       	ldd	r18, Y+4	; 0x04
     890:	3d 81       	ldd	r19, Y+5	; 0x05
     892:	21 30       	cpi	r18, 0x01	; 1
     894:	31 05       	cpc	r19, r1
     896:	29 f0       	breq	.+10     	; 0x8a2 <__stack+0x43>
     898:	0a c0       	rjmp	.+20     	; 0x8ae <__stack+0x4f>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
     89a:	e1 e3       	ldi	r30, 0x31	; 49
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	10 82       	st	Z, r1
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <__stack+0x4f>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
     8a2:	e1 e3       	ldi	r30, 0x31	; 49
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	80 83       	st	Z, r24
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <__stack+0x4f>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     8ac:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
}
     8b0:	2d 96       	adiw	r28, 0x0d	; 13
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	08 95       	ret

000008c2 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
     8c2:	df 93       	push	r29
     8c4:	cf 93       	push	r28
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <DIO_u8SetPortValue+0x6>
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <DIO_u8SetPortValue+0x8>
     8ca:	0f 92       	push	r0
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	8a 83       	std	Y+2, r24	; 0x02
     8d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	28 2f       	mov	r18, r24
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	3d 83       	std	Y+5, r19	; 0x05
     8e0:	2c 83       	std	Y+4, r18	; 0x04
     8e2:	8c 81       	ldd	r24, Y+4	; 0x04
     8e4:	9d 81       	ldd	r25, Y+5	; 0x05
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	91 05       	cpc	r25, r1
     8ea:	d1 f0       	breq	.+52     	; 0x920 <DIO_u8SetPortValue+0x5e>
     8ec:	2c 81       	ldd	r18, Y+4	; 0x04
     8ee:	3d 81       	ldd	r19, Y+5	; 0x05
     8f0:	22 30       	cpi	r18, 0x02	; 2
     8f2:	31 05       	cpc	r19, r1
     8f4:	2c f4       	brge	.+10     	; 0x900 <DIO_u8SetPortValue+0x3e>
     8f6:	8c 81       	ldd	r24, Y+4	; 0x04
     8f8:	9d 81       	ldd	r25, Y+5	; 0x05
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	61 f0       	breq	.+24     	; 0x916 <DIO_u8SetPortValue+0x54>
     8fe:	1f c0       	rjmp	.+62     	; 0x93e <DIO_u8SetPortValue+0x7c>
     900:	2c 81       	ldd	r18, Y+4	; 0x04
     902:	3d 81       	ldd	r19, Y+5	; 0x05
     904:	22 30       	cpi	r18, 0x02	; 2
     906:	31 05       	cpc	r19, r1
     908:	81 f0       	breq	.+32     	; 0x92a <DIO_u8SetPortValue+0x68>
     90a:	8c 81       	ldd	r24, Y+4	; 0x04
     90c:	9d 81       	ldd	r25, Y+5	; 0x05
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	91 05       	cpc	r25, r1
     912:	81 f0       	breq	.+32     	; 0x934 <DIO_u8SetPortValue+0x72>
     914:	14 c0       	rjmp	.+40     	; 0x93e <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
     916:	eb e3       	ldi	r30, 0x3B	; 59
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	80 83       	st	Z, r24
     91e:	10 c0       	rjmp	.+32     	; 0x940 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
     920:	e8 e3       	ldi	r30, 0x38	; 56
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	8b 81       	ldd	r24, Y+3	; 0x03
     926:	80 83       	st	Z, r24
     928:	0b c0       	rjmp	.+22     	; 0x940 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
     92a:	e5 e3       	ldi	r30, 0x35	; 53
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	80 83       	st	Z, r24
     932:	06 c0       	rjmp	.+12     	; 0x940 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
     934:	e2 e3       	ldi	r30, 0x32	; 50
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	80 83       	st	Z, r24
     93c:	01 c0       	rjmp	.+2      	; 0x940 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
     93e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     940:	89 81       	ldd	r24, Y+1	; 0x01
}
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	cf 91       	pop	r28
     94e:	df 91       	pop	r29
     950:	08 95       	ret

00000952 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
     952:	df 93       	push	r29
     954:	cf 93       	push	r28
     956:	00 d0       	rcall	.+0      	; 0x958 <DIO_u8GetPortValue+0x6>
     958:	00 d0       	rcall	.+0      	; 0x95a <DIO_u8GetPortValue+0x8>
     95a:	00 d0       	rcall	.+0      	; 0x95c <DIO_u8GetPortValue+0xa>
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	8a 83       	std	Y+2, r24	; 0x02
     962:	7c 83       	std	Y+4, r23	; 0x04
     964:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	e9 f1       	breq	.+122    	; 0x9ec <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	28 2f       	mov	r18, r24
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	3e 83       	std	Y+6, r19	; 0x06
     97a:	2d 83       	std	Y+5, r18	; 0x05
     97c:	8d 81       	ldd	r24, Y+5	; 0x05
     97e:	9e 81       	ldd	r25, Y+6	; 0x06
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	91 05       	cpc	r25, r1
     984:	e1 f0       	breq	.+56     	; 0x9be <DIO_u8GetPortValue+0x6c>
     986:	2d 81       	ldd	r18, Y+5	; 0x05
     988:	3e 81       	ldd	r19, Y+6	; 0x06
     98a:	22 30       	cpi	r18, 0x02	; 2
     98c:	31 05       	cpc	r19, r1
     98e:	2c f4       	brge	.+10     	; 0x99a <DIO_u8GetPortValue+0x48>
     990:	8d 81       	ldd	r24, Y+5	; 0x05
     992:	9e 81       	ldd	r25, Y+6	; 0x06
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	61 f0       	breq	.+24     	; 0x9b0 <DIO_u8GetPortValue+0x5e>
     998:	27 c0       	rjmp	.+78     	; 0x9e8 <DIO_u8GetPortValue+0x96>
     99a:	2d 81       	ldd	r18, Y+5	; 0x05
     99c:	3e 81       	ldd	r19, Y+6	; 0x06
     99e:	22 30       	cpi	r18, 0x02	; 2
     9a0:	31 05       	cpc	r19, r1
     9a2:	a1 f0       	breq	.+40     	; 0x9cc <DIO_u8GetPortValue+0x7a>
     9a4:	8d 81       	ldd	r24, Y+5	; 0x05
     9a6:	9e 81       	ldd	r25, Y+6	; 0x06
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	91 05       	cpc	r25, r1
     9ac:	b1 f0       	breq	.+44     	; 0x9da <DIO_u8GetPortValue+0x88>
     9ae:	1c c0       	rjmp	.+56     	; 0x9e8 <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
     9b0:	e9 e3       	ldi	r30, 0x39	; 57
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	eb 81       	ldd	r30, Y+3	; 0x03
     9b8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ba:	80 83       	st	Z, r24
     9bc:	18 c0       	rjmp	.+48     	; 0x9ee <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
     9be:	e6 e3       	ldi	r30, 0x36	; 54
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	eb 81       	ldd	r30, Y+3	; 0x03
     9c6:	fc 81       	ldd	r31, Y+4	; 0x04
     9c8:	80 83       	st	Z, r24
     9ca:	11 c0       	rjmp	.+34     	; 0x9ee <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
     9cc:	e3 e3       	ldi	r30, 0x33	; 51
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	eb 81       	ldd	r30, Y+3	; 0x03
     9d4:	fc 81       	ldd	r31, Y+4	; 0x04
     9d6:	80 83       	st	Z, r24
     9d8:	0a c0       	rjmp	.+20     	; 0x9ee <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
     9da:	e0 e3       	ldi	r30, 0x30	; 48
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	eb 81       	ldd	r30, Y+3	; 0x03
     9e2:	fc 81       	ldd	r31, Y+4	; 0x04
     9e4:	80 83       	st	Z, r24
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
     9e8:	19 82       	std	Y+1, r1	; 0x01
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     9ec:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	26 96       	adiw	r28, 0x06	; 6
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	08 95       	ret

00000a02 <EXTI_u8SetCallBack>:

/* Array of Global Pointers to Function */
static void (*EXTI_ApfEXTI[3])(void) = {NULL,NULL,NULL};

u8 EXTI_u8SetCallBack(void(*Copy_pf)(void),u8 Copy_u8CallBackIndex)
{
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	00 d0       	rcall	.+0      	; 0xa08 <EXTI_u8SetCallBack+0x6>
     a08:	00 d0       	rcall	.+0      	; 0xa0a <EXTI_u8SetCallBack+0x8>
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	9b 83       	std	Y+3, r25	; 0x03
     a10:	8a 83       	std	Y+2, r24	; 0x02
     a12:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8CallBackIndex <= EXTI_u8_INT2) && (Copy_pf != NULL ))
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	83 30       	cpi	r24, 0x03	; 3
     a1c:	88 f4       	brcc	.+34     	; 0xa40 <EXTI_u8SetCallBack+0x3e>
     a1e:	8a 81       	ldd	r24, Y+2	; 0x02
     a20:	9b 81       	ldd	r25, Y+3	; 0x03
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	69 f0       	breq	.+26     	; 0xa40 <EXTI_u8SetCallBack+0x3e>
	{
		EXTI_ApfEXTI[Copy_u8CallBackIndex] = Copy_pf;
     a26:	8c 81       	ldd	r24, Y+4	; 0x04
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	fc 01       	movw	r30, r24
     a32:	e0 5a       	subi	r30, 0xA0	; 160
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	9b 81       	ldd	r25, Y+3	; 0x03
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <EXTI_u8SetCallBack+0x40>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     a40:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     a42:	89 81       	ldd	r24, Y+1	; 0x01

}
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	cf 91       	pop	r28
     a4e:	df 91       	pop	r29
     a50:	08 95       	ret

00000a52 <EXTI_u8Enable>:

u8 EXTI_u8Enable (u8 Copy_u8_EXTIIndex , u8 Copy_u8EXTIEdge)
{
     a52:	df 93       	push	r29
     a54:	cf 93       	push	r28
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	2b 97       	sbiw	r28, 0x0b	; 11
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	8a 83       	std	Y+2, r24	; 0x02
     a68:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8_EXTIIndex)
     a6e:	8a 81       	ldd	r24, Y+2	; 0x02
     a70:	28 2f       	mov	r18, r24
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	3b 87       	std	Y+11, r19	; 0x0b
     a76:	2a 87       	std	Y+10, r18	; 0x0a
     a78:	8a 85       	ldd	r24, Y+10	; 0x0a
     a7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	91 05       	cpc	r25, r1
     a80:	09 f4       	brne	.+2      	; 0xa84 <EXTI_u8Enable+0x32>
     a82:	6f c0       	rjmp	.+222    	; 0xb62 <EXTI_u8Enable+0x110>
     a84:	2a 85       	ldd	r18, Y+10	; 0x0a
     a86:	3b 85       	ldd	r19, Y+11	; 0x0b
     a88:	22 30       	cpi	r18, 0x02	; 2
     a8a:	31 05       	cpc	r19, r1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <EXTI_u8Enable+0x3e>
     a8e:	cd c0       	rjmp	.+410    	; 0xc2a <EXTI_u8Enable+0x1d8>
     a90:	8a 85       	ldd	r24, Y+10	; 0x0a
     a92:	9b 85       	ldd	r25, Y+11	; 0x0b
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	09 f0       	breq	.+2      	; 0xa9a <EXTI_u8Enable+0x48>
     a98:	f0 c0       	rjmp	.+480    	; 0xc7a <EXTI_u8Enable+0x228>
	{
	    case EXTI_u8_INT0:
	    	switch(Copy_u8EXTIEdge)
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	28 2f       	mov	r18, r24
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	39 87       	std	Y+9, r19	; 0x09
     aa2:	28 87       	std	Y+8, r18	; 0x08
     aa4:	88 85       	ldd	r24, Y+8	; 0x08
     aa6:	99 85       	ldd	r25, Y+9	; 0x09
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	91 05       	cpc	r25, r1
     aac:	21 f1       	breq	.+72     	; 0xaf6 <EXTI_u8Enable+0xa4>
     aae:	28 85       	ldd	r18, Y+8	; 0x08
     ab0:	39 85       	ldd	r19, Y+9	; 0x09
     ab2:	22 30       	cpi	r18, 0x02	; 2
     ab4:	31 05       	cpc	r19, r1
     ab6:	2c f4       	brge	.+10     	; 0xac2 <EXTI_u8Enable+0x70>
     ab8:	88 85       	ldd	r24, Y+8	; 0x08
     aba:	99 85       	ldd	r25, Y+9	; 0x09
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	61 f0       	breq	.+24     	; 0xad8 <EXTI_u8Enable+0x86>
     ac0:	47 c0       	rjmp	.+142    	; 0xb50 <EXTI_u8Enable+0xfe>
     ac2:	28 85       	ldd	r18, Y+8	; 0x08
     ac4:	39 85       	ldd	r19, Y+9	; 0x09
     ac6:	22 30       	cpi	r18, 0x02	; 2
     ac8:	31 05       	cpc	r19, r1
     aca:	99 f1       	breq	.+102    	; 0xb32 <EXTI_u8Enable+0xe0>
     acc:	88 85       	ldd	r24, Y+8	; 0x08
     ace:	99 85       	ldd	r25, Y+9	; 0x09
     ad0:	83 30       	cpi	r24, 0x03	; 3
     ad2:	91 05       	cpc	r25, r1
     ad4:	f9 f0       	breq	.+62     	; 0xb14 <EXTI_u8Enable+0xc2>
     ad6:	3c c0       	rjmp	.+120    	; 0xb50 <EXTI_u8Enable+0xfe>
	    	{
	    	    case EXTI_u8_FALLING_EDGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,1);
     ad8:	a5 e5       	ldi	r26, 0x55	; 85
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	e5 e5       	ldi	r30, 0x55	; 85
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	82 60       	ori	r24, 0x02	; 2
     ae4:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,0);
     ae6:	a5 e5       	ldi	r26, 0x55	; 85
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e5 e5       	ldi	r30, 0x55	; 85
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	8e 7f       	andi	r24, 0xFE	; 254
     af2:	8c 93       	st	X, r24
     af4:	2e c0       	rjmp	.+92     	; 0xb52 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_RISING_EDGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,1);
     af6:	a5 e5       	ldi	r26, 0x55	; 85
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e5 e5       	ldi	r30, 0x55	; 85
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	82 60       	ori	r24, 0x02	; 2
     b02:	8c 93       	st	X, r24
	    	    	SET_BIT(EXTI_u8_MCUCR,0);
     b04:	a5 e5       	ldi	r26, 0x55	; 85
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	e5 e5       	ldi	r30, 0x55	; 85
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	81 60       	ori	r24, 0x01	; 1
     b10:	8c 93       	st	X, r24
     b12:	1f c0       	rjmp	.+62     	; 0xb52 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_LOW_LEVEL:
	    	    	CLR_BIT(EXTI_u8_MCUCR,1);
     b14:	a5 e5       	ldi	r26, 0x55	; 85
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e5 e5       	ldi	r30, 0x55	; 85
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	8d 7f       	andi	r24, 0xFD	; 253
     b20:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,0);
     b22:	a5 e5       	ldi	r26, 0x55	; 85
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e5 e5       	ldi	r30, 0x55	; 85
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	8e 7f       	andi	r24, 0xFE	; 254
     b2e:	8c 93       	st	X, r24
     b30:	10 c0       	rjmp	.+32     	; 0xb52 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_ANY_LOGICAL_CHANGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,0);
     b32:	a5 e5       	ldi	r26, 0x55	; 85
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e5 e5       	ldi	r30, 0x55	; 85
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	81 60       	ori	r24, 0x01	; 1
     b3e:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,1);
     b40:	a5 e5       	ldi	r26, 0x55	; 85
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	e5 e5       	ldi	r30, 0x55	; 85
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	8d 7f       	andi	r24, 0xFD	; 253
     b4c:	8c 93       	st	X, r24
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <EXTI_u8Enable+0x100>
	    		break;
	    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01
	    	}
	    	/* Enable PIE */
	    	SET_BIT(EXTI_u8_GICR,6);
     b52:	ab e5       	ldi	r26, 0x5B	; 91
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	eb e5       	ldi	r30, 0x5B	; 91
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	80 64       	ori	r24, 0x40	; 64
     b5e:	8c 93       	st	X, r24
     b60:	8d c0       	rjmp	.+282    	; 0xc7c <EXTI_u8Enable+0x22a>
		break;
		    case EXTI_u8_INT1:
		    	switch(Copy_u8EXTIEdge)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	3f 83       	std	Y+7, r19	; 0x07
     b6a:	2e 83       	std	Y+6, r18	; 0x06
     b6c:	8e 81       	ldd	r24, Y+6	; 0x06
     b6e:	9f 81       	ldd	r25, Y+7	; 0x07
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	91 05       	cpc	r25, r1
     b74:	21 f1       	breq	.+72     	; 0xbbe <EXTI_u8Enable+0x16c>
     b76:	2e 81       	ldd	r18, Y+6	; 0x06
     b78:	3f 81       	ldd	r19, Y+7	; 0x07
     b7a:	22 30       	cpi	r18, 0x02	; 2
     b7c:	31 05       	cpc	r19, r1
     b7e:	2c f4       	brge	.+10     	; 0xb8a <EXTI_u8Enable+0x138>
     b80:	8e 81       	ldd	r24, Y+6	; 0x06
     b82:	9f 81       	ldd	r25, Y+7	; 0x07
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	61 f0       	breq	.+24     	; 0xba0 <EXTI_u8Enable+0x14e>
     b88:	47 c0       	rjmp	.+142    	; 0xc18 <EXTI_u8Enable+0x1c6>
     b8a:	2e 81       	ldd	r18, Y+6	; 0x06
     b8c:	3f 81       	ldd	r19, Y+7	; 0x07
     b8e:	22 30       	cpi	r18, 0x02	; 2
     b90:	31 05       	cpc	r19, r1
     b92:	99 f1       	breq	.+102    	; 0xbfa <EXTI_u8Enable+0x1a8>
     b94:	8e 81       	ldd	r24, Y+6	; 0x06
     b96:	9f 81       	ldd	r25, Y+7	; 0x07
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	f9 f0       	breq	.+62     	; 0xbdc <EXTI_u8Enable+0x18a>
     b9e:	3c c0       	rjmp	.+120    	; 0xc18 <EXTI_u8Enable+0x1c6>
		    	{
		    	    case EXTI_u8_FALLING_EDGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,3);
     ba0:	a5 e5       	ldi	r26, 0x55	; 85
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e5 e5       	ldi	r30, 0x55	; 85
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	88 60       	ori	r24, 0x08	; 8
     bac:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,2);
     bae:	a5 e5       	ldi	r26, 0x55	; 85
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e5 e5       	ldi	r30, 0x55	; 85
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8b 7f       	andi	r24, 0xFB	; 251
     bba:	8c 93       	st	X, r24
     bbc:	2e c0       	rjmp	.+92     	; 0xc1a <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_RISING_EDGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,3);
     bbe:	a5 e5       	ldi	r26, 0x55	; 85
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e5       	ldi	r30, 0x55	; 85
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 60       	ori	r24, 0x08	; 8
     bca:	8c 93       	st	X, r24
		    	    	SET_BIT(EXTI_u8_MCUCR,2);
     bcc:	a5 e5       	ldi	r26, 0x55	; 85
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e5       	ldi	r30, 0x55	; 85
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	8c 93       	st	X, r24
     bda:	1f c0       	rjmp	.+62     	; 0xc1a <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_LOW_LEVEL:
		    	    	CLR_BIT(EXTI_u8_MCUCR,2);
     bdc:	a5 e5       	ldi	r26, 0x55	; 85
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e5 e5       	ldi	r30, 0x55	; 85
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8b 7f       	andi	r24, 0xFB	; 251
     be8:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,3);
     bea:	a5 e5       	ldi	r26, 0x55	; 85
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e5 e5       	ldi	r30, 0x55	; 85
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	87 7f       	andi	r24, 0xF7	; 247
     bf6:	8c 93       	st	X, r24
     bf8:	10 c0       	rjmp	.+32     	; 0xc1a <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_ANY_LOGICAL_CHANGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,2);
     bfa:	a5 e5       	ldi	r26, 0x55	; 85
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e5 e5       	ldi	r30, 0x55	; 85
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	84 60       	ori	r24, 0x04	; 4
     c06:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,3);
     c08:	a5 e5       	ldi	r26, 0x55	; 85
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e5 e5       	ldi	r30, 0x55	; 85
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	87 7f       	andi	r24, 0xF7	; 247
     c14:	8c 93       	st	X, r24
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <EXTI_u8Enable+0x1c8>
		    		break;
		    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
     c18:	19 82       	std	Y+1, r1	; 0x01
		    	}
		    	/* Enable PIE */
		    	SET_BIT(EXTI_u8_GICR,7);
     c1a:	ab e5       	ldi	r26, 0x5B	; 91
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	eb e5       	ldi	r30, 0x5B	; 91
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	80 68       	ori	r24, 0x80	; 128
     c26:	8c 93       	st	X, r24
     c28:	29 c0       	rjmp	.+82     	; 0xc7c <EXTI_u8Enable+0x22a>
			break;
			    case EXTI_u8_INT2:
			    	switch(Copy_u8EXTIEdge)
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	3d 83       	std	Y+5, r19	; 0x05
     c32:	2c 83       	std	Y+4, r18	; 0x04
     c34:	8c 81       	ldd	r24, Y+4	; 0x04
     c36:	9d 81       	ldd	r25, Y+5	; 0x05
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	31 f0       	breq	.+12     	; 0xc48 <EXTI_u8Enable+0x1f6>
     c3c:	2c 81       	ldd	r18, Y+4	; 0x04
     c3e:	3d 81       	ldd	r19, Y+5	; 0x05
     c40:	21 30       	cpi	r18, 0x01	; 1
     c42:	31 05       	cpc	r19, r1
     c44:	49 f0       	breq	.+18     	; 0xc58 <EXTI_u8Enable+0x206>
     c46:	10 c0       	rjmp	.+32     	; 0xc68 <EXTI_u8Enable+0x216>
			    	{
			    	    case EXTI_u8_FALLING_EDGE:
                             CLR_BIT(EXTI_u8_MCUCSR,6);
     c48:	a4 e5       	ldi	r26, 0x54	; 84
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e4 e5       	ldi	r30, 0x54	; 84
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8f 7b       	andi	r24, 0xBF	; 191
     c54:	8c 93       	st	X, r24
     c56:	09 c0       	rjmp	.+18     	; 0xc6a <EXTI_u8Enable+0x218>
			    		break;
			    	    case EXTI_u8_RISING_EDGE:
                             SET_BIT(EXTI_u8_MCUCSR,6);
     c58:	a4 e5       	ldi	r26, 0x54	; 84
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e4 e5       	ldi	r30, 0x54	; 84
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 64       	ori	r24, 0x40	; 64
     c64:	8c 93       	st	X, r24
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <EXTI_u8Enable+0x218>
			    		break;
			    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
     c68:	19 82       	std	Y+1, r1	; 0x01
			    	}
			    	/* Enable PIE */
			    	SET_BIT(EXTI_u8_GICR,5);
     c6a:	ab e5       	ldi	r26, 0x5B	; 91
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	eb e5       	ldi	r30, 0x5B	; 91
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 62       	ori	r24, 0x20	; 32
     c76:	8c 93       	st	X, r24
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <EXTI_u8Enable+0x22a>
				break;
			    	default: Local_u8ErrorState = STD_TYPES_NOK;
     c7a:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c7e:	2b 96       	adiw	r28, 0x0b	; 11
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <EXTI_u8Disable>:

u8 EXTI_u8Disable(u8 Copy_u8_EXTIIndex)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <EXTI_u8Disable+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <EXTI_u8Disable+0x8>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTIIndex)
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	3c 83       	std	Y+4, r19	; 0x04
     caa:	2b 83       	std	Y+3, r18	; 0x03
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	89 f0       	breq	.+34     	; 0xcd8 <EXTI_u8Disable+0x48>
     cb6:	2b 81       	ldd	r18, Y+3	; 0x03
     cb8:	3c 81       	ldd	r19, Y+4	; 0x04
     cba:	22 30       	cpi	r18, 0x02	; 2
     cbc:	31 05       	cpc	r19, r1
     cbe:	a1 f0       	breq	.+40     	; 0xce8 <EXTI_u8Disable+0x58>
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	c1 f4       	brne	.+48     	; 0xcf8 <EXTI_u8Disable+0x68>
	{
	case EXTI_u8_INT0: CLR_BIT(EXTI_u8_GICR,6);break;
     cc8:	ab e5       	ldi	r26, 0x5B	; 91
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	eb e5       	ldi	r30, 0x5B	; 91
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 7b       	andi	r24, 0xBF	; 191
     cd4:	8c 93       	st	X, r24
     cd6:	11 c0       	rjmp	.+34     	; 0xcfa <EXTI_u8Disable+0x6a>
	case EXTI_u8_INT1: CLR_BIT(EXTI_u8_GICR,7);break;
     cd8:	ab e5       	ldi	r26, 0x5B	; 91
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	eb e5       	ldi	r30, 0x5B	; 91
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8f 77       	andi	r24, 0x7F	; 127
     ce4:	8c 93       	st	X, r24
     ce6:	09 c0       	rjmp	.+18     	; 0xcfa <EXTI_u8Disable+0x6a>
	case EXTI_u8_INT2: CLR_BIT(EXTI_u8_GICR,5);break;
     ce8:	ab e5       	ldi	r26, 0x5B	; 91
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	eb e5       	ldi	r30, 0x5B	; 91
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	8f 7d       	andi	r24, 0xDF	; 223
     cf4:	8c 93       	st	X, r24
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <EXTI_u8Disable+0x6a>
	default: Local_u8ErrorState = STD_TYPES_NOK;
     cf8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     cfa:	89 81       	ldd	r24, Y+1	; 0x01

}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <__vector_1>:

/* Prototype for ISR function */
/* EXTI0 ISR */
void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
     d34:	80 91 60 00 	lds	r24, 0x0060
     d38:	90 91 61 00 	lds	r25, 0x0061
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	29 f0       	breq	.+10     	; 0xd4a <__vector_1+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT0]();
     d40:	e0 91 60 00 	lds	r30, 0x0060
     d44:	f0 91 61 00 	lds	r31, 0x0061
     d48:	09 95       	icall
	}
}
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <__vector_2>:
/* EXTI1 ISR */
void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
     d9a:	80 91 62 00 	lds	r24, 0x0062
     d9e:	90 91 63 00 	lds	r25, 0x0063
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	29 f0       	breq	.+10     	; 0xdb0 <__vector_2+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT1]();
     da6:	e0 91 62 00 	lds	r30, 0x0062
     daa:	f0 91 63 00 	lds	r31, 0x0063
     dae:	09 95       	icall
	}
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_3>:
/* EXTI2 ISR */
void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
     e00:	80 91 64 00 	lds	r24, 0x0064
     e04:	90 91 65 00 	lds	r25, 0x0065
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	29 f0       	breq	.+10     	; 0xe16 <__vector_3+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT2]();
     e0c:	e0 91 64 00 	lds	r30, 0x0064
     e10:	f0 91 65 00 	lds	r31, 0x0065
     e14:	09 95       	icall
	}
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <GI_voidEnable>:
/* Defination of SREG */
#define GI_u8_SREG              *((volatile u8*)0x5F)


void GI_voidEnable (void)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
     e44:	af e5       	ldi	r26, 0x5F	; 95
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef e5       	ldi	r30, 0x5F	; 95
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	8c 93       	st	X, r24
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <GI_voidDisable>:

void GI_voidDisable(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
     e60:	af e5       	ldi	r26, 0x5F	; 95
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ef e5       	ldi	r30, 0x5F	; 95
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 77       	andi	r24, 0x7F	; 127
     e6c:	8c 93       	st	X, r24
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <TMR_voidTimer0Init>:
static void (*TMR_pfTimer1CTC)(void) = NULL;

volatile static u16 TMR_u16OnPeriod , TMR_u16OffPeriod , TMR1_ISR_CTC_Counter = 0;

void TMR_voidTimer0Init(void)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	   }
      #endif
	}
#elif (TIMER0_MODE == FAST_PWM)
	{
		SET_BIT(TMR_u8_TCCR0_REG,6);
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	8c 93       	st	X, r24
		SET_BIT(TMR_u8_TCCR0_REG,3);
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,5);
	SET_BIT(TMR_u8_TCCR0_REG,4);
}
#elif ((TMR0_COMPARE_OUTPUT_MODE == CLEAR_OC0_ON_COMPARE) || (TMR0_COMPARE_OUTPUT_MODE == NON_INVERTING_PWM))
{
	SET_BIT(TMR_u8_TCCR0_REG,5);
     e98:	a3 e5       	ldi	r26, 0x53	; 83
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e3 e5       	ldi	r30, 0x53	; 83
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 62       	ori	r24, 0x20	; 32
     ea4:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,4);
     ea6:	a3 e5       	ldi	r26, 0x53	; 83
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e3 e5       	ldi	r30, 0x53	; 83
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,1);
		 SET_BIT(TMR_u8_TCCR0_REG,0);
	}
#elif (TMR0_PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR0_REG,2);
     eb4:	a3 e5       	ldi	r26, 0x53	; 83
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e3 e5       	ldi	r30, 0x53	; 83
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR0_REG,1);
     ec2:	a3 e5       	ldi	r26, 0x53	; 83
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,0);
     ed0:	a3 e5       	ldi	r26, 0x53	; 83
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8e 7f       	andi	r24, 0xFE	; 254
     edc:	8c 93       	st	X, r24
//		/* Prescaler => 8 */
//   	CLR_BIT(TMR_u8_TCCR0_REG,2);
//	    SET_BIT(TMR_u8_TCCR0_REG,1);
//	    CLR_BIT(TMR_u8_TCCR0_REG,0);

}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <TMR_u8Timer1GetCounterValue>:

u8   TMR_u8Timer1GetCounterValue(u16 * Copy_pu16CounterValue)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <TMR_u8Timer1GetCounterValue+0x6>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	9b 83       	std	Y+3, r25	; 0x03
     ef2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     ef4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16CounterValue != NULL)
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	9b 81       	ldd	r25, Y+3	; 0x03
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	51 f0       	breq	.+20     	; 0xf12 <TMR_u8Timer1GetCounterValue+0x2e>
	{
		*Copy_pu16CounterValue = TMR_u16_TCNT1_REG;
     efe:	ec e4       	ldi	r30, 0x4C	; 76
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	ea 81       	ldd	r30, Y+2	; 0x02
     f08:	fb 81       	ldd	r31, Y+3	; 0x03
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <TMR_voidTimer1Init>:

void TMR_voidTimer1Init(void)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	   	 CLR_BIT(TMR_u8_TCCR1B_REG,4);
		 CLR_BIT(TMR_u8_TCCR1B_REG,3);
	}
#elif(TIMER1_MODE == CTC_OCR1A)
	{
		 CLR_BIT(TMR_u8_TCCR1A_REG,1);
     f28:	af e4       	ldi	r26, 0x4F	; 79
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ef e4       	ldi	r30, 0x4F	; 79
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1A_REG,0);
     f36:	af e4       	ldi	r26, 0x4F	; 79
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ef e4       	ldi	r30, 0x4F	; 79
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8e 7f       	andi	r24, 0xFE	; 254
     f42:	8c 93       	st	X, r24
	   	 CLR_BIT(TMR_u8_TCCR1B_REG,4);
     f44:	ae e4       	ldi	r26, 0x4E	; 78
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	ee e4       	ldi	r30, 0x4E	; 78
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7e       	andi	r24, 0xEF	; 239
     f50:	8c 93       	st	X, r24
	   	 SET_BIT(TMR_u8_TCCR1B_REG,3);
     f52:	ae e4       	ldi	r26, 0x4E	; 78
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ee e4       	ldi	r30, 0x4E	; 78
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 60       	ori	r24, 0x08	; 8
     f5e:	8c 93       	st	X, r24
         #if (TIMER1_PIE == ENABLE_TIMER1_PIE)
         {
	         SET_BIT(TMR_u8_TIMSK_REG,4);
     f60:	a9 e5       	ldi	r26, 0x59	; 89
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e9 e5       	ldi	r30, 0x59	; 89
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 61       	ori	r24, 0x10	; 16
     f6c:	8c 93       	st	X, r24

	 /* Timer1 Compare Output Mode IF Selection */
	  /*   Channel A     */
#if (TMR1_CHANNELA_COMPARE_OUTPUT_MODE == OC0_DISCONNECTED)
{
	CLR_BIT(TMR_u8_TCCR1A_REG,7);
     f6e:	af e4       	ldi	r26, 0x4F	; 79
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ef e4       	ldi	r30, 0x4F	; 79
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1A_REG,6);
     f7c:	af e4       	ldi	r26, 0x4F	; 79
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ef e4       	ldi	r30, 0x4F	; 79
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8f 7b       	andi	r24, 0xBF	; 191
     f88:	8c 93       	st	X, r24
#endif

      /*   Channel B     */
#if (TMR1_CHANNELB_COMPARE_OUTPUT_MODE == OC0_DISCONNECTED)
{
CLR_BIT(TMR_u8_TCCR1A_REG,5);
     f8a:	af e4       	ldi	r26, 0x4F	; 79
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ef e4       	ldi	r30, 0x4F	; 79
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8f 7d       	andi	r24, 0xDF	; 223
     f96:	8c 93       	st	X, r24
CLR_BIT(TMR_u8_TCCR1A_REG,4);
     f98:	af e4       	ldi	r26, 0x4F	; 79
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ef e4       	ldi	r30, 0x4F	; 79
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8f 7e       	andi	r24, 0xEF	; 239
     fa4:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,1);
		 SET_BIT(TMR_u8_TCCR1B_REG,0);
	}
#elif (TMR1_PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR1B_REG,2);
     fa6:	ae e4       	ldi	r26, 0x4E	; 78
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ee e4       	ldi	r30, 0x4E	; 78
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8b 7f       	andi	r24, 0xFB	; 251
     fb2:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR1B_REG,1);
     fb4:	ae e4       	ldi	r26, 0x4E	; 78
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ee e4       	ldi	r30, 0x4E	; 78
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	82 60       	ori	r24, 0x02	; 2
     fc0:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,0);
     fc2:	ae e4       	ldi	r26, 0x4E	; 78
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ee e4       	ldi	r30, 0x4E	; 78
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8e 7f       	andi	r24, 0xFE	; 254
     fce:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR1B_REG,0);
	}
#endif


}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <TMR_voidTimer1SetCompareMatchValueChannelA>:

void TMR_voidTimer1SetCompareMatchValueChannelA(u16 Copy_u16CompareMatchValue)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <TMR_voidTimer1SetCompareMatchValueChannelA+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	TMR_u16_OCR1A_REG = Copy_u16CompareMatchValue;
     fe4:	ea e4       	ldi	r30, 0x4A	; 74
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <TMR_voidTimer1CTCCounter>:

void TMR_voidTimer1CTCCounter(u16 Copy_u16CTCCounter)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <TMR_voidTimer1CTCCounter+0x6>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
	TMR1_ISR_CTC_Counter = Copy_u16CTCCounter;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	90 93 6d 00 	sts	0x006D, r25
    1010:	80 93 6c 00 	sts	0x006C, r24
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <TMR_voidTimer0SetCompareMatchValue>:

void TMR_voidTimer0SetCompareMatchValue(u8 Copy_u8OCRValue)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	89 83       	std	Y+1, r24	; 0x01
	TMR_u8_OCR0_REG = Copy_u8OCRValue;
    102a:	ec e5       	ldi	r30, 0x5C	; 92
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	80 83       	st	Z, r24
}
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <TMR_u8Timer0OVFSetCallBack>:

u8  TMR_u8Timer0OVFSetCallBack(void(*Copy_pf)(void))
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <TMR_u8Timer0OVFSetCallBack+0x6>
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	9b 83       	std	Y+3, r25	; 0x03
    1048:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	39 f0       	breq	.+14     	; 0x1064 <TMR_u8Timer0OVFSetCallBack+0x2a>
	{
		TMR_pfTimer0OVF = Copy_pf;
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	90 93 67 00 	sts	0x0067, r25
    105e:	80 93 66 00 	sts	0x0066, r24
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <TMR_u8Timer0OVFSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    1064:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <TMR_u8Timer0CTCSetCallBack>:

u8  TMR_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <TMR_u8Timer0CTCSetCallBack+0x6>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	39 f0       	breq	.+14     	; 0x109e <TMR_u8Timer0CTCSetCallBack+0x2a>
	{
		TMR_pfTimer0CTC = Copy_pf;
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	9b 81       	ldd	r25, Y+3	; 0x03
    1094:	90 93 69 00 	sts	0x0069, r25
    1098:	80 93 68 00 	sts	0x0068, r24
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <TMR_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    109e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <TMR_u8Timer1CTCSetCallBack>:

u8  TMR_u8Timer1CTCSetCallBack(void (*Copy_pf)(void))
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <TMR_u8Timer1CTCSetCallBack+0x6>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	9b 83       	std	Y+3, r25	; 0x03
    10bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	39 f0       	breq	.+14     	; 0x10d8 <TMR_u8Timer1CTCSetCallBack+0x2a>
	{
		TMR_pfTimer1CTC = Copy_pf;
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	90 93 6b 00 	sts	0x006B, r25
    10d2:	80 93 6a 00 	sts	0x006A, r24
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <TMR_u8Timer1CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    10d8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <TMR_voidHWICUEnable>:

void TMR_voidHWICUEnable(void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	/* Select Triggering Interrupt source of ICU = Rising Edge */
	SET_BIT(TMR_u8_TCCR1B_REG,6);
    10f0:	ae e4       	ldi	r26, 0x4E	; 78
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ee e4       	ldi	r30, 0x4E	; 78
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	80 64       	ori	r24, 0x40	; 64
    10fc:	8c 93       	st	X, r24

	/* Enable ICU Interrupt */
	SET_BIT(TMR_u8_TIMSK_REG,5);
    10fe:	a9 e5       	ldi	r26, 0x59	; 89
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e9 e5       	ldi	r30, 0x59	; 89
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 62       	ori	r24, 0x20	; 32
    110a:	8c 93       	st	X, r24
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <TMR_voidHWICUDisable>:

void TMR_voidHWICUDisable(void)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
	/* Disable ICU Interrupt */
	SET_BIT(TMR_u8_TIMSK_REG,5);
    111a:	a9 e5       	ldi	r26, 0x59	; 89
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e9 e5       	ldi	r30, 0x59	; 89
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 62       	ori	r24, 0x20	; 32
    1126:	8c 93       	st	X, r24

}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <TMR_u8GetPWMTotalPeriod>:

u8   TMR_u8GetPWMTotalPeriod(u32 * Copy_pu32TotalPeriod)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <TMR_u8GetPWMTotalPeriod+0x6>
    1134:	0f 92       	push	r0
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	9b 83       	std	Y+3, r25	; 0x03
    113c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    113e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu32TotalPeriod != NULL)
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	9b 81       	ldd	r25, Y+3	; 0x03
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	a9 f0       	breq	.+42     	; 0x1172 <TMR_u8GetPWMTotalPeriod+0x44>
	{
		*Copy_pu32TotalPeriod = TMR_u16OnPeriod + TMR_u16OffPeriod;
    1148:	20 91 77 00 	lds	r18, 0x0077
    114c:	30 91 78 00 	lds	r19, 0x0078
    1150:	80 91 79 00 	lds	r24, 0x0079
    1154:	90 91 7a 00 	lds	r25, 0x007A
    1158:	82 0f       	add	r24, r18
    115a:	93 1f       	adc	r25, r19
    115c:	cc 01       	movw	r24, r24
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	ea 81       	ldd	r30, Y+2	; 0x02
    1164:	fb 81       	ldd	r31, Y+3	; 0x03
    1166:	80 83       	st	Z, r24
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	a2 83       	std	Z+2, r26	; 0x02
    116c:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8ErrorState = STD_TYPES_OK;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <TMR_u8GetPWMDutyCycle>:

u8   TMR_u8GetPWMDutyCycle(u8 * Copy_pu8DutyCycle)
{
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <TMR_u8GetPWMDutyCycle+0xe>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9b 83       	std	Y+3, r25	; 0x03
    1196:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1198:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8DutyCycle != NULL)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	9b 81       	ldd	r25, Y+3	; 0x03
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	49 f1       	breq	.+82     	; 0x11f4 <TMR_u8GetPWMDutyCycle+0x74>
	{
		*Copy_pu8DutyCycle =(u8)((TMR_u16OnPeriod * 100UL)/(TMR_u16OnPeriod + TMR_u16OffPeriod));
    11a2:	80 91 77 00 	lds	r24, 0x0077
    11a6:	90 91 78 00 	lds	r25, 0x0078
    11aa:	cc 01       	movw	r24, r24
    11ac:	a0 e0       	ldi	r26, 0x00	; 0
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	24 e6       	ldi	r18, 0x64	; 100
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 a5 0a 	call	0x154a	; 0x154a <__mulsi3>
    11c0:	7b 01       	movw	r14, r22
    11c2:	8c 01       	movw	r16, r24
    11c4:	20 91 77 00 	lds	r18, 0x0077
    11c8:	30 91 78 00 	lds	r19, 0x0078
    11cc:	80 91 79 00 	lds	r24, 0x0079
    11d0:	90 91 7a 00 	lds	r25, 0x007A
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	9c 01       	movw	r18, r24
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	c8 01       	movw	r24, r16
    11e0:	b7 01       	movw	r22, r14
    11e2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__udivmodsi4>
    11e6:	da 01       	movw	r26, r20
    11e8:	c9 01       	movw	r24, r18
    11ea:	ea 81       	ldd	r30, Y+2	; 0x02
    11ec:	fb 81       	ldd	r31, Y+3	; 0x03
    11ee:	80 83       	st	Z, r24

		Local_u8ErrorState = STD_TYPES_OK;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	08 95       	ret

0000120a <TMR_u8GetPWMOnPeriod>:

u8   TMR_u8GetPWMOnPeriod(u16 * Copy_pu16OnPeriod)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <TMR_u8GetPWMOnPeriod+0x6>
    1210:	0f 92       	push	r0
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	9b 83       	std	Y+3, r25	; 0x03
    1218:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    121a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16OnPeriod != NULL)
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	9b 81       	ldd	r25, Y+3	; 0x03
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	51 f0       	breq	.+20     	; 0x1238 <TMR_u8GetPWMOnPeriod+0x2e>
	{
		*Copy_pu16OnPeriod = TMR_u16OnPeriod;
    1224:	80 91 77 00 	lds	r24, 0x0077
    1228:	90 91 78 00 	lds	r25, 0x0078
    122c:	ea 81       	ldd	r30, Y+2	; 0x02
    122e:	fb 81       	ldd	r31, Y+3	; 0x03
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <__vector_11>:

/* Prototype of ISR Timer0 OVF */
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    1270:	80 91 6e 00 	lds	r24, 0x006E
    1274:	90 91 6f 00 	lds	r25, 0x006F
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	90 93 6f 00 	sts	0x006F, r25
    127e:	80 93 6e 00 	sts	0x006E, r24
	if(Local_u16Counter == 3907)
    1282:	80 91 6e 00 	lds	r24, 0x006E
    1286:	90 91 6f 00 	lds	r25, 0x006F
    128a:	2f e0       	ldi	r18, 0x0F	; 15
    128c:	83 34       	cpi	r24, 0x43	; 67
    128e:	92 07       	cpc	r25, r18
    1290:	99 f4       	brne	.+38     	; 0x12b8 <__vector_11+0x72>
	{
		/* Set Preload Value */
		TMR_u8_TCNT0_REG = PRELOAD_VALUE;
    1292:	e2 e5       	ldi	r30, 0x52	; 82
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 ec       	ldi	r24, 0xC0	; 192
    1298:	80 83       	st	Z, r24
		/* Reset Counter */
		Local_u16Counter = 0;
    129a:	10 92 6f 00 	sts	0x006F, r1
    129e:	10 92 6e 00 	sts	0x006E, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0OVF != NULL)
    12a2:	80 91 66 00 	lds	r24, 0x0066
    12a6:	90 91 67 00 	lds	r25, 0x0067
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <__vector_11+0x72>
		{
			TMR_pfTimer0OVF();
    12ae:	e0 91 66 00 	lds	r30, 0x0066
    12b2:	f0 91 67 00 	lds	r31, 0x0067
    12b6:	09 95       	icall
		}
	}
}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_10>:
/* Prototype of ISR Timer0 Compare Match */
void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	2f 93       	push	r18
    12ea:	3f 93       	push	r19
    12ec:	4f 93       	push	r20
    12ee:	5f 93       	push	r21
    12f0:	6f 93       	push	r22
    12f2:	7f 93       	push	r23
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	af 93       	push	r26
    12fa:	bf 93       	push	r27
    12fc:	ef 93       	push	r30
    12fe:	ff 93       	push	r31
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    1308:	80 91 70 00 	lds	r24, 0x0070
    130c:	90 91 71 00 	lds	r25, 0x0071
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	90 93 71 00 	sts	0x0071, r25
    1316:	80 93 70 00 	sts	0x0070, r24
	if(Local_u16Counter == 10000)
    131a:	80 91 70 00 	lds	r24, 0x0070
    131e:	90 91 71 00 	lds	r25, 0x0071
    1322:	27 e2       	ldi	r18, 0x27	; 39
    1324:	80 31       	cpi	r24, 0x10	; 16
    1326:	92 07       	cpc	r25, r18
    1328:	79 f4       	brne	.+30     	; 0x1348 <__vector_10+0x6a>
	{
		/* Reset Counter */
		Local_u16Counter = 0;
    132a:	10 92 71 00 	sts	0x0071, r1
    132e:	10 92 70 00 	sts	0x0070, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0CTC != NULL)
    1332:	80 91 68 00 	lds	r24, 0x0068
    1336:	90 91 69 00 	lds	r25, 0x0069
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	29 f0       	breq	.+10     	; 0x1348 <__vector_10+0x6a>
		{
			TMR_pfTimer0CTC();
    133e:	e0 91 68 00 	lds	r30, 0x0068
    1342:	f0 91 69 00 	lds	r31, 0x0069
    1346:	09 95       	icall
		}
	}
}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_6>:

/* Prototype of ISR Timer1 ICU */
void __vector_6(void)     __attribute__((signal));
void __vector_6(void)
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	8f 93       	push	r24
    137e:	9f 93       	push	r25
    1380:	af 93       	push	r26
    1382:	bf 93       	push	r27
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <__vector_6+0x20>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16TimerValue = TMR_u16_ICR1_REG;
    1392:	e6 e4       	ldi	r30, 0x46	; 70
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8Flag = 0;
	static u16 Local_u16OldValue = 0;
	if(Local_u8Flag == 0) /* Rising Edge */
    139e:	80 91 74 00 	lds	r24, 0x0074
    13a2:	88 23       	and	r24, r24
    13a4:	b9 f4       	brne	.+46     	; 0x13d4 <__vector_6+0x66>
	{
		TMR_u16OffPeriod = Local_u16TimerValue - Local_u16OldValue;
    13a6:	20 91 72 00 	lds	r18, 0x0072
    13aa:	30 91 73 00 	lds	r19, 0x0073
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	82 1b       	sub	r24, r18
    13b4:	93 0b       	sbc	r25, r19
    13b6:	90 93 7a 00 	sts	0x007A, r25
    13ba:	80 93 79 00 	sts	0x0079, r24
		/* Trigger Source into Falling Edge */
		CLR_BIT(TMR_u8_TCCR1B_REG,6);
    13be:	ae e4       	ldi	r26, 0x4E	; 78
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ee e4       	ldi	r30, 0x4E	; 78
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7b       	andi	r24, 0xBF	; 191
    13ca:	8c 93       	st	X, r24
		Local_u8Flag = 1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 74 00 	sts	0x0074, r24
    13d2:	15 c0       	rjmp	.+42     	; 0x13fe <__vector_6+0x90>
	}
	else
	{
		TMR_u16OnPeriod = Local_u16TimerValue - Local_u16OldValue;
    13d4:	20 91 72 00 	lds	r18, 0x0072
    13d8:	30 91 73 00 	lds	r19, 0x0073
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	82 1b       	sub	r24, r18
    13e2:	93 0b       	sbc	r25, r19
    13e4:	90 93 78 00 	sts	0x0078, r25
    13e8:	80 93 77 00 	sts	0x0077, r24
		/* Trigger Source into Rising Edge */
		SET_BIT(TMR_u8_TCCR1B_REG,6);
    13ec:	ae e4       	ldi	r26, 0x4E	; 78
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ee e4       	ldi	r30, 0x4E	; 78
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 64       	ori	r24, 0x40	; 64
    13f8:	8c 93       	st	X, r24
		Local_u8Flag = 0;
    13fa:	10 92 74 00 	sts	0x0074, r1
	}
	Local_u16OldValue = Local_u16TimerValue;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	90 93 73 00 	sts	0x0073, r25
    1406:	80 93 72 00 	sts	0x0072, r24
}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <__vector_7>:

/* Prototype of ISR Timer1 Compare Match A */
void __vector_7(void)       __attribute__((signal));
void __vector_7(void)
{
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	4f 93       	push	r20
    143c:	5f 93       	push	r21
    143e:	6f 93       	push	r22
    1440:	7f 93       	push	r23
    1442:	8f 93       	push	r24
    1444:	9f 93       	push	r25
    1446:	af 93       	push	r26
    1448:	bf 93       	push	r27
    144a:	ef 93       	push	r30
    144c:	ff 93       	push	r31
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    1456:	80 91 75 00 	lds	r24, 0x0075
    145a:	90 91 76 00 	lds	r25, 0x0076
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	90 93 76 00 	sts	0x0076, r25
    1464:	80 93 75 00 	sts	0x0075, r24
	if(TMR1_ISR_CTC_Counter != 0)
    1468:	80 91 6c 00 	lds	r24, 0x006C
    146c:	90 91 6d 00 	lds	r25, 0x006D
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	d9 f0       	breq	.+54     	; 0x14aa <__vector_7+0x7e>
	{
	     if(Local_u16Counter == TMR1_ISR_CTC_Counter)
    1474:	20 91 75 00 	lds	r18, 0x0075
    1478:	30 91 76 00 	lds	r19, 0x0076
    147c:	80 91 6c 00 	lds	r24, 0x006C
    1480:	90 91 6d 00 	lds	r25, 0x006D
    1484:	28 17       	cp	r18, r24
    1486:	39 07       	cpc	r19, r25
    1488:	d9 f4       	brne	.+54     	; 0x14c0 <__vector_7+0x94>
	     {
	     	/* Reset Counter */
	     	Local_u16Counter = 0;
    148a:	10 92 76 00 	sts	0x0076, r1
    148e:	10 92 75 00 	sts	0x0075, r1
	     	/* Call CallBack Function */
	     	if(TMR_pfTimer1CTC != NULL)
    1492:	80 91 6a 00 	lds	r24, 0x006A
    1496:	90 91 6b 00 	lds	r25, 0x006B
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	89 f0       	breq	.+34     	; 0x14c0 <__vector_7+0x94>
	     	{
	     		TMR_pfTimer1CTC();
    149e:	e0 91 6a 00 	lds	r30, 0x006A
    14a2:	f0 91 6b 00 	lds	r31, 0x006B
    14a6:	09 95       	icall
    14a8:	0b c0       	rjmp	.+22     	; 0x14c0 <__vector_7+0x94>
	     }
	}
	else
	{
     	/* Call CallBack Function */
     	if(TMR_pfTimer1CTC != NULL)
    14aa:	80 91 6a 00 	lds	r24, 0x006A
    14ae:	90 91 6b 00 	lds	r25, 0x006B
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	29 f0       	breq	.+10     	; 0x14c0 <__vector_7+0x94>
     	{
     		TMR_pfTimer1CTC();
    14b6:	e0 91 6a 00 	lds	r30, 0x006A
    14ba:	f0 91 6b 00 	lds	r31, 0x006B
    14be:	09 95       	icall
     	}
	}

}
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	ff 91       	pop	r31
    14c6:	ef 91       	pop	r30
    14c8:	bf 91       	pop	r27
    14ca:	af 91       	pop	r26
    14cc:	9f 91       	pop	r25
    14ce:	8f 91       	pop	r24
    14d0:	7f 91       	pop	r23
    14d2:	6f 91       	pop	r22
    14d4:	5f 91       	pop	r21
    14d6:	4f 91       	pop	r20
    14d8:	3f 91       	pop	r19
    14da:	2f 91       	pop	r18
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <main>:
#include "GI_interface.h"

void App_voidTogLed(void);

int main(void)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Init();
    14ee:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8Init>
	GI_voidEnable();
    14f2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GI_voidEnable>
	TMR_voidTimer1SetCompareMatchValueChannelA(10000);
    14f6:	80 e1       	ldi	r24, 0x10	; 16
    14f8:	97 e2       	ldi	r25, 0x27	; 39
    14fa:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <TMR_voidTimer1SetCompareMatchValueChannelA>
	TMR_voidTimer1CTCCounter(100);
    14fe:	84 e6       	ldi	r24, 0x64	; 100
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 fd 07 	call	0xffa	; 0xffa <TMR_voidTimer1CTCCounter>
	TMR_u8Timer1CTCSetCallBack(&App_voidTogLed);
    1506:	8a e8       	ldi	r24, 0x8A	; 138
    1508:	9a e0       	ldi	r25, 0x0A	; 10
    150a:	0e 94 57 08 	call	0x10ae	; 0x10ae <TMR_u8Timer1CTCSetCallBack>
	TMR_voidTimer1Init();
    150e:	0e 94 90 07 	call	0xf20	; 0xf20 <TMR_voidTimer1Init>
    1512:	ff cf       	rjmp	.-2      	; 0x1512 <main+0x2c>

00001514 <App_voidTogLed>:

	return 0;
}

void App_voidTogLed(void)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0)
    151c:	80 91 7b 00 	lds	r24, 0x007B
    1520:	88 23       	and	r24, r24
    1522:	49 f4       	brne	.+18     	; 0x1536 <App_voidTogLed+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_u8SetPinValue>
		Local_u8Flag = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 7b 00 	sts	0x007B, r24
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <App_voidTogLed+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_u8SetPinValue>
		Local_u8Flag = 0;
    1540:	10 92 7b 00 	sts	0x007B, r1
	}
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <__mulsi3>:
    154a:	62 9f       	mul	r22, r18
    154c:	d0 01       	movw	r26, r0
    154e:	73 9f       	mul	r23, r19
    1550:	f0 01       	movw	r30, r0
    1552:	82 9f       	mul	r24, r18
    1554:	e0 0d       	add	r30, r0
    1556:	f1 1d       	adc	r31, r1
    1558:	64 9f       	mul	r22, r20
    155a:	e0 0d       	add	r30, r0
    155c:	f1 1d       	adc	r31, r1
    155e:	92 9f       	mul	r25, r18
    1560:	f0 0d       	add	r31, r0
    1562:	83 9f       	mul	r24, r19
    1564:	f0 0d       	add	r31, r0
    1566:	74 9f       	mul	r23, r20
    1568:	f0 0d       	add	r31, r0
    156a:	65 9f       	mul	r22, r21
    156c:	f0 0d       	add	r31, r0
    156e:	99 27       	eor	r25, r25
    1570:	72 9f       	mul	r23, r18
    1572:	b0 0d       	add	r27, r0
    1574:	e1 1d       	adc	r30, r1
    1576:	f9 1f       	adc	r31, r25
    1578:	63 9f       	mul	r22, r19
    157a:	b0 0d       	add	r27, r0
    157c:	e1 1d       	adc	r30, r1
    157e:	f9 1f       	adc	r31, r25
    1580:	bd 01       	movw	r22, r26
    1582:	cf 01       	movw	r24, r30
    1584:	11 24       	eor	r1, r1
    1586:	08 95       	ret

00001588 <__udivmodsi4>:
    1588:	a1 e2       	ldi	r26, 0x21	; 33
    158a:	1a 2e       	mov	r1, r26
    158c:	aa 1b       	sub	r26, r26
    158e:	bb 1b       	sub	r27, r27
    1590:	fd 01       	movw	r30, r26
    1592:	0d c0       	rjmp	.+26     	; 0x15ae <__udivmodsi4_ep>

00001594 <__udivmodsi4_loop>:
    1594:	aa 1f       	adc	r26, r26
    1596:	bb 1f       	adc	r27, r27
    1598:	ee 1f       	adc	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	a2 17       	cp	r26, r18
    159e:	b3 07       	cpc	r27, r19
    15a0:	e4 07       	cpc	r30, r20
    15a2:	f5 07       	cpc	r31, r21
    15a4:	20 f0       	brcs	.+8      	; 0x15ae <__udivmodsi4_ep>
    15a6:	a2 1b       	sub	r26, r18
    15a8:	b3 0b       	sbc	r27, r19
    15aa:	e4 0b       	sbc	r30, r20
    15ac:	f5 0b       	sbc	r31, r21

000015ae <__udivmodsi4_ep>:
    15ae:	66 1f       	adc	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	1a 94       	dec	r1
    15b8:	69 f7       	brne	.-38     	; 0x1594 <__udivmodsi4_loop>
    15ba:	60 95       	com	r22
    15bc:	70 95       	com	r23
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	9b 01       	movw	r18, r22
    15c4:	ac 01       	movw	r20, r24
    15c6:	bd 01       	movw	r22, r26
    15c8:	cf 01       	movw	r24, r30
    15ca:	08 95       	ret

000015cc <_exit>:
    15cc:	f8 94       	cli

000015ce <__stop_program>:
    15ce:	ff cf       	rjmp	.-2      	; 0x15ce <__stop_program>
