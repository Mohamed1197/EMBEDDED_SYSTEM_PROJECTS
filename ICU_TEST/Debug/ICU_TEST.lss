
ICU_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00003486  0000351a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800082  00800082  0000353c  2**0
                  ALLOC
  3 .stab         00002ee0  00000000  00000000  0000353c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000122b  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007647  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000077a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007936  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000997b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000aa7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ba00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000be42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__vector_1>
       8:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_2>
       c:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__vector_10>
      2c:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 19 	call	0x3302	; 0x3302 <main>
      8a:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e7       	ldi	r22, 0x7A	; 122
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 32 1a 	jmp	0x3464	; 0x3464 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 36 1a 	jmp	0x346c	; 0x346c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	88 e0       	ldi	r24, 0x08	; 8
     cb4:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2e 97       	sbiw	r28, 0x0e	; 14
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	8a 83       	std	Y+2, r24	; 0x02
     cfc:	6b 83       	std	Y+3, r22	; 0x03
     cfe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x26>
     d0a:	0c c1       	rjmp	.+536    	; 0xf24 <DIO_u8SetPinDirection+0x23e>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x2e>
     d12:	08 c1       	rjmp	.+528    	; 0xf24 <DIO_u8SetPinDirection+0x23e>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d20:	01 c1       	rjmp	.+514    	; 0xf24 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3e 87       	std	Y+14, r19	; 0x0e
     d2a:	2d 87       	std	Y+13, r18	; 0x0d
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_u8SetPinDirection+0x52>
     d36:	4f c0       	rjmp	.+158    	; 0xdd6 <DIO_u8SetPinDirection+0xf0>
     d38:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_u8SetPinDirection+0x66>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <DIO_u8SetPinDirection+0x80>
     d4a:	ed c0       	rjmp	.+474    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_u8SetPinDirection+0x72>
     d56:	77 c0       	rjmp	.+238    	; 0xe46 <DIO_u8SetPinDirection+0x160>
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_u8SetPinDirection+0x7e>
     d62:	a9 c0       	rjmp	.+338    	; 0xeb6 <DIO_u8SetPinDirection+0x1d0>
     d64:	e0 c0       	rjmp	.+448    	; 0xf26 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3c 87       	std	Y+12, r19	; 0x0c
     d6e:	2b 87       	std	Y+11, r18	; 0x0b
     d70:	8b 85       	ldd	r24, Y+11	; 0x0b
     d72:	9c 85       	ldd	r25, Y+12	; 0x0c
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	d1 f0       	breq	.+52     	; 0xdac <DIO_u8SetPinDirection+0xc6>
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	21 30       	cpi	r18, 0x01	; 1
     d7e:	31 05       	cpc	r19, r1
     d80:	09 f0       	breq	.+2      	; 0xd84 <DIO_u8SetPinDirection+0x9e>
     d82:	d1 c0       	rjmp	.+418    	; 0xf26 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     d84:	aa e3       	ldi	r26, 0x3A	; 58
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ea e3       	ldi	r30, 0x3A	; 58
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_u8SetPinDirection+0xbc>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_u8SetPinDirection+0xb8>
     da6:	84 2b       	or	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	bd c0       	rjmp	.+378    	; 0xf26 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     dac:	aa e3       	ldi	r26, 0x3A	; 58
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ea e3       	ldi	r30, 0x3A	; 58
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_u8SetPinDirection+0xe4>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_u8SetPinDirection+0xe0>
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	a8 c0       	rjmp	.+336    	; 0xf26 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	3a 87       	std	Y+10, r19	; 0x0a
     dde:	29 87       	std	Y+9, r18	; 0x09
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	d1 f0       	breq	.+52     	; 0xe1c <DIO_u8SetPinDirection+0x136>
     de8:	29 85       	ldd	r18, Y+9	; 0x09
     dea:	3a 85       	ldd	r19, Y+10	; 0x0a
     dec:	21 30       	cpi	r18, 0x01	; 1
     dee:	31 05       	cpc	r19, r1
     df0:	09 f0       	breq	.+2      	; 0xdf4 <DIO_u8SetPinDirection+0x10e>
     df2:	99 c0       	rjmp	.+306    	; 0xf26 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     df4:	a7 e3       	ldi	r26, 0x37	; 55
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_u8SetPinDirection+0x12c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_u8SetPinDirection+0x128>
     e16:	84 2b       	or	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	85 c0       	rjmp	.+266    	; 0xf26 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     e1c:	a7 e3       	ldi	r26, 0x37	; 55
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e3       	ldi	r30, 0x37	; 55
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_u8SetPinDirection+0x154>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_u8SetPinDirection+0x150>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	70 c0       	rjmp	.+224    	; 0xf26 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	38 87       	std	Y+8, r19	; 0x08
     e4e:	2f 83       	std	Y+7, r18	; 0x07
     e50:	8f 81       	ldd	r24, Y+7	; 0x07
     e52:	98 85       	ldd	r25, Y+8	; 0x08
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	d1 f0       	breq	.+52     	; 0xe8c <DIO_u8SetPinDirection+0x1a6>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	21 30       	cpi	r18, 0x01	; 1
     e5e:	31 05       	cpc	r19, r1
     e60:	09 f0       	breq	.+2      	; 0xe64 <DIO_u8SetPinDirection+0x17e>
     e62:	61 c0       	rjmp	.+194    	; 0xf26 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x19c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0x198>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	4d c0       	rjmp	.+154    	; 0xf26 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     e8c:	a4 e3       	ldi	r26, 0x34	; 52
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e4 e3       	ldi	r30, 0x34	; 52
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_u8SetPinDirection+0x1c4>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_u8SetPinDirection+0x1c0>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	38 c0       	rjmp	.+112    	; 0xf26 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3e 83       	std	Y+6, r19	; 0x06
     ebe:	2d 83       	std	Y+5, r18	; 0x05
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	c9 f0       	breq	.+50     	; 0xefa <DIO_u8SetPinDirection+0x214>
     ec8:	2d 81       	ldd	r18, Y+5	; 0x05
     eca:	3e 81       	ldd	r19, Y+6	; 0x06
     ecc:	21 30       	cpi	r18, 0x01	; 1
     ece:	31 05       	cpc	r19, r1
     ed0:	51 f5       	brne	.+84     	; 0xf26 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
     ed2:	a1 e3       	ldi	r26, 0x31	; 49
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e1 e3       	ldi	r30, 0x31	; 49
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_u8SetPinDirection+0x20a>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_u8SetPinDirection+0x206>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
     efa:	a1 e3       	ldi	r26, 0x31	; 49
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e3       	ldi	r30, 0x31	; 49
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_u8SetPinDirection+0x232>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_u8SetPinDirection+0x22e>
     f1c:	80 95       	com	r24
     f1e:	84 23       	and	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     f24:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
}
     f28:	2e 96       	adiw	r28, 0x0e	; 14
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	2e 97       	sbiw	r28, 0x0e	; 14
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	6b 83       	std	Y+3, r22	; 0x03
     f52:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <DIO_u8SetPinValue+0x26>
     f5e:	0c c1       	rjmp	.+536    	; 0x1178 <DIO_u8SetPinValue+0x23e>
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	88 30       	cpi	r24, 0x08	; 8
     f64:	08 f0       	brcs	.+2      	; 0xf68 <DIO_u8SetPinValue+0x2e>
     f66:	08 c1       	rjmp	.+528    	; 0x1178 <DIO_u8SetPinValue+0x23e>
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	21 f0       	breq	.+8      	; 0xf76 <DIO_u8SetPinValue+0x3c>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	88 23       	and	r24, r24
     f72:	09 f0       	breq	.+2      	; 0xf76 <DIO_u8SetPinValue+0x3c>
     f74:	01 c1       	rjmp	.+514    	; 0x1178 <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	3e 87       	std	Y+14, r19	; 0x0e
     f7e:	2d 87       	std	Y+13, r18	; 0x0d
     f80:	8d 85       	ldd	r24, Y+13	; 0x0d
     f82:	9e 85       	ldd	r25, Y+14	; 0x0e
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	09 f4       	brne	.+2      	; 0xf8c <DIO_u8SetPinValue+0x52>
     f8a:	4f c0       	rjmp	.+158    	; 0x102a <DIO_u8SetPinValue+0xf0>
     f8c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f8e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	2c f4       	brge	.+10     	; 0xfa0 <DIO_u8SetPinValue+0x66>
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	71 f0       	breq	.+28     	; 0xfba <DIO_u8SetPinValue+0x80>
     f9e:	ed c0       	rjmp	.+474    	; 0x117a <DIO_u8SetPinValue+0x240>
     fa0:	2d 85       	ldd	r18, Y+13	; 0x0d
     fa2:	3e 85       	ldd	r19, Y+14	; 0x0e
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <DIO_u8SetPinValue+0x72>
     faa:	77 c0       	rjmp	.+238    	; 0x109a <DIO_u8SetPinValue+0x160>
     fac:	8d 85       	ldd	r24, Y+13	; 0x0d
     fae:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb0:	83 30       	cpi	r24, 0x03	; 3
     fb2:	91 05       	cpc	r25, r1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <DIO_u8SetPinValue+0x7e>
     fb6:	a9 c0       	rjmp	.+338    	; 0x110a <DIO_u8SetPinValue+0x1d0>
     fb8:	e0 c0       	rjmp	.+448    	; 0x117a <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	3c 87       	std	Y+12, r19	; 0x0c
     fc2:	2b 87       	std	Y+11, r18	; 0x0b
     fc4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc6:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	d1 f0       	breq	.+52     	; 0x1000 <DIO_u8SetPinValue+0xc6>
     fcc:	2b 85       	ldd	r18, Y+11	; 0x0b
     fce:	3c 85       	ldd	r19, Y+12	; 0x0c
     fd0:	21 30       	cpi	r18, 0x01	; 1
     fd2:	31 05       	cpc	r19, r1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <DIO_u8SetPinValue+0x9e>
     fd6:	d1 c0       	rjmp	.+418    	; 0x117a <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPinValue+0xbc>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_u8SetPinValue+0xb8>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	bd c0       	rjmp	.+378    	; 0x117a <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
    1000:	ab e3       	ldi	r26, 0x3B	; 59
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	eb e3       	ldi	r30, 0x3B	; 59
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_u8SetPinValue+0xe4>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_u8SetPinValue+0xe0>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	a8 c0       	rjmp	.+336    	; 0x117a <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3a 87       	std	Y+10, r19	; 0x0a
    1032:	29 87       	std	Y+9, r18	; 0x09
    1034:	89 85       	ldd	r24, Y+9	; 0x09
    1036:	9a 85       	ldd	r25, Y+10	; 0x0a
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	d1 f0       	breq	.+52     	; 0x1070 <DIO_u8SetPinValue+0x136>
    103c:	29 85       	ldd	r18, Y+9	; 0x09
    103e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1040:	21 30       	cpi	r18, 0x01	; 1
    1042:	31 05       	cpc	r19, r1
    1044:	09 f0       	breq	.+2      	; 0x1048 <DIO_u8SetPinValue+0x10e>
    1046:	99 c0       	rjmp	.+306    	; 0x117a <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    1048:	a8 e3       	ldi	r26, 0x38	; 56
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e8 e3       	ldi	r30, 0x38	; 56
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_u8SetPinValue+0x12c>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_u8SetPinValue+0x128>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	85 c0       	rjmp	.+266    	; 0x117a <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    1070:	a8 e3       	ldi	r26, 0x38	; 56
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e8 e3       	ldi	r30, 0x38	; 56
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_u8SetPinValue+0x154>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_u8SetPinValue+0x150>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	70 c0       	rjmp	.+224    	; 0x117a <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	38 87       	std	Y+8, r19	; 0x08
    10a2:	2f 83       	std	Y+7, r18	; 0x07
    10a4:	8f 81       	ldd	r24, Y+7	; 0x07
    10a6:	98 85       	ldd	r25, Y+8	; 0x08
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	d1 f0       	breq	.+52     	; 0x10e0 <DIO_u8SetPinValue+0x1a6>
    10ac:	2f 81       	ldd	r18, Y+7	; 0x07
    10ae:	38 85       	ldd	r19, Y+8	; 0x08
    10b0:	21 30       	cpi	r18, 0x01	; 1
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <DIO_u8SetPinValue+0x17e>
    10b6:	61 c0       	rjmp	.+194    	; 0x117a <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_u8SetPinValue+0x19c>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_u8SetPinValue+0x198>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	4d c0       	rjmp	.+154    	; 0x117a <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    10e0:	a5 e3       	ldi	r26, 0x35	; 53
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e3       	ldi	r30, 0x35	; 53
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_u8SetPinValue+0x1c4>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_u8SetPinValue+0x1c0>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	38 c0       	rjmp	.+112    	; 0x117a <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	3e 83       	std	Y+6, r19	; 0x06
    1112:	2d 83       	std	Y+5, r18	; 0x05
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	9e 81       	ldd	r25, Y+6	; 0x06
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	c9 f0       	breq	.+50     	; 0x114e <DIO_u8SetPinValue+0x214>
    111c:	2d 81       	ldd	r18, Y+5	; 0x05
    111e:	3e 81       	ldd	r19, Y+6	; 0x06
    1120:	21 30       	cpi	r18, 0x01	; 1
    1122:	31 05       	cpc	r19, r1
    1124:	51 f5       	brne	.+84     	; 0x117a <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    1126:	a2 e3       	ldi	r26, 0x32	; 50
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_u8SetPinValue+0x20a>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_u8SetPinValue+0x206>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	16 c0       	rjmp	.+44     	; 0x117a <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    114e:	a2 e3       	ldi	r26, 0x32	; 50
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e2 e3       	ldi	r30, 0x32	; 50
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_u8SetPinValue+0x232>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_u8SetPinValue+0x22e>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	01 c0       	rjmp	.+2      	; 0x117a <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    1178:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
}
    117c:	2e 96       	adiw	r28, 0x0e	; 14
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	27 97       	sbiw	r28, 0x07	; 7
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8a 83       	std	Y+2, r24	; 0x02
    11a4:	6b 83       	std	Y+3, r22	; 0x03
    11a6:	5d 83       	std	Y+5, r21	; 0x05
    11a8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <DIO_u8GetPinValue+0x28>
    11b4:	ea c0       	rjmp	.+468    	; 0x138a <DIO_u8GetPinValue+0x1fc>
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 30       	cpi	r24, 0x08	; 8
    11ba:	08 f0       	brcs	.+2      	; 0x11be <DIO_u8GetPinValue+0x30>
    11bc:	e6 c0       	rjmp	.+460    	; 0x138a <DIO_u8GetPinValue+0x1fc>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <DIO_u8GetPinValue+0x3a>
    11c6:	e1 c0       	rjmp	.+450    	; 0x138a <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	3f 83       	std	Y+7, r19	; 0x07
    11d0:	2e 83       	std	Y+6, r18	; 0x06
    11d2:	4e 81       	ldd	r20, Y+6	; 0x06
    11d4:	5f 81       	ldd	r21, Y+7	; 0x07
    11d6:	41 30       	cpi	r20, 0x01	; 1
    11d8:	51 05       	cpc	r21, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <DIO_u8GetPinValue+0x50>
    11dc:	48 c0       	rjmp	.+144    	; 0x126e <DIO_u8GetPinValue+0xe0>
    11de:	8e 81       	ldd	r24, Y+6	; 0x06
    11e0:	9f 81       	ldd	r25, Y+7	; 0x07
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	34 f4       	brge	.+12     	; 0x11f4 <DIO_u8GetPinValue+0x66>
    11e8:	2e 81       	ldd	r18, Y+6	; 0x06
    11ea:	3f 81       	ldd	r19, Y+7	; 0x07
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	71 f0       	breq	.+28     	; 0x120e <DIO_u8GetPinValue+0x80>
    11f2:	cc c0       	rjmp	.+408    	; 0x138c <DIO_u8GetPinValue+0x1fe>
    11f4:	4e 81       	ldd	r20, Y+6	; 0x06
    11f6:	5f 81       	ldd	r21, Y+7	; 0x07
    11f8:	42 30       	cpi	r20, 0x02	; 2
    11fa:	51 05       	cpc	r21, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_u8GetPinValue+0x72>
    11fe:	67 c0       	rjmp	.+206    	; 0x12ce <DIO_u8GetPinValue+0x140>
    1200:	8e 81       	ldd	r24, Y+6	; 0x06
    1202:	9f 81       	ldd	r25, Y+7	; 0x07
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <DIO_u8GetPinValue+0x7e>
    120a:	90 c0       	rjmp	.+288    	; 0x132c <DIO_u8GetPinValue+0x19e>
    120c:	bf c0       	rjmp	.+382    	; 0x138c <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    120e:	e9 e3       	ldi	r30, 0x39	; 57
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_u8GetPinValue+0x98>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_u8GetPinValue+0x94>
    122a:	ca 01       	movw	r24, r20
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	90 70       	andi	r25, 0x00	; 0
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	21 f4       	brne	.+8      	; 0x123c <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1234:	ec 81       	ldd	r30, Y+4	; 0x04
    1236:	fd 81       	ldd	r31, Y+5	; 0x05
    1238:	10 82       	st	Z, r1
    123a:	a8 c0       	rjmp	.+336    	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    123c:	e9 e3       	ldi	r30, 0x39	; 57
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_u8GetPinValue+0xc6>
    1250:	55 95       	asr	r21
    1252:	47 95       	ror	r20
    1254:	8a 95       	dec	r24
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_u8GetPinValue+0xc2>
    1258:	ca 01       	movw	r24, r20
    125a:	81 70       	andi	r24, 0x01	; 1
    125c:	90 70       	andi	r25, 0x00	; 0
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <DIO_u8GetPinValue+0xd6>
    1262:	94 c0       	rjmp	.+296    	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1264:	ec 81       	ldd	r30, Y+4	; 0x04
    1266:	fd 81       	ldd	r31, Y+5	; 0x05
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 83       	st	Z, r24
    126c:	8f c0       	rjmp	.+286    	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    126e:	e6 e3       	ldi	r30, 0x36	; 54
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_u8GetPinValue+0xf8>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_u8GetPinValue+0xf4>
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	90 70       	andi	r25, 0x00	; 0
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	21 f4       	brne	.+8      	; 0x129c <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1294:	ec 81       	ldd	r30, Y+4	; 0x04
    1296:	fd 81       	ldd	r31, Y+5	; 0x05
    1298:	10 82       	st	Z, r1
    129a:	78 c0       	rjmp	.+240    	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    129c:	e6 e3       	ldi	r30, 0x36	; 54
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a9 01       	movw	r20, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_u8GetPinValue+0x126>
    12b0:	55 95       	asr	r21
    12b2:	47 95       	ror	r20
    12b4:	8a 95       	dec	r24
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_u8GetPinValue+0x122>
    12b8:	ca 01       	movw	r24, r20
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	90 70       	andi	r25, 0x00	; 0
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <DIO_u8GetPinValue+0x136>
    12c2:	64 c0       	rjmp	.+200    	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    12c4:	ec 81       	ldd	r30, Y+4	; 0x04
    12c6:	fd 81       	ldd	r31, Y+5	; 0x05
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	80 83       	st	Z, r24
    12cc:	5f c0       	rjmp	.+190    	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    12ce:	e3 e3       	ldi	r30, 0x33	; 51
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a9 01       	movw	r20, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_u8GetPinValue+0x158>
    12e2:	55 95       	asr	r21
    12e4:	47 95       	ror	r20
    12e6:	8a 95       	dec	r24
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_u8GetPinValue+0x154>
    12ea:	ca 01       	movw	r24, r20
    12ec:	81 70       	andi	r24, 0x01	; 1
    12ee:	90 70       	andi	r25, 0x00	; 0
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	21 f4       	brne	.+8      	; 0x12fc <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12f4:	ec 81       	ldd	r30, Y+4	; 0x04
    12f6:	fd 81       	ldd	r31, Y+5	; 0x05
    12f8:	10 82       	st	Z, r1
    12fa:	48 c0       	rjmp	.+144    	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    12fc:	e3 e3       	ldi	r30, 0x33	; 51
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_u8GetPinValue+0x186>
    1310:	55 95       	asr	r21
    1312:	47 95       	ror	r20
    1314:	8a 95       	dec	r24
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_u8GetPinValue+0x182>
    1318:	ca 01       	movw	r24, r20
    131a:	81 70       	andi	r24, 0x01	; 1
    131c:	90 70       	andi	r25, 0x00	; 0
    131e:	88 23       	and	r24, r24
    1320:	a9 f1       	breq	.+106    	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1322:	ec 81       	ldd	r30, Y+4	; 0x04
    1324:	fd 81       	ldd	r31, Y+5	; 0x05
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 83       	st	Z, r24
    132a:	30 c0       	rjmp	.+96     	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    132c:	e0 e3       	ldi	r30, 0x30	; 48
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a9 01       	movw	r20, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_u8GetPinValue+0x1b6>
    1340:	55 95       	asr	r21
    1342:	47 95       	ror	r20
    1344:	8a 95       	dec	r24
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_u8GetPinValue+0x1b2>
    1348:	ca 01       	movw	r24, r20
    134a:	81 70       	andi	r24, 0x01	; 1
    134c:	90 70       	andi	r25, 0x00	; 0
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	21 f4       	brne	.+8      	; 0x135a <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1352:	ec 81       	ldd	r30, Y+4	; 0x04
    1354:	fd 81       	ldd	r31, Y+5	; 0x05
    1356:	10 82       	st	Z, r1
    1358:	19 c0       	rjmp	.+50     	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    135a:	e0 e3       	ldi	r30, 0x30	; 48
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a9 01       	movw	r20, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_u8GetPinValue+0x1e4>
    136e:	55 95       	asr	r21
    1370:	47 95       	ror	r20
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_u8GetPinValue+0x1e0>
    1376:	ca 01       	movw	r24, r20
    1378:	81 70       	andi	r24, 0x01	; 1
    137a:	90 70       	andi	r25, 0x00	; 0
    137c:	88 23       	and	r24, r24
    137e:	31 f0       	breq	.+12     	; 0x138c <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1380:	ec 81       	ldd	r30, Y+4	; 0x04
    1382:	fd 81       	ldd	r31, Y+5	; 0x05
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 83       	st	Z, r24
    1388:	01 c0       	rjmp	.+2      	; 0x138c <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    138a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
}
    138e:	27 96       	adiw	r28, 0x07	; 7
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	2d 97       	sbiw	r28, 0x0d	; 13
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <DIO_u8SetPortDirection+0x24>
    13c2:	87 c0       	rjmp	.+270    	; 0x14d2 <DIO_u8SetPortDirection+0x132>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	21 f0       	breq	.+8      	; 0x13d2 <DIO_u8SetPortDirection+0x32>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 23       	and	r24, r24
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <DIO_u8SetPortDirection+0x32>
    13d0:	80 c0       	rjmp	.+256    	; 0x14d2 <DIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3d 87       	std	Y+13, r19	; 0x0d
    13da:	2c 87       	std	Y+12, r18	; 0x0c
    13dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    13de:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 05       	cpc	r25, r1
    13e4:	71 f1       	breq	.+92     	; 0x1442 <DIO_u8SetPortDirection+0xa2>
    13e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    13e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	2c f4       	brge	.+10     	; 0x13fa <DIO_u8SetPortDirection+0x5a>
    13f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	69 f0       	breq	.+26     	; 0x1412 <DIO_u8SetPortDirection+0x72>
    13f8:	6d c0       	rjmp	.+218    	; 0x14d4 <DIO_u8SetPortDirection+0x134>
    13fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    13fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	b9 f1       	breq	.+110    	; 0x1472 <DIO_u8SetPortDirection+0xd2>
    1404:	8c 85       	ldd	r24, Y+12	; 0x0c
    1406:	9d 85       	ldd	r25, Y+13	; 0x0d
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <DIO_u8SetPortDirection+0x70>
    140e:	49 c0       	rjmp	.+146    	; 0x14a2 <DIO_u8SetPortDirection+0x102>
    1410:	61 c0       	rjmp	.+194    	; 0x14d4 <DIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3b 87       	std	Y+11, r19	; 0x0b
    141a:	2a 87       	std	Y+10, r18	; 0x0a
    141c:	8a 85       	ldd	r24, Y+10	; 0x0a
    141e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	31 f0       	breq	.+12     	; 0x1430 <DIO_u8SetPortDirection+0x90>
    1424:	2a 85       	ldd	r18, Y+10	; 0x0a
    1426:	3b 85       	ldd	r19, Y+11	; 0x0b
    1428:	21 30       	cpi	r18, 0x01	; 1
    142a:	31 05       	cpc	r19, r1
    142c:	29 f0       	breq	.+10     	; 0x1438 <DIO_u8SetPortDirection+0x98>
    142e:	52 c0       	rjmp	.+164    	; 0x14d4 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    1430:	ea e3       	ldi	r30, 0x3A	; 58
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	10 82       	st	Z, r1
    1436:	4e c0       	rjmp	.+156    	; 0x14d4 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    1438:	ea e3       	ldi	r30, 0x3A	; 58
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	80 83       	st	Z, r24
    1440:	49 c0       	rjmp	.+146    	; 0x14d4 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	39 87       	std	Y+9, r19	; 0x09
    144a:	28 87       	std	Y+8, r18	; 0x08
    144c:	88 85       	ldd	r24, Y+8	; 0x08
    144e:	99 85       	ldd	r25, Y+9	; 0x09
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	31 f0       	breq	.+12     	; 0x1460 <DIO_u8SetPortDirection+0xc0>
    1454:	28 85       	ldd	r18, Y+8	; 0x08
    1456:	39 85       	ldd	r19, Y+9	; 0x09
    1458:	21 30       	cpi	r18, 0x01	; 1
    145a:	31 05       	cpc	r19, r1
    145c:	29 f0       	breq	.+10     	; 0x1468 <DIO_u8SetPortDirection+0xc8>
    145e:	3a c0       	rjmp	.+116    	; 0x14d4 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    1460:	e7 e3       	ldi	r30, 0x37	; 55
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	10 82       	st	Z, r1
    1466:	36 c0       	rjmp	.+108    	; 0x14d4 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    1468:	e7 e3       	ldi	r30, 0x37	; 55
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	80 83       	st	Z, r24
    1470:	31 c0       	rjmp	.+98     	; 0x14d4 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	3f 83       	std	Y+7, r19	; 0x07
    147a:	2e 83       	std	Y+6, r18	; 0x06
    147c:	8e 81       	ldd	r24, Y+6	; 0x06
    147e:	9f 81       	ldd	r25, Y+7	; 0x07
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	31 f0       	breq	.+12     	; 0x1490 <DIO_u8SetPortDirection+0xf0>
    1484:	2e 81       	ldd	r18, Y+6	; 0x06
    1486:	3f 81       	ldd	r19, Y+7	; 0x07
    1488:	21 30       	cpi	r18, 0x01	; 1
    148a:	31 05       	cpc	r19, r1
    148c:	29 f0       	breq	.+10     	; 0x1498 <DIO_u8SetPortDirection+0xf8>
    148e:	22 c0       	rjmp	.+68     	; 0x14d4 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    1490:	e4 e3       	ldi	r30, 0x34	; 52
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	10 82       	st	Z, r1
    1496:	1e c0       	rjmp	.+60     	; 0x14d4 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    1498:	e4 e3       	ldi	r30, 0x34	; 52
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	80 83       	st	Z, r24
    14a0:	19 c0       	rjmp	.+50     	; 0x14d4 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3d 83       	std	Y+5, r19	; 0x05
    14aa:	2c 83       	std	Y+4, r18	; 0x04
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <DIO_u8SetPortDirection+0x120>
    14b4:	2c 81       	ldd	r18, Y+4	; 0x04
    14b6:	3d 81       	ldd	r19, Y+5	; 0x05
    14b8:	21 30       	cpi	r18, 0x01	; 1
    14ba:	31 05       	cpc	r19, r1
    14bc:	29 f0       	breq	.+10     	; 0x14c8 <DIO_u8SetPortDirection+0x128>
    14be:	0a c0       	rjmp	.+20     	; 0x14d4 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    14c0:	e1 e3       	ldi	r30, 0x31	; 49
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	10 82       	st	Z, r1
    14c6:	06 c0       	rjmp	.+12     	; 0x14d4 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    14c8:	e1 e3       	ldi	r30, 0x31	; 49
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	80 83       	st	Z, r24
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <DIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    14d2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d6:	2d 96       	adiw	r28, 0x0d	; 13
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <DIO_u8SetPortValue+0x6>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_u8SetPortValue+0x8>
    14f0:	0f 92       	push	r0
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	8a 83       	std	Y+2, r24	; 0x02
    14f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3d 83       	std	Y+5, r19	; 0x05
    1506:	2c 83       	std	Y+4, r18	; 0x04
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	d1 f0       	breq	.+52     	; 0x1546 <DIO_u8SetPortValue+0x5e>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <DIO_u8SetPortValue+0x3e>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 f0       	breq	.+24     	; 0x153c <DIO_u8SetPortValue+0x54>
    1524:	1f c0       	rjmp	.+62     	; 0x1564 <DIO_u8SetPortValue+0x7c>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	81 f0       	breq	.+32     	; 0x1550 <DIO_u8SetPortValue+0x68>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	81 f0       	breq	.+32     	; 0x155a <DIO_u8SetPortValue+0x72>
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    153c:	eb e3       	ldi	r30, 0x3B	; 59
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	80 83       	st	Z, r24
    1544:	10 c0       	rjmp	.+32     	; 0x1566 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	80 83       	st	Z, r24
    154e:	0b c0       	rjmp	.+22     	; 0x1566 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    1550:	e5 e3       	ldi	r30, 0x35	; 53
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	80 83       	st	Z, r24
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    155a:	e2 e3       	ldi	r30, 0x32	; 50
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	80 83       	st	Z, r24
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    1564:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <DIO_u8GetPortValue+0x6>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <DIO_u8GetPortValue+0x8>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_u8GetPortValue+0xa>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	8a 83       	std	Y+2, r24	; 0x02
    1588:	7c 83       	std	Y+4, r23	; 0x04
    158a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	e9 f1       	breq	.+122    	; 0x1612 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3e 83       	std	Y+6, r19	; 0x06
    15a0:	2d 83       	std	Y+5, r18	; 0x05
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	e1 f0       	breq	.+56     	; 0x15e4 <DIO_u8GetPortValue+0x6c>
    15ac:	2d 81       	ldd	r18, Y+5	; 0x05
    15ae:	3e 81       	ldd	r19, Y+6	; 0x06
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <DIO_u8GetPortValue+0x48>
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	61 f0       	breq	.+24     	; 0x15d6 <DIO_u8GetPortValue+0x5e>
    15be:	27 c0       	rjmp	.+78     	; 0x160e <DIO_u8GetPortValue+0x96>
    15c0:	2d 81       	ldd	r18, Y+5	; 0x05
    15c2:	3e 81       	ldd	r19, Y+6	; 0x06
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	a1 f0       	breq	.+40     	; 0x15f2 <DIO_u8GetPortValue+0x7a>
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	b1 f0       	breq	.+44     	; 0x1600 <DIO_u8GetPortValue+0x88>
    15d4:	1c c0       	rjmp	.+56     	; 0x160e <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    15d6:	e9 e3       	ldi	r30, 0x39	; 57
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	eb 81       	ldd	r30, Y+3	; 0x03
    15de:	fc 81       	ldd	r31, Y+4	; 0x04
    15e0:	80 83       	st	Z, r24
    15e2:	18 c0       	rjmp	.+48     	; 0x1614 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    15e4:	e6 e3       	ldi	r30, 0x36	; 54
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	eb 81       	ldd	r30, Y+3	; 0x03
    15ec:	fc 81       	ldd	r31, Y+4	; 0x04
    15ee:	80 83       	st	Z, r24
    15f0:	11 c0       	rjmp	.+34     	; 0x1614 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    15f2:	e3 e3       	ldi	r30, 0x33	; 51
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	80 83       	st	Z, r24
    15fe:	0a c0       	rjmp	.+20     	; 0x1614 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    1600:	e0 e3       	ldi	r30, 0x30	; 48
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	eb 81       	ldd	r30, Y+3	; 0x03
    1608:	fc 81       	ldd	r31, Y+4	; 0x04
    160a:	80 83       	st	Z, r24
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    160e:	19 82       	std	Y+1, r1	; 0x01
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1612:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	26 96       	adiw	r28, 0x06	; 6
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <EXTI_u8SetCallBack>:

/* Array of Global Pointers to Function */
static void (*EXTI_ApfEXTI[3])(void) = {NULL,NULL,NULL};

u8 EXTI_u8SetCallBack(void(*Copy_pf)(void),u8 Copy_u8CallBackIndex)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <EXTI_u8SetCallBack+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <EXTI_u8SetCallBack+0x8>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	9b 83       	std	Y+3, r25	; 0x03
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8CallBackIndex <= EXTI_u8_INT2) && (Copy_pf != NULL ))
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	88 f4       	brcc	.+34     	; 0x1666 <EXTI_u8SetCallBack+0x3e>
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	9b 81       	ldd	r25, Y+3	; 0x03
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f0       	breq	.+26     	; 0x1666 <EXTI_u8SetCallBack+0x3e>
	{
		EXTI_ApfEXTI[Copy_u8CallBackIndex] = Copy_pf;
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	fc 01       	movw	r30, r24
    1658:	ee 57       	subi	r30, 0x7E	; 126
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	9b 81       	ldd	r25, Y+3	; 0x03
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <EXTI_u8SetCallBack+0x40>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1666:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1668:	89 81       	ldd	r24, Y+1	; 0x01

}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <EXTI_u8Enable>:

u8 EXTI_u8Enable (u8 Copy_u8_EXTIIndex , u8 Copy_u8EXTIEdge)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	2b 97       	sbiw	r28, 0x0b	; 11
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	8a 83       	std	Y+2, r24	; 0x02
    168e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8_EXTIIndex)
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3b 87       	std	Y+11, r19	; 0x0b
    169c:	2a 87       	std	Y+10, r18	; 0x0a
    169e:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <EXTI_u8Enable+0x32>
    16a8:	6f c0       	rjmp	.+222    	; 0x1788 <EXTI_u8Enable+0x110>
    16aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <EXTI_u8Enable+0x3e>
    16b4:	cd c0       	rjmp	.+410    	; 0x1850 <EXTI_u8Enable+0x1d8>
    16b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <EXTI_u8Enable+0x48>
    16be:	f0 c0       	rjmp	.+480    	; 0x18a0 <EXTI_u8Enable+0x228>
	{
	    case EXTI_u8_INT0:
	    	switch(Copy_u8EXTIEdge)
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	39 87       	std	Y+9, r19	; 0x09
    16c8:	28 87       	std	Y+8, r18	; 0x08
    16ca:	88 85       	ldd	r24, Y+8	; 0x08
    16cc:	99 85       	ldd	r25, Y+9	; 0x09
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	21 f1       	breq	.+72     	; 0x171c <EXTI_u8Enable+0xa4>
    16d4:	28 85       	ldd	r18, Y+8	; 0x08
    16d6:	39 85       	ldd	r19, Y+9	; 0x09
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <EXTI_u8Enable+0x70>
    16de:	88 85       	ldd	r24, Y+8	; 0x08
    16e0:	99 85       	ldd	r25, Y+9	; 0x09
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	61 f0       	breq	.+24     	; 0x16fe <EXTI_u8Enable+0x86>
    16e6:	47 c0       	rjmp	.+142    	; 0x1776 <EXTI_u8Enable+0xfe>
    16e8:	28 85       	ldd	r18, Y+8	; 0x08
    16ea:	39 85       	ldd	r19, Y+9	; 0x09
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	99 f1       	breq	.+102    	; 0x1758 <EXTI_u8Enable+0xe0>
    16f2:	88 85       	ldd	r24, Y+8	; 0x08
    16f4:	99 85       	ldd	r25, Y+9	; 0x09
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	91 05       	cpc	r25, r1
    16fa:	f9 f0       	breq	.+62     	; 0x173a <EXTI_u8Enable+0xc2>
    16fc:	3c c0       	rjmp	.+120    	; 0x1776 <EXTI_u8Enable+0xfe>
	    	{
	    	    case EXTI_u8_FALLING_EDGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,1);
    16fe:	a5 e5       	ldi	r26, 0x55	; 85
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e5       	ldi	r30, 0x55	; 85
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	82 60       	ori	r24, 0x02	; 2
    170a:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,0);
    170c:	a5 e5       	ldi	r26, 0x55	; 85
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e5 e5       	ldi	r30, 0x55	; 85
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8e 7f       	andi	r24, 0xFE	; 254
    1718:	8c 93       	st	X, r24
    171a:	2e c0       	rjmp	.+92     	; 0x1778 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_RISING_EDGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,1);
    171c:	a5 e5       	ldi	r26, 0x55	; 85
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e5 e5       	ldi	r30, 0x55	; 85
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	82 60       	ori	r24, 0x02	; 2
    1728:	8c 93       	st	X, r24
	    	    	SET_BIT(EXTI_u8_MCUCR,0);
    172a:	a5 e5       	ldi	r26, 0x55	; 85
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e5       	ldi	r30, 0x55	; 85
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	81 60       	ori	r24, 0x01	; 1
    1736:	8c 93       	st	X, r24
    1738:	1f c0       	rjmp	.+62     	; 0x1778 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_LOW_LEVEL:
	    	    	CLR_BIT(EXTI_u8_MCUCR,1);
    173a:	a5 e5       	ldi	r26, 0x55	; 85
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e5 e5       	ldi	r30, 0x55	; 85
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8d 7f       	andi	r24, 0xFD	; 253
    1746:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,0);
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8e 7f       	andi	r24, 0xFE	; 254
    1754:	8c 93       	st	X, r24
    1756:	10 c0       	rjmp	.+32     	; 0x1778 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_ANY_LOGICAL_CHANGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,0);
    1758:	a5 e5       	ldi	r26, 0x55	; 85
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e5 e5       	ldi	r30, 0x55	; 85
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	81 60       	ori	r24, 0x01	; 1
    1764:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,1);
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8d 7f       	andi	r24, 0xFD	; 253
    1772:	8c 93       	st	X, r24
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <EXTI_u8Enable+0x100>
	    		break;
	    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    1776:	19 82       	std	Y+1, r1	; 0x01
	    	}
	    	/* Enable PIE */
	    	SET_BIT(EXTI_u8_GICR,6);
    1778:	ab e5       	ldi	r26, 0x5B	; 91
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	eb e5       	ldi	r30, 0x5B	; 91
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	80 64       	ori	r24, 0x40	; 64
    1784:	8c 93       	st	X, r24
    1786:	8d c0       	rjmp	.+282    	; 0x18a2 <EXTI_u8Enable+0x22a>
		break;
		    case EXTI_u8_INT1:
		    	switch(Copy_u8EXTIEdge)
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3f 83       	std	Y+7, r19	; 0x07
    1790:	2e 83       	std	Y+6, r18	; 0x06
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	21 f1       	breq	.+72     	; 0x17e4 <EXTI_u8Enable+0x16c>
    179c:	2e 81       	ldd	r18, Y+6	; 0x06
    179e:	3f 81       	ldd	r19, Y+7	; 0x07
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <EXTI_u8Enable+0x138>
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	61 f0       	breq	.+24     	; 0x17c6 <EXTI_u8Enable+0x14e>
    17ae:	47 c0       	rjmp	.+142    	; 0x183e <EXTI_u8Enable+0x1c6>
    17b0:	2e 81       	ldd	r18, Y+6	; 0x06
    17b2:	3f 81       	ldd	r19, Y+7	; 0x07
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	99 f1       	breq	.+102    	; 0x1820 <EXTI_u8Enable+0x1a8>
    17ba:	8e 81       	ldd	r24, Y+6	; 0x06
    17bc:	9f 81       	ldd	r25, Y+7	; 0x07
    17be:	83 30       	cpi	r24, 0x03	; 3
    17c0:	91 05       	cpc	r25, r1
    17c2:	f9 f0       	breq	.+62     	; 0x1802 <EXTI_u8Enable+0x18a>
    17c4:	3c c0       	rjmp	.+120    	; 0x183e <EXTI_u8Enable+0x1c6>
		    	{
		    	    case EXTI_u8_FALLING_EDGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,3);
    17c6:	a5 e5       	ldi	r26, 0x55	; 85
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e5       	ldi	r30, 0x55	; 85
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	88 60       	ori	r24, 0x08	; 8
    17d2:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,2);
    17d4:	a5 e5       	ldi	r26, 0x55	; 85
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e5       	ldi	r30, 0x55	; 85
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8b 7f       	andi	r24, 0xFB	; 251
    17e0:	8c 93       	st	X, r24
    17e2:	2e c0       	rjmp	.+92     	; 0x1840 <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_RISING_EDGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,3);
    17e4:	a5 e5       	ldi	r26, 0x55	; 85
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e5       	ldi	r30, 0x55	; 85
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	88 60       	ori	r24, 0x08	; 8
    17f0:	8c 93       	st	X, r24
		    	    	SET_BIT(EXTI_u8_MCUCR,2);
    17f2:	a5 e5       	ldi	r26, 0x55	; 85
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e5       	ldi	r30, 0x55	; 85
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	84 60       	ori	r24, 0x04	; 4
    17fe:	8c 93       	st	X, r24
    1800:	1f c0       	rjmp	.+62     	; 0x1840 <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_LOW_LEVEL:
		    	    	CLR_BIT(EXTI_u8_MCUCR,2);
    1802:	a5 e5       	ldi	r26, 0x55	; 85
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e5 e5       	ldi	r30, 0x55	; 85
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8b 7f       	andi	r24, 0xFB	; 251
    180e:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,3);
    1810:	a5 e5       	ldi	r26, 0x55	; 85
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e5 e5       	ldi	r30, 0x55	; 85
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	87 7f       	andi	r24, 0xF7	; 247
    181c:	8c 93       	st	X, r24
    181e:	10 c0       	rjmp	.+32     	; 0x1840 <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_ANY_LOGICAL_CHANGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,2);
    1820:	a5 e5       	ldi	r26, 0x55	; 85
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e5 e5       	ldi	r30, 0x55	; 85
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	84 60       	ori	r24, 0x04	; 4
    182c:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,3);
    182e:	a5 e5       	ldi	r26, 0x55	; 85
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e5       	ldi	r30, 0x55	; 85
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	87 7f       	andi	r24, 0xF7	; 247
    183a:	8c 93       	st	X, r24
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <EXTI_u8Enable+0x1c8>
		    		break;
		    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    183e:	19 82       	std	Y+1, r1	; 0x01
		    	}
		    	/* Enable PIE */
		    	SET_BIT(EXTI_u8_GICR,7);
    1840:	ab e5       	ldi	r26, 0x5B	; 91
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	eb e5       	ldi	r30, 0x5B	; 91
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	80 68       	ori	r24, 0x80	; 128
    184c:	8c 93       	st	X, r24
    184e:	29 c0       	rjmp	.+82     	; 0x18a2 <EXTI_u8Enable+0x22a>
			break;
			    case EXTI_u8_INT2:
			    	switch(Copy_u8EXTIEdge)
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3d 83       	std	Y+5, r19	; 0x05
    1858:	2c 83       	std	Y+4, r18	; 0x04
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	31 f0       	breq	.+12     	; 0x186e <EXTI_u8Enable+0x1f6>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	21 30       	cpi	r18, 0x01	; 1
    1868:	31 05       	cpc	r19, r1
    186a:	49 f0       	breq	.+18     	; 0x187e <EXTI_u8Enable+0x206>
    186c:	10 c0       	rjmp	.+32     	; 0x188e <EXTI_u8Enable+0x216>
			    	{
			    	    case EXTI_u8_FALLING_EDGE:
                             CLR_BIT(EXTI_u8_MCUCSR,6);
    186e:	a4 e5       	ldi	r26, 0x54	; 84
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e4 e5       	ldi	r30, 0x54	; 84
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8f 7b       	andi	r24, 0xBF	; 191
    187a:	8c 93       	st	X, r24
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <EXTI_u8Enable+0x218>
			    		break;
			    	    case EXTI_u8_RISING_EDGE:
                             SET_BIT(EXTI_u8_MCUCSR,6);
    187e:	a4 e5       	ldi	r26, 0x54	; 84
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e4 e5       	ldi	r30, 0x54	; 84
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	80 64       	ori	r24, 0x40	; 64
    188a:	8c 93       	st	X, r24
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <EXTI_u8Enable+0x218>
			    		break;
			    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    188e:	19 82       	std	Y+1, r1	; 0x01
			    	}
			    	/* Enable PIE */
			    	SET_BIT(EXTI_u8_GICR,5);
    1890:	ab e5       	ldi	r26, 0x5B	; 91
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	eb e5       	ldi	r30, 0x5B	; 91
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 62       	ori	r24, 0x20	; 32
    189c:	8c 93       	st	X, r24
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <EXTI_u8Enable+0x22a>
				break;
			    	default: Local_u8ErrorState = STD_TYPES_NOK;
    18a0:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a4:	2b 96       	adiw	r28, 0x0b	; 11
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <EXTI_u8Disable>:

u8 EXTI_u8Disable(u8 Copy_u8_EXTIIndex)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <EXTI_u8Disable+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <EXTI_u8Disable+0x8>
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTIIndex)
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3c 83       	std	Y+4, r19	; 0x04
    18d0:	2b 83       	std	Y+3, r18	; 0x03
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	89 f0       	breq	.+34     	; 0x18fe <EXTI_u8Disable+0x48>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	a1 f0       	breq	.+40     	; 0x190e <EXTI_u8Disable+0x58>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	c1 f4       	brne	.+48     	; 0x191e <EXTI_u8Disable+0x68>
	{
	case EXTI_u8_INT0: CLR_BIT(EXTI_u8_GICR,6);break;
    18ee:	ab e5       	ldi	r26, 0x5B	; 91
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e5       	ldi	r30, 0x5B	; 91
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 7b       	andi	r24, 0xBF	; 191
    18fa:	8c 93       	st	X, r24
    18fc:	11 c0       	rjmp	.+34     	; 0x1920 <EXTI_u8Disable+0x6a>
	case EXTI_u8_INT1: CLR_BIT(EXTI_u8_GICR,7);break;
    18fe:	ab e5       	ldi	r26, 0x5B	; 91
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	eb e5       	ldi	r30, 0x5B	; 91
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8f 77       	andi	r24, 0x7F	; 127
    190a:	8c 93       	st	X, r24
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <EXTI_u8Disable+0x6a>
	case EXTI_u8_INT2: CLR_BIT(EXTI_u8_GICR,5);break;
    190e:	ab e5       	ldi	r26, 0x5B	; 91
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	eb e5       	ldi	r30, 0x5B	; 91
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8f 7d       	andi	r24, 0xDF	; 223
    191a:	8c 93       	st	X, r24
    191c:	01 c0       	rjmp	.+2      	; 0x1920 <EXTI_u8Disable+0x6a>
	default: Local_u8ErrorState = STD_TYPES_NOK;
    191e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1920:	89 81       	ldd	r24, Y+1	; 0x01

}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <__vector_1>:

/* Prototype for ISR function */
/* EXTI0 ISR */
void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
    1930:	1f 92       	push	r1
    1932:	0f 92       	push	r0
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	0f 92       	push	r0
    1938:	11 24       	eor	r1, r1
    193a:	2f 93       	push	r18
    193c:	3f 93       	push	r19
    193e:	4f 93       	push	r20
    1940:	5f 93       	push	r21
    1942:	6f 93       	push	r22
    1944:	7f 93       	push	r23
    1946:	8f 93       	push	r24
    1948:	9f 93       	push	r25
    194a:	af 93       	push	r26
    194c:	bf 93       	push	r27
    194e:	ef 93       	push	r30
    1950:	ff 93       	push	r31
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
    195a:	80 91 82 00 	lds	r24, 0x0082
    195e:	90 91 83 00 	lds	r25, 0x0083
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	29 f0       	breq	.+10     	; 0x1970 <__vector_1+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT0]();
    1966:	e0 91 82 00 	lds	r30, 0x0082
    196a:	f0 91 83 00 	lds	r31, 0x0083
    196e:	09 95       	icall
	}
}
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	ff 91       	pop	r31
    1976:	ef 91       	pop	r30
    1978:	bf 91       	pop	r27
    197a:	af 91       	pop	r26
    197c:	9f 91       	pop	r25
    197e:	8f 91       	pop	r24
    1980:	7f 91       	pop	r23
    1982:	6f 91       	pop	r22
    1984:	5f 91       	pop	r21
    1986:	4f 91       	pop	r20
    1988:	3f 91       	pop	r19
    198a:	2f 91       	pop	r18
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <__vector_2>:
/* EXTI1 ISR */
void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
    19c0:	80 91 84 00 	lds	r24, 0x0084
    19c4:	90 91 85 00 	lds	r25, 0x0085
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <__vector_2+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT1]();
    19cc:	e0 91 84 00 	lds	r30, 0x0084
    19d0:	f0 91 85 00 	lds	r31, 0x0085
    19d4:	09 95       	icall
	}
}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 90       	pop	r0
    19f8:	1f 90       	pop	r1
    19fa:	18 95       	reti

000019fc <__vector_3>:
/* EXTI2 ISR */
void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    19fc:	1f 92       	push	r1
    19fe:	0f 92       	push	r0
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	0f 92       	push	r0
    1a04:	11 24       	eor	r1, r1
    1a06:	2f 93       	push	r18
    1a08:	3f 93       	push	r19
    1a0a:	4f 93       	push	r20
    1a0c:	5f 93       	push	r21
    1a0e:	6f 93       	push	r22
    1a10:	7f 93       	push	r23
    1a12:	8f 93       	push	r24
    1a14:	9f 93       	push	r25
    1a16:	af 93       	push	r26
    1a18:	bf 93       	push	r27
    1a1a:	ef 93       	push	r30
    1a1c:	ff 93       	push	r31
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
    1a26:	80 91 86 00 	lds	r24, 0x0086
    1a2a:	90 91 87 00 	lds	r25, 0x0087
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	29 f0       	breq	.+10     	; 0x1a3c <__vector_3+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT2]();
    1a32:	e0 91 86 00 	lds	r30, 0x0086
    1a36:	f0 91 87 00 	lds	r31, 0x0087
    1a3a:	09 95       	icall
	}
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <GI_voidEnable>:
/* Defination of SREG */
#define GI_u8_SREG              *((volatile u8*)0x5F)


void GI_voidEnable (void)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
    1a6a:	af e5       	ldi	r26, 0x5F	; 95
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	ef e5       	ldi	r30, 0x5F	; 95
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 68       	ori	r24, 0x80	; 128
    1a76:	8c 93       	st	X, r24
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <GI_voidDisable>:

void GI_voidDisable(void)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
    1a86:	af e5       	ldi	r26, 0x5F	; 95
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	ef e5       	ldi	r30, 0x5F	; 95
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 77       	andi	r24, 0x7F	; 127
    1a92:	8c 93       	st	X, r24
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit     (void)
{
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	cc 54       	subi	r28, 0x4C	; 76
    1aa8:	d0 40       	sbci	r29, 0x00	; 0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e7 5b       	subi	r30, 0xB7	; 183
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	ac e0       	ldi	r26, 0x0C	; 12
    1ac0:	b2 e4       	ldi	r27, 0x42	; 66
    1ac2:	80 83       	st	Z, r24
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	a2 83       	std	Z+2, r26	; 0x02
    1ac8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	8e 01       	movw	r16, r28
    1acc:	0b 5b       	subi	r16, 0xBB	; 187
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e7 5b       	subi	r30, 0xB7	; 183
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a ef       	ldi	r20, 0xFA	; 250
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	f8 01       	movw	r30, r16
    1af0:	80 83       	st	Z, r24
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	a2 83       	std	Z+2, r26	; 0x02
    1af6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af8:	fe 01       	movw	r30, r28
    1afa:	eb 5b       	subi	r30, 0xBB	; 187
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	44 f4       	brge	.+16     	; 0x1b26 <LCD_voidInit+0x8c>
		__ticks = 1;
    1b16:	fe 01       	movw	r30, r28
    1b18:	ed 5b       	subi	r30, 0xBD	; 189
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    1b24:	64 c0       	rjmp	.+200    	; 0x1bee <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1b26:	fe 01       	movw	r30, r28
    1b28:	eb 5b       	subi	r30, 0xBB	; 187
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	0c f0       	brlt	.+2      	; 0x1b46 <LCD_voidInit+0xac>
    1b44:	43 c0       	rjmp	.+134    	; 0x1bcc <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 5b       	subi	r30, 0xB7	; 183
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8e 01       	movw	r16, r28
    1b66:	0d 5b       	subi	r16, 0xBD	; 189
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	f8 01       	movw	r30, r16
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	1f c0       	rjmp	.+62     	; 0x1bbc <LCD_voidInit+0x122>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ef 5b       	subi	r30, 0xBF	; 191
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	88 ec       	ldi	r24, 0xC8	; 200
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ef 5b       	subi	r30, 0xBF	; 191
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_voidInit+0xfc>
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ef 5b       	subi	r30, 0xBF	; 191
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	de 01       	movw	r26, r28
    1ba6:	ad 5b       	subi	r26, 0xBD	; 189
    1ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    1baa:	fe 01       	movw	r30, r28
    1bac:	ed 5b       	subi	r30, 0xBD	; 189
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	11 96       	adiw	r26, 0x01	; 1
    1bb8:	9c 93       	st	X, r25
    1bba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ed 5b       	subi	r30, 0xBD	; 189
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	d1 f6       	brne	.-76     	; 0x1b7e <LCD_voidInit+0xe4>
    1bca:	24 c0       	rjmp	.+72     	; 0x1c14 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	8e 01       	movw	r16, r28
    1bce:	0d 5b       	subi	r16, 0xBD	; 189
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	eb 5b       	subi	r30, 0xBB	; 187
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	f8 01       	movw	r30, r16
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ed 5b       	subi	r30, 0xBD	; 189
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	91 81       	ldd	r25, Z+1	; 0x01
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ff 96       	adiw	r30, 0x3f	; 63
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	fe 01       	movw	r30, r28
    1c02:	ff 96       	adiw	r30, 0x3f	; 63
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_voidInit+0x16e>
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ff 96       	adiw	r30, 0x3f	; 63
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd 0b00111000 */
	LCD_voidSendCmnd(0b00111000);
    1c14:	88 e3       	ldi	r24, 0x38	; 56
    1c16:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e2       	ldi	r26, 0x20	; 32
    1c20:	b2 e4       	ldi	r27, 0x42	; 66
    1c22:	8b af       	std	Y+59, r24	; 0x3b
    1c24:	9c af       	std	Y+60, r25	; 0x3c
    1c26:	ad af       	std	Y+61, r26	; 0x3d
    1c28:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c2a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c2c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c32:	2b ea       	ldi	r18, 0xAB	; 171
    1c34:	3a ea       	ldi	r19, 0xAA	; 170
    1c36:	4a e2       	ldi	r20, 0x2A	; 42
    1c38:	50 e4       	ldi	r21, 0x40	; 64
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8f ab       	std	Y+55, r24	; 0x37
    1c44:	98 af       	std	Y+56, r25	; 0x38
    1c46:	a9 af       	std	Y+57, r26	; 0x39
    1c48:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1c4a:	6f a9       	ldd	r22, Y+55	; 0x37
    1c4c:	78 ad       	ldd	r23, Y+56	; 0x38
    1c4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	1c f4       	brge	.+6      	; 0x1c68 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	8e ab       	std	Y+54, r24	; 0x36
    1c66:	91 c0       	rjmp	.+290    	; 0x1d8a <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1c68:	6f a9       	ldd	r22, Y+55	; 0x37
    1c6a:	78 ad       	ldd	r23, Y+56	; 0x38
    1c6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4f e7       	ldi	r20, 0x7F	; 127
    1c76:	53 e4       	ldi	r21, 0x43	; 67
    1c78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	0c f0       	brlt	.+2      	; 0x1c82 <LCD_voidInit+0x1e8>
    1c80:	7b c0       	rjmp	.+246    	; 0x1d78 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1c82:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c84:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4a e7       	ldi	r20, 0x7A	; 122
    1c90:	54 e4       	ldi	r21, 0x44	; 68
    1c92:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8a ab       	std	Y+50, r24	; 0x32
    1c9c:	9b ab       	std	Y+51, r25	; 0x33
    1c9e:	ac ab       	std	Y+52, r26	; 0x34
    1ca0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	6a a9       	ldd	r22, Y+50	; 0x32
    1ca4:	7b a9       	ldd	r23, Y+51	; 0x33
    1ca6:	8c a9       	ldd	r24, Y+52	; 0x34
    1ca8:	9d a9       	ldd	r25, Y+53	; 0x35
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a ef       	ldi	r20, 0xFA	; 250
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8e a7       	std	Y+46, r24	; 0x2e
    1cbc:	9f a7       	std	Y+47, r25	; 0x2f
    1cbe:	a8 ab       	std	Y+48, r26	; 0x30
    1cc0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1cc2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cc4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cc6:	88 a9       	ldd	r24, Y+48	; 0x30
    1cc8:	99 a9       	ldd	r25, Y+49	; 0x31
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <LCD_voidInit+0x24a>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9d a7       	std	Y+45, r25	; 0x2d
    1ce0:	8c a7       	std	Y+44, r24	; 0x2c
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1ce4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ce6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ce8:	88 a9       	ldd	r24, Y+48	; 0x30
    1cea:	99 a9       	ldd	r25, Y+49	; 0x31
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	6a a9       	ldd	r22, Y+50	; 0x32
    1cfe:	7b a9       	ldd	r23, Y+51	; 0x33
    1d00:	8c a9       	ldd	r24, Y+52	; 0x34
    1d02:	9d a9       	ldd	r25, Y+53	; 0x35
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9d a7       	std	Y+45, r25	; 0x2d
    1d22:	8c a7       	std	Y+44, r24	; 0x2c
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <LCD_voidInit+0x2aa>
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9b a7       	std	Y+43, r25	; 0x2b
    1d2c:	8a a7       	std	Y+42, r24	; 0x2a
    1d2e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d30:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_voidInit+0x298>
    1d36:	9b a7       	std	Y+43, r25	; 0x2b
    1d38:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9d a7       	std	Y+45, r25	; 0x2d
    1d42:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d46:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <LCD_voidInit+0x28c>
    1d4c:	24 c0       	rjmp	.+72     	; 0x1d96 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d50:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d52:	88 a9       	ldd	r24, Y+48	; 0x30
    1d54:	99 a9       	ldd	r25, Y+49	; 0x31
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9d a7       	std	Y+45, r25	; 0x2d
    1d60:	8c a7       	std	Y+44, r24	; 0x2c
    1d62:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d64:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d66:	99 a7       	std	Y+41, r25	; 0x29
    1d68:	88 a7       	std	Y+40, r24	; 0x28
    1d6a:	88 a5       	ldd	r24, Y+40	; 0x28
    1d6c:	99 a5       	ldd	r25, Y+41	; 0x29
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_voidInit+0x2d4>
    1d72:	99 a7       	std	Y+41, r25	; 0x29
    1d74:	88 a7       	std	Y+40, r24	; 0x28
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d78:	6f a9       	ldd	r22, Y+55	; 0x37
    1d7a:	78 ad       	ldd	r23, Y+56	; 0x38
    1d7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8e ab       	std	Y+54, r24	; 0x36
    1d8a:	8e a9       	ldd	r24, Y+54	; 0x36
    1d8c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d8e:	8f a1       	ldd	r24, Y+39	; 0x27
    1d90:	8a 95       	dec	r24
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_voidInit+0x2f6>
    1d94:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    1d96:	8f e0       	ldi	r24, 0x0F	; 15
    1d98:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a0 e2       	ldi	r26, 0x20	; 32
    1da2:	b2 e4       	ldi	r27, 0x42	; 66
    1da4:	8b a3       	std	Y+35, r24	; 0x23
    1da6:	9c a3       	std	Y+36, r25	; 0x24
    1da8:	ad a3       	std	Y+37, r26	; 0x25
    1daa:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dac:	6b a1       	ldd	r22, Y+35	; 0x23
    1dae:	7c a1       	ldd	r23, Y+36	; 0x24
    1db0:	8d a1       	ldd	r24, Y+37	; 0x25
    1db2:	9e a1       	ldd	r25, Y+38	; 0x26
    1db4:	2b ea       	ldi	r18, 0xAB	; 171
    1db6:	3a ea       	ldi	r19, 0xAA	; 170
    1db8:	4a e2       	ldi	r20, 0x2A	; 42
    1dba:	50 e4       	ldi	r21, 0x40	; 64
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8f 8f       	std	Y+31, r24	; 0x1f
    1dc6:	98 a3       	std	Y+32, r25	; 0x20
    1dc8:	a9 a3       	std	Y+33, r26	; 0x21
    1dca:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1dcc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1dce:	78 a1       	ldd	r23, Y+32	; 0x20
    1dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	1c f4       	brge	.+6      	; 0x1dea <LCD_voidInit+0x350>
		__ticks = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	8e 8f       	std	Y+30, r24	; 0x1e
    1de8:	91 c0       	rjmp	.+290    	; 0x1f0c <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1dea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1dec:	78 a1       	ldd	r23, Y+32	; 0x20
    1dee:	89 a1       	ldd	r24, Y+33	; 0x21
    1df0:	9a a1       	ldd	r25, Y+34	; 0x22
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	53 e4       	ldi	r21, 0x43	; 67
    1dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	0c f0       	brlt	.+2      	; 0x1e04 <LCD_voidInit+0x36a>
    1e02:	7b c0       	rjmp	.+246    	; 0x1efa <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1e04:	6b a1       	ldd	r22, Y+35	; 0x23
    1e06:	7c a1       	ldd	r23, Y+36	; 0x24
    1e08:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a e7       	ldi	r20, 0x7A	; 122
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8a 8f       	std	Y+26, r24	; 0x1a
    1e1e:	9b 8f       	std	Y+27, r25	; 0x1b
    1e20:	ac 8f       	std	Y+28, r26	; 0x1c
    1e22:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e24:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e26:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a ef       	ldi	r20, 0xFA	; 250
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8e 8b       	std	Y+22, r24	; 0x16
    1e3e:	9f 8b       	std	Y+23, r25	; 0x17
    1e40:	a8 8f       	std	Y+24, r26	; 0x18
    1e42:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e44:	6e 89       	ldd	r22, Y+22	; 0x16
    1e46:	7f 89       	ldd	r23, Y+23	; 0x17
    1e48:	88 8d       	ldd	r24, Y+24	; 0x18
    1e4a:	99 8d       	ldd	r25, Y+25	; 0x19
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9d 8b       	std	Y+21, r25	; 0x15
    1e62:	8c 8b       	std	Y+20, r24	; 0x14
    1e64:	3f c0       	rjmp	.+126    	; 0x1ee4 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1e66:	6e 89       	ldd	r22, Y+22	; 0x16
    1e68:	7f 89       	ldd	r23, Y+23	; 0x17
    1e6a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e6c:	99 8d       	ldd	r25, Y+25	; 0x19
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	4c f5       	brge	.+82     	; 0x1ed0 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e80:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9d 8b       	std	Y+21, r25	; 0x15
    1ea4:	8c 8b       	std	Y+20, r24	; 0x14
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <LCD_voidInit+0x42c>
    1ea8:	88 ec       	ldi	r24, 0xC8	; 200
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9b 8b       	std	Y+19, r25	; 0x13
    1eae:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb0:	8a 89       	ldd	r24, Y+18	; 0x12
    1eb2:	9b 89       	ldd	r25, Y+19	; 0x13
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_voidInit+0x41a>
    1eb8:	9b 8b       	std	Y+19, r25	; 0x13
    1eba:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	8c 89       	ldd	r24, Y+20	; 0x14
    1ebe:	9d 89       	ldd	r25, Y+21	; 0x15
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	9d 8b       	std	Y+21, r25	; 0x15
    1ec4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ec8:	9d 89       	ldd	r25, Y+21	; 0x15
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f7       	brne	.-38     	; 0x1ea8 <LCD_voidInit+0x40e>
    1ece:	24 c0       	rjmp	.+72     	; 0x1f18 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	6e 89       	ldd	r22, Y+22	; 0x16
    1ed2:	7f 89       	ldd	r23, Y+23	; 0x17
    1ed4:	88 8d       	ldd	r24, Y+24	; 0x18
    1ed6:	99 8d       	ldd	r25, Y+25	; 0x19
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9d 8b       	std	Y+21, r25	; 0x15
    1ee2:	8c 8b       	std	Y+20, r24	; 0x14
    1ee4:	8c 89       	ldd	r24, Y+20	; 0x14
    1ee6:	9d 89       	ldd	r25, Y+21	; 0x15
    1ee8:	99 8b       	std	Y+17, r25	; 0x11
    1eea:	88 8b       	std	Y+16, r24	; 0x10
    1eec:	88 89       	ldd	r24, Y+16	; 0x10
    1eee:	99 89       	ldd	r25, Y+17	; 0x11
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_voidInit+0x456>
    1ef4:	99 8b       	std	Y+17, r25	; 0x11
    1ef6:	88 8b       	std	Y+16, r24	; 0x10
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1efa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1efc:	78 a1       	ldd	r23, Y+32	; 0x20
    1efe:	89 a1       	ldd	r24, Y+33	; 0x21
    1f00:	9a a1       	ldd	r25, Y+34	; 0x22
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f0e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f12:	8a 95       	dec	r24
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_voidInit+0x478>
    1f16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e4       	ldi	r27, 0x40	; 64
    1f26:	8b 87       	std	Y+11, r24	; 0x0b
    1f28:	9c 87       	std	Y+12, r25	; 0x0c
    1f2a:	ad 87       	std	Y+13, r26	; 0x0d
    1f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a ef       	ldi	r20, 0xFA	; 250
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8f 83       	std	Y+7, r24	; 0x07
    1f48:	98 87       	std	Y+8, r25	; 0x08
    1f4a:	a9 87       	std	Y+9, r26	; 0x09
    1f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	4c f5       	brge	.+82     	; 0x1fda <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <LCD_voidInit+0x536>
    1fb2:	88 ec       	ldi	r24, 0xC8	; 200
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <LCD_voidInit+0x524>
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <LCD_voidInit+0x518>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	6f 81       	ldd	r22, Y+7	; 0x07
    1fdc:	78 85       	ldd	r23, Y+8	; 0x08
    1fde:	89 85       	ldd	r24, Y+9	; 0x09
    1fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_voidInit+0x560>
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    2002:	86 e0       	ldi	r24, 0x06	; 6
    2004:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
	
}
    2008:	c4 5b       	subi	r28, 0xB4	; 180
    200a:	df 4f       	sbci	r29, 0xFF	; 255
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	08 95       	ret

00002020 <LCD_voidClear>:

void LCD_voidClear       (void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	2e 97       	sbiw	r28, 0x0e	; 14
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00000001);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a0 ea       	ldi	r26, 0xA0	; 160
    2040:	b1 e4       	ldi	r27, 0x41	; 65
    2042:	8b 87       	std	Y+11, r24	; 0x0b
    2044:	9c 87       	std	Y+12, r25	; 0x0c
    2046:	ad 87       	std	Y+13, r26	; 0x0d
    2048:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204a:	6b 85       	ldd	r22, Y+11	; 0x0b
    204c:	7c 85       	ldd	r23, Y+12	; 0x0c
    204e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2050:	9e 85       	ldd	r25, Y+14	; 0x0e
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a ef       	ldi	r20, 0xFA	; 250
    2058:	54 e4       	ldi	r21, 0x44	; 68
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	8f 83       	std	Y+7, r24	; 0x07
    2064:	98 87       	std	Y+8, r25	; 0x08
    2066:	a9 87       	std	Y+9, r26	; 0x09
    2068:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e8       	ldi	r20, 0x80	; 128
    2078:	5f e3       	ldi	r21, 0x3F	; 63
    207a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207e:	88 23       	and	r24, r24
    2080:	2c f4       	brge	.+10     	; 0x208c <LCD_voidClear+0x6c>
		__ticks = 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	8d 83       	std	Y+5, r24	; 0x05
    208a:	3f c0       	rjmp	.+126    	; 0x210a <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    208c:	6f 81       	ldd	r22, Y+7	; 0x07
    208e:	78 85       	ldd	r23, Y+8	; 0x08
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	9a 85       	ldd	r25, Y+10	; 0x0a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	57 e4       	ldi	r21, 0x47	; 71
    209c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	4c f5       	brge	.+82     	; 0x20f6 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e2       	ldi	r20, 0x20	; 32
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <LCD_voidClear+0xcc>
    20ce:	88 ec       	ldi	r24, 0xC8	; 200
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <LCD_voidClear+0xba>
    20de:	9c 83       	std	Y+4, r25	; 0x04
    20e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	69 f7       	brne	.-38     	; 0x20ce <LCD_voidClear+0xae>
    20f4:	14 c0       	rjmp	.+40     	; 0x211e <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f6:	6f 81       	ldd	r22, Y+7	; 0x07
    20f8:	78 85       	ldd	r23, Y+8	; 0x08
    20fa:	89 85       	ldd	r24, Y+9	; 0x09
    20fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <LCD_voidClear+0xf6>
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    211e:	2e 96       	adiw	r28, 0x0e	; 14
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <LCD_voidCursorBlinkerOff>:

void LCD_voidCursorBlinkerOff(void)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	2e 97       	sbiw	r28, 0x0e	; 14
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00001100);
    2144:	8c e0       	ldi	r24, 0x0C	; 12
    2146:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 ea       	ldi	r26, 0xA0	; 160
    2150:	b1 e4       	ldi	r27, 0x41	; 65
    2152:	8b 87       	std	Y+11, r24	; 0x0b
    2154:	9c 87       	std	Y+12, r25	; 0x0c
    2156:	ad 87       	std	Y+13, r26	; 0x0d
    2158:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	6b 85       	ldd	r22, Y+11	; 0x0b
    215c:	7c 85       	ldd	r23, Y+12	; 0x0c
    215e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2160:	9e 85       	ldd	r25, Y+14	; 0x0e
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a ef       	ldi	r20, 0xFA	; 250
    2168:	54 e4       	ldi	r21, 0x44	; 68
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8f 83       	std	Y+7, r24	; 0x07
    2174:	98 87       	std	Y+8, r25	; 0x08
    2176:	a9 87       	std	Y+9, r26	; 0x09
    2178:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_voidCursorBlinkerOff+0x6c>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	8d 83       	std	Y+5, r24	; 0x05
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_voidCursorBlinkerOff+0xea>
	else if (__tmp > 65535)
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_voidCursorBlinkerOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_voidCursorBlinkerOff+0xcc>
    21de:	88 ec       	ldi	r24, 0xC8	; 200
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9c 83       	std	Y+4, r25	; 0x04
    21e4:	8b 83       	std	Y+3, r24	; 0x03
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_voidCursorBlinkerOff+0xba>
    21ee:	9c 83       	std	Y+4, r25	; 0x04
    21f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_voidCursorBlinkerOff+0xae>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_voidCursorBlinkerOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6f 81       	ldd	r22, Y+7	; 0x07
    2208:	78 85       	ldd	r23, Y+8	; 0x08
    220a:	89 85       	ldd	r24, Y+9	; 0x09
    220c:	9a 85       	ldd	r25, Y+10	; 0x0a
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9e 83       	std	Y+6, r25	; 0x06
    2218:	8d 83       	std	Y+5, r24	; 0x05
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_voidCursorBlinkerOff+0xf6>
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    222e:	2e 96       	adiw	r28, 0x0e	; 14
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd (u8 Copy_u8Cmnd)
{
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	e1 97       	sbiw	r28, 0x31	; 49
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2256:	83 e0       	ldi	r24, 0x03	; 3
    2258:	62 e0       	ldi	r22, 0x02	; 2
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Send Cmnd byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	69 a9       	ldd	r22, Y+49	; 0x31
    226e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 e8       	ldi	r26, 0x80	; 128
    2282:	bf e3       	ldi	r27, 0x3F	; 63
    2284:	8d a7       	std	Y+45, r24	; 0x2d
    2286:	9e a7       	std	Y+46, r25	; 0x2e
    2288:	af a7       	std	Y+47, r26	; 0x2f
    228a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    228c:	6d a5       	ldd	r22, Y+45	; 0x2d
    228e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2290:	8f a5       	ldd	r24, Y+47	; 0x2f
    2292:	98 a9       	ldd	r25, Y+48	; 0x30
    2294:	2b ea       	ldi	r18, 0xAB	; 171
    2296:	3a ea       	ldi	r19, 0xAA	; 170
    2298:	4a e2       	ldi	r20, 0x2A	; 42
    229a:	50 e4       	ldi	r21, 0x40	; 64
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	89 a7       	std	Y+41, r24	; 0x29
    22a6:	9a a7       	std	Y+42, r25	; 0x2a
    22a8:	ab a7       	std	Y+43, r26	; 0x2b
    22aa:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22ac:	69 a5       	ldd	r22, Y+41	; 0x29
    22ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    22b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	1c f4       	brge	.+6      	; 0x22ca <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	88 a7       	std	Y+40, r24	; 0x28
    22c8:	91 c0       	rjmp	.+290    	; 0x23ec <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    22ca:	69 a5       	ldd	r22, Y+41	; 0x29
    22cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    22ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4f e7       	ldi	r20, 0x7F	; 127
    22d8:	53 e4       	ldi	r21, 0x43	; 67
    22da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22de:	18 16       	cp	r1, r24
    22e0:	0c f0       	brlt	.+2      	; 0x22e4 <LCD_voidSendCmnd+0xa4>
    22e2:	7b c0       	rjmp	.+246    	; 0x23da <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    22e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    22e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ea:	98 a9       	ldd	r25, Y+48	; 0x30
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	4a e7       	ldi	r20, 0x7A	; 122
    22f2:	54 e4       	ldi	r21, 0x44	; 68
    22f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	8c a3       	std	Y+36, r24	; 0x24
    22fe:	9d a3       	std	Y+37, r25	; 0x25
    2300:	ae a3       	std	Y+38, r26	; 0x26
    2302:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2304:	6c a1       	ldd	r22, Y+36	; 0x24
    2306:	7d a1       	ldd	r23, Y+37	; 0x25
    2308:	8e a1       	ldd	r24, Y+38	; 0x26
    230a:	9f a1       	ldd	r25, Y+39	; 0x27
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4a ef       	ldi	r20, 0xFA	; 250
    2312:	54 e4       	ldi	r21, 0x44	; 68
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	88 a3       	std	Y+32, r24	; 0x20
    231e:	99 a3       	std	Y+33, r25	; 0x21
    2320:	aa a3       	std	Y+34, r26	; 0x22
    2322:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2324:	68 a1       	ldd	r22, Y+32	; 0x20
    2326:	79 a1       	ldd	r23, Y+33	; 0x21
    2328:	8a a1       	ldd	r24, Y+34	; 0x22
    232a:	9b a1       	ldd	r25, Y+35	; 0x23
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e8       	ldi	r20, 0x80	; 128
    2332:	5f e3       	ldi	r21, 0x3F	; 63
    2334:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2338:	88 23       	and	r24, r24
    233a:	2c f4       	brge	.+10     	; 0x2346 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9f 8f       	std	Y+31, r25	; 0x1f
    2342:	8e 8f       	std	Y+30, r24	; 0x1e
    2344:	3f c0       	rjmp	.+126    	; 0x23c4 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2346:	68 a1       	ldd	r22, Y+32	; 0x20
    2348:	79 a1       	ldd	r23, Y+33	; 0x21
    234a:	8a a1       	ldd	r24, Y+34	; 0x22
    234c:	9b a1       	ldd	r25, Y+35	; 0x23
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	3f ef       	ldi	r19, 0xFF	; 255
    2352:	4f e7       	ldi	r20, 0x7F	; 127
    2354:	57 e4       	ldi	r21, 0x47	; 71
    2356:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235a:	18 16       	cp	r1, r24
    235c:	4c f5       	brge	.+82     	; 0x23b0 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235e:	6c a1       	ldd	r22, Y+36	; 0x24
    2360:	7d a1       	ldd	r23, Y+37	; 0x25
    2362:	8e a1       	ldd	r24, Y+38	; 0x26
    2364:	9f a1       	ldd	r25, Y+39	; 0x27
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9f 8f       	std	Y+31, r25	; 0x1f
    2384:	8e 8f       	std	Y+30, r24	; 0x1e
    2386:	0f c0       	rjmp	.+30     	; 0x23a6 <LCD_voidSendCmnd+0x166>
    2388:	88 ec       	ldi	r24, 0xC8	; 200
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9d 8f       	std	Y+29, r25	; 0x1d
    238e:	8c 8f       	std	Y+28, r24	; 0x1c
    2390:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2392:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_voidSendCmnd+0x154>
    2398:	9d 8f       	std	Y+29, r25	; 0x1d
    239a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    239e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	9f 8f       	std	Y+31, r25	; 0x1f
    23a4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	69 f7       	brne	.-38     	; 0x2388 <LCD_voidSendCmnd+0x148>
    23ae:	24 c0       	rjmp	.+72     	; 0x23f8 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b0:	68 a1       	ldd	r22, Y+32	; 0x20
    23b2:	79 a1       	ldd	r23, Y+33	; 0x21
    23b4:	8a a1       	ldd	r24, Y+34	; 0x22
    23b6:	9b a1       	ldd	r25, Y+35	; 0x23
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9f 8f       	std	Y+31, r25	; 0x1f
    23c2:	8e 8f       	std	Y+30, r24	; 0x1e
    23c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23c8:	9b 8f       	std	Y+27, r25	; 0x1b
    23ca:	8a 8f       	std	Y+26, r24	; 0x1a
    23cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_voidSendCmnd+0x190>
    23d4:	9b 8f       	std	Y+27, r25	; 0x1b
    23d6:	8a 8f       	std	Y+26, r24	; 0x1a
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23da:	69 a5       	ldd	r22, Y+41	; 0x29
    23dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    23de:	8b a5       	ldd	r24, Y+43	; 0x2b
    23e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	88 a7       	std	Y+40, r24	; 0x28
    23ec:	88 a5       	ldd	r24, Y+40	; 0x28
    23ee:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f0:	89 8d       	ldd	r24, Y+25	; 0x19
    23f2:	8a 95       	dec	r24
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_voidSendCmnd+0x1b2>
    23f6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e8       	ldi	r26, 0x80	; 128
    2408:	bf e3       	ldi	r27, 0x3F	; 63
    240a:	8d 8b       	std	Y+21, r24	; 0x15
    240c:	9e 8b       	std	Y+22, r25	; 0x16
    240e:	af 8b       	std	Y+23, r26	; 0x17
    2410:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2412:	6d 89       	ldd	r22, Y+21	; 0x15
    2414:	7e 89       	ldd	r23, Y+22	; 0x16
    2416:	8f 89       	ldd	r24, Y+23	; 0x17
    2418:	98 8d       	ldd	r25, Y+24	; 0x18
    241a:	2b ea       	ldi	r18, 0xAB	; 171
    241c:	3a ea       	ldi	r19, 0xAA	; 170
    241e:	4a e2       	ldi	r20, 0x2A	; 42
    2420:	50 e4       	ldi	r21, 0x40	; 64
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	89 8b       	std	Y+17, r24	; 0x11
    242c:	9a 8b       	std	Y+18, r25	; 0x12
    242e:	ab 8b       	std	Y+19, r26	; 0x13
    2430:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2432:	69 89       	ldd	r22, Y+17	; 0x11
    2434:	7a 89       	ldd	r23, Y+18	; 0x12
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	1c f4       	brge	.+6      	; 0x2450 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	88 8b       	std	Y+16, r24	; 0x10
    244e:	91 c0       	rjmp	.+290    	; 0x2572 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    2450:	69 89       	ldd	r22, Y+17	; 0x11
    2452:	7a 89       	ldd	r23, Y+18	; 0x12
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	9c 89       	ldd	r25, Y+20	; 0x14
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	53 e4       	ldi	r21, 0x43	; 67
    2460:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	0c f0       	brlt	.+2      	; 0x246a <LCD_voidSendCmnd+0x22a>
    2468:	7b c0       	rjmp	.+246    	; 0x2560 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a e7       	ldi	r20, 0x7A	; 122
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8c 87       	std	Y+12, r24	; 0x0c
    2484:	9d 87       	std	Y+13, r25	; 0x0d
    2486:	ae 87       	std	Y+14, r26	; 0x0e
    2488:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	6c 85       	ldd	r22, Y+12	; 0x0c
    248c:	7d 85       	ldd	r23, Y+13	; 0x0d
    248e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2490:	9f 85       	ldd	r25, Y+15	; 0x0f
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a ef       	ldi	r20, 0xFA	; 250
    2498:	54 e4       	ldi	r21, 0x44	; 68
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	88 87       	std	Y+8, r24	; 0x08
    24a4:	99 87       	std	Y+9, r25	; 0x09
    24a6:	aa 87       	std	Y+10, r26	; 0x0a
    24a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24aa:	68 85       	ldd	r22, Y+8	; 0x08
    24ac:	79 85       	ldd	r23, Y+9	; 0x09
    24ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    24b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9f 83       	std	Y+7, r25	; 0x07
    24c8:	8e 83       	std	Y+6, r24	; 0x06
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    24cc:	68 85       	ldd	r22, Y+8	; 0x08
    24ce:	79 85       	ldd	r23, Y+9	; 0x09
    24d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    24e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    24e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9f 83       	std	Y+7, r25	; 0x07
    250a:	8e 83       	std	Y+6, r24	; 0x06
    250c:	0f c0       	rjmp	.+30     	; 0x252c <LCD_voidSendCmnd+0x2ec>
    250e:	88 ec       	ldi	r24, 0xC8	; 200
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9d 83       	std	Y+5, r25	; 0x05
    2514:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2516:	8c 81       	ldd	r24, Y+4	; 0x04
    2518:	9d 81       	ldd	r25, Y+5	; 0x05
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_voidSendCmnd+0x2da>
    251e:	9d 83       	std	Y+5, r25	; 0x05
    2520:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	8e 81       	ldd	r24, Y+6	; 0x06
    2524:	9f 81       	ldd	r25, Y+7	; 0x07
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9f 83       	std	Y+7, r25	; 0x07
    252a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	8e 81       	ldd	r24, Y+6	; 0x06
    252e:	9f 81       	ldd	r25, Y+7	; 0x07
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <LCD_voidSendCmnd+0x2ce>
    2534:	24 c0       	rjmp	.+72     	; 0x257e <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	68 85       	ldd	r22, Y+8	; 0x08
    2538:	79 85       	ldd	r23, Y+9	; 0x09
    253a:	8a 85       	ldd	r24, Y+10	; 0x0a
    253c:	9b 85       	ldd	r25, Y+11	; 0x0b
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9f 83       	std	Y+7, r25	; 0x07
    2548:	8e 83       	std	Y+6, r24	; 0x06
    254a:	8e 81       	ldd	r24, Y+6	; 0x06
    254c:	9f 81       	ldd	r25, Y+7	; 0x07
    254e:	9b 83       	std	Y+3, r25	; 0x03
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_voidSendCmnd+0x316>
    255a:	9b 83       	std	Y+3, r25	; 0x03
    255c:	8a 83       	std	Y+2, r24	; 0x02
    255e:	0f c0       	rjmp	.+30     	; 0x257e <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2560:	69 89       	ldd	r22, Y+17	; 0x11
    2562:	7a 89       	ldd	r23, Y+18	; 0x12
    2564:	8b 89       	ldd	r24, Y+19	; 0x13
    2566:	9c 89       	ldd	r25, Y+20	; 0x14
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	88 8b       	std	Y+16, r24	; 0x10
    2572:	88 89       	ldd	r24, Y+16	; 0x10
    2574:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	8a 95       	dec	r24
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_voidSendCmnd+0x338>
    257c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    257e:	e1 96       	adiw	r28, 0x31	; 49
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <LCD_voidSendChar>:
void LCD_voidSendChar (u8 Copy_u8Char)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	e1 97       	sbiw	r28, 0x31	; 49
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 1 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	62 e0       	ldi	r22, 0x02	; 2
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	61 e0       	ldi	r22, 0x01	; 1
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Send Char byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	69 a9       	ldd	r22, Y+49	; 0x31
    25be:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 e8       	ldi	r26, 0x80	; 128
    25d2:	bf e3       	ldi	r27, 0x3F	; 63
    25d4:	8d a7       	std	Y+45, r24	; 0x2d
    25d6:	9e a7       	std	Y+46, r25	; 0x2e
    25d8:	af a7       	std	Y+47, r26	; 0x2f
    25da:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    25de:	7e a5       	ldd	r23, Y+46	; 0x2e
    25e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e2:	98 a9       	ldd	r25, Y+48	; 0x30
    25e4:	2b ea       	ldi	r18, 0xAB	; 171
    25e6:	3a ea       	ldi	r19, 0xAA	; 170
    25e8:	4a e2       	ldi	r20, 0x2A	; 42
    25ea:	50 e4       	ldi	r21, 0x40	; 64
    25ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	89 a7       	std	Y+41, r24	; 0x29
    25f6:	9a a7       	std	Y+42, r25	; 0x2a
    25f8:	ab a7       	std	Y+43, r26	; 0x2b
    25fa:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25fc:	69 a5       	ldd	r22, Y+41	; 0x29
    25fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2600:	8b a5       	ldd	r24, Y+43	; 0x2b
    2602:	9c a5       	ldd	r25, Y+44	; 0x2c
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e8       	ldi	r20, 0x80	; 128
    260a:	5f e3       	ldi	r21, 0x3F	; 63
    260c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2610:	88 23       	and	r24, r24
    2612:	1c f4       	brge	.+6      	; 0x261a <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	88 a7       	std	Y+40, r24	; 0x28
    2618:	91 c0       	rjmp	.+290    	; 0x273c <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    261a:	69 a5       	ldd	r22, Y+41	; 0x29
    261c:	7a a5       	ldd	r23, Y+42	; 0x2a
    261e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2620:	9c a5       	ldd	r25, Y+44	; 0x2c
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	53 e4       	ldi	r21, 0x43	; 67
    262a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	0c f0       	brlt	.+2      	; 0x2634 <LCD_voidSendChar+0xa4>
    2632:	7b c0       	rjmp	.+246    	; 0x272a <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2634:	6d a5       	ldd	r22, Y+45	; 0x2d
    2636:	7e a5       	ldd	r23, Y+46	; 0x2e
    2638:	8f a5       	ldd	r24, Y+47	; 0x2f
    263a:	98 a9       	ldd	r25, Y+48	; 0x30
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	54 e4       	ldi	r21, 0x44	; 68
    2644:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8c a3       	std	Y+36, r24	; 0x24
    264e:	9d a3       	std	Y+37, r25	; 0x25
    2650:	ae a3       	std	Y+38, r26	; 0x26
    2652:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	6c a1       	ldd	r22, Y+36	; 0x24
    2656:	7d a1       	ldd	r23, Y+37	; 0x25
    2658:	8e a1       	ldd	r24, Y+38	; 0x26
    265a:	9f a1       	ldd	r25, Y+39	; 0x27
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a ef       	ldi	r20, 0xFA	; 250
    2662:	54 e4       	ldi	r21, 0x44	; 68
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	88 a3       	std	Y+32, r24	; 0x20
    266e:	99 a3       	std	Y+33, r25	; 0x21
    2670:	aa a3       	std	Y+34, r26	; 0x22
    2672:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2674:	68 a1       	ldd	r22, Y+32	; 0x20
    2676:	79 a1       	ldd	r23, Y+33	; 0x21
    2678:	8a a1       	ldd	r24, Y+34	; 0x22
    267a:	9b a1       	ldd	r25, Y+35	; 0x23
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	2c f4       	brge	.+10     	; 0x2696 <LCD_voidSendChar+0x106>
		__ticks = 1;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9f 8f       	std	Y+31, r25	; 0x1f
    2692:	8e 8f       	std	Y+30, r24	; 0x1e
    2694:	3f c0       	rjmp	.+126    	; 0x2714 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2696:	68 a1       	ldd	r22, Y+32	; 0x20
    2698:	79 a1       	ldd	r23, Y+33	; 0x21
    269a:	8a a1       	ldd	r24, Y+34	; 0x22
    269c:	9b a1       	ldd	r25, Y+35	; 0x23
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	4c f5       	brge	.+82     	; 0x2700 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	6c a1       	ldd	r22, Y+36	; 0x24
    26b0:	7d a1       	ldd	r23, Y+37	; 0x25
    26b2:	8e a1       	ldd	r24, Y+38	; 0x26
    26b4:	9f a1       	ldd	r25, Y+39	; 0x27
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e2       	ldi	r20, 0x20	; 32
    26bc:	51 e4       	ldi	r21, 0x41	; 65
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9f 8f       	std	Y+31, r25	; 0x1f
    26d4:	8e 8f       	std	Y+30, r24	; 0x1e
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <LCD_voidSendChar+0x166>
    26d8:	88 ec       	ldi	r24, 0xC8	; 200
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9d 8f       	std	Y+29, r25	; 0x1d
    26de:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_voidSendChar+0x154>
    26e8:	9d 8f       	std	Y+29, r25	; 0x1d
    26ea:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	9f 8f       	std	Y+31, r25	; 0x1f
    26f4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	69 f7       	brne	.-38     	; 0x26d8 <LCD_voidSendChar+0x148>
    26fe:	24 c0       	rjmp	.+72     	; 0x2748 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	68 a1       	ldd	r22, Y+32	; 0x20
    2702:	79 a1       	ldd	r23, Y+33	; 0x21
    2704:	8a a1       	ldd	r24, Y+34	; 0x22
    2706:	9b a1       	ldd	r25, Y+35	; 0x23
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9f 8f       	std	Y+31, r25	; 0x1f
    2712:	8e 8f       	std	Y+30, r24	; 0x1e
    2714:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2716:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2718:	9b 8f       	std	Y+27, r25	; 0x1b
    271a:	8a 8f       	std	Y+26, r24	; 0x1a
    271c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    271e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_voidSendChar+0x190>
    2724:	9b 8f       	std	Y+27, r25	; 0x1b
    2726:	8a 8f       	std	Y+26, r24	; 0x1a
    2728:	0f c0       	rjmp	.+30     	; 0x2748 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    272a:	69 a5       	ldd	r22, Y+41	; 0x29
    272c:	7a a5       	ldd	r23, Y+42	; 0x2a
    272e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2730:	9c a5       	ldd	r25, Y+44	; 0x2c
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	88 a7       	std	Y+40, r24	; 0x28
    273c:	88 a5       	ldd	r24, Y+40	; 0x28
    273e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2740:	89 8d       	ldd	r24, Y+25	; 0x19
    2742:	8a 95       	dec	r24
    2744:	f1 f7       	brne	.-4      	; 0x2742 <LCD_voidSendChar+0x1b2>
    2746:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e8       	ldi	r26, 0x80	; 128
    2758:	bf e3       	ldi	r27, 0x3F	; 63
    275a:	8d 8b       	std	Y+21, r24	; 0x15
    275c:	9e 8b       	std	Y+22, r25	; 0x16
    275e:	af 8b       	std	Y+23, r26	; 0x17
    2760:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2762:	6d 89       	ldd	r22, Y+21	; 0x15
    2764:	7e 89       	ldd	r23, Y+22	; 0x16
    2766:	8f 89       	ldd	r24, Y+23	; 0x17
    2768:	98 8d       	ldd	r25, Y+24	; 0x18
    276a:	2b ea       	ldi	r18, 0xAB	; 171
    276c:	3a ea       	ldi	r19, 0xAA	; 170
    276e:	4a e2       	ldi	r20, 0x2A	; 42
    2770:	50 e4       	ldi	r21, 0x40	; 64
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	89 8b       	std	Y+17, r24	; 0x11
    277c:	9a 8b       	std	Y+18, r25	; 0x12
    277e:	ab 8b       	std	Y+19, r26	; 0x13
    2780:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2782:	69 89       	ldd	r22, Y+17	; 0x11
    2784:	7a 89       	ldd	r23, Y+18	; 0x12
    2786:	8b 89       	ldd	r24, Y+19	; 0x13
    2788:	9c 89       	ldd	r25, Y+20	; 0x14
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	1c f4       	brge	.+6      	; 0x27a0 <LCD_voidSendChar+0x210>
		__ticks = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	88 8b       	std	Y+16, r24	; 0x10
    279e:	91 c0       	rjmp	.+290    	; 0x28c2 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    27a0:	69 89       	ldd	r22, Y+17	; 0x11
    27a2:	7a 89       	ldd	r23, Y+18	; 0x12
    27a4:	8b 89       	ldd	r24, Y+19	; 0x13
    27a6:	9c 89       	ldd	r25, Y+20	; 0x14
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4f e7       	ldi	r20, 0x7F	; 127
    27ae:	53 e4       	ldi	r21, 0x43	; 67
    27b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	0c f0       	brlt	.+2      	; 0x27ba <LCD_voidSendChar+0x22a>
    27b8:	7b c0       	rjmp	.+246    	; 0x28b0 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a e7       	ldi	r20, 0x7A	; 122
    27c8:	54 e4       	ldi	r21, 0x44	; 68
    27ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8c 87       	std	Y+12, r24	; 0x0c
    27d4:	9d 87       	std	Y+13, r25	; 0x0d
    27d6:	ae 87       	std	Y+14, r26	; 0x0e
    27d8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27da:	6c 85       	ldd	r22, Y+12	; 0x0c
    27dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    27de:	8e 85       	ldd	r24, Y+14	; 0x0e
    27e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4a ef       	ldi	r20, 0xFA	; 250
    27e8:	54 e4       	ldi	r21, 0x44	; 68
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	88 87       	std	Y+8, r24	; 0x08
    27f4:	99 87       	std	Y+9, r25	; 0x09
    27f6:	aa 87       	std	Y+10, r26	; 0x0a
    27f8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27fa:	68 85       	ldd	r22, Y+8	; 0x08
    27fc:	79 85       	ldd	r23, Y+9	; 0x09
    27fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2800:	9b 85       	ldd	r25, Y+11	; 0x0b
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e8       	ldi	r20, 0x80	; 128
    2808:	5f e3       	ldi	r21, 0x3F	; 63
    280a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    280e:	88 23       	and	r24, r24
    2810:	2c f4       	brge	.+10     	; 0x281c <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9f 83       	std	Y+7, r25	; 0x07
    2818:	8e 83       	std	Y+6, r24	; 0x06
    281a:	3f c0       	rjmp	.+126    	; 0x289a <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    281c:	68 85       	ldd	r22, Y+8	; 0x08
    281e:	79 85       	ldd	r23, Y+9	; 0x09
    2820:	8a 85       	ldd	r24, Y+10	; 0x0a
    2822:	9b 85       	ldd	r25, Y+11	; 0x0b
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	4c f5       	brge	.+82     	; 0x2886 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2834:	6c 85       	ldd	r22, Y+12	; 0x0c
    2836:	7d 85       	ldd	r23, Y+13	; 0x0d
    2838:	8e 85       	ldd	r24, Y+14	; 0x0e
    283a:	9f 85       	ldd	r25, Y+15	; 0x0f
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9f 83       	std	Y+7, r25	; 0x07
    285a:	8e 83       	std	Y+6, r24	; 0x06
    285c:	0f c0       	rjmp	.+30     	; 0x287c <LCD_voidSendChar+0x2ec>
    285e:	88 ec       	ldi	r24, 0xC8	; 200
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9d 83       	std	Y+5, r25	; 0x05
    2864:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	9d 81       	ldd	r25, Y+5	; 0x05
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_voidSendChar+0x2da>
    286e:	9d 83       	std	Y+5, r25	; 0x05
    2870:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2872:	8e 81       	ldd	r24, Y+6	; 0x06
    2874:	9f 81       	ldd	r25, Y+7	; 0x07
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	9f 83       	std	Y+7, r25	; 0x07
    287a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287c:	8e 81       	ldd	r24, Y+6	; 0x06
    287e:	9f 81       	ldd	r25, Y+7	; 0x07
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	69 f7       	brne	.-38     	; 0x285e <LCD_voidSendChar+0x2ce>
    2884:	24 c0       	rjmp	.+72     	; 0x28ce <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	68 85       	ldd	r22, Y+8	; 0x08
    2888:	79 85       	ldd	r23, Y+9	; 0x09
    288a:	8a 85       	ldd	r24, Y+10	; 0x0a
    288c:	9b 85       	ldd	r25, Y+11	; 0x0b
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9f 83       	std	Y+7, r25	; 0x07
    2898:	8e 83       	std	Y+6, r24	; 0x06
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	9f 81       	ldd	r25, Y+7	; 0x07
    289e:	9b 83       	std	Y+3, r25	; 0x03
    28a0:	8a 83       	std	Y+2, r24	; 0x02
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	9b 81       	ldd	r25, Y+3	; 0x03
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_voidSendChar+0x316>
    28aa:	9b 83       	std	Y+3, r25	; 0x03
    28ac:	8a 83       	std	Y+2, r24	; 0x02
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28b0:	69 89       	ldd	r22, Y+17	; 0x11
    28b2:	7a 89       	ldd	r23, Y+18	; 0x12
    28b4:	8b 89       	ldd	r24, Y+19	; 0x13
    28b6:	9c 89       	ldd	r25, Y+20	; 0x14
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	88 8b       	std	Y+16, r24	; 0x10
    28c2:	88 89       	ldd	r24, Y+16	; 0x10
    28c4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	8a 95       	dec	r24
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_voidSendChar+0x338>
    28cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    28ce:	e1 96       	adiw	r28, 0x31	; 49
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <LCD_voidWriteString>:
void LCD_voidWriteString (u8 * Copy_pu8String)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <LCD_voidWriteString+0x6>
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <LCD_voidWriteString+0x8>
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8String != NULL )
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	9c 81       	ldd	r25, Y+4	; 0x04
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	21 f1       	breq	.+72     	; 0x2940 <LCD_voidWriteString+0x60>
	{
	    u8 x = 0;
    28f8:	1a 82       	std	Y+2, r1	; 0x02
	    u8 i = 0;
    28fa:	19 82       	std	Y+1, r1	; 0x01
    28fc:	16 c0       	rjmp	.+44     	; 0x292a <LCD_voidWriteString+0x4a>
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	8f 5f       	subi	r24, 0xFF	; 255
    2902:	8a 83       	std	Y+2, r24	; 0x02
    2904:	0e c0       	rjmp	.+28     	; 0x2922 <LCD_voidWriteString+0x42>
		 for(  ; i < x; i++)
		 {
		  /* Write Character on LCD */
		  LCD_voidSendChar (Copy_pu8String[i]);
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	28 2f       	mov	r18, r24
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	fc 01       	movw	r30, r24
    2912:	e2 0f       	add	r30, r18
    2914:	f3 1f       	adc	r31, r19
    2916:	80 81       	ld	r24, Z
    2918:	0e 94 c8 12 	call	0x2590	; 0x2590 <LCD_voidSendChar>
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
		 for(  ; i < x; i++)
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	8f 5f       	subi	r24, 0xFF	; 255
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	99 81       	ldd	r25, Y+1	; 0x01
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	98 17       	cp	r25, r24
    2928:	70 f3       	brcs	.-36     	; 0x2906 <LCD_voidWriteString+0x26>
{
	if(Copy_pu8String != NULL )
	{
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	8b 81       	ldd	r24, Y+3	; 0x03
    2932:	9c 81       	ldd	r25, Y+4	; 0x04
    2934:	fc 01       	movw	r30, r24
    2936:	e2 0f       	add	r30, r18
    2938:	f3 1f       	adc	r31, r19
    293a:	80 81       	ld	r24, Z
    293c:	88 23       	and	r24, r24
    293e:	f9 f6       	brne	.-66     	; 0x28fe <LCD_voidWriteString+0x1e>
		 }
		 
		}
	}
	
}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <LCD_u8_GoTo_XY>:
u8 LCD_u8_GoTo_XY     (u8 Copy_u8X,u8 Copy_u8Y)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <LCD_u8_GoTo_XY+0x6>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <LCD_u8_GoTo_XY+0x8>
    2956:	0f 92       	push	r0
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	8a 83       	std	Y+2, r24	; 0x02
    295e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8X <=1)&&(Copy_u8Y <= 39))
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	82 30       	cpi	r24, 0x02	; 2
    2968:	e0 f4       	brcc	.+56     	; 0x29a2 <LCD_u8_GoTo_XY+0x54>
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	88 32       	cpi	r24, 0x28	; 40
    296e:	c8 f4       	brcc	.+50     	; 0x29a2 <LCD_u8_GoTo_XY+0x54>
	{
		switch(Copy_u8X)
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	3d 83       	std	Y+5, r19	; 0x05
    2978:	2c 83       	std	Y+4, r18	; 0x04
    297a:	8c 81       	ldd	r24, Y+4	; 0x04
    297c:	9d 81       	ldd	r25, Y+5	; 0x05
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	31 f0       	breq	.+12     	; 0x298e <LCD_u8_GoTo_XY+0x40>
    2982:	2c 81       	ldd	r18, Y+4	; 0x04
    2984:	3d 81       	ldd	r19, Y+5	; 0x05
    2986:	21 30       	cpi	r18, 0x01	; 1
    2988:	31 05       	cpc	r19, r1
    298a:	31 f0       	breq	.+12     	; 0x2998 <LCD_u8_GoTo_XY+0x4a>
    298c:	0b c0       	rjmp	.+22     	; 0x29a4 <LCD_u8_GoTo_XY+0x56>
		{
		case LCD_u8_LINE0 : LCD_voidSendCmnd(0x80 + Copy_u8Y);break;
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	80 58       	subi	r24, 0x80	; 128
    2992:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    2996:	06 c0       	rjmp	.+12     	; 0x29a4 <LCD_u8_GoTo_XY+0x56>

		case LCD_u8_LINE1 : LCD_voidSendCmnd(0xC0 + Copy_u8Y);break;
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	80 54       	subi	r24, 0x40	; 64
    299c:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <LCD_u8_GoTo_XY+0x56>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    29a2:	19 82       	std	Y+1, r1	; 0x01
	}

return Local_u8ReturnState;
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber (u32  Copy_u32Num)
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	66 97       	sbiw	r28, 0x16	; 22
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	6b 8b       	std	Y+19, r22	; 0x13
    29cc:	7c 8b       	std	Y+20, r23	; 0x14
    29ce:	8d 8b       	std	Y+21, r24	; 0x15
    29d0:	9e 8b       	std	Y+22, r25	; 0x16

	u8 Arr[10];
	u8 Local_Remainder = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	88 87       	std	Y+8, r24	; 0x08
	u32 Local_Number = Copy_u32Num;
    29d6:	8b 89       	ldd	r24, Y+19	; 0x13
    29d8:	9c 89       	ldd	r25, Y+20	; 0x14
    29da:	ad 89       	ldd	r26, Y+21	; 0x15
    29dc:	be 89       	ldd	r27, Y+22	; 0x16
    29de:	8c 83       	std	Y+4, r24	; 0x04
    29e0:	9d 83       	std	Y+5, r25	; 0x05
    29e2:	ae 83       	std	Y+6, r26	; 0x06
    29e4:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_Counter = 0;
    29e6:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    29e8:	8a e0       	ldi	r24, 0x0A	; 10
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	42 c0       	rjmp	.+132    	; 0x2a72 <LCD_voidWriteNumber+0xbc>
	{
		Local_Remainder = Local_Number % 10 ;
    29ee:	8c 81       	ldd	r24, Y+4	; 0x04
    29f0:	9d 81       	ldd	r25, Y+5	; 0x05
    29f2:	ae 81       	ldd	r26, Y+6	; 0x06
    29f4:	bf 81       	ldd	r27, Y+7	; 0x07
    29f6:	2a e0       	ldi	r18, 0x0A	; 10
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__udivmodsi4>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	88 87       	std	Y+8, r24	; 0x08
		Local_Number    = Local_Number /10 ;
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	ae 81       	ldd	r26, Y+6	; 0x06
    2a12:	bf 81       	ldd	r27, Y+7	; 0x07
    2a14:	2a e0       	ldi	r18, 0x0A	; 10
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__udivmodsi4>
    2a24:	da 01       	movw	r26, r20
    2a26:	c9 01       	movw	r24, r18
    2a28:	8c 83       	std	Y+4, r24	; 0x04
    2a2a:	9d 83       	std	Y+5, r25	; 0x05
    2a2c:	ae 83       	std	Y+6, r26	; 0x06
    2a2e:	bf 83       	std	Y+7, r27	; 0x07

		if((Local_Remainder ==0) && (Local_Number<1) && (Local_Counter>0) )
    2a30:	88 85       	ldd	r24, Y+8	; 0x08
    2a32:	88 23       	and	r24, r24
    2a34:	59 f4       	brne	.+22     	; 0x2a4c <LCD_voidWriteNumber+0x96>
    2a36:	8c 81       	ldd	r24, Y+4	; 0x04
    2a38:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3a:	ae 81       	ldd	r26, Y+6	; 0x06
    2a3c:	bf 81       	ldd	r27, Y+7	; 0x07
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	a1 05       	cpc	r26, r1
    2a42:	b1 05       	cpc	r27, r1
    2a44:	19 f4       	brne	.+6      	; 0x2a4c <LCD_voidWriteNumber+0x96>
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	88 23       	and	r24, r24
    2a4a:	b9 f4       	brne	.+46     	; 0x2a7a <LCD_voidWriteNumber+0xc4>
		{
			break;
		}
		Local_Counter ++;
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	8f 5f       	subi	r24, 0xFF	; 255
    2a50:	8b 83       	std	Y+3, r24	; 0x03
		Arr[initial-1] = Local_Remainder ;
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	88 2f       	mov	r24, r24
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9c 01       	movw	r18, r24
    2a5a:	21 50       	subi	r18, 0x01	; 1
    2a5c:	30 40       	sbci	r19, 0x00	; 0
    2a5e:	ce 01       	movw	r24, r28
    2a60:	09 96       	adiw	r24, 0x09	; 9
    2a62:	fc 01       	movw	r30, r24
    2a64:	e2 0f       	add	r30, r18
    2a66:	f3 1f       	adc	r31, r19
    2a68:	88 85       	ldd	r24, Y+8	; 0x08
    2a6a:	80 83       	st	Z, r24
	u32 Local_Number = Copy_u32Num;
	u8 Local_Counter = 0;
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	81 50       	subi	r24, 0x01	; 1
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	88 23       	and	r24, r24
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <LCD_voidWriteNumber+0xc4>
    2a78:	ba cf       	rjmp	.-140    	; 0x29ee <LCD_voidWriteNumber+0x38>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    2a7a:	8a e0       	ldi	r24, 0x0A	; 10
    2a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7e:	89 1b       	sub	r24, r25
    2a80:	8a 83       	std	Y+2, r24	; 0x02
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <LCD_voidWriteNumber+0xec>
	{
		LCD_voidSendChar(Arr[Local_Counter2]+48);
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	09 96       	adiw	r24, 0x09	; 9
    2a8e:	fc 01       	movw	r30, r24
    2a90:	e2 0f       	add	r30, r18
    2a92:	f3 1f       	adc	r31, r19
    2a94:	80 81       	ld	r24, Z
    2a96:	80 5d       	subi	r24, 0xD0	; 208
    2a98:	0e 94 c8 12 	call	0x2590	; 0x2590 <LCD_voidSendChar>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	8a 83       	std	Y+2, r24	; 0x02
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	8a 30       	cpi	r24, 0x0A	; 10
    2aa6:	70 f3       	brcs	.-36     	; 0x2a84 <LCD_voidWriteNumber+0xce>
		LCD_voidSendChar(Arr[Local_Counter2]+48);
	}



}
    2aa8:	66 96       	adiw	r28, 0x16	; 22
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharNo,u8 Copy_u8X,u8 Copy_u8Y,u8 * Copy_PSpecialChar)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	28 97       	sbiw	r28, 0x08	; 8
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	8a 83       	std	Y+2, r24	; 0x02
    2ad0:	6b 83       	std	Y+3, r22	; 0x03
    2ad2:	4c 83       	std	Y+4, r20	; 0x04
    2ad4:	3e 83       	std	Y+6, r19	; 0x06
    2ad6:	2d 83       	std	Y+5, r18	; 0x05

	switch(Copy_u8CharNo)
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	38 87       	std	Y+8, r19	; 0x08
    2ae0:	2f 83       	std	Y+7, r18	; 0x07
    2ae2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ae4:	98 85       	ldd	r25, Y+8	; 0x08
    2ae6:	83 30       	cpi	r24, 0x03	; 3
    2ae8:	91 05       	cpc	r25, r1
    2aea:	a9 f1       	breq	.+106    	; 0x2b56 <LCD_voidSendSpecialChar+0x9c>
    2aec:	2f 81       	ldd	r18, Y+7	; 0x07
    2aee:	38 85       	ldd	r19, Y+8	; 0x08
    2af0:	24 30       	cpi	r18, 0x04	; 4
    2af2:	31 05       	cpc	r19, r1
    2af4:	7c f4       	brge	.+30     	; 0x2b14 <LCD_voidSendSpecialChar+0x5a>
    2af6:	8f 81       	ldd	r24, Y+7	; 0x07
    2af8:	98 85       	ldd	r25, Y+8	; 0x08
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	91 05       	cpc	r25, r1
    2afe:	19 f1       	breq	.+70     	; 0x2b46 <LCD_voidSendSpecialChar+0x8c>
    2b00:	2f 81       	ldd	r18, Y+7	; 0x07
    2b02:	38 85       	ldd	r19, Y+8	; 0x08
    2b04:	22 30       	cpi	r18, 0x02	; 2
    2b06:	31 05       	cpc	r19, r1
    2b08:	14 f5       	brge	.+68     	; 0x2b4e <LCD_voidSendSpecialChar+0x94>
    2b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0c:	98 85       	ldd	r25, Y+8	; 0x08
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	b1 f0       	breq	.+44     	; 0x2b3e <LCD_voidSendSpecialChar+0x84>
    2b12:	34 c0       	rjmp	.+104    	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>
    2b14:	2f 81       	ldd	r18, Y+7	; 0x07
    2b16:	38 85       	ldd	r19, Y+8	; 0x08
    2b18:	25 30       	cpi	r18, 0x05	; 5
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	21 f1       	breq	.+72     	; 0x2b66 <LCD_voidSendSpecialChar+0xac>
    2b1e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b20:	98 85       	ldd	r25, Y+8	; 0x08
    2b22:	85 30       	cpi	r24, 0x05	; 5
    2b24:	91 05       	cpc	r25, r1
    2b26:	dc f0       	brlt	.+54     	; 0x2b5e <LCD_voidSendSpecialChar+0xa4>
    2b28:	2f 81       	ldd	r18, Y+7	; 0x07
    2b2a:	38 85       	ldd	r19, Y+8	; 0x08
    2b2c:	26 30       	cpi	r18, 0x06	; 6
    2b2e:	31 05       	cpc	r19, r1
    2b30:	f1 f0       	breq	.+60     	; 0x2b6e <LCD_voidSendSpecialChar+0xb4>
    2b32:	8f 81       	ldd	r24, Y+7	; 0x07
    2b34:	98 85       	ldd	r25, Y+8	; 0x08
    2b36:	87 30       	cpi	r24, 0x07	; 7
    2b38:	91 05       	cpc	r25, r1
    2b3a:	e9 f0       	breq	.+58     	; 0x2b76 <LCD_voidSendSpecialChar+0xbc>
    2b3c:	1f c0       	rjmp	.+62     	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>
	{
	case 0:
		LCD_voidSendCmnd(0b01000000);
    2b3e:	80 e4       	ldi	r24, 0x40	; 64
    2b40:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    2b44:	1b c0       	rjmp	.+54     	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>

		break;
	case 1:
	    LCD_voidSendCmnd(0b01001000);
    2b46:	88 e4       	ldi	r24, 0x48	; 72
    2b48:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    2b4c:	17 c0       	rjmp	.+46     	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>
		break;
	case 2:
	    LCD_voidSendCmnd(0b01010000);
    2b4e:	80 e5       	ldi	r24, 0x50	; 80
    2b50:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    2b54:	13 c0       	rjmp	.+38     	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>
		break;
	case 3:
	    LCD_voidSendCmnd(0b01011000);
    2b56:	88 e5       	ldi	r24, 0x58	; 88
    2b58:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>
		break;
	case 4:
	    LCD_voidSendCmnd(0b01100000);
    2b5e:	80 e6       	ldi	r24, 0x60	; 96
    2b60:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    2b64:	0b c0       	rjmp	.+22     	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>
		break;
	case 5:
	    LCD_voidSendCmnd(0b01101000);
    2b66:	88 e6       	ldi	r24, 0x68	; 104
    2b68:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    2b6c:	07 c0       	rjmp	.+14     	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>
		break;
	case 6:
	    LCD_voidSendCmnd(0b01110000);
    2b6e:	80 e7       	ldi	r24, 0x70	; 112
    2b70:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
    2b74:	03 c0       	rjmp	.+6      	; 0x2b7c <LCD_voidSendSpecialChar+0xc2>
		break;
	case 7:
	    LCD_voidSendCmnd(0b01111000);
    2b76:	88 e7       	ldi	r24, 0x78	; 120
    2b78:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    2b7c:	19 82       	std	Y+1, r1	; 0x01
    2b7e:	0e c0       	rjmp	.+28     	; 0x2b9c <LCD_voidSendSpecialChar+0xe2>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e2 0f       	add	r30, r18
    2b8e:	f3 1f       	adc	r31, r19
    2b90:	80 81       	ld	r24, Z
    2b92:	0e 94 c8 12 	call	0x2590	; 0x2590 <LCD_voidSendChar>
	    LCD_voidSendCmnd(0b01111000);
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	88 30       	cpi	r24, 0x08	; 8
    2ba0:	78 f3       	brcs	.-34     	; 0x2b80 <LCD_voidSendSpecialChar+0xc6>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
	 }

	 LCD_u8_GoTo_XY( Copy_u8X, Copy_u8Y);
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	6c 81       	ldd	r22, Y+4	; 0x04
    2ba6:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_u8_GoTo_XY>
	 LCD_voidSendChar(Copy_u8CharNo);
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	0e 94 c8 12 	call	0x2590	; 0x2590 <LCD_voidSendChar>


}
    2bb0:	28 96       	adiw	r28, 0x08	; 8
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <LCD_voidShiftDispRight>:

void LCD_voidShiftDispRight(void)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011100);
    2bca:	8c e1       	ldi	r24, 0x1C	; 28
    2bcc:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
}
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <LCD_voidShiftDispLeft>:
void LCD_voidShiftDispLeft(void)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011000);
    2bde:	88 e1       	ldi	r24, 0x18	; 24
    2be0:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_voidSendCmnd>
}
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <SWICU_voidEnable>:
#include "SWICU_private.h"

static u16 SWICU_u16OnPeriod, SWICU_u16OffPeriod;

void SWICU_voidEnable(void)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
	/* Set CallBack Function */
	EXTI_u8SetCallBack(&SWICU_voidEXTICallBack,EXTI_u8_INT0);
    2bf2:	8b e9       	ldi	r24, 0x9B	; 155
    2bf4:	96 e1       	ldi	r25, 0x16	; 22
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	0e 94 14 0b 	call	0x1628	; 0x1628 <EXTI_u8SetCallBack>
	/* Enable EXTI0 */
	EXTI_u8Enable(EXTI_u8_INT0,EXTI_u8_RISING_EDGE);
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	61 e0       	ldi	r22, 0x01	; 1
    2c00:	0e 94 3c 0b 	call	0x1678	; 0x1678 <EXTI_u8Enable>
}
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <SWICU_voidDisable>:
void SWICU_voidDisable(void)
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
	EXTI_u8Disable(EXTI_u8_INT0);
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <EXTI_u8Disable>
}
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	08 95       	ret

00002c1e <SWICU_u8GetTotalPeriod>:

u8   SWICU_u8GetTotalPeriod(u32 * Copy_u32TotalPeriod)
{
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <SWICU_u8GetTotalPeriod+0x6>
    2c24:	0f 92       	push	r0
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	9b 83       	std	Y+3, r25	; 0x03
    2c2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    2c2e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u32TotalPeriod != NULL)
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	9b 81       	ldd	r25, Y+3	; 0x03
    2c34:	00 97       	sbiw	r24, 0x00	; 0
    2c36:	a9 f0       	breq	.+42     	; 0x2c62 <SWICU_u8GetTotalPeriod+0x44>
	{
		*Copy_u32TotalPeriod = SWICU_u16OnPeriod + SWICU_u16OffPeriod;
    2c38:	20 91 8b 00 	lds	r18, 0x008B
    2c3c:	30 91 8c 00 	lds	r19, 0x008C
    2c40:	80 91 8d 00 	lds	r24, 0x008D
    2c44:	90 91 8e 00 	lds	r25, 0x008E
    2c48:	82 0f       	add	r24, r18
    2c4a:	93 1f       	adc	r25, r19
    2c4c:	cc 01       	movw	r24, r24
    2c4e:	a0 e0       	ldi	r26, 0x00	; 0
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	ea 81       	ldd	r30, Y+2	; 0x02
    2c54:	fb 81       	ldd	r31, Y+3	; 0x03
    2c56:	80 83       	st	Z, r24
    2c58:	91 83       	std	Z+1, r25	; 0x01
    2c5a:	a2 83       	std	Z+2, r26	; 0x02
    2c5c:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8ErrorState = STD_TYPES_OK;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <SWICU_u8GetDutyCycle>:

u8   SWICU_u8GetDutyCycle(u8 * Copy_u8DutyCycle)
{
    2c70:	ef 92       	push	r14
    2c72:	ff 92       	push	r15
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <SWICU_u8GetDutyCycle+0xe>
    2c7e:	0f 92       	push	r0
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	9b 83       	std	Y+3, r25	; 0x03
    2c86:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    2c88:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8DutyCycle != NULL)
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	49 f1       	breq	.+82     	; 0x2ce4 <SWICU_u8GetDutyCycle+0x74>
	{
		*Copy_u8DutyCycle =(u8)((SWICU_u16OnPeriod * 100UL)/(SWICU_u16OnPeriod + SWICU_u16OffPeriod));
    2c92:	80 91 8b 00 	lds	r24, 0x008B
    2c96:	90 91 8c 00 	lds	r25, 0x008C
    2c9a:	cc 01       	movw	r24, r24
    2c9c:	a0 e0       	ldi	r26, 0x00	; 0
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	24 e6       	ldi	r18, 0x64	; 100
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 c9 19 	call	0x3392	; 0x3392 <__mulsi3>
    2cb0:	7b 01       	movw	r14, r22
    2cb2:	8c 01       	movw	r16, r24
    2cb4:	20 91 8b 00 	lds	r18, 0x008B
    2cb8:	30 91 8c 00 	lds	r19, 0x008C
    2cbc:	80 91 8d 00 	lds	r24, 0x008D
    2cc0:	90 91 8e 00 	lds	r25, 0x008E
    2cc4:	82 0f       	add	r24, r18
    2cc6:	93 1f       	adc	r25, r19
    2cc8:	9c 01       	movw	r18, r24
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	c8 01       	movw	r24, r16
    2cd0:	b7 01       	movw	r22, r14
    2cd2:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__udivmodsi4>
    2cd6:	da 01       	movw	r26, r20
    2cd8:	c9 01       	movw	r24, r18
    2cda:	ea 81       	ldd	r30, Y+2	; 0x02
    2cdc:	fb 81       	ldd	r31, Y+3	; 0x03
    2cde:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	08 95       	ret

00002cfa <SWICU_u8GetOnPeriod>:

u8   SWICU_u8GetOnPeriod(u16 * Copy_u8OnPeriod)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <SWICU_u8GetOnPeriod+0x6>
    2d00:	0f 92       	push	r0
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	9b 83       	std	Y+3, r25	; 0x03
    2d08:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    2d0a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8OnPeriod != NULL)
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	51 f0       	breq	.+20     	; 0x2d28 <SWICU_u8GetOnPeriod+0x2e>
	{
		*Copy_u8OnPeriod = SWICU_u16OnPeriod;
    2d14:	80 91 8b 00 	lds	r24, 0x008B
    2d18:	90 91 8c 00 	lds	r25, 0x008C
    2d1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <SWICU_voidEXTICallBack>:

static void SWICU_voidEXTICallBack(void)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <SWICU_voidEXTICallBack+0x6>
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16TimerValue;
	static u8 Local_u8Flag = 0;
	static u16 Local_u16OldValue =0;
	/* Read Timer Value */
	TMR_u8Timer1GetCounterValue(&Local_u16TimerValue);
    2d40:	ce 01       	movw	r24, r28
    2d42:	01 96       	adiw	r24, 0x01	; 1
    2d44:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TMR_u8Timer1GetCounterValue>
	if(Local_u8Flag == 0) /* Rising Edge */
    2d48:	80 91 8a 00 	lds	r24, 0x008A
    2d4c:	88 23       	and	r24, r24
    2d4e:	b1 f4       	brne	.+44     	; 0x2d7c <SWICU_voidEXTICallBack+0x46>
	{
		SWICU_u16OffPeriod = Local_u16TimerValue - Local_u16OldValue;
    2d50:	29 81       	ldd	r18, Y+1	; 0x01
    2d52:	3a 81       	ldd	r19, Y+2	; 0x02
    2d54:	80 91 88 00 	lds	r24, 0x0088
    2d58:	90 91 89 00 	lds	r25, 0x0089
    2d5c:	a9 01       	movw	r20, r18
    2d5e:	48 1b       	sub	r20, r24
    2d60:	59 0b       	sbc	r21, r25
    2d62:	ca 01       	movw	r24, r20
    2d64:	90 93 8e 00 	sts	0x008E, r25
    2d68:	80 93 8d 00 	sts	0x008D, r24
		/* Change Sense Control into Falling Edge */
		EXTI_u8Enable(EXTI_u8_INT0,EXTI_u8_FALLING_EDGE);
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	0e 94 3c 0b 	call	0x1678	; 0x1678 <EXTI_u8Enable>
		/* Change Flag into Falling Edge */
		Local_u8Flag = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	80 93 8a 00 	sts	0x008A, r24
    2d7a:	12 c0       	rjmp	.+36     	; 0x2da0 <SWICU_voidEXTICallBack+0x6a>
	}
	else/* Falling Edge */
	{
		SWICU_u16OnPeriod = Local_u16TimerValue - Local_u16OldValue;
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d80:	20 91 88 00 	lds	r18, 0x0088
    2d84:	30 91 89 00 	lds	r19, 0x0089
    2d88:	82 1b       	sub	r24, r18
    2d8a:	93 0b       	sbc	r25, r19
    2d8c:	90 93 8c 00 	sts	0x008C, r25
    2d90:	80 93 8b 00 	sts	0x008B, r24
		/* Change Sense Control into Rising Edge */
		EXTI_u8Enable(EXTI_u8_INT0,EXTI_u8_RISING_EDGE);
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	61 e0       	ldi	r22, 0x01	; 1
    2d98:	0e 94 3c 0b 	call	0x1678	; 0x1678 <EXTI_u8Enable>
		/* Change Flag into Rising Edge */
		Local_u8Flag = 0;
    2d9c:	10 92 8a 00 	sts	0x008A, r1
	}
	Local_u16OldValue = Local_u16TimerValue;
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	90 93 89 00 	sts	0x0089, r25
    2da8:	80 93 88 00 	sts	0x0088, r24


}
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <TMR_voidTimer0Init>:
static void (*TMR_pfTimer0CTC)(void) = NULL;

volatile static u16 TMR_u16OnPeriod , TMR_u16OffPeriod;

void TMR_voidTimer0Init(void)
{
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
	   }
      #endif
	}
#elif (TIMER0_MODE == FAST_PWM)
	{
		SET_BIT(TMR_u8_TCCR0_REG,6);
    2dbe:	a3 e5       	ldi	r26, 0x53	; 83
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e3 e5       	ldi	r30, 0x53	; 83
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 64       	ori	r24, 0x40	; 64
    2dca:	8c 93       	st	X, r24
		SET_BIT(TMR_u8_TCCR0_REG,3);
    2dcc:	a3 e5       	ldi	r26, 0x53	; 83
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e3 e5       	ldi	r30, 0x53	; 83
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	88 60       	ori	r24, 0x08	; 8
    2dd8:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,5);
	SET_BIT(TMR_u8_TCCR0_REG,4);
}
#elif ((TMR0_COMPARE_OUTPUT_MODE == CLEAR_OC0_ON_COMPARE) || (TMR0_COMPARE_OUTPUT_MODE == NON_INVERTING_PWM))
{
	SET_BIT(TMR_u8_TCCR0_REG,5);
    2dda:	a3 e5       	ldi	r26, 0x53	; 83
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e3 e5       	ldi	r30, 0x53	; 83
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	80 62       	ori	r24, 0x20	; 32
    2de6:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,4);
    2de8:	a3 e5       	ldi	r26, 0x53	; 83
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	e3 e5       	ldi	r30, 0x53	; 83
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	8f 7e       	andi	r24, 0xEF	; 239
    2df4:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,1);
		 SET_BIT(TMR_u8_TCCR0_REG,0);
	}
#elif (TMR0_PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR0_REG,2);
    2df6:	a3 e5       	ldi	r26, 0x53	; 83
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e3 e5       	ldi	r30, 0x53	; 83
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	8b 7f       	andi	r24, 0xFB	; 251
    2e02:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR0_REG,1);
    2e04:	a3 e5       	ldi	r26, 0x53	; 83
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e3 e5       	ldi	r30, 0x53	; 83
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	82 60       	ori	r24, 0x02	; 2
    2e10:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,0);
    2e12:	a3 e5       	ldi	r26, 0x53	; 83
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	e3 e5       	ldi	r30, 0x53	; 83
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8e 7f       	andi	r24, 0xFE	; 254
    2e1e:	8c 93       	st	X, r24
//		/* Prescaler => 8 */
//   	CLR_BIT(TMR_u8_TCCR0_REG,2);
//	    SET_BIT(TMR_u8_TCCR0_REG,1);
//	    CLR_BIT(TMR_u8_TCCR0_REG,0);

}
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <TMR_u8Timer1GetCounterValue>:

u8   TMR_u8Timer1GetCounterValue(u16 * Copy_pu16CounterValue)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <TMR_u8Timer1GetCounterValue+0x6>
    2e2c:	0f 92       	push	r0
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	9b 83       	std	Y+3, r25	; 0x03
    2e34:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    2e36:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16CounterValue != NULL)
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	51 f0       	breq	.+20     	; 0x2e54 <TMR_u8Timer1GetCounterValue+0x2e>
	{
		*Copy_pu16CounterValue = TMR_u16_TCNT1_REG;
    2e40:	ec e4       	ldi	r30, 0x4C	; 76
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	ea 81       	ldd	r30, Y+2	; 0x02
    2e4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <TMR_voidTimer1Init>:

void TMR_voidTimer1Init(void)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
//	    CLR_BIT(TMR_u8_TCCR0_REG,0);

	 /* Timer1 Mode IF Selection */
#if (TIMER1_MODE == NORMAL_MODE)
	{
         CLR_BIT(TMR_u8_TCCR1A_REG,1);
    2e6a:	af e4       	ldi	r26, 0x4F	; 79
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	ef e4       	ldi	r30, 0x4F	; 79
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	8d 7f       	andi	r24, 0xFD	; 253
    2e76:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1A_REG,0);
    2e78:	af e4       	ldi	r26, 0x4F	; 79
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	ef e4       	ldi	r30, 0x4F	; 79
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	8e 7f       	andi	r24, 0xFE	; 254
    2e84:	8c 93       	st	X, r24
	   	 CLR_BIT(TMR_u8_TCCR1B_REG,4);
    2e86:	ae e4       	ldi	r26, 0x4E	; 78
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	ee e4       	ldi	r30, 0x4E	; 78
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	8f 7e       	andi	r24, 0xEF	; 239
    2e92:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,3);
    2e94:	ae e4       	ldi	r26, 0x4E	; 78
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	ee e4       	ldi	r30, 0x4E	; 78
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	87 7f       	andi	r24, 0xF7	; 247
    2ea0:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1A_REG,7);
	SET_BIT(TMR_u8_TCCR1A_REG,6);
}
#elif ((TMR1_CHANNELA_COMPARE_OUTPUT_MODE == CLEAR_OC0_ON_COMPARE) || (TMR1_CHANNELA_COMPARE_OUTPUT_MODE == NON_INVERTING_PWM))
{
	SET_BIT(TMR_u8_TCCR1A_REG,7);
    2ea2:	af e4       	ldi	r26, 0x4F	; 79
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	ef e4       	ldi	r30, 0x4F	; 79
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	80 68       	ori	r24, 0x80	; 128
    2eae:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1A_REG,6);
    2eb0:	af e4       	ldi	r26, 0x4F	; 79
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	ef e4       	ldi	r30, 0x4F	; 79
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	8f 7b       	andi	r24, 0xBF	; 191
    2ebc:	8c 93       	st	X, r24
CLR_BIT(TMR_u8_TCCR1A_REG,5);
SET_BIT(TMR_u8_TCCR1A_REG,4);
}
#elif ((TMR1_CHANNELB_COMPARE_OUTPUT_MODE == CLEAR_OC0_ON_COMPARE) || (TMR1_CHANNELB_COMPARE_OUTPUT_MODE == NON_INVERTING_PWM))
{
SET_BIT(TMR_u8_TCCR1A_REG,5);
    2ebe:	af e4       	ldi	r26, 0x4F	; 79
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	ef e4       	ldi	r30, 0x4F	; 79
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	80 62       	ori	r24, 0x20	; 32
    2eca:	8c 93       	st	X, r24
CLR_BIT(TMR_u8_TCCR1A_REG,4);
    2ecc:	af e4       	ldi	r26, 0x4F	; 79
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	ef e4       	ldi	r30, 0x4F	; 79
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	8f 7e       	andi	r24, 0xEF	; 239
    2ed8:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,1);
		 SET_BIT(TMR_u8_TCCR1B_REG,0);
	}
#elif (TMR1_PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR1B_REG,2);
    2eda:	ae e4       	ldi	r26, 0x4E	; 78
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	ee e4       	ldi	r30, 0x4E	; 78
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8b 7f       	andi	r24, 0xFB	; 251
    2ee6:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR1B_REG,1);
    2ee8:	ae e4       	ldi	r26, 0x4E	; 78
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	ee e4       	ldi	r30, 0x4E	; 78
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	82 60       	ori	r24, 0x02	; 2
    2ef4:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,0);
    2ef6:	ae e4       	ldi	r26, 0x4E	; 78
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	ee e4       	ldi	r30, 0x4E	; 78
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	8e 7f       	andi	r24, 0xFE	; 254
    2f02:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR1B_REG,0);
	}
#endif


}
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <TMR_voidTimer1SetCompareMatchValueChannelA>:

void TMR_voidTimer1SetCompareMatchValueChannelA(u16 Copy_u16CompareMatchValue)
{
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <TMR_voidTimer1SetCompareMatchValueChannelA+0x6>
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
	TMR_u16_OCR1A_REG = Copy_u16CompareMatchValue;
    2f18:	ea e4       	ldi	r30, 0x4A	; 74
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
}
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <TMR_voidTimer0SetCompareMatchValue>:

void TMR_voidTimer0SetCompareMatchValue(u8 Copy_u8OCRValue)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	0f 92       	push	r0
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	89 83       	std	Y+1, r24	; 0x01
	TMR_u8_OCR0_REG = Copy_u8OCRValue;
    2f3a:	ec e5       	ldi	r30, 0x5C	; 92
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	80 83       	st	Z, r24
}
    2f42:	0f 90       	pop	r0
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	08 95       	ret

00002f4a <TMR_u8Timer0OVFSetCallBack>:

u8  TMR_u8Timer0OVFSetCallBack(void(*Copy_pf)(void))
{
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <TMR_u8Timer0OVFSetCallBack+0x6>
    2f50:	0f 92       	push	r0
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	9b 83       	std	Y+3, r25	; 0x03
    2f58:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	39 f0       	breq	.+14     	; 0x2f74 <TMR_u8Timer0OVFSetCallBack+0x2a>
	{
		TMR_pfTimer0OVF = Copy_pf;
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6a:	90 93 90 00 	sts	0x0090, r25
    2f6e:	80 93 8f 00 	sts	0x008F, r24
    2f72:	01 c0       	rjmp	.+2      	; 0x2f76 <TMR_u8Timer0OVFSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    2f74:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <TMR_u8Timer0CTCSetCallBack>:

u8  TMR_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	00 d0       	rcall	.+0      	; 0x2f8a <TMR_u8Timer0CTCSetCallBack+0x6>
    2f8a:	0f 92       	push	r0
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	9b 83       	std	Y+3, r25	; 0x03
    2f92:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	39 f0       	breq	.+14     	; 0x2fae <TMR_u8Timer0CTCSetCallBack+0x2a>
	{
		TMR_pfTimer0CTC = Copy_pf;
    2fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa4:	90 93 92 00 	sts	0x0092, r25
    2fa8:	80 93 91 00 	sts	0x0091, r24
    2fac:	01 c0       	rjmp	.+2      	; 0x2fb0 <TMR_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    2fae:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <TMR_voidHWICUEnable>:

void TMR_voidHWICUEnable(void)
{
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
	/* Select Triggering Interrupt source of ICU = Rising Edge */
	SET_BIT(TMR_u8_TCCR1B_REG,6);
    2fc6:	ae e4       	ldi	r26, 0x4E	; 78
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	ee e4       	ldi	r30, 0x4E	; 78
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	80 64       	ori	r24, 0x40	; 64
    2fd2:	8c 93       	st	X, r24

	/* Enable ICU Interrupt */
	SET_BIT(TMR_u8_TIMSK_REG,5);
    2fd4:	a9 e5       	ldi	r26, 0x59	; 89
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e9 e5       	ldi	r30, 0x59	; 89
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	80 62       	ori	r24, 0x20	; 32
    2fe0:	8c 93       	st	X, r24
}
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <TMR_voidHWICUDisable>:

void TMR_voidHWICUDisable(void)
{
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	/* Disable ICU Interrupt */
	SET_BIT(TMR_u8_TIMSK_REG,5);
    2ff0:	a9 e5       	ldi	r26, 0x59	; 89
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e9 e5       	ldi	r30, 0x59	; 89
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	80 62       	ori	r24, 0x20	; 32
    2ffc:	8c 93       	st	X, r24

}
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <TMR_u8GetPWMTotalPeriod>:

u8   TMR_u8GetPWMTotalPeriod(u32 * Copy_pu32TotalPeriod)
{
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	00 d0       	rcall	.+0      	; 0x300a <TMR_u8GetPWMTotalPeriod+0x6>
    300a:	0f 92       	push	r0
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	9b 83       	std	Y+3, r25	; 0x03
    3012:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    3014:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu32TotalPeriod != NULL)
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	9b 81       	ldd	r25, Y+3	; 0x03
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	a9 f0       	breq	.+42     	; 0x3048 <TMR_u8GetPWMTotalPeriod+0x44>
	{
		*Copy_pu32TotalPeriod = TMR_u16OnPeriod + TMR_u16OffPeriod;
    301e:	20 91 9a 00 	lds	r18, 0x009A
    3022:	30 91 9b 00 	lds	r19, 0x009B
    3026:	80 91 9c 00 	lds	r24, 0x009C
    302a:	90 91 9d 00 	lds	r25, 0x009D
    302e:	82 0f       	add	r24, r18
    3030:	93 1f       	adc	r25, r19
    3032:	cc 01       	movw	r24, r24
    3034:	a0 e0       	ldi	r26, 0x00	; 0
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	ea 81       	ldd	r30, Y+2	; 0x02
    303a:	fb 81       	ldd	r31, Y+3	; 0x03
    303c:	80 83       	st	Z, r24
    303e:	91 83       	std	Z+1, r25	; 0x01
    3040:	a2 83       	std	Z+2, r26	; 0x02
    3042:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8ErrorState = STD_TYPES_OK;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3048:	89 81       	ldd	r24, Y+1	; 0x01
}
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <TMR_u8GetPWMDutyCycle>:

u8   TMR_u8GetPWMDutyCycle(u8 * Copy_pu8DutyCycle)
{
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	00 d0       	rcall	.+0      	; 0x3064 <TMR_u8GetPWMDutyCycle+0xe>
    3064:	0f 92       	push	r0
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	9b 83       	std	Y+3, r25	; 0x03
    306c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    306e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8DutyCycle != NULL)
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	9b 81       	ldd	r25, Y+3	; 0x03
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	49 f1       	breq	.+82     	; 0x30ca <TMR_u8GetPWMDutyCycle+0x74>
	{
		*Copy_pu8DutyCycle =(u8)((TMR_u16OnPeriod * 100UL)/(TMR_u16OnPeriod + TMR_u16OffPeriod));
    3078:	80 91 9a 00 	lds	r24, 0x009A
    307c:	90 91 9b 00 	lds	r25, 0x009B
    3080:	cc 01       	movw	r24, r24
    3082:	a0 e0       	ldi	r26, 0x00	; 0
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	24 e6       	ldi	r18, 0x64	; 100
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	50 e0       	ldi	r21, 0x00	; 0
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	0e 94 c9 19 	call	0x3392	; 0x3392 <__mulsi3>
    3096:	7b 01       	movw	r14, r22
    3098:	8c 01       	movw	r16, r24
    309a:	20 91 9a 00 	lds	r18, 0x009A
    309e:	30 91 9b 00 	lds	r19, 0x009B
    30a2:	80 91 9c 00 	lds	r24, 0x009C
    30a6:	90 91 9d 00 	lds	r25, 0x009D
    30aa:	82 0f       	add	r24, r18
    30ac:	93 1f       	adc	r25, r19
    30ae:	9c 01       	movw	r18, r24
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	50 e0       	ldi	r21, 0x00	; 0
    30b4:	c8 01       	movw	r24, r16
    30b6:	b7 01       	movw	r22, r14
    30b8:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__udivmodsi4>
    30bc:	da 01       	movw	r26, r20
    30be:	c9 01       	movw	r24, r18
    30c0:	ea 81       	ldd	r30, Y+2	; 0x02
    30c2:	fb 81       	ldd	r31, Y+3	; 0x03
    30c4:	80 83       	st	Z, r24

		Local_u8ErrorState = STD_TYPES_OK;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	1f 91       	pop	r17
    30d8:	0f 91       	pop	r16
    30da:	ff 90       	pop	r15
    30dc:	ef 90       	pop	r14
    30de:	08 95       	ret

000030e0 <TMR_u8GetPWMOnPeriod>:

u8   TMR_u8GetPWMOnPeriod(u16 * Copy_pu16OnPeriod)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <TMR_u8GetPWMOnPeriod+0x6>
    30e6:	0f 92       	push	r0
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	9b 83       	std	Y+3, r25	; 0x03
    30ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    30f0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16OnPeriod != NULL)
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	9b 81       	ldd	r25, Y+3	; 0x03
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	51 f0       	breq	.+20     	; 0x310e <TMR_u8GetPWMOnPeriod+0x2e>
	{
		*Copy_pu16OnPeriod = TMR_u16OnPeriod;
    30fa:	80 91 9a 00 	lds	r24, 0x009A
    30fe:	90 91 9b 00 	lds	r25, 0x009B
    3102:	ea 81       	ldd	r30, Y+2	; 0x02
    3104:	fb 81       	ldd	r31, Y+3	; 0x03
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    310e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <__vector_11>:

/* Prototype of ISR Timer0 OVF */
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
    311c:	1f 92       	push	r1
    311e:	0f 92       	push	r0
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	0f 92       	push	r0
    3124:	11 24       	eor	r1, r1
    3126:	2f 93       	push	r18
    3128:	3f 93       	push	r19
    312a:	4f 93       	push	r20
    312c:	5f 93       	push	r21
    312e:	6f 93       	push	r22
    3130:	7f 93       	push	r23
    3132:	8f 93       	push	r24
    3134:	9f 93       	push	r25
    3136:	af 93       	push	r26
    3138:	bf 93       	push	r27
    313a:	ef 93       	push	r30
    313c:	ff 93       	push	r31
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    3146:	80 91 93 00 	lds	r24, 0x0093
    314a:	90 91 94 00 	lds	r25, 0x0094
    314e:	01 96       	adiw	r24, 0x01	; 1
    3150:	90 93 94 00 	sts	0x0094, r25
    3154:	80 93 93 00 	sts	0x0093, r24
	if(Local_u16Counter == 3907)
    3158:	80 91 93 00 	lds	r24, 0x0093
    315c:	90 91 94 00 	lds	r25, 0x0094
    3160:	2f e0       	ldi	r18, 0x0F	; 15
    3162:	83 34       	cpi	r24, 0x43	; 67
    3164:	92 07       	cpc	r25, r18
    3166:	99 f4       	brne	.+38     	; 0x318e <__vector_11+0x72>
	{
		/* Set Preload Value */
		TMR_u8_TCNT0_REG = PRELOAD_VALUE;
    3168:	e2 e5       	ldi	r30, 0x52	; 82
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 ec       	ldi	r24, 0xC0	; 192
    316e:	80 83       	st	Z, r24
		/* Reset Counter */
		Local_u16Counter = 0;
    3170:	10 92 94 00 	sts	0x0094, r1
    3174:	10 92 93 00 	sts	0x0093, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0OVF != NULL)
    3178:	80 91 8f 00 	lds	r24, 0x008F
    317c:	90 91 90 00 	lds	r25, 0x0090
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	29 f0       	breq	.+10     	; 0x318e <__vector_11+0x72>
		{
			TMR_pfTimer0OVF();
    3184:	e0 91 8f 00 	lds	r30, 0x008F
    3188:	f0 91 90 00 	lds	r31, 0x0090
    318c:	09 95       	icall
		}
	}
}
    318e:	cf 91       	pop	r28
    3190:	df 91       	pop	r29
    3192:	ff 91       	pop	r31
    3194:	ef 91       	pop	r30
    3196:	bf 91       	pop	r27
    3198:	af 91       	pop	r26
    319a:	9f 91       	pop	r25
    319c:	8f 91       	pop	r24
    319e:	7f 91       	pop	r23
    31a0:	6f 91       	pop	r22
    31a2:	5f 91       	pop	r21
    31a4:	4f 91       	pop	r20
    31a6:	3f 91       	pop	r19
    31a8:	2f 91       	pop	r18
    31aa:	0f 90       	pop	r0
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	0f 90       	pop	r0
    31b0:	1f 90       	pop	r1
    31b2:	18 95       	reti

000031b4 <__vector_10>:
/* Prototype of ISR Timer0 Compare Match */
void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
    31b4:	1f 92       	push	r1
    31b6:	0f 92       	push	r0
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	0f 92       	push	r0
    31bc:	11 24       	eor	r1, r1
    31be:	2f 93       	push	r18
    31c0:	3f 93       	push	r19
    31c2:	4f 93       	push	r20
    31c4:	5f 93       	push	r21
    31c6:	6f 93       	push	r22
    31c8:	7f 93       	push	r23
    31ca:	8f 93       	push	r24
    31cc:	9f 93       	push	r25
    31ce:	af 93       	push	r26
    31d0:	bf 93       	push	r27
    31d2:	ef 93       	push	r30
    31d4:	ff 93       	push	r31
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    31de:	80 91 95 00 	lds	r24, 0x0095
    31e2:	90 91 96 00 	lds	r25, 0x0096
    31e6:	01 96       	adiw	r24, 0x01	; 1
    31e8:	90 93 96 00 	sts	0x0096, r25
    31ec:	80 93 95 00 	sts	0x0095, r24
	if(Local_u16Counter == 10000)
    31f0:	80 91 95 00 	lds	r24, 0x0095
    31f4:	90 91 96 00 	lds	r25, 0x0096
    31f8:	27 e2       	ldi	r18, 0x27	; 39
    31fa:	80 31       	cpi	r24, 0x10	; 16
    31fc:	92 07       	cpc	r25, r18
    31fe:	79 f4       	brne	.+30     	; 0x321e <__vector_10+0x6a>
	{
		/* Reset Counter */
		Local_u16Counter = 0;
    3200:	10 92 96 00 	sts	0x0096, r1
    3204:	10 92 95 00 	sts	0x0095, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0CTC != NULL)
    3208:	80 91 91 00 	lds	r24, 0x0091
    320c:	90 91 92 00 	lds	r25, 0x0092
    3210:	00 97       	sbiw	r24, 0x00	; 0
    3212:	29 f0       	breq	.+10     	; 0x321e <__vector_10+0x6a>
		{
			TMR_pfTimer0CTC();
    3214:	e0 91 91 00 	lds	r30, 0x0091
    3218:	f0 91 92 00 	lds	r31, 0x0092
    321c:	09 95       	icall
		}
	}
}
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	ff 91       	pop	r31
    3224:	ef 91       	pop	r30
    3226:	bf 91       	pop	r27
    3228:	af 91       	pop	r26
    322a:	9f 91       	pop	r25
    322c:	8f 91       	pop	r24
    322e:	7f 91       	pop	r23
    3230:	6f 91       	pop	r22
    3232:	5f 91       	pop	r21
    3234:	4f 91       	pop	r20
    3236:	3f 91       	pop	r19
    3238:	2f 91       	pop	r18
    323a:	0f 90       	pop	r0
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	0f 90       	pop	r0
    3240:	1f 90       	pop	r1
    3242:	18 95       	reti

00003244 <__vector_6>:

/* Prototype of ISR Timer1 ICU */
void __vector_6(void)     __attribute__((signal));
void __vector_6(void)
{
    3244:	1f 92       	push	r1
    3246:	0f 92       	push	r0
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	0f 92       	push	r0
    324c:	11 24       	eor	r1, r1
    324e:	2f 93       	push	r18
    3250:	3f 93       	push	r19
    3252:	8f 93       	push	r24
    3254:	9f 93       	push	r25
    3256:	af 93       	push	r26
    3258:	bf 93       	push	r27
    325a:	ef 93       	push	r30
    325c:	ff 93       	push	r31
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	00 d0       	rcall	.+0      	; 0x3264 <__vector_6+0x20>
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16TimerValue = TMR_u16_ICR1_REG;
    3268:	e6 e4       	ldi	r30, 0x46	; 70
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	9a 83       	std	Y+2, r25	; 0x02
    3272:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8Flag = 0;
	static u16 Local_u16OldValue = 0;
	if(Local_u8Flag == 0) /* Rising Edge */
    3274:	80 91 99 00 	lds	r24, 0x0099
    3278:	88 23       	and	r24, r24
    327a:	b9 f4       	brne	.+46     	; 0x32aa <__vector_6+0x66>
	{
		TMR_u16OffPeriod = Local_u16TimerValue - Local_u16OldValue;
    327c:	20 91 97 00 	lds	r18, 0x0097
    3280:	30 91 98 00 	lds	r19, 0x0098
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	82 1b       	sub	r24, r18
    328a:	93 0b       	sbc	r25, r19
    328c:	90 93 9d 00 	sts	0x009D, r25
    3290:	80 93 9c 00 	sts	0x009C, r24
		/* Trigger Source into Falling Edge */
		CLR_BIT(TMR_u8_TCCR1B_REG,6);
    3294:	ae e4       	ldi	r26, 0x4E	; 78
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	ee e4       	ldi	r30, 0x4E	; 78
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	8f 7b       	andi	r24, 0xBF	; 191
    32a0:	8c 93       	st	X, r24
		Local_u8Flag = 1;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	80 93 99 00 	sts	0x0099, r24
    32a8:	15 c0       	rjmp	.+42     	; 0x32d4 <__vector_6+0x90>
	}
	else
	{
		TMR_u16OnPeriod = Local_u16TimerValue - Local_u16OldValue;
    32aa:	20 91 97 00 	lds	r18, 0x0097
    32ae:	30 91 98 00 	lds	r19, 0x0098
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	9a 81       	ldd	r25, Y+2	; 0x02
    32b6:	82 1b       	sub	r24, r18
    32b8:	93 0b       	sbc	r25, r19
    32ba:	90 93 9b 00 	sts	0x009B, r25
    32be:	80 93 9a 00 	sts	0x009A, r24
		/* Trigger Source into Rising Edge */
		SET_BIT(TMR_u8_TCCR1B_REG,6);
    32c2:	ae e4       	ldi	r26, 0x4E	; 78
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	ee e4       	ldi	r30, 0x4E	; 78
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	80 81       	ld	r24, Z
    32cc:	80 64       	ori	r24, 0x40	; 64
    32ce:	8c 93       	st	X, r24
		Local_u8Flag = 0;
    32d0:	10 92 99 00 	sts	0x0099, r1
	}
	Local_u16OldValue = Local_u16TimerValue;
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	90 93 98 00 	sts	0x0098, r25
    32dc:	80 93 97 00 	sts	0x0097, r24
}
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	ff 91       	pop	r31
    32ea:	ef 91       	pop	r30
    32ec:	bf 91       	pop	r27
    32ee:	af 91       	pop	r26
    32f0:	9f 91       	pop	r25
    32f2:	8f 91       	pop	r24
    32f4:	3f 91       	pop	r19
    32f6:	2f 91       	pop	r18
    32f8:	0f 90       	pop	r0
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	0f 90       	pop	r0
    32fe:	1f 90       	pop	r1
    3300:	18 95       	reti

00003302 <main>:
#include "LCD_interface.h"
#include "SWICU_interface.h"


int main(void)
{
    3302:	df 93       	push	r29
    3304:	cf 93       	push	r28
    3306:	00 d0       	rcall	.+0      	; 0x3308 <main+0x6>
    3308:	00 d0       	rcall	.+0      	; 0x330a <main+0x8>
    330a:	0f 92       	push	r0
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32TotalPeriod;
	u8 Local_u8DutyCycle;

	/* DIO Init */
	DIO_u8Init();
    3310:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8Init>

	/* Global Interrupt Enable */
	GI_voidEnable();
    3314:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GI_voidEnable>

	/* Turn on Timer1 */
	TMR_voidTimer1Init();
    3318:	0e 94 31 17 	call	0x2e62	; 0x2e62 <TMR_voidTimer1Init>

//	/* SWICU Enable */
//	SWICU_voidEnable();

	/* HW ICU Enable */
	TMR_voidHWICUEnable();
    331c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <TMR_voidHWICUEnable>

	/* Set Duty Cycle Of The PWM */
	TMR_voidTimer0SetCompareMatchValue(127);
    3320:	8f e7       	ldi	r24, 0x7F	; 127
    3322:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <TMR_voidTimer0SetCompareMatchValue>
	/* Enable Timer0 To Generate PWM */
	TMR_voidTimer0Init();
    3326:	0e 94 db 16 	call	0x2db6	; 0x2db6 <TMR_voidTimer0Init>

	/* Enable LCD */
	LCD_voidInit();
    332a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <LCD_voidInit>

	while(1)
	{
//		SWICU_u8GetTotalPeriod(&Local_u32TotalPeriod);
//		SWICU_u8GetDutyCycle(&Local_u8DutyCycle);
		TMR_u8GetPWMTotalPeriod(&Local_u32TotalPeriod);
    332e:	ce 01       	movw	r24, r28
    3330:	01 96       	adiw	r24, 0x01	; 1
    3332:	0e 94 02 18 	call	0x3004	; 0x3004 <TMR_u8GetPWMTotalPeriod>
		TMR_u8GetPWMDutyCycle(&Local_u8DutyCycle);
    3336:	ce 01       	movw	r24, r28
    3338:	05 96       	adiw	r24, 0x05	; 5
    333a:	0e 94 2b 18 	call	0x3056	; 0x3056 <TMR_u8GetPWMDutyCycle>
		LCD_u8_GoTo_XY(0,0);
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_u8_GoTo_XY>
		LCD_voidWriteString("Duty = ");
    3346:	80 e6       	ldi	r24, 0x60	; 96
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_voidWriteString>
		LCD_voidWriteNumber(Local_u8DutyCycle);
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	a0 e0       	ldi	r26, 0x00	; 0
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_voidWriteNumber>
		LCD_voidWriteString(" %");
    3360:	88 e6       	ldi	r24, 0x68	; 104
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_voidWriteString>
		LCD_u8_GoTo_XY(1,0);
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_u8_GoTo_XY>
		LCD_voidWriteString("T.Prd = ");
    3370:	8b e6       	ldi	r24, 0x6B	; 107
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_voidWriteString>
		LCD_voidWriteNumber(Local_u32TotalPeriod);
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	9a 81       	ldd	r25, Y+2	; 0x02
    337c:	ab 81       	ldd	r26, Y+3	; 0x03
    337e:	bc 81       	ldd	r27, Y+4	; 0x04
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_voidWriteNumber>
		LCD_voidWriteString(" usec");
    3388:	84 e7       	ldi	r24, 0x74	; 116
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_voidWriteString>
    3390:	ce cf       	rjmp	.-100    	; 0x332e <main+0x2c>

00003392 <__mulsi3>:
    3392:	62 9f       	mul	r22, r18
    3394:	d0 01       	movw	r26, r0
    3396:	73 9f       	mul	r23, r19
    3398:	f0 01       	movw	r30, r0
    339a:	82 9f       	mul	r24, r18
    339c:	e0 0d       	add	r30, r0
    339e:	f1 1d       	adc	r31, r1
    33a0:	64 9f       	mul	r22, r20
    33a2:	e0 0d       	add	r30, r0
    33a4:	f1 1d       	adc	r31, r1
    33a6:	92 9f       	mul	r25, r18
    33a8:	f0 0d       	add	r31, r0
    33aa:	83 9f       	mul	r24, r19
    33ac:	f0 0d       	add	r31, r0
    33ae:	74 9f       	mul	r23, r20
    33b0:	f0 0d       	add	r31, r0
    33b2:	65 9f       	mul	r22, r21
    33b4:	f0 0d       	add	r31, r0
    33b6:	99 27       	eor	r25, r25
    33b8:	72 9f       	mul	r23, r18
    33ba:	b0 0d       	add	r27, r0
    33bc:	e1 1d       	adc	r30, r1
    33be:	f9 1f       	adc	r31, r25
    33c0:	63 9f       	mul	r22, r19
    33c2:	b0 0d       	add	r27, r0
    33c4:	e1 1d       	adc	r30, r1
    33c6:	f9 1f       	adc	r31, r25
    33c8:	bd 01       	movw	r22, r26
    33ca:	cf 01       	movw	r24, r30
    33cc:	11 24       	eor	r1, r1
    33ce:	08 95       	ret

000033d0 <__udivmodsi4>:
    33d0:	a1 e2       	ldi	r26, 0x21	; 33
    33d2:	1a 2e       	mov	r1, r26
    33d4:	aa 1b       	sub	r26, r26
    33d6:	bb 1b       	sub	r27, r27
    33d8:	fd 01       	movw	r30, r26
    33da:	0d c0       	rjmp	.+26     	; 0x33f6 <__udivmodsi4_ep>

000033dc <__udivmodsi4_loop>:
    33dc:	aa 1f       	adc	r26, r26
    33de:	bb 1f       	adc	r27, r27
    33e0:	ee 1f       	adc	r30, r30
    33e2:	ff 1f       	adc	r31, r31
    33e4:	a2 17       	cp	r26, r18
    33e6:	b3 07       	cpc	r27, r19
    33e8:	e4 07       	cpc	r30, r20
    33ea:	f5 07       	cpc	r31, r21
    33ec:	20 f0       	brcs	.+8      	; 0x33f6 <__udivmodsi4_ep>
    33ee:	a2 1b       	sub	r26, r18
    33f0:	b3 0b       	sbc	r27, r19
    33f2:	e4 0b       	sbc	r30, r20
    33f4:	f5 0b       	sbc	r31, r21

000033f6 <__udivmodsi4_ep>:
    33f6:	66 1f       	adc	r22, r22
    33f8:	77 1f       	adc	r23, r23
    33fa:	88 1f       	adc	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	1a 94       	dec	r1
    3400:	69 f7       	brne	.-38     	; 0x33dc <__udivmodsi4_loop>
    3402:	60 95       	com	r22
    3404:	70 95       	com	r23
    3406:	80 95       	com	r24
    3408:	90 95       	com	r25
    340a:	9b 01       	movw	r18, r22
    340c:	ac 01       	movw	r20, r24
    340e:	bd 01       	movw	r22, r26
    3410:	cf 01       	movw	r24, r30
    3412:	08 95       	ret

00003414 <__prologue_saves__>:
    3414:	2f 92       	push	r2
    3416:	3f 92       	push	r3
    3418:	4f 92       	push	r4
    341a:	5f 92       	push	r5
    341c:	6f 92       	push	r6
    341e:	7f 92       	push	r7
    3420:	8f 92       	push	r8
    3422:	9f 92       	push	r9
    3424:	af 92       	push	r10
    3426:	bf 92       	push	r11
    3428:	cf 92       	push	r12
    342a:	df 92       	push	r13
    342c:	ef 92       	push	r14
    342e:	ff 92       	push	r15
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	ca 1b       	sub	r28, r26
    343e:	db 0b       	sbc	r29, r27
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	09 94       	ijmp

0000344c <__epilogue_restores__>:
    344c:	2a 88       	ldd	r2, Y+18	; 0x12
    344e:	39 88       	ldd	r3, Y+17	; 0x11
    3450:	48 88       	ldd	r4, Y+16	; 0x10
    3452:	5f 84       	ldd	r5, Y+15	; 0x0f
    3454:	6e 84       	ldd	r6, Y+14	; 0x0e
    3456:	7d 84       	ldd	r7, Y+13	; 0x0d
    3458:	8c 84       	ldd	r8, Y+12	; 0x0c
    345a:	9b 84       	ldd	r9, Y+11	; 0x0b
    345c:	aa 84       	ldd	r10, Y+10	; 0x0a
    345e:	b9 84       	ldd	r11, Y+9	; 0x09
    3460:	c8 84       	ldd	r12, Y+8	; 0x08
    3462:	df 80       	ldd	r13, Y+7	; 0x07
    3464:	ee 80       	ldd	r14, Y+6	; 0x06
    3466:	fd 80       	ldd	r15, Y+5	; 0x05
    3468:	0c 81       	ldd	r16, Y+4	; 0x04
    346a:	1b 81       	ldd	r17, Y+3	; 0x03
    346c:	aa 81       	ldd	r26, Y+2	; 0x02
    346e:	b9 81       	ldd	r27, Y+1	; 0x01
    3470:	ce 0f       	add	r28, r30
    3472:	d1 1d       	adc	r29, r1
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	ed 01       	movw	r28, r26
    3480:	08 95       	ret

00003482 <_exit>:
    3482:	f8 94       	cli

00003484 <__stop_program>:
    3484:	ff cf       	rjmp	.-2      	; 0x3484 <__stop_program>
