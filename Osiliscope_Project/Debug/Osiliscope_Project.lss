
Osiliscope_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  00004d10  00004da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008001be  008001be  00004f02  2**0
                  ALLOC
  3 .stab         00005328  00000000  00000000  00004f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ff4  00000000  00000000  0000a22c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fd43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000110dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000113d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011d40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_9>
      28:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__vector_10>
      2c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 21 	call	0x434e	; 0x434e <main>
      8a:	0c 94 86 26 	jmp	0x4d0c	; 0x4d0c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 26 	jmp	0x4cd6	; 0x4cd6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 26 	jmp	0x4cd6	; 0x4cd6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 26 	jmp	0x4cae	; 0x4cae <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e8       	ldi	r22, 0x8C	; 140
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 73 26 	jmp	0x4ce6	; 0x4ce6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5f 26 	jmp	0x4cbe	; 0x4cbe <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7b 26 	jmp	0x4cf6	; 0x4cf6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 57 26 	jmp	0x4cae	; 0x4cae <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 73 26 	jmp	0x4ce6	; 0x4ce6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 56       	subi	r30, 0x6C	; 108
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MTIMER0_VidInit>:
void (*TIMER1_CallBack)(void);

void (*TIMER1_ICF_CallBack)(void);
/*Timer0 Initialization*/
void MTIMER0_VidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR0&=0xF8;  //Bit masking
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 7f       	andi	r24, 0xF8	; 248
     e42:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	83 60       	ori	r24, 0x03	; 3
     e50:	8c 93       	st	X, r24

#else
#error      "TIMER0 CTC Mode OC0 PIN is not valid ..."
#endif
#elif TIMER0_SET_MODE == TIMER0_PHASECORRECT_PWM_MODE
	SET_BIT(TCCR0,6);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	8c 93       	st	X, r24
#if   TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7e       	andi	r24, 0xEF	; 239
     e88:	8c 93       	st	X, r24
#endif
#else
#error      "TIMER0 Mode is not valid ..."
#endif

}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <MTIMER0_VidSetPreload>:

/*Set Preload Function*/
void MTIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     e9c:	e2 e5       	ldi	r30, 0x52	; 82
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	80 83       	st	Z, r24
}
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <MTIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void MTIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
	OCR0= Copy_u8CTCValue ;
     eb8:	ec e5       	ldi	r30, 0x5C	; 92
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	80 83       	st	Z, r24
}
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <MTIMER0_VidOVF_SetCallBack>:

void MTIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <MTIMER0_VidOVF_SetCallBack+0x6>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	90 93 ce 01 	sts	0x01CE, r25
     ede:	80 93 cd 01 	sts	0x01CD, r24
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <MTIMER0_VidCTC_SetCallBack>:
void MTIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <MTIMER0_VidCTC_SetCallBack+0x6>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack =Copy_VidCallBack;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	90 93 ce 01 	sts	0x01CE, r25
     f02:	80 93 cd 01 	sts	0x01CD, r24
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <__vector_11>:
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     f3a:	e0 91 cd 01 	lds	r30, 0x01CD
     f3e:	f0 91 ce 01 	lds	r31, 0x01CE
     f42:	09 95       	icall
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	ff 91       	pop	r31
     f4a:	ef 91       	pop	r30
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	ef 93       	push	r30
     f8a:	ff 93       	push	r31
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     f94:	e0 91 cd 01 	lds	r30, 0x01CD
     f98:	f0 91 ce 01 	lds	r31, 0x01CE
     f9c:	09 95       	icall
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <MTIMER1_VidInit>:

/***************************************************************TIMER1*******************************************************************************/
/*Timer1 Initialization*/
void MTIMER1_VidInit(void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler*/
	TCCR1B&=0xF8;  //Bit masking
     fcc:	ae e4       	ldi	r26, 0x4E	; 78
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ee e4       	ldi	r30, 0x4E	; 78
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 7f       	andi	r24, 0xF8	; 248
     fd8:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
     fda:	ae e4       	ldi	r26, 0x4E	; 78
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ee e4       	ldi	r30, 0x4E	; 78
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);

#elif TIMER1_SET_MODE == TIMER1_ICU_MODE
	/*Set Normal mode */
	CLR_BIT(TCCR1B,4);
     fe8:	ae e4       	ldi	r26, 0x4E	; 78
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ee e4       	ldi	r30, 0x4E	; 78
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8f 7e       	andi	r24, 0xEF	; 239
     ff4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     ff6:	ae e4       	ldi	r26, 0x4E	; 78
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ee e4       	ldi	r30, 0x4E	; 78
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	87 7f       	andi	r24, 0xF7	; 247
    1002:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8d 7f       	andi	r24, 0xFD	; 253
    1010:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
    1012:	af e4       	ldi	r26, 0x4F	; 79
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8e 7f       	andi	r24, 0xFE	; 254
    101e:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
    1020:	a9 e5       	ldi	r26, 0x59	; 89
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e9 e5       	ldi	r30, 0x59	; 89
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	84 60       	ori	r24, 0x04	; 4
    102c:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
    102e:	a9 e5       	ldi	r26, 0x59	; 89
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e9 e5       	ldi	r30, 0x59	; 89
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 62       	ori	r24, 0x20	; 32
    103a:	8c 93       	st	X, r24
	/*ICU Edge Select-->Rising edge*/
#if TIMER1_ICU_EDGE_SELECT == TIMER1_ICU_RISING_EDGE
	SET_BIT(TCCR1B,6);
    103c:	ae e4       	ldi	r26, 0x4E	; 78
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ee e4       	ldi	r30, 0x4E	; 78
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	80 64       	ori	r24, 0x40	; 64
    1048:	8c 93       	st	X, r24
#endif

#else
#error      "TIMER1 Mode is not valid ..."
#endif
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <MTIMER1_VidSetPreload>:

/*Set Preload Function*/
void MTIMER1_VidSetPreload(u16 Copy_u16Preload)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <MTIMER1_VidSetPreload+0x6>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload;
    105e:	ec e4       	ldi	r30, 0x4C	; 76
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <MTIMER1_u16GetTCNT1Value>:

/*Get Counter Value In Timer1*/
u16 MTIMER1_u16GetTCNT1Value(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    107c:	ec e4       	ldi	r30, 0x4C	; 76
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <MTIMER1_u16GetICR1Value>:

/*Get Counter Value In ICR1  */
u16 MTIMER1_u16GetICR1Value(void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	return 	ICR1 ;
    1092:	e6 e4       	ldi	r30, 0x46	; 70
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <MTIMER1_VidSenseControl>:


/*select sense control Function*/
void MTIMER1_VidSenseControl(u8 Copy_u8SenseControl)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SenseControl==MTIMER1_ICU_FALLING_EDGE)
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	88 23       	and	r24, r24
    10b0:	41 f4       	brne	.+16     	; 0x10c2 <MTIMER1_VidSenseControl+0x22>
	{
		/*ICU Sense with Falling*/

		CLR_BIT(TCCR1B,6);
    10b2:	ae e4       	ldi	r26, 0x4E	; 78
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ee e4       	ldi	r30, 0x4E	; 78
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8f 7b       	andi	r24, 0xBF	; 191
    10be:	8c 93       	st	X, r24
    10c0:	0a c0       	rjmp	.+20     	; 0x10d6 <MTIMER1_VidSenseControl+0x36>
	}
	else if(Copy_u8SenseControl==MTIMER1_ICU_RISING_EDGE)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	39 f4       	brne	.+14     	; 0x10d6 <MTIMER1_VidSenseControl+0x36>
	{
		/*ICU Sense with Rising*/
		SET_BIT(TCCR1B,6);
    10c8:	ae e4       	ldi	r26, 0x4E	; 78
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ee e4       	ldi	r30, 0x4E	; 78
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	80 64       	ori	r24, 0x40	; 64
    10d4:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <MTIMER1_VidOVF_SetCallBack>:
void MTIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <MTIMER1_VidOVF_SetCallBack+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack =Copy_VidCallBack;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	90 93 d0 01 	sts	0x01D0, r25
    10f4:	80 93 cf 01 	sts	0x01CF, r24
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <MTIMER1_VidICF_SetCallBack>:

void MTIMER1_VidICF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <MTIMER1_VidICF_SetCallBack+0x6>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICF_CallBack =Copy_VidCallBack;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	90 93 d2 01 	sts	0x01D2, r25
    1118:	80 93 d1 01 	sts	0x01D1, r24
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <__vector_9>:
/*TIMER1 OFV  ISR*/
void __vector_9(void)      __attribute__((signal));
void __vector_9(void)
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	2f 93       	push	r18
    1132:	3f 93       	push	r19
    1134:	4f 93       	push	r20
    1136:	5f 93       	push	r21
    1138:	6f 93       	push	r22
    113a:	7f 93       	push	r23
    113c:	8f 93       	push	r24
    113e:	9f 93       	push	r25
    1140:	af 93       	push	r26
    1142:	bf 93       	push	r27
    1144:	ef 93       	push	r30
    1146:	ff 93       	push	r31
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    1150:	e0 91 cf 01 	lds	r30, 0x01CF
    1154:	f0 91 d0 01 	lds	r31, 0x01D0
    1158:	09 95       	icall
}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_6>:

/*TIMER1 Capture Event ISR*/
void __vector_6(void)      __attribute__((signal));
void __vector_6(void)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICF_CallBack();
    11aa:	e0 91 d1 01 	lds	r30, 0x01D1
    11ae:	f0 91 d2 01 	lds	r31, 0x01D2
    11b2:	09 95       	icall
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    11e2:	af e5       	ldi	r26, 0x5F	; 95
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ef e5       	ldi	r30, 0x5F	; 95
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	80 68       	ori	r24, 0x80	; 128
    11ee:	8c 93       	st	X, r24
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    11fe:	af e5       	ldi	r26, 0x5F	; 95
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ef e5       	ldi	r30, 0x5F	; 95
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8f 77       	andi	r24, 0x7F	; 127
    120a:	8c 93       	st	X, r24
}
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <MEXTI0_VidInit>:

/*Global Pointer to function for EXTI0*/
void (*EXTI0_CallBack)(void) ;
/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    121a:	a5 e5       	ldi	r26, 0x55	; 85
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e5       	ldi	r30, 0x55	; 85
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    1228:	a5 e5       	ldi	r26, 0x55	; 85
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e5       	ldi	r30, 0x55	; 85
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	82 60       	ori	r24, 0x02	; 2
    1234:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    1236:	ab e5       	ldi	r26, 0x5B	; 91
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	eb e5       	ldi	r30, 0x5B	; 91
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 64       	ori	r24, 0x40	; 64
    1242:	8c 93       	st	X, r24
}
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    1252:	a5 e5       	ldi	r26, 0x55	; 85
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e5       	ldi	r30, 0x55	; 85
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	84 60       	ori	r24, 0x04	; 4
    125e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    1260:	a5 e5       	ldi	r26, 0x55	; 85
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e5       	ldi	r30, 0x55	; 85
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	88 60       	ori	r24, 0x08	; 8
    126c:	8c 93       	st	X, r24
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    126e:	ab e5       	ldi	r26, 0x5B	; 91
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	eb e5       	ldi	r30, 0x5B	; 91
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 68       	ori	r24, 0x80	; 128
    127a:	8c 93       	st	X, r24
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    128a:	a4 e5       	ldi	r26, 0x54	; 84
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e4 e5       	ldi	r30, 0x54	; 84
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 64       	ori	r24, 0x40	; 64
    1296:	8c 93       	st	X, r24
#else
	//#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    1298:	ab e5       	ldi	r26, 0x5B	; 91
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	eb e5       	ldi	r30, 0x5B	; 91
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 62       	ori	r24, 0x20	; 32
    12a4:	8c 93       	st	X, r24
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <MEXTI_VidSenseControl+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <MEXTI_VidSenseControl+0x8>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3c 83       	std	Y+4, r19	; 0x04
    12c4:	2b 83       	std	Y+3, r18	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <MEXTI_VidSenseControl+0x26>
    12d0:	54 c0       	rjmp	.+168    	; 0x137a <MEXTI_VidSenseControl+0xce>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <MEXTI_VidSenseControl+0x32>
    12dc:	96 c0       	rjmp	.+300    	; 0x140a <MEXTI_VidSenseControl+0x15e>
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <MEXTI_VidSenseControl+0x3c>
    12e6:	a6 c0       	rjmp	.+332    	; 0x1434 <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	88 23       	and	r24, r24
    12ec:	79 f4       	brne	.+30     	; 0x130c <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    12ee:	a5 e5       	ldi	r26, 0x55	; 85
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e5 e5       	ldi	r30, 0x55	; 85
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8e 7f       	andi	r24, 0xFE	; 254
    12fa:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    12fc:	a5 e5       	ldi	r26, 0x55	; 85
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e5 e5       	ldi	r30, 0x55	; 85
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8d 7f       	andi	r24, 0xFD	; 253
    1308:	8c 93       	st	X, r24
    130a:	94 c0       	rjmp	.+296    	; 0x1434 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	79 f4       	brne	.+30     	; 0x1330 <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    1312:	a5 e5       	ldi	r26, 0x55	; 85
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e5       	ldi	r30, 0x55	; 85
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	81 60       	ori	r24, 0x01	; 1
    131e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1320:	a5 e5       	ldi	r26, 0x55	; 85
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e5       	ldi	r30, 0x55	; 85
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8d 7f       	andi	r24, 0xFD	; 253
    132c:	8c 93       	st	X, r24
    132e:	82 c0       	rjmp	.+260    	; 0x1434 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	79 f4       	brne	.+30     	; 0x1354 <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    1336:	a5 e5       	ldi	r26, 0x55	; 85
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e5 e5       	ldi	r30, 0x55	; 85
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8e 7f       	andi	r24, 0xFE	; 254
    1342:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    1344:	a5 e5       	ldi	r26, 0x55	; 85
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e5 e5       	ldi	r30, 0x55	; 85
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	82 60       	ori	r24, 0x02	; 2
    1350:	8c 93       	st	X, r24
    1352:	70 c0       	rjmp	.+224    	; 0x1434 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	09 f0       	breq	.+2      	; 0x135c <MEXTI_VidSenseControl+0xb0>
    135a:	6c c0       	rjmp	.+216    	; 0x1434 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    135c:	a5 e5       	ldi	r26, 0x55	; 85
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e5       	ldi	r30, 0x55	; 85
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	81 60       	ori	r24, 0x01	; 1
    1368:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    136a:	a5 e5       	ldi	r26, 0x55	; 85
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e5       	ldi	r30, 0x55	; 85
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	82 60       	ori	r24, 0x02	; 2
    1376:	8c 93       	st	X, r24
    1378:	5d c0       	rjmp	.+186    	; 0x1434 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	88 23       	and	r24, r24
    137e:	79 f4       	brne	.+30     	; 0x139e <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    1380:	a5 e5       	ldi	r26, 0x55	; 85
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e5       	ldi	r30, 0x55	; 85
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8b 7f       	andi	r24, 0xFB	; 251
    138c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    138e:	a5 e5       	ldi	r26, 0x55	; 85
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e5       	ldi	r30, 0x55	; 85
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	87 7f       	andi	r24, 0xF7	; 247
    139a:	8c 93       	st	X, r24
    139c:	4b c0       	rjmp	.+150    	; 0x1434 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	79 f4       	brne	.+30     	; 0x13c2 <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    13a4:	a5 e5       	ldi	r26, 0x55	; 85
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e5 e5       	ldi	r30, 0x55	; 85
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	84 60       	ori	r24, 0x04	; 4
    13b0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    13b2:	a5 e5       	ldi	r26, 0x55	; 85
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e5       	ldi	r30, 0x55	; 85
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	87 7f       	andi	r24, 0xF7	; 247
    13be:	8c 93       	st	X, r24
    13c0:	39 c0       	rjmp	.+114    	; 0x1434 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	79 f4       	brne	.+30     	; 0x13e6 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    13c8:	a5 e5       	ldi	r26, 0x55	; 85
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e5       	ldi	r30, 0x55	; 85
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8b 7f       	andi	r24, 0xFB	; 251
    13d4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    13d6:	a5 e5       	ldi	r26, 0x55	; 85
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e5       	ldi	r30, 0x55	; 85
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	88 60       	ori	r24, 0x08	; 8
    13e2:	8c 93       	st	X, r24
    13e4:	27 c0       	rjmp	.+78     	; 0x1434 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	21 f5       	brne	.+72     	; 0x1434 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	84 60       	ori	r24, 0x04	; 4
    13f8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	8c 93       	st	X, r24
    1408:	15 c0       	rjmp	.+42     	; 0x1434 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	41 f4       	brne	.+16     	; 0x1420 <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    1410:	a4 e5       	ldi	r26, 0x54	; 84
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e4 e5       	ldi	r30, 0x54	; 84
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8f 7b       	andi	r24, 0xBF	; 191
    141c:	8c 93       	st	X, r24
    141e:	0a c0       	rjmp	.+20     	; 0x1434 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	39 f4       	brne	.+14     	; 0x1434 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    1426:	a4 e5       	ldi	r26, 0x54	; 84
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e4 e5       	ldi	r30, 0x54	; 84
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	80 64       	ori	r24, 0x40	; 64
    1432:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <MEXTI0_Set_CallBackFunction>:

void MEXTI0_Set_CallBackFunction(void(*Copy_VidCallBack)(void))
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <MEXTI0_Set_CallBackFunction+0x6>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CallBack = Copy_VidCallBack ;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	90 93 d4 01 	sts	0x01D4, r25
    1458:	80 93 d3 01 	sts	0x01D3, r24
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <__vector_1>:

void __vector_1(void)      __attribute__((signal));
void __vector_1(void)
{
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBack();
    1490:	e0 91 d3 01 	lds	r30, 0x01D3
    1494:	f0 91 d4 01 	lds	r31, 0x01D4
    1498:	09 95       	icall
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State  MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <MDIO_Error_State_SetPinDirection+0x6>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <MDIO_Error_State_SetPinDirection+0x8>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <MDIO_Error_State_SetPinDirection+0xa>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	8a 83       	std	Y+2, r24	; 0x02
    14d0:	6b 83       	std	Y+3, r22	; 0x03
    14d2:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <MDIO_Error_State_SetPinDirection+0x20>
    14de:	e8 c0       	rjmp	.+464    	; 0x16b0 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch (Copy_u8PortNumber)
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3e 83       	std	Y+6, r19	; 0x06
    14e8:	2d 83       	std	Y+5, r18	; 0x05
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <MDIO_Error_State_SetPinDirection+0x36>
    14f4:	48 c0       	rjmp	.+144    	; 0x1586 <MDIO_Error_State_SetPinDirection+0xc6>
    14f6:	2d 81       	ldd	r18, Y+5	; 0x05
    14f8:	3e 81       	ldd	r19, Y+6	; 0x06
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	2c f4       	brge	.+10     	; 0x150a <MDIO_Error_State_SetPinDirection+0x4a>
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	71 f0       	breq	.+28     	; 0x1524 <MDIO_Error_State_SetPinDirection+0x64>
    1508:	d1 c0       	rjmp	.+418    	; 0x16ac <MDIO_Error_State_SetPinDirection+0x1ec>
    150a:	2d 81       	ldd	r18, Y+5	; 0x05
    150c:	3e 81       	ldd	r19, Y+6	; 0x06
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <MDIO_Error_State_SetPinDirection+0x56>
    1514:	69 c0       	rjmp	.+210    	; 0x15e8 <MDIO_Error_State_SetPinDirection+0x128>
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <MDIO_Error_State_SetPinDirection+0x62>
    1520:	94 c0       	rjmp	.+296    	; 0x164a <MDIO_Error_State_SetPinDirection+0x18a>
    1522:	c4 c0       	rjmp	.+392    	; 0x16ac <MDIO_Error_State_SetPinDirection+0x1ec>
		{

		case  MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	a1 f4       	brne	.+40     	; 0x1552 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    152a:	aa e3       	ldi	r26, 0x3A	; 58
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <MDIO_Error_State_SetPinDirection+0x88>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <MDIO_Error_State_SetPinDirection+0x84>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	b0 c0       	rjmp	.+352    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	88 23       	and	r24, r24
    1556:	a9 f4       	brne	.+42     	; 0x1582 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    1558:	aa e3       	ldi	r26, 0x3A	; 58
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ea e3       	ldi	r30, 0x3A	; 58
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <MDIO_Error_State_SetPinDirection+0xb6>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <MDIO_Error_State_SetPinDirection+0xb2>
    157a:	80 95       	com	r24
    157c:	84 23       	and	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	98 c0       	rjmp	.+304    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1582:	19 82       	std	Y+1, r1	; 0x01
    1584:	96 c0       	rjmp	.+300    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	a1 f4       	brne	.+40     	; 0x15b4 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    158c:	a7 e3       	ldi	r26, 0x37	; 55
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <MDIO_Error_State_SetPinDirection+0xea>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <MDIO_Error_State_SetPinDirection+0xe6>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	7f c0       	rjmp	.+254    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	88 23       	and	r24, r24
    15b8:	a9 f4       	brne	.+42     	; 0x15e4 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    15ba:	a7 e3       	ldi	r26, 0x37	; 55
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e7 e3       	ldi	r30, 0x37	; 55
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <MDIO_Error_State_SetPinDirection+0x118>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <MDIO_Error_State_SetPinDirection+0x114>
    15dc:	80 95       	com	r24
    15de:	84 23       	and	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	67 c0       	rjmp	.+206    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    15e4:	19 82       	std	Y+1, r1	; 0x01
    15e6:	65 c0       	rjmp	.+202    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		case  MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    15ee:	a4 e3       	ldi	r26, 0x34	; 52
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e4 e3       	ldi	r30, 0x34	; 52
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <MDIO_Error_State_SetPinDirection+0x14c>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <MDIO_Error_State_SetPinDirection+0x148>
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	4e c0       	rjmp	.+156    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	88 23       	and	r24, r24
    161a:	a9 f4       	brne	.+42     	; 0x1646 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    161c:	a4 e3       	ldi	r26, 0x34	; 52
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e4 e3       	ldi	r30, 0x34	; 52
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <MDIO_Error_State_SetPinDirection+0x17a>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <MDIO_Error_State_SetPinDirection+0x176>
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	36 c0       	rjmp	.+108    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	34 c0       	rjmp	.+104    	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case  MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	a1 f4       	brne	.+40     	; 0x1678 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    1650:	a1 e3       	ldi	r26, 0x31	; 49
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e1 e3       	ldi	r30, 0x31	; 49
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <MDIO_Error_State_SetPinDirection+0x1ae>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <MDIO_Error_State_SetPinDirection+0x1aa>
    1672:	84 2b       	or	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	1d c0       	rjmp	.+58     	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	88 23       	and	r24, r24
    167c:	a9 f4       	brne	.+42     	; 0x16a8 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    167e:	a1 e3       	ldi	r26, 0x31	; 49
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e1 e3       	ldi	r30, 0x31	; 49
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <MDIO_Error_State_SetPinDirection+0x1dc>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <MDIO_Error_State_SetPinDirection+0x1d8>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState = NOK;
    16a8:	19 82       	std	Y+1, r1	; 0x01
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break ;
		default:
			LOC_Error_State_ReturnState = NOK;
    16ac:	19 82       	std	Y+1, r1	; 0x01
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <MDIO_Error_State_SetPinDirection+0x1f2>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    16b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return  LOC_Error_State_ReturnState ;
    16b2:	89 81       	ldd	r24, Y+1	; 0x01

}
    16b4:	26 96       	adiw	r28, 0x06	; 6
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <MDIO_Error_State_SetPortDirection>:

/*Set Port Direction Function */
Error_State  MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <MDIO_Error_State_SetPortDirection+0x6>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <MDIO_Error_State_SetPortDirection+0x8>
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	8a 83       	std	Y+2, r24	; 0x02
    16d6:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	8f 3f       	cpi	r24, 0xFF	; 255
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <MDIO_Error_State_SetPortDirection+0x22>
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	88 23       	and	r24, r24
    16e6:	a9 f5       	brne	.+106    	; 0x1752 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3d 83       	std	Y+5, r19	; 0x05
    16f0:	2c 83       	std	Y+4, r18	; 0x04
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <MDIO_Error_State_SetPortDirection+0x6a>
    16fc:	2c 81       	ldd	r18, Y+4	; 0x04
    16fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <MDIO_Error_State_SetPortDirection+0x4a>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <MDIO_Error_State_SetPortDirection+0x60>
    170e:	1f c0       	rjmp	.+62     	; 0x174e <MDIO_Error_State_SetPortDirection+0x88>
    1710:	2c 81       	ldd	r18, Y+4	; 0x04
    1712:	3d 81       	ldd	r19, Y+5	; 0x05
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	81 f0       	breq	.+32     	; 0x173a <MDIO_Error_State_SetPortDirection+0x74>
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	9d 81       	ldd	r25, Y+5	; 0x05
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <MDIO_Error_State_SetPortDirection+0x7e>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDirection;
    1726:	ea e3       	ldi	r30, 0x3A	; 58
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	80 83       	st	Z, r24
    172e:	12 c0       	rjmp	.+36     	; 0x1754 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    1730:	e7 e3       	ldi	r30, 0x37	; 55
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	80 83       	st	Z, r24
    1738:	0d c0       	rjmp	.+26     	; 0x1754 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    173a:	e4 e3       	ldi	r30, 0x34	; 52
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	80 83       	st	Z, r24
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    1744:	e1 e3       	ldi	r30, 0x31	; 49
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	80 83       	st	Z, r24
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState = NOK;
    174e:	19 82       	std	Y+1, r1	; 0x01
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <MDIO_Error_State_SetPortDirection+0x8e>
			break ;
		}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1752:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState ;
    1754:	89 81       	ldd	r24, Y+1	; 0x01
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State  MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <MDIO_Error_State_SetPinValue+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <MDIO_Error_State_SetPinValue+0x8>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <MDIO_Error_State_SetPinValue+0xa>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	8a 83       	std	Y+2, r24	; 0x02
    1776:	6b 83       	std	Y+3, r22	; 0x03
    1778:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	88 30       	cpi	r24, 0x08	; 8
    1782:	08 f0       	brcs	.+2      	; 0x1786 <MDIO_Error_State_SetPinValue+0x20>
    1784:	e8 c0       	rjmp	.+464    	; 0x1956 <MDIO_Error_State_SetPinValue+0x1f0>
		{
			switch (Copy_u8PortNumber)
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3e 83       	std	Y+6, r19	; 0x06
    178e:	2d 83       	std	Y+5, r18	; 0x05
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <MDIO_Error_State_SetPinValue+0x36>
    179a:	48 c0       	rjmp	.+144    	; 0x182c <MDIO_Error_State_SetPinValue+0xc6>
    179c:	2d 81       	ldd	r18, Y+5	; 0x05
    179e:	3e 81       	ldd	r19, Y+6	; 0x06
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <MDIO_Error_State_SetPinValue+0x4a>
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	71 f0       	breq	.+28     	; 0x17ca <MDIO_Error_State_SetPinValue+0x64>
    17ae:	d1 c0       	rjmp	.+418    	; 0x1952 <MDIO_Error_State_SetPinValue+0x1ec>
    17b0:	2d 81       	ldd	r18, Y+5	; 0x05
    17b2:	3e 81       	ldd	r19, Y+6	; 0x06
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <MDIO_Error_State_SetPinValue+0x56>
    17ba:	69 c0       	rjmp	.+210    	; 0x188e <MDIO_Error_State_SetPinValue+0x128>
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <MDIO_Error_State_SetPinValue+0x62>
    17c6:	94 c0       	rjmp	.+296    	; 0x18f0 <MDIO_Error_State_SetPinValue+0x18a>
    17c8:	c4 c0       	rjmp	.+392    	; 0x1952 <MDIO_Error_State_SetPinValue+0x1ec>
			{

			case  MDIO_PORTA:
				if(Copy_u8PinValue==PIN_HIGH)
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	a1 f4       	brne	.+40     	; 0x17f8 <MDIO_Error_State_SetPinValue+0x92>
				{
					SET_BIT(PORTA,Copy_u8PinNumber);
    17d0:	ab e3       	ldi	r26, 0x3B	; 59
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	eb e3       	ldi	r30, 0x3B	; 59
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <MDIO_Error_State_SetPinValue+0x88>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <MDIO_Error_State_SetPinValue+0x84>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	b0 c0       	rjmp	.+352    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	88 23       	and	r24, r24
    17fc:	a9 f4       	brne	.+42     	; 0x1828 <MDIO_Error_State_SetPinValue+0xc2>
				{
					CLR_BIT(PORTA,Copy_u8PinNumber);
    17fe:	ab e3       	ldi	r26, 0x3B	; 59
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	eb e3       	ldi	r30, 0x3B	; 59
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <MDIO_Error_State_SetPinValue+0xb6>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <MDIO_Error_State_SetPinValue+0xb2>
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	98 c0       	rjmp	.+304    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    1828:	19 82       	std	Y+1, r1	; 0x01
    182a:	96 c0       	rjmp	.+300    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTB:
				if(Copy_u8PinValue==PIN_HIGH)
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	a1 f4       	brne	.+40     	; 0x185a <MDIO_Error_State_SetPinValue+0xf4>
				{
					SET_BIT(PORTB,Copy_u8PinNumber);
    1832:	a8 e3       	ldi	r26, 0x38	; 56
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e8 e3       	ldi	r30, 0x38	; 56
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <MDIO_Error_State_SetPinValue+0xea>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <MDIO_Error_State_SetPinValue+0xe6>
    1854:	84 2b       	or	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	7f c0       	rjmp	.+254    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	88 23       	and	r24, r24
    185e:	a9 f4       	brne	.+42     	; 0x188a <MDIO_Error_State_SetPinValue+0x124>
				{
					CLR_BIT(PORTB,Copy_u8PinNumber);
    1860:	a8 e3       	ldi	r26, 0x38	; 56
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e8 e3       	ldi	r30, 0x38	; 56
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <MDIO_Error_State_SetPinValue+0x118>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <MDIO_Error_State_SetPinValue+0x114>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	67 c0       	rjmp	.+206    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    188a:	19 82       	std	Y+1, r1	; 0x01
    188c:	65 c0       	rjmp	.+202    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			case  MDIO_PORTC:
				if(Copy_u8PinValue==PIN_HIGH)
    188e:	8c 81       	ldd	r24, Y+4	; 0x04
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	a1 f4       	brne	.+40     	; 0x18bc <MDIO_Error_State_SetPinValue+0x156>
				{
					SET_BIT(PORTC,Copy_u8PinNumber);
    1894:	a5 e3       	ldi	r26, 0x35	; 53
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e5 e3       	ldi	r30, 0x35	; 53
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <MDIO_Error_State_SetPinValue+0x14c>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <MDIO_Error_State_SetPinValue+0x148>
    18b6:	84 2b       	or	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	4e c0       	rjmp	.+156    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	88 23       	and	r24, r24
    18c0:	a9 f4       	brne	.+42     	; 0x18ec <MDIO_Error_State_SetPinValue+0x186>
				{
					CLR_BIT(PORTC,Copy_u8PinNumber);
    18c2:	a5 e3       	ldi	r26, 0x35	; 53
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e5 e3       	ldi	r30, 0x35	; 53
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <MDIO_Error_State_SetPinValue+0x17a>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <MDIO_Error_State_SetPinValue+0x176>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	36 c0       	rjmp	.+108    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    18ec:	19 82       	std	Y+1, r1	; 0x01
    18ee:	34 c0       	rjmp	.+104    	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break;
			case  MDIO_PORTD:
				if(Copy_u8PinValue==PIN_HIGH)
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	a1 f4       	brne	.+40     	; 0x191e <MDIO_Error_State_SetPinValue+0x1b8>
				{
					SET_BIT(PORTD,Copy_u8PinNumber);
    18f6:	a2 e3       	ldi	r26, 0x32	; 50
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <MDIO_Error_State_SetPinValue+0x1ae>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <MDIO_Error_State_SetPinValue+0x1aa>
    1918:	84 2b       	or	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	1d c0       	rjmp	.+58     	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else if(Copy_u8PinValue==PIN_LOW)
    191e:	8c 81       	ldd	r24, Y+4	; 0x04
    1920:	88 23       	and	r24, r24
    1922:	a9 f4       	brne	.+42     	; 0x194e <MDIO_Error_State_SetPinValue+0x1e8>
				{
					CLR_BIT(PORTD,Copy_u8PinNumber);
    1924:	a2 e3       	ldi	r26, 0x32	; 50
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e2 e3       	ldi	r30, 0x32	; 50
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <MDIO_Error_State_SetPinValue+0x1dc>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <MDIO_Error_State_SetPinValue+0x1d8>
    1946:	80 95       	com	r24
    1948:	84 23       	and	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	05 c0       	rjmp	.+10     	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				else
				{
					LOC_Error_State_ReturnState = NOK;
    194e:	19 82       	std	Y+1, r1	; 0x01
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				}
				break ;
			default:
				LOC_Error_State_ReturnState = NOK;
    1952:	19 82       	std	Y+1, r1	; 0x01
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <MDIO_Error_State_SetPinValue+0x1f2>
				break ;
			}
		}
		else
		{
			LOC_Error_State_ReturnState = NOK;
    1956:	19 82       	std	Y+1, r1	; 0x01
		}
		return  LOC_Error_State_ReturnState ;
    1958:	89 81       	ldd	r24, Y+1	; 0x01

}
    195a:	26 96       	adiw	r28, 0x06	; 6
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <MDIO_Error_State_SetPortValue>:
/*Set Port Value Function */
Error_State  MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <MDIO_Error_State_SetPortValue+0x6>
    1972:	00 d0       	rcall	.+0      	; 0x1974 <MDIO_Error_State_SetPortValue+0x8>
    1974:	0f 92       	push	r0
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	8a 83       	std	Y+2, r24	; 0x02
    197c:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState = OK;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01

			switch(Copy_u8PortNumber)
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3d 83       	std	Y+5, r19	; 0x05
    198a:	2c 83       	std	Y+4, r18	; 0x04
    198c:	8c 81       	ldd	r24, Y+4	; 0x04
    198e:	9d 81       	ldd	r25, Y+5	; 0x05
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	91 05       	cpc	r25, r1
    1994:	d1 f0       	breq	.+52     	; 0x19ca <MDIO_Error_State_SetPortValue+0x5e>
    1996:	2c 81       	ldd	r18, Y+4	; 0x04
    1998:	3d 81       	ldd	r19, Y+5	; 0x05
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	2c f4       	brge	.+10     	; 0x19aa <MDIO_Error_State_SetPortValue+0x3e>
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	9d 81       	ldd	r25, Y+5	; 0x05
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	61 f0       	breq	.+24     	; 0x19c0 <MDIO_Error_State_SetPortValue+0x54>
    19a8:	1f c0       	rjmp	.+62     	; 0x19e8 <MDIO_Error_State_SetPortValue+0x7c>
    19aa:	2c 81       	ldd	r18, Y+4	; 0x04
    19ac:	3d 81       	ldd	r19, Y+5	; 0x05
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	81 f0       	breq	.+32     	; 0x19d4 <MDIO_Error_State_SetPortValue+0x68>
    19b4:	8c 81       	ldd	r24, Y+4	; 0x04
    19b6:	9d 81       	ldd	r25, Y+5	; 0x05
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	91 05       	cpc	r25, r1
    19bc:	81 f0       	breq	.+32     	; 0x19de <MDIO_Error_State_SetPortValue+0x72>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <MDIO_Error_State_SetPortValue+0x7c>
			{
			case MDIO_PORTA:
				PORTA = Copy_u8PortValue;
    19c0:	eb e3       	ldi	r30, 0x3B	; 59
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	80 83       	st	Z, r24
    19c8:	10 c0       	rjmp	.+32     	; 0x19ea <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTB:
				PORTB = Copy_u8PortValue;
    19ca:	e8 e3       	ldi	r30, 0x38	; 56
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	80 83       	st	Z, r24
    19d2:	0b c0       	rjmp	.+22     	; 0x19ea <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTC:
				PORTC = Copy_u8PortValue;
    19d4:	e5 e3       	ldi	r30, 0x35	; 53
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	80 83       	st	Z, r24
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <MDIO_Error_State_SetPortValue+0x7e>
				break;
			case MDIO_PORTD:
				PORTD = Copy_u8PortValue;
    19de:	e2 e3       	ldi	r30, 0x32	; 50
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	80 83       	st	Z, r24
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <MDIO_Error_State_SetPortValue+0x7e>
				break;
			default:
				LOC_Error_State_ReturnState = NOK;
    19e8:	19 82       	std	Y+1, r1	; 0x01
				break ;
			}

		return LOC_Error_State_ReturnState ;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <MDIO_Error_State_GetPinValue>:
/*Get Pin Value Function */
Error_State  MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	27 97       	sbiw	r28, 0x07	; 7
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	8a 83       	std	Y+2, r24	; 0x02
    1a12:	6b 83       	std	Y+3, r22	; 0x03
    1a14:	5d 83       	std	Y+5, r21	; 0x05
    1a16:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState = OK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue !=(u8*)NULL_POINTER))
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	88 30       	cpi	r24, 0x08	; 8
    1a20:	08 f0       	brcs	.+2      	; 0x1a24 <MDIO_Error_State_GetPinValue+0x28>
    1a22:	79 c0       	rjmp	.+242    	; 0x1b16 <MDIO_Error_State_GetPinValue+0x11a>
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <MDIO_Error_State_GetPinValue+0x34>
    1a2e:	73 c0       	rjmp	.+230    	; 0x1b16 <MDIO_Error_State_GetPinValue+0x11a>
	{
	switch(Copy_u8PortNumber)
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3f 83       	std	Y+7, r19	; 0x07
    1a38:	2e 83       	std	Y+6, r18	; 0x06
    1a3a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a3c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a3e:	41 30       	cpi	r20, 0x01	; 1
    1a40:	51 05       	cpc	r21, r1
    1a42:	59 f1       	breq	.+86     	; 0x1a9a <MDIO_Error_State_GetPinValue+0x9e>
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	9f 81       	ldd	r25, Y+7	; 0x07
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	34 f4       	brge	.+12     	; 0x1a5a <MDIO_Error_State_GetPinValue+0x5e>
    1a4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a50:	3f 81       	ldd	r19, Y+7	; 0x07
    1a52:	21 15       	cp	r18, r1
    1a54:	31 05       	cpc	r19, r1
    1a56:	69 f0       	breq	.+26     	; 0x1a72 <MDIO_Error_State_GetPinValue+0x76>
    1a58:	5c c0       	rjmp	.+184    	; 0x1b12 <MDIO_Error_State_GetPinValue+0x116>
    1a5a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a5c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a5e:	42 30       	cpi	r20, 0x02	; 2
    1a60:	51 05       	cpc	r21, r1
    1a62:	79 f1       	breq	.+94     	; 0x1ac2 <MDIO_Error_State_GetPinValue+0xc6>
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	9f 81       	ldd	r25, Y+7	; 0x07
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <MDIO_Error_State_GetPinValue+0x74>
    1a6e:	3d c0       	rjmp	.+122    	; 0x1aea <MDIO_Error_State_GetPinValue+0xee>
    1a70:	50 c0       	rjmp	.+160    	; 0x1b12 <MDIO_Error_State_GetPinValue+0x116>
				{
				case MDIO_PORTA:
					*P_u8PinValue= GET_BIT(PINA,Copy_u8PinNumber);
    1a72:	e9 e3       	ldi	r30, 0x39	; 57
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a9 01       	movw	r20, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <MDIO_Error_State_GetPinValue+0x8e>
    1a86:	55 95       	asr	r21
    1a88:	47 95       	ror	r20
    1a8a:	8a 95       	dec	r24
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <MDIO_Error_State_GetPinValue+0x8a>
    1a8e:	ca 01       	movw	r24, r20
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	ec 81       	ldd	r30, Y+4	; 0x04
    1a94:	fd 81       	ldd	r31, Y+5	; 0x05
    1a96:	80 83       	st	Z, r24
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTB:
					*P_u8PinValue= GET_BIT(PINB,Copy_u8PinNumber);
    1a9a:	e6 e3       	ldi	r30, 0x36	; 54
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <MDIO_Error_State_GetPinValue+0xb6>
    1aae:	55 95       	asr	r21
    1ab0:	47 95       	ror	r20
    1ab2:	8a 95       	dec	r24
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <MDIO_Error_State_GetPinValue+0xb2>
    1ab6:	ca 01       	movw	r24, r20
    1ab8:	81 70       	andi	r24, 0x01	; 1
    1aba:	ec 81       	ldd	r30, Y+4	; 0x04
    1abc:	fd 81       	ldd	r31, Y+5	; 0x05
    1abe:	80 83       	st	Z, r24
    1ac0:	2b c0       	rjmp	.+86     	; 0x1b18 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTC:
					*P_u8PinValue= GET_BIT(PINC,Copy_u8PinNumber);
    1ac2:	e3 e3       	ldi	r30, 0x33	; 51
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a9 01       	movw	r20, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <MDIO_Error_State_GetPinValue+0xde>
    1ad6:	55 95       	asr	r21
    1ad8:	47 95       	ror	r20
    1ada:	8a 95       	dec	r24
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <MDIO_Error_State_GetPinValue+0xda>
    1ade:	ca 01       	movw	r24, r20
    1ae0:	81 70       	andi	r24, 0x01	; 1
    1ae2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae6:	80 83       	st	Z, r24
    1ae8:	17 c0       	rjmp	.+46     	; 0x1b18 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				case MDIO_PORTD:
					*P_u8PinValue= GET_BIT(PIND,Copy_u8PinNumber);
    1aea:	e0 e3       	ldi	r30, 0x30	; 48
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a9 01       	movw	r20, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <MDIO_Error_State_GetPinValue+0x106>
    1afe:	55 95       	asr	r21
    1b00:	47 95       	ror	r20
    1b02:	8a 95       	dec	r24
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <MDIO_Error_State_GetPinValue+0x102>
    1b06:	ca 01       	movw	r24, r20
    1b08:	81 70       	andi	r24, 0x01	; 1
    1b0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b0e:	80 83       	st	Z, r24
    1b10:	03 c0       	rjmp	.+6      	; 0x1b18 <MDIO_Error_State_GetPinValue+0x11c>
					break;
				default:
					LOC_Error_State_ReturnState = NOK;
    1b12:	19 82       	std	Y+1, r1	; 0x01
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <MDIO_Error_State_GetPinValue+0x11c>
					break ;
				}
	}
	else
	{
		LOC_Error_State_ReturnState = NOK;
    1b16:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState ;
    1b18:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b1a:	27 96       	adiw	r28, 0x07	; 7
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <MDIO_Error_State_SetNippleValue>:

/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <MDIO_Error_State_SetNippleValue+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <MDIO_Error_State_SetNippleValue+0x8>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <MDIO_Error_State_SetNippleValue+0xa>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	8a 83       	std	Y+2, r24	; 0x02
    1b3c:	6b 83       	std	Y+3, r22	; 0x03
    1b3e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	85 30       	cpi	r24, 0x05	; 5
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <MDIO_Error_State_SetNippleValue+0x20>
    1b4a:	c9 c0       	rjmp	.+402    	; 0x1cde <MDIO_Error_State_SetNippleValue+0x1b2>
	{
		switch(Copy_u8PortNumber)
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	3e 83       	std	Y+6, r19	; 0x06
    1b54:	2d 83       	std	Y+5, r18	; 0x05
    1b56:	6d 81       	ldd	r22, Y+5	; 0x05
    1b58:	7e 81       	ldd	r23, Y+6	; 0x06
    1b5a:	61 30       	cpi	r22, 0x01	; 1
    1b5c:	71 05       	cpc	r23, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <MDIO_Error_State_SetNippleValue+0x36>
    1b60:	41 c0       	rjmp	.+130    	; 0x1be4 <MDIO_Error_State_SetNippleValue+0xb8>
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	91 05       	cpc	r25, r1
    1b6a:	34 f4       	brge	.+12     	; 0x1b78 <MDIO_Error_State_SetNippleValue+0x4c>
    1b6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b70:	21 15       	cp	r18, r1
    1b72:	31 05       	cpc	r19, r1
    1b74:	71 f0       	breq	.+28     	; 0x1b92 <MDIO_Error_State_SetNippleValue+0x66>
    1b76:	b1 c0       	rjmp	.+354    	; 0x1cda <MDIO_Error_State_SetNippleValue+0x1ae>
    1b78:	6d 81       	ldd	r22, Y+5	; 0x05
    1b7a:	7e 81       	ldd	r23, Y+6	; 0x06
    1b7c:	62 30       	cpi	r22, 0x02	; 2
    1b7e:	71 05       	cpc	r23, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <MDIO_Error_State_SetNippleValue+0x58>
    1b82:	59 c0       	rjmp	.+178    	; 0x1c36 <MDIO_Error_State_SetNippleValue+0x10a>
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	83 30       	cpi	r24, 0x03	; 3
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <MDIO_Error_State_SetNippleValue+0x64>
    1b8e:	7c c0       	rjmp	.+248    	; 0x1c88 <MDIO_Error_State_SetNippleValue+0x15c>
    1b90:	a4 c0       	rjmp	.+328    	; 0x1cda <MDIO_Error_State_SetNippleValue+0x1ae>
		{
		case MDIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1b92:	ab e3       	ldi	r26, 0x3B	; 59
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	eb e3       	ldi	r30, 0x3B	; 59
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	8f e0       	ldi	r24, 0x0F	; 15
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <MDIO_Error_State_SetNippleValue+0x82>
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	2a 95       	dec	r18
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <MDIO_Error_State_SetNippleValue+0x7e>
    1bb2:	80 95       	com	r24
    1bb4:	84 23       	and	r24, r20
    1bb6:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1bb8:	ab e3       	ldi	r26, 0x3B	; 59
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	eb e3       	ldi	r30, 0x3B	; 59
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <MDIO_Error_State_SetNippleValue+0xac>
    1bd4:	66 0f       	add	r22, r22
    1bd6:	77 1f       	adc	r23, r23
    1bd8:	8a 95       	dec	r24
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <MDIO_Error_State_SetNippleValue+0xa8>
    1bdc:	cb 01       	movw	r24, r22
    1bde:	84 2b       	or	r24, r20
    1be0:	8c 93       	st	X, r24
    1be2:	7e c0       	rjmp	.+252    	; 0x1ce0 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1be4:	a8 e3       	ldi	r26, 0x38	; 56
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e8 e3       	ldi	r30, 0x38	; 56
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	8f e0       	ldi	r24, 0x0F	; 15
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <MDIO_Error_State_SetNippleValue+0xd4>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	2a 95       	dec	r18
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <MDIO_Error_State_SetNippleValue+0xd0>
    1c04:	80 95       	com	r24
    1c06:	84 23       	and	r24, r20
    1c08:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1c0a:	a8 e3       	ldi	r26, 0x38	; 56
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e8 e3       	ldi	r30, 0x38	; 56
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	88 2f       	mov	r24, r24
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	b9 01       	movw	r22, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <MDIO_Error_State_SetNippleValue+0xfe>
    1c26:	66 0f       	add	r22, r22
    1c28:	77 1f       	adc	r23, r23
    1c2a:	8a 95       	dec	r24
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <MDIO_Error_State_SetNippleValue+0xfa>
    1c2e:	cb 01       	movw	r24, r22
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	55 c0       	rjmp	.+170    	; 0x1ce0 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1c36:	a5 e3       	ldi	r26, 0x35	; 53
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e5 e3       	ldi	r30, 0x35	; 53
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	8f e0       	ldi	r24, 0x0F	; 15
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <MDIO_Error_State_SetNippleValue+0x126>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	2a 95       	dec	r18
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <MDIO_Error_State_SetNippleValue+0x122>
    1c56:	80 95       	com	r24
    1c58:	84 23       	and	r24, r20
    1c5a:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1c5c:	a5 e3       	ldi	r26, 0x35	; 53
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e5 e3       	ldi	r30, 0x35	; 53
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	b9 01       	movw	r22, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <MDIO_Error_State_SetNippleValue+0x150>
    1c78:	66 0f       	add	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	8a 95       	dec	r24
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <MDIO_Error_State_SetNippleValue+0x14c>
    1c80:	cb 01       	movw	r24, r22
    1c82:	84 2b       	or	r24, r20
    1c84:	8c 93       	st	X, r24
    1c86:	2c c0       	rjmp	.+88     	; 0x1ce0 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		case MDIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1c88:	a2 e3       	ldi	r26, 0x32	; 50
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e2 e3       	ldi	r30, 0x32	; 50
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	8f e0       	ldi	r24, 0x0F	; 15
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <MDIO_Error_State_SetNippleValue+0x178>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	2a 95       	dec	r18
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <MDIO_Error_State_SetNippleValue+0x174>
    1ca8:	80 95       	com	r24
    1caa:	84 23       	and	r24, r20
    1cac:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    1cae:	a2 e3       	ldi	r26, 0x32	; 50
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e2 e3       	ldi	r30, 0x32	; 50
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	b9 01       	movw	r22, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <MDIO_Error_State_SetNippleValue+0x1a2>
    1cca:	66 0f       	add	r22, r22
    1ccc:	77 1f       	adc	r23, r23
    1cce:	8a 95       	dec	r24
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <MDIO_Error_State_SetNippleValue+0x19e>
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	84 2b       	or	r24, r20
    1cd6:	8c 93       	st	X, r24
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <MDIO_Error_State_SetNippleValue+0x1b4>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1cda:	19 82       	std	Y+1, r1	; 0x01
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <MDIO_Error_State_SetNippleValue+0x1b4>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1cde:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce2:	26 96       	adiw	r28, 0x06	; 6
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <MDIO_VidActivePullUP>:

/*Active Pull Up Resistor Function */
void  MDIO_VidActivePullUP(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <MDIO_VidActivePullUP+0x6>
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_Error_State_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber,PIN_INPUT);
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	6a 81       	ldd	r22, Y+2	; 0x02
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
    MDIO_Error_State_SetPinValue( Copy_u8PinNumber, Copy_u8PortNumber,PIN_HIGH);
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	6a 81       	ldd	r22, Y+2	; 0x02
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>

}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <MADC_VidInit>:
#include"MADC_Private.h"
#include"MADC_Interface.h"

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1d28:	a7 e2       	ldi	r26, 0x27	; 39
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e7 e2       	ldi	r30, 0x27	; 39
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 64       	ori	r24, 0x40	; 64
    1d34:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1d36:	a7 e2       	ldi	r26, 0x27	; 39
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e7 e2       	ldi	r30, 0x27	; 39
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8f 77       	andi	r24, 0x7F	; 127
    1d42:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1d44:	a6 e2       	ldi	r26, 0x26	; 38
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e6 e2       	ldi	r30, 0x26	; 38
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 7f       	andi	r24, 0xF8	; 248
    1d50:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1d52:	a6 e2       	ldi	r26, 0x26	; 38
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e6 e2       	ldi	r30, 0x26	; 38
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	83 60       	ori	r24, 0x03	; 3
    1d5e:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1d60:	a7 e2       	ldi	r26, 0x27	; 39
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e7 e2       	ldi	r30, 0x27	; 39
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	8f 7d       	andi	r24, 0xDF	; 223
    1d6c:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1d6e:	a6 e2       	ldi	r26, 0x26	; 38
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e6 e2       	ldi	r30, 0x26	; 38
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 68       	ori	r24, 0x80	; 128
    1d7a:	8c 93       	st	X, r24
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	87 70       	andi	r24, 0x07	; 7
    1d92:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1d94:	a7 e2       	ldi	r26, 0x27	; 39
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e7 e2       	ldi	r30, 0x27	; 39
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	80 7e       	andi	r24, 0xE0	; 224
    1da0:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1da2:	a7 e2       	ldi	r26, 0x27	; 39
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e7 e2       	ldi	r30, 0x27	; 39
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	90 81       	ld	r25, Z
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	89 2b       	or	r24, r25
    1db0:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1db2:	a6 e2       	ldi	r26, 0x26	; 38
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e6 e2       	ldi	r30, 0x26	; 38
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	80 64       	ori	r24, 0x40	; 64
    1dbe:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1dc0:	e6 e2       	ldi	r30, 0x26	; 38
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	82 95       	swap	r24
    1dc8:	8f 70       	andi	r24, 0x0F	; 15
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	81 70       	andi	r24, 0x01	; 1
    1dd0:	90 70       	andi	r25, 0x00	; 0
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	a9 f3       	breq	.-22     	; 0x1dc0 <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1dd6:	e4 e2       	ldi	r30, 0x24	; 36
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
}
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <HSWITCH_VidInit_PullUP>:
 */

#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HSWITCH_Interface.h"
void HSWITCH_VidInit_PullUP(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <HSWITCH_VidInit_PullUP+0x6>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
 /*Set pin direction*/
  /*Active Pull up resistor*/
  MDIO_VidActivePullUP(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber);
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	81 81       	ldd	r24, Z+1	; 0x01
    1dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfe:	90 81       	ld	r25, Z
    1e00:	69 2f       	mov	r22, r25
    1e02:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <MDIO_VidActivePullUP>
}
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <HSWITCH_u8SwitchState>:

/*get Switch Value*/
u8 HSWITCH_u8SwitchState(SWITCH_t *Copy_SWITCH_tSwitch)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <HSWITCH_u8SwitchState+0x6>
    1e16:	0f 92       	push	r0
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
       /*Default state for Switch NOT_PRESSED = 1 IN PULL UP RESISTANCE*/
     u8 Copy_u8Pinvalue = 1 ;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Error_State_GetPinValue(Copy_SWITCH_tSwitch->Copy_u8PinNumber, Copy_SWITCH_tSwitch->Copy_u8PortNumber,&Copy_u8Pinvalue);
    1e24:	ea 81       	ldd	r30, Y+2	; 0x02
    1e26:	fb 81       	ldd	r31, Y+3	; 0x03
    1e28:	81 81       	ldd	r24, Z+1	; 0x01
    1e2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2e:	90 81       	ld	r25, Z
    1e30:	69 2f       	mov	r22, r25
    1e32:	9e 01       	movw	r18, r28
    1e34:	2f 5f       	subi	r18, 0xFF	; 255
    1e36:	3f 4f       	sbci	r19, 0xFF	; 255
    1e38:	a9 01       	movw	r20, r18
    1e3a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <MDIO_Error_State_GetPinValue>


return Copy_u8Pinvalue ;
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <HSEVEN_SEGMENT_VidInit>:



/*Seven Segment initialization*/
void HSEVEN_SEGMENT_VidInit(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <HSEVEN_SEGMENT_VidInit+0x6>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPortDirection(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,PORT_OUTPUT);
    1e5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5e:	80 81       	ld	r24, Z
    1e60:	6f ef       	ldi	r22, 0xFF	; 255
    1e62:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <MDIO_Error_State_SetPortDirection>
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <HSEVEN_SEGMENT_VidOff>:

/*Seven Segment OFF*/
void HSEVEN_SEGMENT_VidOff(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Off)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <HSEVEN_SEGMENT_VidOff+0x6>
    1e76:	0f 92       	push	r0
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1e82:	e9 81       	ldd	r30, Y+1	; 0x01
    1e84:	fa 81       	ldd	r31, Y+2	; 0x02
    1e86:	81 81       	ldd	r24, Z+1	; 0x01
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	31 f4       	brne	.+12     	; 0x1e98 <HSEVEN_SEGMENT_VidOff+0x28>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,Copy_u8Off);
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	80 81       	ld	r24, Z
    1e92:	6b 81       	ldd	r22, Y+3	; 0x03
    1e94:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
	}
	if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_ANODE)
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	81 81       	ldd	r24, Z+1	; 0x01
    1e9e:	88 23       	and	r24, r24
    1ea0:	51 f4       	brne	.+20     	; 0x1eb6 <HSEVEN_SEGMENT_VidOff+0x46>
	{
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~Copy_u8Off);
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	20 81       	ld	r18, Z
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	98 2f       	mov	r25, r24
    1eac:	90 95       	com	r25
    1eae:	82 2f       	mov	r24, r18
    1eb0:	69 2f       	mov	r22, r25
    1eb2:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
	}
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <HSEVEN_SEGMENT_VidDisplayNumber>:



/*Display a Number */
void HSEVEN_SEGMENT_VidDisplayNumber(SEVEN_SEGMENT_t *Copy_SEVEN_SEGMENT_t7SEG,u8 Copy_u8Number)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	27 97       	sbiw	r28, 0x07	; 7
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	6b 83       	std	Y+3, r22	; 0x03
if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration == COMMON_CATHODE)
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	81 81       	ldd	r24, Z+1	; 0x01
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <HSEVEN_SEGMENT_VidDisplayNumber+0x26>
    1ee6:	9b c0       	rjmp	.+310    	; 0x201e <HSEVEN_SEGMENT_VidDisplayNumber+0x15c>
{
	switch(Copy_u8Number)
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	3f 83       	std	Y+7, r19	; 0x07
    1ef0:	2e 83       	std	Y+6, r18	; 0x06
    1ef2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef6:	84 30       	cpi	r24, 0x04	; 4
    1ef8:	91 05       	cpc	r25, r1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <HSEVEN_SEGMENT_VidDisplayNumber+0x3c>
    1efc:	5f c0       	rjmp	.+190    	; 0x1fbc <HSEVEN_SEGMENT_VidDisplayNumber+0xfa>
    1efe:	2e 81       	ldd	r18, Y+6	; 0x06
    1f00:	3f 81       	ldd	r19, Y+7	; 0x07
    1f02:	25 30       	cpi	r18, 0x05	; 5
    1f04:	31 05       	cpc	r19, r1
    1f06:	dc f4       	brge	.+54     	; 0x1f3e <HSEVEN_SEGMENT_VidDisplayNumber+0x7c>
    1f08:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <HSEVEN_SEGMENT_VidDisplayNumber+0x52>
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <HSEVEN_SEGMENT_VidDisplayNumber+0xd0>
    1f14:	2e 81       	ldd	r18, Y+6	; 0x06
    1f16:	3f 81       	ldd	r19, Y+7	; 0x07
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <HSEVEN_SEGMENT_VidDisplayNumber+0x66>
    1f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f20:	9f 81       	ldd	r25, Y+7	; 0x07
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	79 f1       	breq	.+94     	; 0x1f84 <HSEVEN_SEGMENT_VidDisplayNumber+0xc2>
    1f26:	74 c0       	rjmp	.+232    	; 0x2010 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1f28:	2e 81       	ldd	r18, Y+6	; 0x06
    1f2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	b9 f1       	breq	.+110    	; 0x1fa0 <HSEVEN_SEGMENT_VidDisplayNumber+0xde>
    1f32:	8e 81       	ldd	r24, Y+6	; 0x06
    1f34:	9f 81       	ldd	r25, Y+7	; 0x07
    1f36:	83 30       	cpi	r24, 0x03	; 3
    1f38:	91 05       	cpc	r25, r1
    1f3a:	c9 f1       	breq	.+114    	; 0x1fae <HSEVEN_SEGMENT_VidDisplayNumber+0xec>
    1f3c:	69 c0       	rjmp	.+210    	; 0x2010 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1f3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f40:	3f 81       	ldd	r19, Y+7	; 0x07
    1f42:	27 30       	cpi	r18, 0x07	; 7
    1f44:	31 05       	cpc	r19, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <HSEVEN_SEGMENT_VidDisplayNumber+0x88>
    1f48:	4e c0       	rjmp	.+156    	; 0x1fe6 <HSEVEN_SEGMENT_VidDisplayNumber+0x124>
    1f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f4e:	88 30       	cpi	r24, 0x08	; 8
    1f50:	91 05       	cpc	r25, r1
    1f52:	5c f4       	brge	.+22     	; 0x1f6a <HSEVEN_SEGMENT_VidDisplayNumber+0xa8>
    1f54:	2e 81       	ldd	r18, Y+6	; 0x06
    1f56:	3f 81       	ldd	r19, Y+7	; 0x07
    1f58:	25 30       	cpi	r18, 0x05	; 5
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	b1 f1       	breq	.+108    	; 0x1fca <HSEVEN_SEGMENT_VidDisplayNumber+0x108>
    1f5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f60:	9f 81       	ldd	r25, Y+7	; 0x07
    1f62:	86 30       	cpi	r24, 0x06	; 6
    1f64:	91 05       	cpc	r25, r1
    1f66:	c1 f1       	breq	.+112    	; 0x1fd8 <HSEVEN_SEGMENT_VidDisplayNumber+0x116>
    1f68:	53 c0       	rjmp	.+166    	; 0x2010 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
    1f6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f6c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f6e:	28 30       	cpi	r18, 0x08	; 8
    1f70:	31 05       	cpc	r19, r1
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <HSEVEN_SEGMENT_VidDisplayNumber+0xb4>
    1f74:	3f c0       	rjmp	.+126    	; 0x1ff4 <HSEVEN_SEGMENT_VidDisplayNumber+0x132>
    1f76:	8e 81       	ldd	r24, Y+6	; 0x06
    1f78:	9f 81       	ldd	r25, Y+7	; 0x07
    1f7a:	89 30       	cpi	r24, 0x09	; 9
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <HSEVEN_SEGMENT_VidDisplayNumber+0xc0>
    1f80:	40 c0       	rjmp	.+128    	; 0x2002 <HSEVEN_SEGMENT_VidDisplayNumber+0x140>
    1f82:	46 c0       	rjmp	.+140    	; 0x2010 <HSEVEN_SEGMENT_VidDisplayNumber+0x14e>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ZERO);
    1f84:	e9 81       	ldd	r30, Y+1	; 0x01
    1f86:	fa 81       	ldd	r31, Y+2	; 0x02
    1f88:	80 81       	ld	r24, Z
    1f8a:	6f e3       	ldi	r22, 0x3F	; 63
    1f8c:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    1f90:	e6 c0       	rjmp	.+460    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ONE);
    1f92:	e9 81       	ldd	r30, Y+1	; 0x01
    1f94:	fa 81       	ldd	r31, Y+2	; 0x02
    1f96:	80 81       	ld	r24, Z
    1f98:	66 e0       	ldi	r22, 0x06	; 6
    1f9a:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    1f9e:	df c0       	rjmp	.+446    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,TWO);
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	80 81       	ld	r24, Z
    1fa6:	6b e5       	ldi	r22, 0x5B	; 91
    1fa8:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    1fac:	d8 c0       	rjmp	.+432    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,THREE);
    1fae:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb2:	80 81       	ld	r24, Z
    1fb4:	6f e4       	ldi	r22, 0x4F	; 79
    1fb6:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    1fba:	d1 c0       	rjmp	.+418    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FOUR);
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	80 81       	ld	r24, Z
    1fc2:	66 e6       	ldi	r22, 0x66	; 102
    1fc4:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    1fc8:	ca c0       	rjmp	.+404    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,FIVE);
    1fca:	e9 81       	ldd	r30, Y+1	; 0x01
    1fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fce:	80 81       	ld	r24, Z
    1fd0:	6d e6       	ldi	r22, 0x6D	; 109
    1fd2:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    1fd6:	c3 c0       	rjmp	.+390    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SIX);
    1fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fda:	fa 81       	ldd	r31, Y+2	; 0x02
    1fdc:	80 81       	ld	r24, Z
    1fde:	6d e7       	ldi	r22, 0x7D	; 125
    1fe0:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    1fe4:	bc c0       	rjmp	.+376    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,SEVEN);
    1fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fea:	80 81       	ld	r24, Z
    1fec:	67 e0       	ldi	r22, 0x07	; 7
    1fee:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    1ff2:	b5 c0       	rjmp	.+362    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,EIGHT);
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	80 81       	ld	r24, Z
    1ffa:	6f e7       	ldi	r22, 0x7F	; 127
    1ffc:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    2000:	ae c0       	rjmp	.+348    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,NINE);
    2002:	e9 81       	ldd	r30, Y+1	; 0x01
    2004:	fa 81       	ldd	r31, Y+2	; 0x02
    2006:	80 81       	ld	r24, Z
    2008:	6f e6       	ldi	r22, 0x6F	; 111
    200a:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    200e:	a7 c0       	rjmp	.+334    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,ERROR);
    2010:	e9 81       	ldd	r30, Y+1	; 0x01
    2012:	fa 81       	ldd	r31, Y+2	; 0x02
    2014:	80 81       	ld	r24, Z
    2016:	69 e7       	ldi	r22, 0x79	; 121
    2018:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    201c:	a0 c0       	rjmp	.+320    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
	}
}
else if (Copy_SEVEN_SEGMENT_t7SEG->Copy_u87SegConfiguration==COMMON_ANODE)
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	81 81       	ldd	r24, Z+1	; 0x01
    2024:	88 23       	and	r24, r24
    2026:	09 f0       	breq	.+2      	; 0x202a <HSEVEN_SEGMENT_VidDisplayNumber+0x168>
    2028:	9a c0       	rjmp	.+308    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
{
	switch(Copy_u8Number)
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	3d 83       	std	Y+5, r19	; 0x05
    2032:	2c 83       	std	Y+4, r18	; 0x04
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	9d 81       	ldd	r25, Y+5	; 0x05
    2038:	84 30       	cpi	r24, 0x04	; 4
    203a:	91 05       	cpc	r25, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <HSEVEN_SEGMENT_VidDisplayNumber+0x17e>
    203e:	5f c0       	rjmp	.+190    	; 0x20fe <HSEVEN_SEGMENT_VidDisplayNumber+0x23c>
    2040:	2c 81       	ldd	r18, Y+4	; 0x04
    2042:	3d 81       	ldd	r19, Y+5	; 0x05
    2044:	25 30       	cpi	r18, 0x05	; 5
    2046:	31 05       	cpc	r19, r1
    2048:	dc f4       	brge	.+54     	; 0x2080 <HSEVEN_SEGMENT_VidDisplayNumber+0x1be>
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	91 05       	cpc	r25, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <HSEVEN_SEGMENT_VidDisplayNumber+0x194>
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <HSEVEN_SEGMENT_VidDisplayNumber+0x212>
    2056:	2c 81       	ldd	r18, Y+4	; 0x04
    2058:	3d 81       	ldd	r19, Y+5	; 0x05
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	2c f4       	brge	.+10     	; 0x206a <HSEVEN_SEGMENT_VidDisplayNumber+0x1a8>
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	79 f1       	breq	.+94     	; 0x20c6 <HSEVEN_SEGMENT_VidDisplayNumber+0x204>
    2068:	74 c0       	rjmp	.+232    	; 0x2152 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    206a:	2c 81       	ldd	r18, Y+4	; 0x04
    206c:	3d 81       	ldd	r19, Y+5	; 0x05
    206e:	22 30       	cpi	r18, 0x02	; 2
    2070:	31 05       	cpc	r19, r1
    2072:	b9 f1       	breq	.+110    	; 0x20e2 <HSEVEN_SEGMENT_VidDisplayNumber+0x220>
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	91 05       	cpc	r25, r1
    207c:	c9 f1       	breq	.+114    	; 0x20f0 <HSEVEN_SEGMENT_VidDisplayNumber+0x22e>
    207e:	69 c0       	rjmp	.+210    	; 0x2152 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    2080:	2c 81       	ldd	r18, Y+4	; 0x04
    2082:	3d 81       	ldd	r19, Y+5	; 0x05
    2084:	27 30       	cpi	r18, 0x07	; 7
    2086:	31 05       	cpc	r19, r1
    2088:	09 f4       	brne	.+2      	; 0x208c <HSEVEN_SEGMENT_VidDisplayNumber+0x1ca>
    208a:	4e c0       	rjmp	.+156    	; 0x2128 <HSEVEN_SEGMENT_VidDisplayNumber+0x266>
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	9d 81       	ldd	r25, Y+5	; 0x05
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	91 05       	cpc	r25, r1
    2094:	5c f4       	brge	.+22     	; 0x20ac <HSEVEN_SEGMENT_VidDisplayNumber+0x1ea>
    2096:	2c 81       	ldd	r18, Y+4	; 0x04
    2098:	3d 81       	ldd	r19, Y+5	; 0x05
    209a:	25 30       	cpi	r18, 0x05	; 5
    209c:	31 05       	cpc	r19, r1
    209e:	b1 f1       	breq	.+108    	; 0x210c <HSEVEN_SEGMENT_VidDisplayNumber+0x24a>
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	86 30       	cpi	r24, 0x06	; 6
    20a6:	91 05       	cpc	r25, r1
    20a8:	c1 f1       	breq	.+112    	; 0x211a <HSEVEN_SEGMENT_VidDisplayNumber+0x258>
    20aa:	53 c0       	rjmp	.+166    	; 0x2152 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
    20ac:	2c 81       	ldd	r18, Y+4	; 0x04
    20ae:	3d 81       	ldd	r19, Y+5	; 0x05
    20b0:	28 30       	cpi	r18, 0x08	; 8
    20b2:	31 05       	cpc	r19, r1
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <HSEVEN_SEGMENT_VidDisplayNumber+0x1f6>
    20b6:	3f c0       	rjmp	.+126    	; 0x2136 <HSEVEN_SEGMENT_VidDisplayNumber+0x274>
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	9d 81       	ldd	r25, Y+5	; 0x05
    20bc:	89 30       	cpi	r24, 0x09	; 9
    20be:	91 05       	cpc	r25, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <HSEVEN_SEGMENT_VidDisplayNumber+0x202>
    20c2:	40 c0       	rjmp	.+128    	; 0x2144 <HSEVEN_SEGMENT_VidDisplayNumber+0x282>
    20c4:	46 c0       	rjmp	.+140    	; 0x2152 <HSEVEN_SEGMENT_VidDisplayNumber+0x290>
	{
	case 0:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ZERO);
    20c6:	e9 81       	ldd	r30, Y+1	; 0x01
    20c8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ca:	80 81       	ld	r24, Z
    20cc:	60 ec       	ldi	r22, 0xC0	; 192
    20ce:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    20d2:	45 c0       	rjmp	.+138    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 1:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ONE);
    20d4:	e9 81       	ldd	r30, Y+1	; 0x01
    20d6:	fa 81       	ldd	r31, Y+2	; 0x02
    20d8:	80 81       	ld	r24, Z
    20da:	69 ef       	ldi	r22, 0xF9	; 249
    20dc:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    20e0:	3e c0       	rjmp	.+124    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 2:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~TWO);
    20e2:	e9 81       	ldd	r30, Y+1	; 0x01
    20e4:	fa 81       	ldd	r31, Y+2	; 0x02
    20e6:	80 81       	ld	r24, Z
    20e8:	64 ea       	ldi	r22, 0xA4	; 164
    20ea:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    20ee:	37 c0       	rjmp	.+110    	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 3:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~THREE);
    20f0:	e9 81       	ldd	r30, Y+1	; 0x01
    20f2:	fa 81       	ldd	r31, Y+2	; 0x02
    20f4:	80 81       	ld	r24, Z
    20f6:	60 eb       	ldi	r22, 0xB0	; 176
    20f8:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    20fc:	30 c0       	rjmp	.+96     	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 4:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FOUR);
    20fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2100:	fa 81       	ldd	r31, Y+2	; 0x02
    2102:	80 81       	ld	r24, Z
    2104:	69 e9       	ldi	r22, 0x99	; 153
    2106:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    210a:	29 c0       	rjmp	.+82     	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 5:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~FIVE);
    210c:	e9 81       	ldd	r30, Y+1	; 0x01
    210e:	fa 81       	ldd	r31, Y+2	; 0x02
    2110:	80 81       	ld	r24, Z
    2112:	62 e9       	ldi	r22, 0x92	; 146
    2114:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    2118:	22 c0       	rjmp	.+68     	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 6:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SIX);
    211a:	e9 81       	ldd	r30, Y+1	; 0x01
    211c:	fa 81       	ldd	r31, Y+2	; 0x02
    211e:	80 81       	ld	r24, Z
    2120:	62 e8       	ldi	r22, 0x82	; 130
    2122:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    2126:	1b c0       	rjmp	.+54     	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 7:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~SEVEN);
    2128:	e9 81       	ldd	r30, Y+1	; 0x01
    212a:	fa 81       	ldd	r31, Y+2	; 0x02
    212c:	80 81       	ld	r24, Z
    212e:	68 ef       	ldi	r22, 0xF8	; 248
    2130:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    2134:	14 c0       	rjmp	.+40     	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 8:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~EIGHT);
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	80 81       	ld	r24, Z
    213c:	60 e8       	ldi	r22, 0x80	; 128
    213e:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    2142:	0d c0       	rjmp	.+26     	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	case 9:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~NINE);
    2144:	e9 81       	ldd	r30, Y+1	; 0x01
    2146:	fa 81       	ldd	r31, Y+2	; 0x02
    2148:	80 81       	ld	r24, Z
    214a:	60 e9       	ldi	r22, 0x90	; 144
    214c:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
    2150:	06 c0       	rjmp	.+12     	; 0x215e <HSEVEN_SEGMENT_VidDisplayNumber+0x29c>
		break ;
	default:
		MDIO_Error_State_SetPortValue(Copy_SEVEN_SEGMENT_t7SEG->Copy_u8SevenSegmentPort,~ERROR);
    2152:	e9 81       	ldd	r30, Y+1	; 0x01
    2154:	fa 81       	ldd	r31, Y+2	; 0x02
    2156:	80 81       	ld	r24, Z
    2158:	66 e8       	ldi	r22, 0x86	; 134
    215a:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
	}
}
}
    215e:	27 96       	adiw	r28, 0x07	; 7
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <HLED_VidInit>:
       "/"*Fill This Function*"/"
}
 */
///by using struct
void HLED_VidInit(LED_t *Copy_Led)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <HLED_VidInit+0x6>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    217e:	e9 81       	ldd	r30, Y+1	; 0x01
    2180:	fa 81       	ldd	r31, Y+2	; 0x02
    2182:	81 81       	ldd	r24, Z+1	; 0x01
    2184:	e9 81       	ldd	r30, Y+1	; 0x01
    2186:	fa 81       	ldd	r31, Y+2	; 0x02
    2188:	90 81       	ld	r25, Z
    218a:	69 2f       	mov	r22, r25
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
}
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <HLED_VidLed_On>:

void HLED_VidLed_On(LED_t *Copy_Led)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <HLED_VidLed_On+0x6>
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    21aa:	e9 81       	ldd	r30, Y+1	; 0x01
    21ac:	fa 81       	ldd	r31, Y+2	; 0x02
    21ae:	81 81       	ldd	r24, Z+1	; 0x01
    21b0:	e9 81       	ldd	r30, Y+1	; 0x01
    21b2:	fa 81       	ldd	r31, Y+2	; 0x02
    21b4:	90 81       	ld	r25, Z
    21b6:	69 2f       	mov	r22, r25
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <HLED_VidLed_Off>:

void HLED_VidLed_Off(LED_t *Copy_Led)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <HLED_VidLed_Off+0x6>
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    21d6:	e9 81       	ldd	r30, Y+1	; 0x01
    21d8:	fa 81       	ldd	r31, Y+2	; 0x02
    21da:	81 81       	ldd	r24, Z+1	; 0x01
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	90 81       	ld	r25, Z
    21e2:	69 2f       	mov	r22, r25
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <HLED_VidLed_Toggle+0x6>
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
	          /*Fill This Function*/
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    2202:	80 91 be 01 	lds	r24, 0x01BE
    2206:	88 23       	and	r24, r24
    2208:	71 f4       	brne	.+28     	; 0x2226 <HLED_VidLed_Toggle+0x32>
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    220a:	e9 81       	ldd	r30, Y+1	; 0x01
    220c:	fa 81       	ldd	r31, Y+2	; 0x02
    220e:	81 81       	ldd	r24, Z+1	; 0x01
    2210:	e9 81       	ldd	r30, Y+1	; 0x01
    2212:	fa 81       	ldd	r31, Y+2	; 0x02
    2214:	90 81       	ld	r25, Z
    2216:	69 2f       	mov	r22, r25
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
		Flag=1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	80 93 be 01 	sts	0x01BE, r24
    2224:	0c c0       	rjmp	.+24     	; 0x223e <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8_Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    2226:	e9 81       	ldd	r30, Y+1	; 0x01
    2228:	fa 81       	ldd	r31, Y+2	; 0x02
    222a:	81 81       	ldd	r24, Z+1	; 0x01
    222c:	e9 81       	ldd	r30, Y+1	; 0x01
    222e:	fa 81       	ldd	r31, Y+2	; 0x02
    2230:	90 81       	ld	r25, Z
    2232:	69 2f       	mov	r22, r25
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
		Flag=0;
    223a:	10 92 be 01 	sts	0x01BE, r1
	}
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <HKPD_VidInit>:
		},
};
/*KPD INIT*/

void HKPD_VidInit(void)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	62 e0       	ldi	r22, 0x02	; 2
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	62 e0       	ldi	r22, 0x02	; 2
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	62 e0       	ldi	r22, 0x02	; 2
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    2278:	84 e0       	ldi	r24, 0x04	; 4
    227a:	62 e0       	ldi	r22, 0x02	; 2
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    2282:	85 e0       	ldi	r24, 0x05	; 5
    2284:	62 e0       	ldi	r22, 0x02	; 2
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    228c:	86 e0       	ldi	r24, 0x06	; 6
    228e:	62 e0       	ldi	r22, 0x02	; 2
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    2296:	87 e0       	ldi	r24, 0x07	; 7
    2298:	62 e0       	ldi	r22, 0x02	; 2
    229a:	41 e0       	ldi	r20, 0x01	; 1
    229c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	62 e0       	ldi	r22, 0x02	; 2
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	62 e0       	ldi	r22, 0x02	; 2
    22ae:	41 e0       	ldi	r20, 0x01	; 1
    22b0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	62 e0       	ldi	r22, 0x02	; 2
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	62 e0       	ldi	r22, 0x02	; 2
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    22c8:	84 e0       	ldi	r24, 0x04	; 4
    22ca:	62 e0       	ldi	r22, 0x02	; 2
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    22d2:	85 e0       	ldi	r24, 0x05	; 5
    22d4:	62 e0       	ldi	r22, 0x02	; 2
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    22dc:	86 e0       	ldi	r24, 0x06	; 6
    22de:	62 e0       	ldi	r22, 0x02	; 2
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    22e6:	87 e0       	ldi	r24, 0x07	; 7
    22e8:	62 e0       	ldi	r22, 0x02	; 2
    22ea:	41 e0       	ldi	r20, 0x01	; 1
    22ec:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>

}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <HKPD_U8GetKeyPressed>:
/*KPD Get Pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	62 97       	sbiw	r28, 0x12	; 18
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    230a:	8f ef       	ldi	r24, 0xFF	; 255
    230c:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    230e:	84 e0       	ldi	r24, 0x04	; 4
    2310:	88 8b       	std	Y+16, r24	; 0x10
    2312:	b5 c0       	rjmp	.+362    	; 0x247e <HKPD_U8GetKeyPressed+0x188>
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    2314:	88 89       	ldd	r24, Y+16	; 0x10
    2316:	62 e0       	ldi	r22, 0x02	; 2
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    231e:	19 8a       	std	Y+17, r1	; 0x11
    2320:	a2 c0       	rjmp	.+324    	; 0x2466 <HKPD_U8GetKeyPressed+0x170>
			{
				/*check the status of the switch*/
				MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2322:	9e 01       	movw	r18, r28
    2324:	2e 5e       	subi	r18, 0xEE	; 238
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	89 89       	ldd	r24, Y+17	; 0x11
    232a:	62 e0       	ldi	r22, 0x02	; 2
    232c:	a9 01       	movw	r20, r18
    232e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
    2332:	8a 89       	ldd	r24, Y+18	; 0x12
    2334:	88 23       	and	r24, r24
    2336:	09 f0       	breq	.+2      	; 0x233a <HKPD_U8GetKeyPressed+0x44>
    2338:	93 c0       	rjmp	.+294    	; 0x2460 <HKPD_U8GetKeyPressed+0x16a>
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    233a:	88 89       	ldd	r24, Y+16	; 0x10
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	ac 01       	movw	r20, r24
    2342:	44 50       	subi	r20, 0x04	; 4
    2344:	50 40       	sbci	r21, 0x00	; 0
    2346:	89 89       	ldd	r24, Y+17	; 0x11
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	ca 01       	movw	r24, r20
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	82 0f       	add	r24, r18
    2358:	93 1f       	adc	r25, r19
    235a:	fc 01       	movw	r30, r24
    235c:	ea 56       	subi	r30, 0x6A	; 106
    235e:	fe 4f       	sbci	r31, 0xFE	; 254
    2360:	80 81       	ld	r24, Z
    2362:	8f 87       	std	Y+15, r24	; 0x0f
    2364:	08 c0       	rjmp	.+16     	; 0x2376 <HKPD_U8GetKeyPressed+0x80>
					/*wait until the switch is released(Single Pressd)*/
					while(LOC_U8PinState==0)
					{
						MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2366:	9e 01       	movw	r18, r28
    2368:	2e 5e       	subi	r18, 0xEE	; 238
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	89 89       	ldd	r24, Y+17	; 0x11
    236e:	62 e0       	ldi	r22, 0x02	; 2
    2370:	a9 01       	movw	r20, r18
    2372:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <MDIO_Error_State_GetPinValue>
				if(LOC_U8PinState==0)
				{
					/*Get the Value of the current pressed switch*/
					LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
					/*wait until the switch is released(Single Pressd)*/
					while(LOC_U8PinState==0)
    2376:	8a 89       	ldd	r24, Y+18	; 0x12
    2378:	88 23       	and	r24, r24
    237a:	a9 f3       	breq	.-22     	; 0x2366 <HKPD_U8GetKeyPressed+0x70>
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	a0 e2       	ldi	r26, 0x20	; 32
    2382:	b1 e4       	ldi	r27, 0x41	; 65
    2384:	8b 87       	std	Y+11, r24	; 0x0b
    2386:	9c 87       	std	Y+12, r25	; 0x0c
    2388:	ad 87       	std	Y+13, r26	; 0x0d
    238a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238c:	6b 85       	ldd	r22, Y+11	; 0x0b
    238e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2390:	8d 85       	ldd	r24, Y+13	; 0x0d
    2392:	9e 85       	ldd	r25, Y+14	; 0x0e
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	4a ef       	ldi	r20, 0xFA	; 250
    239a:	54 e4       	ldi	r21, 0x44	; 68
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	8f 83       	std	Y+7, r24	; 0x07
    23a6:	98 87       	std	Y+8, r25	; 0x08
    23a8:	a9 87       	std	Y+9, r26	; 0x09
    23aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ac:	6f 81       	ldd	r22, Y+7	; 0x07
    23ae:	78 85       	ldd	r23, Y+8	; 0x08
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e8       	ldi	r20, 0x80	; 128
    23ba:	5f e3       	ldi	r21, 0x3F	; 63
    23bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c0:	88 23       	and	r24, r24
    23c2:	2c f4       	brge	.+10     	; 0x23ce <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	9e 83       	std	Y+6, r25	; 0x06
    23ca:	8d 83       	std	Y+5, r24	; 0x05
    23cc:	3f c0       	rjmp	.+126    	; 0x244c <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	78 85       	ldd	r23, Y+8	; 0x08
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	57 e4       	ldi	r21, 0x47	; 71
    23de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	4c f5       	brge	.+82     	; 0x2438 <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e2       	ldi	r20, 0x20	; 32
    23f4:	51 e4       	ldi	r21, 0x41	; 65
    23f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	0f c0       	rjmp	.+30     	; 0x242e <HKPD_U8GetKeyPressed+0x138>
    2410:	88 ec       	ldi	r24, 0xC8	; 200
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	9c 81       	ldd	r25, Y+4	; 0x04
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <HKPD_U8GetKeyPressed+0x126>
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	69 f7       	brne	.-38     	; 0x2410 <HKPD_U8GetKeyPressed+0x11a>
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2438:	6f 81       	ldd	r22, Y+7	; 0x07
    243a:	78 85       	ldd	r23, Y+8	; 0x08
    243c:	89 85       	ldd	r24, Y+9	; 0x09
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <HKPD_U8GetKeyPressed+0x162>
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	89 83       	std	Y+1, r24	; 0x01
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
		{
			/*Active the Column */
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
			/*Loop to read the all row pins*/
			for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2460:	89 89       	ldd	r24, Y+17	; 0x11
    2462:	8f 5f       	subi	r24, 0xFF	; 255
    2464:	89 8b       	std	Y+17, r24	; 0x11
    2466:	89 89       	ldd	r24, Y+17	; 0x11
    2468:	84 30       	cpi	r24, 0x04	; 4
    246a:	08 f4       	brcc	.+2      	; 0x246e <HKPD_U8GetKeyPressed+0x178>
    246c:	5a cf       	rjmp	.-332    	; 0x2322 <HKPD_U8GetKeyPressed+0x2c>
				{
					/*Do Nothing*/
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    246e:	88 89       	ldd	r24, Y+16	; 0x10
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	while(1){
		/*Looping on columns of the keypad*/
		for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2478:	88 89       	ldd	r24, Y+16	; 0x10
    247a:	8f 5f       	subi	r24, 0xFF	; 255
    247c:	88 8b       	std	Y+16, r24	; 0x10
    247e:	88 89       	ldd	r24, Y+16	; 0x10
    2480:	88 30       	cpi	r24, 0x08	; 8
    2482:	08 f4       	brcc	.+2      	; 0x2486 <HKPD_U8GetKeyPressed+0x190>
    2484:	47 cf       	rjmp	.-370    	; 0x2314 <HKPD_U8GetKeyPressed+0x1e>
				}
			}
			/*Deactivate the Column*/
			MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
		}
	if(LOC_U8ReturnValue!=255)
    2486:	8f 85       	ldd	r24, Y+15	; 0x0f
    2488:	8f 3f       	cpi	r24, 0xFF	; 255
    248a:	09 f4       	brne	.+2      	; 0x248e <HKPD_U8GetKeyPressed+0x198>
    248c:	40 cf       	rjmp	.-384    	; 0x230e <HKPD_U8GetKeyPressed+0x18>
		return LOC_U8ReturnValue;
    248e:	8f 85       	ldd	r24, Y+15	; 0x0f
	}



}
    2490:	62 96       	adiw	r28, 0x12	; 18
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <HCLCD_Vid8Bits_SendCommand>:


/*Send Command 8 Bits*/

void HCLCD_Vid8Bits_SendCommand(u8 Copy_u8Command)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	6d 97       	sbiw	r28, 0x1d	; 29
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select command register-->Write zero on RS Pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	62 e0       	ldi	r22, 0x02	; 2
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	62 e0       	ldi	r22, 0x02	; 2
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    24cc:	82 e0       	ldi	r24, 0x02	; 2
    24ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24d0:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	62 e0       	ldi	r22, 0x02	; 2
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a0 e0       	ldi	r26, 0x00	; 0
    24e4:	b0 e4       	ldi	r27, 0x40	; 64
    24e6:	89 8f       	std	Y+25, r24	; 0x19
    24e8:	9a 8f       	std	Y+26, r25	; 0x1a
    24ea:	ab 8f       	std	Y+27, r26	; 0x1b
    24ec:	bc 8f       	std	Y+28, r27	; 0x1c
    24ee:	69 8d       	ldd	r22, Y+25	; 0x19
    24f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4a ef       	ldi	r20, 0xFA	; 250
    24fc:	54 e4       	ldi	r21, 0x44	; 68
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8d 8b       	std	Y+21, r24	; 0x15
    2508:	9e 8b       	std	Y+22, r25	; 0x16
    250a:	af 8b       	std	Y+23, r26	; 0x17
    250c:	b8 8f       	std	Y+24, r27	; 0x18
    250e:	6d 89       	ldd	r22, Y+21	; 0x15
    2510:	7e 89       	ldd	r23, Y+22	; 0x16
    2512:	8f 89       	ldd	r24, Y+23	; 0x17
    2514:	98 8d       	ldd	r25, Y+24	; 0x18
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	2c f4       	brge	.+10     	; 0x2530 <HCLCD_Vid8Bits_SendCommand+0x8e>
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9c 8b       	std	Y+20, r25	; 0x14
    252c:	8b 8b       	std	Y+19, r24	; 0x13
    252e:	3f c0       	rjmp	.+126    	; 0x25ae <HCLCD_Vid8Bits_SendCommand+0x10c>
    2530:	6d 89       	ldd	r22, Y+21	; 0x15
    2532:	7e 89       	ldd	r23, Y+22	; 0x16
    2534:	8f 89       	ldd	r24, Y+23	; 0x17
    2536:	98 8d       	ldd	r25, Y+24	; 0x18
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	4c f5       	brge	.+82     	; 0x259a <HCLCD_Vid8Bits_SendCommand+0xf8>
    2548:	69 8d       	ldd	r22, Y+25	; 0x19
    254a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	51 e4       	ldi	r21, 0x41	; 65
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <HCLCD_Vid8Bits_SendCommand+0xee>
    2572:	88 ec       	ldi	r24, 0xC8	; 200
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9a 8b       	std	Y+18, r25	; 0x12
    2578:	89 8b       	std	Y+17, r24	; 0x11
    257a:	89 89       	ldd	r24, Y+17	; 0x11
    257c:	9a 89       	ldd	r25, Y+18	; 0x12
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <HCLCD_Vid8Bits_SendCommand+0xdc>
    2582:	9a 8b       	std	Y+18, r25	; 0x12
    2584:	89 8b       	std	Y+17, r24	; 0x11
    2586:	8b 89       	ldd	r24, Y+19	; 0x13
    2588:	9c 89       	ldd	r25, Y+20	; 0x14
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	9c 8b       	std	Y+20, r25	; 0x14
    258e:	8b 8b       	std	Y+19, r24	; 0x13
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	69 f7       	brne	.-38     	; 0x2572 <HCLCD_Vid8Bits_SendCommand+0xd0>
    2598:	14 c0       	rjmp	.+40     	; 0x25c2 <HCLCD_Vid8Bits_SendCommand+0x120>
    259a:	6d 89       	ldd	r22, Y+21	; 0x15
    259c:	7e 89       	ldd	r23, Y+22	; 0x16
    259e:	8f 89       	ldd	r24, Y+23	; 0x17
    25a0:	98 8d       	ldd	r25, Y+24	; 0x18
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9c 8b       	std	Y+20, r25	; 0x14
    25ac:	8b 8b       	std	Y+19, r24	; 0x13
    25ae:	8b 89       	ldd	r24, Y+19	; 0x13
    25b0:	9c 89       	ldd	r25, Y+20	; 0x14
    25b2:	98 8b       	std	Y+16, r25	; 0x10
    25b4:	8f 87       	std	Y+15, r24	; 0x0f
    25b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b8:	98 89       	ldd	r25, Y+16	; 0x10
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <HCLCD_Vid8Bits_SendCommand+0x118>
    25be:	98 8b       	std	Y+16, r25	; 0x10
    25c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	62 e0       	ldi	r22, 0x02	; 2
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 e0       	ldi	r26, 0x00	; 0
    25d2:	b0 e4       	ldi	r27, 0x40	; 64
    25d4:	8b 87       	std	Y+11, r24	; 0x0b
    25d6:	9c 87       	std	Y+12, r25	; 0x0c
    25d8:	ad 87       	std	Y+13, r26	; 0x0d
    25da:	be 87       	std	Y+14, r27	; 0x0e
    25dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25de:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	4a ef       	ldi	r20, 0xFA	; 250
    25ea:	54 e4       	ldi	r21, 0x44	; 68
    25ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	8f 83       	std	Y+7, r24	; 0x07
    25f6:	98 87       	std	Y+8, r25	; 0x08
    25f8:	a9 87       	std	Y+9, r26	; 0x09
    25fa:	ba 87       	std	Y+10, r27	; 0x0a
    25fc:	6f 81       	ldd	r22, Y+7	; 0x07
    25fe:	78 85       	ldd	r23, Y+8	; 0x08
    2600:	89 85       	ldd	r24, Y+9	; 0x09
    2602:	9a 85       	ldd	r25, Y+10	; 0x0a
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e8       	ldi	r20, 0x80	; 128
    260a:	5f e3       	ldi	r21, 0x3F	; 63
    260c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2610:	88 23       	and	r24, r24
    2612:	2c f4       	brge	.+10     	; 0x261e <HCLCD_Vid8Bits_SendCommand+0x17c>
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	3f c0       	rjmp	.+126    	; 0x269c <HCLCD_Vid8Bits_SendCommand+0x1fa>
    261e:	6f 81       	ldd	r22, Y+7	; 0x07
    2620:	78 85       	ldd	r23, Y+8	; 0x08
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	3f ef       	ldi	r19, 0xFF	; 255
    262a:	4f e7       	ldi	r20, 0x7F	; 127
    262c:	57 e4       	ldi	r21, 0x47	; 71
    262e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2632:	18 16       	cp	r1, r24
    2634:	4c f5       	brge	.+82     	; 0x2688 <HCLCD_Vid8Bits_SendCommand+0x1e6>
    2636:	6b 85       	ldd	r22, Y+11	; 0x0b
    2638:	7c 85       	ldd	r23, Y+12	; 0x0c
    263a:	8d 85       	ldd	r24, Y+13	; 0x0d
    263c:	9e 85       	ldd	r25, Y+14	; 0x0e
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e2       	ldi	r20, 0x20	; 32
    2644:	51 e4       	ldi	r21, 0x41	; 65
    2646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	0f c0       	rjmp	.+30     	; 0x267e <HCLCD_Vid8Bits_SendCommand+0x1dc>
    2660:	88 ec       	ldi	r24, 0xC8	; 200
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	8b 83       	std	Y+3, r24	; 0x03
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <HCLCD_Vid8Bits_SendCommand+0x1ca>
    2670:	9c 83       	std	Y+4, r25	; 0x04
    2672:	8b 83       	std	Y+3, r24	; 0x03
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	9e 81       	ldd	r25, Y+6	; 0x06
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	9e 83       	std	Y+6, r25	; 0x06
    267c:	8d 83       	std	Y+5, r24	; 0x05
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	69 f7       	brne	.-38     	; 0x2660 <HCLCD_Vid8Bits_SendCommand+0x1be>
    2686:	14 c0       	rjmp	.+40     	; 0x26b0 <HCLCD_Vid8Bits_SendCommand+0x20e>
    2688:	6f 81       	ldd	r22, Y+7	; 0x07
    268a:	78 85       	ldd	r23, Y+8	; 0x08
    268c:	89 85       	ldd	r24, Y+9	; 0x09
    268e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <HCLCD_Vid8Bits_SendCommand+0x206>
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	62 e0       	ldi	r22, 0x02	; 2
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
}
    26ba:	6d 96       	adiw	r28, 0x1d	; 29
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <HCLCD_Vid8Bits_Init>:

/*LCD 8 Bits Initialization*/
void HCLCD_Vid8Bits_Init(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	e8 97       	sbiw	r28, 0x38	; 56
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and Control Port Initialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	6f ef       	ldi	r22, 0xFF	; 255
    26e4:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	62 e0       	ldi	r22, 0x02	; 2
    26ec:	41 e0       	ldi	r20, 0x01	; 1
    26ee:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	62 e0       	ldi	r22, 0x02	; 2
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	62 e0       	ldi	r22, 0x02	; 2
    2700:	41 e0       	ldi	r20, 0x01	; 1
    2702:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a0 ef       	ldi	r26, 0xF0	; 240
    270c:	b1 e4       	ldi	r27, 0x41	; 65
    270e:	8d ab       	std	Y+53, r24	; 0x35
    2710:	9e ab       	std	Y+54, r25	; 0x36
    2712:	af ab       	std	Y+55, r26	; 0x37
    2714:	b8 af       	std	Y+56, r27	; 0x38
    2716:	6d a9       	ldd	r22, Y+53	; 0x35
    2718:	7e a9       	ldd	r23, Y+54	; 0x36
    271a:	8f a9       	ldd	r24, Y+55	; 0x37
    271c:	98 ad       	ldd	r25, Y+56	; 0x38
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	4a ef       	ldi	r20, 0xFA	; 250
    2724:	54 e4       	ldi	r21, 0x44	; 68
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	89 ab       	std	Y+49, r24	; 0x31
    2730:	9a ab       	std	Y+50, r25	; 0x32
    2732:	ab ab       	std	Y+51, r26	; 0x33
    2734:	bc ab       	std	Y+52, r27	; 0x34
    2736:	69 a9       	ldd	r22, Y+49	; 0x31
    2738:	7a a9       	ldd	r23, Y+50	; 0x32
    273a:	8b a9       	ldd	r24, Y+51	; 0x33
    273c:	9c a9       	ldd	r25, Y+52	; 0x34
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	5f e3       	ldi	r21, 0x3F	; 63
    2746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274a:	88 23       	and	r24, r24
    274c:	2c f4       	brge	.+10     	; 0x2758 <HCLCD_Vid8Bits_Init+0x8c>
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	98 ab       	std	Y+48, r25	; 0x30
    2754:	8f a7       	std	Y+47, r24	; 0x2f
    2756:	3f c0       	rjmp	.+126    	; 0x27d6 <HCLCD_Vid8Bits_Init+0x10a>
    2758:	69 a9       	ldd	r22, Y+49	; 0x31
    275a:	7a a9       	ldd	r23, Y+50	; 0x32
    275c:	8b a9       	ldd	r24, Y+51	; 0x33
    275e:	9c a9       	ldd	r25, Y+52	; 0x34
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	3f ef       	ldi	r19, 0xFF	; 255
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	57 e4       	ldi	r21, 0x47	; 71
    2768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	4c f5       	brge	.+82     	; 0x27c2 <HCLCD_Vid8Bits_Init+0xf6>
    2770:	6d a9       	ldd	r22, Y+53	; 0x35
    2772:	7e a9       	ldd	r23, Y+54	; 0x36
    2774:	8f a9       	ldd	r24, Y+55	; 0x37
    2776:	98 ad       	ldd	r25, Y+56	; 0x38
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e2       	ldi	r20, 0x20	; 32
    277e:	51 e4       	ldi	r21, 0x41	; 65
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	98 ab       	std	Y+48, r25	; 0x30
    2796:	8f a7       	std	Y+47, r24	; 0x2f
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <HCLCD_Vid8Bits_Init+0xec>
    279a:	88 ec       	ldi	r24, 0xC8	; 200
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9e a7       	std	Y+46, r25	; 0x2e
    27a0:	8d a7       	std	Y+45, r24	; 0x2d
    27a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    27a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <HCLCD_Vid8Bits_Init+0xda>
    27aa:	9e a7       	std	Y+46, r25	; 0x2e
    27ac:	8d a7       	std	Y+45, r24	; 0x2d
    27ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    27b0:	98 a9       	ldd	r25, Y+48	; 0x30
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	98 ab       	std	Y+48, r25	; 0x30
    27b6:	8f a7       	std	Y+47, r24	; 0x2f
    27b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ba:	98 a9       	ldd	r25, Y+48	; 0x30
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	69 f7       	brne	.-38     	; 0x279a <HCLCD_Vid8Bits_Init+0xce>
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <HCLCD_Vid8Bits_Init+0x11e>
    27c2:	69 a9       	ldd	r22, Y+49	; 0x31
    27c4:	7a a9       	ldd	r23, Y+50	; 0x32
    27c6:	8b a9       	ldd	r24, Y+51	; 0x33
    27c8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	98 ab       	std	Y+48, r25	; 0x30
    27d4:	8f a7       	std	Y+47, r24	; 0x2f
    27d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d8:	98 a9       	ldd	r25, Y+48	; 0x30
    27da:	9c a7       	std	Y+44, r25	; 0x2c
    27dc:	8b a7       	std	Y+43, r24	; 0x2b
    27de:	8b a5       	ldd	r24, Y+43	; 0x2b
    27e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <HCLCD_Vid8Bits_Init+0x116>
    27e6:	9c a7       	std	Y+44, r25	; 0x2c
    27e8:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30 ms*/
	_delay_ms(30);
	/*Send function Send Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_FUNCTION_SET);
    27ea:	88 e2       	ldi	r24, 0x28	; 40
    27ec:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	a0 e8       	ldi	r26, 0x80	; 128
    27f6:	bf e3       	ldi	r27, 0x3F	; 63
    27f8:	8f a3       	std	Y+39, r24	; 0x27
    27fa:	98 a7       	std	Y+40, r25	; 0x28
    27fc:	a9 a7       	std	Y+41, r26	; 0x29
    27fe:	ba a7       	std	Y+42, r27	; 0x2a
    2800:	6f a1       	ldd	r22, Y+39	; 0x27
    2802:	78 a5       	ldd	r23, Y+40	; 0x28
    2804:	89 a5       	ldd	r24, Y+41	; 0x29
    2806:	9a a5       	ldd	r25, Y+42	; 0x2a
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4a ef       	ldi	r20, 0xFA	; 250
    280e:	54 e4       	ldi	r21, 0x44	; 68
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	8b a3       	std	Y+35, r24	; 0x23
    281a:	9c a3       	std	Y+36, r25	; 0x24
    281c:	ad a3       	std	Y+37, r26	; 0x25
    281e:	be a3       	std	Y+38, r27	; 0x26
    2820:	6b a1       	ldd	r22, Y+35	; 0x23
    2822:	7c a1       	ldd	r23, Y+36	; 0x24
    2824:	8d a1       	ldd	r24, Y+37	; 0x25
    2826:	9e a1       	ldd	r25, Y+38	; 0x26
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e8       	ldi	r20, 0x80	; 128
    282e:	5f e3       	ldi	r21, 0x3F	; 63
    2830:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2834:	88 23       	and	r24, r24
    2836:	2c f4       	brge	.+10     	; 0x2842 <HCLCD_Vid8Bits_Init+0x176>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9a a3       	std	Y+34, r25	; 0x22
    283e:	89 a3       	std	Y+33, r24	; 0x21
    2840:	3f c0       	rjmp	.+126    	; 0x28c0 <HCLCD_Vid8Bits_Init+0x1f4>
    2842:	6b a1       	ldd	r22, Y+35	; 0x23
    2844:	7c a1       	ldd	r23, Y+36	; 0x24
    2846:	8d a1       	ldd	r24, Y+37	; 0x25
    2848:	9e a1       	ldd	r25, Y+38	; 0x26
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	3f ef       	ldi	r19, 0xFF	; 255
    284e:	4f e7       	ldi	r20, 0x7F	; 127
    2850:	57 e4       	ldi	r21, 0x47	; 71
    2852:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2856:	18 16       	cp	r1, r24
    2858:	4c f5       	brge	.+82     	; 0x28ac <HCLCD_Vid8Bits_Init+0x1e0>
    285a:	6f a1       	ldd	r22, Y+39	; 0x27
    285c:	78 a5       	ldd	r23, Y+40	; 0x28
    285e:	89 a5       	ldd	r24, Y+41	; 0x29
    2860:	9a a5       	ldd	r25, Y+42	; 0x2a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e2       	ldi	r20, 0x20	; 32
    2868:	51 e4       	ldi	r21, 0x41	; 65
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9a a3       	std	Y+34, r25	; 0x22
    2880:	89 a3       	std	Y+33, r24	; 0x21
    2882:	0f c0       	rjmp	.+30     	; 0x28a2 <HCLCD_Vid8Bits_Init+0x1d6>
    2884:	88 ec       	ldi	r24, 0xC8	; 200
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	98 a3       	std	Y+32, r25	; 0x20
    288a:	8f 8f       	std	Y+31, r24	; 0x1f
    288c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    288e:	98 a1       	ldd	r25, Y+32	; 0x20
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <HCLCD_Vid8Bits_Init+0x1c4>
    2894:	98 a3       	std	Y+32, r25	; 0x20
    2896:	8f 8f       	std	Y+31, r24	; 0x1f
    2898:	89 a1       	ldd	r24, Y+33	; 0x21
    289a:	9a a1       	ldd	r25, Y+34	; 0x22
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	9a a3       	std	Y+34, r25	; 0x22
    28a0:	89 a3       	std	Y+33, r24	; 0x21
    28a2:	89 a1       	ldd	r24, Y+33	; 0x21
    28a4:	9a a1       	ldd	r25, Y+34	; 0x22
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	69 f7       	brne	.-38     	; 0x2884 <HCLCD_Vid8Bits_Init+0x1b8>
    28aa:	14 c0       	rjmp	.+40     	; 0x28d4 <HCLCD_Vid8Bits_Init+0x208>
    28ac:	6b a1       	ldd	r22, Y+35	; 0x23
    28ae:	7c a1       	ldd	r23, Y+36	; 0x24
    28b0:	8d a1       	ldd	r24, Y+37	; 0x25
    28b2:	9e a1       	ldd	r25, Y+38	; 0x26
    28b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	9a a3       	std	Y+34, r25	; 0x22
    28be:	89 a3       	std	Y+33, r24	; 0x21
    28c0:	89 a1       	ldd	r24, Y+33	; 0x21
    28c2:	9a a1       	ldd	r25, Y+34	; 0x22
    28c4:	9e 8f       	std	Y+30, r25	; 0x1e
    28c6:	8d 8f       	std	Y+29, r24	; 0x1d
    28c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <HCLCD_Vid8Bits_Init+0x200>
    28d0:	9e 8f       	std	Y+30, r25	; 0x1e
    28d2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait to 30 ms*/
	_delay_ms(1);
	/*Send  Display on/off Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    28d4:	8f e0       	ldi	r24, 0x0F	; 15
    28d6:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e8       	ldi	r26, 0x80	; 128
    28e0:	bf e3       	ldi	r27, 0x3F	; 63
    28e2:	89 8f       	std	Y+25, r24	; 0x19
    28e4:	9a 8f       	std	Y+26, r25	; 0x1a
    28e6:	ab 8f       	std	Y+27, r26	; 0x1b
    28e8:	bc 8f       	std	Y+28, r27	; 0x1c
    28ea:	69 8d       	ldd	r22, Y+25	; 0x19
    28ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a ef       	ldi	r20, 0xFA	; 250
    28f8:	54 e4       	ldi	r21, 0x44	; 68
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8d 8b       	std	Y+21, r24	; 0x15
    2904:	9e 8b       	std	Y+22, r25	; 0x16
    2906:	af 8b       	std	Y+23, r26	; 0x17
    2908:	b8 8f       	std	Y+24, r27	; 0x18
    290a:	6d 89       	ldd	r22, Y+21	; 0x15
    290c:	7e 89       	ldd	r23, Y+22	; 0x16
    290e:	8f 89       	ldd	r24, Y+23	; 0x17
    2910:	98 8d       	ldd	r25, Y+24	; 0x18
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e8       	ldi	r20, 0x80	; 128
    2918:	5f e3       	ldi	r21, 0x3F	; 63
    291a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    291e:	88 23       	and	r24, r24
    2920:	2c f4       	brge	.+10     	; 0x292c <HCLCD_Vid8Bits_Init+0x260>
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9c 8b       	std	Y+20, r25	; 0x14
    2928:	8b 8b       	std	Y+19, r24	; 0x13
    292a:	3f c0       	rjmp	.+126    	; 0x29aa <HCLCD_Vid8Bits_Init+0x2de>
    292c:	6d 89       	ldd	r22, Y+21	; 0x15
    292e:	7e 89       	ldd	r23, Y+22	; 0x16
    2930:	8f 89       	ldd	r24, Y+23	; 0x17
    2932:	98 8d       	ldd	r25, Y+24	; 0x18
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	4f e7       	ldi	r20, 0x7F	; 127
    293a:	57 e4       	ldi	r21, 0x47	; 71
    293c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2940:	18 16       	cp	r1, r24
    2942:	4c f5       	brge	.+82     	; 0x2996 <HCLCD_Vid8Bits_Init+0x2ca>
    2944:	69 8d       	ldd	r22, Y+25	; 0x19
    2946:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    294a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	bc 01       	movw	r22, r24
    295e:	cd 01       	movw	r24, r26
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9c 8b       	std	Y+20, r25	; 0x14
    296a:	8b 8b       	std	Y+19, r24	; 0x13
    296c:	0f c0       	rjmp	.+30     	; 0x298c <HCLCD_Vid8Bits_Init+0x2c0>
    296e:	88 ec       	ldi	r24, 0xC8	; 200
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9a 8b       	std	Y+18, r25	; 0x12
    2974:	89 8b       	std	Y+17, r24	; 0x11
    2976:	89 89       	ldd	r24, Y+17	; 0x11
    2978:	9a 89       	ldd	r25, Y+18	; 0x12
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <HCLCD_Vid8Bits_Init+0x2ae>
    297e:	9a 8b       	std	Y+18, r25	; 0x12
    2980:	89 8b       	std	Y+17, r24	; 0x11
    2982:	8b 89       	ldd	r24, Y+19	; 0x13
    2984:	9c 89       	ldd	r25, Y+20	; 0x14
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	9c 8b       	std	Y+20, r25	; 0x14
    298a:	8b 8b       	std	Y+19, r24	; 0x13
    298c:	8b 89       	ldd	r24, Y+19	; 0x13
    298e:	9c 89       	ldd	r25, Y+20	; 0x14
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	69 f7       	brne	.-38     	; 0x296e <HCLCD_Vid8Bits_Init+0x2a2>
    2994:	14 c0       	rjmp	.+40     	; 0x29be <HCLCD_Vid8Bits_Init+0x2f2>
    2996:	6d 89       	ldd	r22, Y+21	; 0x15
    2998:	7e 89       	ldd	r23, Y+22	; 0x16
    299a:	8f 89       	ldd	r24, Y+23	; 0x17
    299c:	98 8d       	ldd	r25, Y+24	; 0x18
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9c 8b       	std	Y+20, r25	; 0x14
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
    29aa:	8b 89       	ldd	r24, Y+19	; 0x13
    29ac:	9c 89       	ldd	r25, Y+20	; 0x14
    29ae:	98 8b       	std	Y+16, r25	; 0x10
    29b0:	8f 87       	std	Y+15, r24	; 0x0f
    29b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b4:	98 89       	ldd	r25, Y+16	; 0x10
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <HCLCD_Vid8Bits_Init+0x2ea>
    29ba:	98 8b       	std	Y+16, r25	; 0x10
    29bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_DISPLAY_CLEAR);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	a0 e0       	ldi	r26, 0x00	; 0
    29ca:	b0 e4       	ldi	r27, 0x40	; 64
    29cc:	8b 87       	std	Y+11, r24	; 0x0b
    29ce:	9c 87       	std	Y+12, r25	; 0x0c
    29d0:	ad 87       	std	Y+13, r26	; 0x0d
    29d2:	be 87       	std	Y+14, r27	; 0x0e
    29d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29da:	9e 85       	ldd	r25, Y+14	; 0x0e
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	4a ef       	ldi	r20, 0xFA	; 250
    29e2:	54 e4       	ldi	r21, 0x44	; 68
    29e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	8f 83       	std	Y+7, r24	; 0x07
    29ee:	98 87       	std	Y+8, r25	; 0x08
    29f0:	a9 87       	std	Y+9, r26	; 0x09
    29f2:	ba 87       	std	Y+10, r27	; 0x0a
    29f4:	6f 81       	ldd	r22, Y+7	; 0x07
    29f6:	78 85       	ldd	r23, Y+8	; 0x08
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e8       	ldi	r20, 0x80	; 128
    2a02:	5f e3       	ldi	r21, 0x3F	; 63
    2a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a08:	88 23       	and	r24, r24
    2a0a:	2c f4       	brge	.+10     	; 0x2a16 <HCLCD_Vid8Bits_Init+0x34a>
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	3f c0       	rjmp	.+126    	; 0x2a94 <HCLCD_Vid8Bits_Init+0x3c8>
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	78 85       	ldd	r23, Y+8	; 0x08
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	3f ef       	ldi	r19, 0xFF	; 255
    2a22:	4f e7       	ldi	r20, 0x7F	; 127
    2a24:	57 e4       	ldi	r21, 0x47	; 71
    2a26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a2a:	18 16       	cp	r1, r24
    2a2c:	4c f5       	brge	.+82     	; 0x2a80 <HCLCD_Vid8Bits_Init+0x3b4>
    2a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e2       	ldi	r20, 0x20	; 32
    2a3c:	51 e4       	ldi	r21, 0x41	; 65
    2a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	bc 01       	movw	r22, r24
    2a48:	cd 01       	movw	r24, r26
    2a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
    2a56:	0f c0       	rjmp	.+30     	; 0x2a76 <HCLCD_Vid8Bits_Init+0x3aa>
    2a58:	88 ec       	ldi	r24, 0xC8	; 200
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	9c 83       	std	Y+4, r25	; 0x04
    2a5e:	8b 83       	std	Y+3, r24	; 0x03
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	9c 81       	ldd	r25, Y+4	; 0x04
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <HCLCD_Vid8Bits_Init+0x398>
    2a68:	9c 83       	std	Y+4, r25	; 0x04
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	69 f7       	brne	.-38     	; 0x2a58 <HCLCD_Vid8Bits_Init+0x38c>
    2a7e:	14 c0       	rjmp	.+40     	; 0x2aa8 <HCLCD_Vid8Bits_Init+0x3dc>
    2a80:	6f 81       	ldd	r22, Y+7	; 0x07
    2a82:	78 85       	ldd	r23, Y+8	; 0x08
    2a84:	89 85       	ldd	r24, Y+9	; 0x09
    2a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	9e 83       	std	Y+6, r25	; 0x06
    2a92:	8d 83       	std	Y+5, r24	; 0x05
    2a94:	8d 81       	ldd	r24, Y+5	; 0x05
    2a96:	9e 81       	ldd	r25, Y+6	; 0x06
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <HCLCD_Vid8Bits_Init+0x3d4>
    2aa4:	9a 83       	std	Y+2, r25	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode Set Command*/
	HCLCD_Vid8Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    2aa8:	86 e0       	ldi	r24, 0x06	; 6
    2aaa:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
}
    2aae:	e8 96       	adiw	r28, 0x38	; 56
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <HCLCD_Vid8Bits_DispalyCharacter>:

/*Display Character 8 Bits*/

void HCLCD_Vid8Bits_DispalyCharacter(u8 Copy_u8Data)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	6d 97       	sbiw	r28, 0x1d	; 29
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data register-->Write one on RS PIN*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	62 e0       	ldi	r22, 0x02	; 2
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/**select Write mode--> Write zero on RW Pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	62 e0       	ldi	r22, 0x02	; 2
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2aee:	0e 94 b6 0c 	call	0x196c	; 0x196c <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	62 e0       	ldi	r22, 0x02	; 2
    2af6:	41 e0       	ldi	r20, 0x01	; 1
    2af8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e4       	ldi	r27, 0x40	; 64
    2b04:	89 8f       	std	Y+25, r24	; 0x19
    2b06:	9a 8f       	std	Y+26, r25	; 0x1a
    2b08:	ab 8f       	std	Y+27, r26	; 0x1b
    2b0a:	bc 8f       	std	Y+28, r27	; 0x1c
    2b0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4a ef       	ldi	r20, 0xFA	; 250
    2b1a:	54 e4       	ldi	r21, 0x44	; 68
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8d 8b       	std	Y+21, r24	; 0x15
    2b26:	9e 8b       	std	Y+22, r25	; 0x16
    2b28:	af 8b       	std	Y+23, r26	; 0x17
    2b2a:	b8 8f       	std	Y+24, r27	; 0x18
    2b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b30:	8f 89       	ldd	r24, Y+23	; 0x17
    2b32:	98 8d       	ldd	r25, Y+24	; 0x18
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <HCLCD_Vid8Bits_DispalyCharacter+0x8e>
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9c 8b       	std	Y+20, r25	; 0x14
    2b4a:	8b 8b       	std	Y+19, r24	; 0x13
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <HCLCD_Vid8Bits_DispalyCharacter+0x10c>
    2b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b50:	7e 89       	ldd	r23, Y+22	; 0x16
    2b52:	8f 89       	ldd	r24, Y+23	; 0x17
    2b54:	98 8d       	ldd	r25, Y+24	; 0x18
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <HCLCD_Vid8Bits_DispalyCharacter+0xf8>
    2b66:	69 8d       	ldd	r22, Y+25	; 0x19
    2b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9c 8b       	std	Y+20, r25	; 0x14
    2b8c:	8b 8b       	std	Y+19, r24	; 0x13
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <HCLCD_Vid8Bits_DispalyCharacter+0xee>
    2b90:	88 ec       	ldi	r24, 0xC8	; 200
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9a 8b       	std	Y+18, r25	; 0x12
    2b96:	89 8b       	std	Y+17, r24	; 0x11
    2b98:	89 89       	ldd	r24, Y+17	; 0x11
    2b9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <HCLCD_Vid8Bits_DispalyCharacter+0xdc>
    2ba0:	9a 8b       	std	Y+18, r25	; 0x12
    2ba2:	89 8b       	std	Y+17, r24	; 0x11
    2ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9c 8b       	std	Y+20, r25	; 0x14
    2bac:	8b 8b       	std	Y+19, r24	; 0x13
    2bae:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <HCLCD_Vid8Bits_DispalyCharacter+0xd0>
    2bb6:	14 c0       	rjmp	.+40     	; 0x2be0 <HCLCD_Vid8Bits_DispalyCharacter+0x120>
    2bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bba:	7e 89       	ldd	r23, Y+22	; 0x16
    2bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9c 8b       	std	Y+20, r25	; 0x14
    2bca:	8b 8b       	std	Y+19, r24	; 0x13
    2bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bce:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd0:	98 8b       	std	Y+16, r25	; 0x10
    2bd2:	8f 87       	std	Y+15, r24	; 0x0f
    2bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd6:	98 89       	ldd	r25, Y+16	; 0x10
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <HCLCD_Vid8Bits_DispalyCharacter+0x118>
    2bdc:	98 8b       	std	Y+16, r25	; 0x10
    2bde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2be0:	82 e0       	ldi	r24, 0x02	; 2
    2be2:	62 e0       	ldi	r22, 0x02	; 2
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	b0 e4       	ldi	r27, 0x40	; 64
    2bf2:	8b 87       	std	Y+11, r24	; 0x0b
    2bf4:	9c 87       	std	Y+12, r25	; 0x0c
    2bf6:	ad 87       	std	Y+13, r26	; 0x0d
    2bf8:	be 87       	std	Y+14, r27	; 0x0e
    2bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a ef       	ldi	r20, 0xFA	; 250
    2c08:	54 e4       	ldi	r21, 0x44	; 68
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8f 83       	std	Y+7, r24	; 0x07
    2c14:	98 87       	std	Y+8, r25	; 0x08
    2c16:	a9 87       	std	Y+9, r26	; 0x09
    2c18:	ba 87       	std	Y+10, r27	; 0x0a
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <HCLCD_Vid8Bits_DispalyCharacter+0x17c>
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <HCLCD_Vid8Bits_DispalyCharacter+0x1fa>
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <HCLCD_Vid8Bits_DispalyCharacter+0x1e6>
    2c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <HCLCD_Vid8Bits_DispalyCharacter+0x1dc>
    2c7e:	88 ec       	ldi	r24, 0xC8	; 200
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <HCLCD_Vid8Bits_DispalyCharacter+0x1ca>
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <HCLCD_Vid8Bits_DispalyCharacter+0x1be>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <HCLCD_Vid8Bits_DispalyCharacter+0x20e>
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <HCLCD_Vid8Bits_DispalyCharacter+0x206>
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	62 e0       	ldi	r22, 0x02	; 2
    2cd2:	41 e0       	ldi	r20, 0x01	; 1
    2cd4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
}
    2cd8:	6d 96       	adiw	r28, 0x1d	; 29
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <HCLCD_Vid8Bits_DisplayString>:

/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <HCLCD_Vid8Bits_DisplayString+0x6>
    2cf0:	0f 92       	push	r0
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	9b 83       	std	Y+3, r25	; 0x03
    2cf8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2cfa:	19 82       	std	Y+1, r1	; 0x01
    2cfc:	0e c0       	rjmp	.+28     	; 0x2d1a <HCLCD_Vid8Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	9b 81       	ldd	r25, Y+3	; 0x03
    2d08:	fc 01       	movw	r30, r24
    2d0a:	e2 0f       	add	r30, r18
    2d0c:	f3 1f       	adc	r31, r19
    2d0e:	80 81       	ld	r24, Z
    2d10:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <HCLCD_Vid8Bits_DispalyCharacter>
		Loc_u8Count++;
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	8f 5f       	subi	r24, 0xFF	; 255
    2d18:	89 83       	std	Y+1, r24	; 0x01
/*Display String 8 Bits*/

void HCLCD_Vid8Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	fc 01       	movw	r30, r24
    2d26:	e2 0f       	add	r30, r18
    2d28:	f3 1f       	adc	r31, r19
    2d2a:	80 81       	ld	r24, Z
    2d2c:	88 23       	and	r24, r24
    2d2e:	39 f7       	brne	.-50     	; 0x2cfe <HCLCD_Vid8Bits_DisplayString+0x14>
	{
		HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <HCLCD_Vid8Bits_DisplayNumber>:

void HCLCD_Vid8Bits_DisplayNumber(u32 Copy_u8Number)
{
    2d3c:	0f 93       	push	r16
    2d3e:	1f 93       	push	r17
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	60 97       	sbiw	r28, 0x10	; 16
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	6d 87       	std	Y+13, r22	; 0x0d
    2d56:	7e 87       	std	Y+14, r23	; 0x0e
    2d58:	8f 87       	std	Y+15, r24	; 0x0f
    2d5a:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2d5c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	af 85       	ldd	r26, Y+15	; 0x0f
    2d64:	b8 89       	ldd	r27, Y+16	; 0x10
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	a1 05       	cpc	r26, r1
    2d6a:	b1 05       	cpc	r27, r1
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <HCLCD_Vid8Bits_DisplayNumber+0x34>
    2d6e:	4f c0       	rjmp	.+158    	; 0x2e0e <HCLCD_Vid8Bits_DisplayNumber+0xd2>
    2d70:	2d c0       	rjmp	.+90     	; 0x2dcc <HCLCD_Vid8Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	08 2f       	mov	r16, r24
    2d76:	10 e0       	ldi	r17, 0x00	; 0
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	af 85       	ldd	r26, Y+15	; 0x0f
    2d7e:	b8 89       	ldd	r27, Y+16	; 0x10
    2d80:	2a e0       	ldi	r18, 0x0A	; 10
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	50 e0       	ldi	r21, 0x00	; 0
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__udivmodsi4>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	28 2f       	mov	r18, r24
    2d96:	ce 01       	movw	r24, r28
    2d98:	03 96       	adiw	r24, 0x03	; 3
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	e0 0f       	add	r30, r16
    2d9e:	f1 1f       	adc	r31, r17
    2da0:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da6:	af 85       	ldd	r26, Y+15	; 0x0f
    2da8:	b8 89       	ldd	r27, Y+16	; 0x10
    2daa:	2a e0       	ldi	r18, 0x0A	; 10
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e0       	ldi	r20, 0x00	; 0
    2db0:	50 e0       	ldi	r21, 0x00	; 0
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__udivmodsi4>
    2dba:	da 01       	movw	r26, r20
    2dbc:	c9 01       	movw	r24, r18
    2dbe:	8d 87       	std	Y+13, r24	; 0x0d
    2dc0:	9e 87       	std	Y+14, r25	; 0x0e
    2dc2:	af 87       	std	Y+15, r26	; 0x0f
    2dc4:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	af 85       	ldd	r26, Y+15	; 0x0f
    2dd2:	b8 89       	ldd	r27, Y+16	; 0x10
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	a1 05       	cpc	r26, r1
    2dd8:	b1 05       	cpc	r27, r1
    2dda:	59 f6       	brne	.-106    	; 0x2d72 <HCLCD_Vid8Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	81 50       	subi	r24, 0x01	; 1
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	11 c0       	rjmp	.+34     	; 0x2e06 <HCLCD_Vid8Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	28 2f       	mov	r18, r24
    2de8:	33 27       	eor	r19, r19
    2dea:	27 fd       	sbrc	r18, 7
    2dec:	30 95       	com	r19
    2dee:	ce 01       	movw	r24, r28
    2df0:	03 96       	adiw	r24, 0x03	; 3
    2df2:	fc 01       	movw	r30, r24
    2df4:	e2 0f       	add	r30, r18
    2df6:	f3 1f       	adc	r31, r19
    2df8:	80 81       	ld	r24, Z
    2dfa:	80 5d       	subi	r24, 0xD0	; 208
    2dfc:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <HCLCD_Vid8Bits_DispalyCharacter>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	81 50       	subi	r24, 0x01	; 1
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	88 23       	and	r24, r24
    2e0a:	64 f7       	brge	.-40     	; 0x2de4 <HCLCD_Vid8Bits_DisplayNumber+0xa8>
    2e0c:	03 c0       	rjmp	.+6      	; 0x2e14 <HCLCD_Vid8Bits_DisplayNumber+0xd8>
			HCLCD_Vid8Bits_DispalyCharacter(ARR_Digits[i]+'0');  //ASCII of '0'--->48
		}
	}
	else
	{
		HCLCD_Vid8Bits_DispalyCharacter('0');
    2e0e:	80 e3       	ldi	r24, 0x30	; 48
    2e10:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <HCLCD_Vid8Bits_DispalyCharacter>
	}
}
    2e14:	60 96       	adiw	r28, 0x10	; 16
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	1f 91       	pop	r17
    2e26:	0f 91       	pop	r16
    2e28:	08 95       	ret

00002e2a <HCLCD_Vid8Bits_SetPosition>:

void HCLCD_Vid8Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <HCLCD_Vid8Bits_SetPosition+0x6>
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	41 f4       	brne	.+16     	; 0x2e4e <HCLCD_Vid8Bits_SetPosition+0x24>
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	80 31       	cpi	r24, 0x10	; 16
    2e42:	28 f4       	brcc	.+10     	; 0x2e4e <HCLCD_Vid8Bits_SetPosition+0x24>
	{
		HCLCD_Vid8Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	80 58       	subi	r24, 0x80	; 128
    2e48:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    2e4c:	0a c0       	rjmp	.+20     	; 0x2e62 <HCLCD_Vid8Bits_SetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	82 30       	cpi	r24, 0x02	; 2
    2e52:	39 f4       	brne	.+14     	; 0x2e62 <HCLCD_Vid8Bits_SetPosition+0x38>
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	80 31       	cpi	r24, 0x10	; 16
    2e58:	20 f4       	brcc	.+8      	; 0x2e62 <HCLCD_Vid8Bits_SetPosition+0x38>
	{
		HCLCD_Vid8Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	80 54       	subi	r24, 0x40	; 64
    2e5e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
	else
	{

	}

}
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <HCLCD_Vid8Bits_CustomAlphChar>:
/*LCD Create SpecialCharacter 8 Bits*/
void HCLCD_Vid8Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <HCLCD_Vid8Bits_CustomAlphChar+0x6>
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <HCLCD_Vid8Bits_CustomAlphChar+0x8>
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	8a 83       	std	Y+2, r24	; 0x02
    2e7a:	7c 83       	std	Y+4, r23	; 0x04
    2e7c:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	88 30       	cpi	r24, 0x08	; 8
    2e82:	f8 f4       	brcc	.+62     	; 0x2ec2 <HCLCD_Vid8Bits_CustomAlphChar+0x56>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	08 96       	adiw	r24, 0x08	; 8
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2e9c:	19 82       	std	Y+1, r1	; 0x01
    2e9e:	0e c0       	rjmp	.+28     	; 0x2ebc <HCLCD_Vid8Bits_CustomAlphChar+0x50>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	fc 01       	movw	r30, r24
    2eac:	e2 0f       	add	r30, r18
    2eae:	f3 1f       	adc	r31, r19
    2eb0:	80 81       	ld	r24, Z
    2eb2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <HCLCD_Vid8Bits_DispalyCharacter>
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid8Bits_SendCommand(CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE));
	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	8f 5f       	subi	r24, 0xFF	; 255
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	88 30       	cpi	r24, 0x08	; 8
    2ec0:	78 f3       	brcs	.-34     	; 0x2ea0 <HCLCD_Vid8Bits_CustomAlphChar+0x34>
	          {
	        	  HCLCD_Vid8Bits_DispalyCharacter(PCopy_u8Pattern[ i ]);
	          }
	      }
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <HCLCD_Vid8Bits_ClearScreen>:
/**/
void HCLCD_Vid8Bits_ClearScreen(void)
{
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	2e 97       	sbiw	r28, 0x0e	; 14
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
  HCLCD_Vid8Bits_SendCommand(DISPLAY_CLEAR);
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a0 e0       	ldi	r26, 0x00	; 0
    2ef0:	b0 e4       	ldi	r27, 0x40	; 64
    2ef2:	8b 87       	std	Y+11, r24	; 0x0b
    2ef4:	9c 87       	std	Y+12, r25	; 0x0c
    2ef6:	ad 87       	std	Y+13, r26	; 0x0d
    2ef8:	be 87       	std	Y+14, r27	; 0x0e
    2efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	4a ef       	ldi	r20, 0xFA	; 250
    2f08:	54 e4       	ldi	r21, 0x44	; 68
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	8f 83       	std	Y+7, r24	; 0x07
    2f14:	98 87       	std	Y+8, r25	; 0x08
    2f16:	a9 87       	std	Y+9, r26	; 0x09
    2f18:	ba 87       	std	Y+10, r27	; 0x0a
    2f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1c:	78 85       	ldd	r23, Y+8	; 0x08
    2f1e:	89 85       	ldd	r24, Y+9	; 0x09
    2f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e8       	ldi	r20, 0x80	; 128
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f2e:	88 23       	and	r24, r24
    2f30:	2c f4       	brge	.+10     	; 0x2f3c <HCLCD_Vid8Bits_ClearScreen+0x6c>
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	9e 83       	std	Y+6, r25	; 0x06
    2f38:	8d 83       	std	Y+5, r24	; 0x05
    2f3a:	3f c0       	rjmp	.+126    	; 0x2fba <HCLCD_Vid8Bits_ClearScreen+0xea>
    2f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3e:	78 85       	ldd	r23, Y+8	; 0x08
    2f40:	89 85       	ldd	r24, Y+9	; 0x09
    2f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	3f ef       	ldi	r19, 0xFF	; 255
    2f48:	4f e7       	ldi	r20, 0x7F	; 127
    2f4a:	57 e4       	ldi	r21, 0x47	; 71
    2f4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f50:	18 16       	cp	r1, r24
    2f52:	4c f5       	brge	.+82     	; 0x2fa6 <HCLCD_Vid8Bits_ClearScreen+0xd6>
    2f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e2       	ldi	r20, 0x20	; 32
    2f62:	51 e4       	ldi	r21, 0x41	; 65
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	9e 83       	std	Y+6, r25	; 0x06
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
    2f7c:	0f c0       	rjmp	.+30     	; 0x2f9c <HCLCD_Vid8Bits_ClearScreen+0xcc>
    2f7e:	88 ec       	ldi	r24, 0xC8	; 200
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9c 83       	std	Y+4, r25	; 0x04
    2f84:	8b 83       	std	Y+3, r24	; 0x03
    2f86:	8b 81       	ldd	r24, Y+3	; 0x03
    2f88:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	f1 f7       	brne	.-4      	; 0x2f8a <HCLCD_Vid8Bits_ClearScreen+0xba>
    2f8e:	9c 83       	std	Y+4, r25	; 0x04
    2f90:	8b 83       	std	Y+3, r24	; 0x03
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	9e 81       	ldd	r25, Y+6	; 0x06
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	69 f7       	brne	.-38     	; 0x2f7e <HCLCD_Vid8Bits_ClearScreen+0xae>
    2fa4:	14 c0       	rjmp	.+40     	; 0x2fce <HCLCD_Vid8Bits_ClearScreen+0xfe>
    2fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa8:	78 85       	ldd	r23, Y+8	; 0x08
    2faa:	89 85       	ldd	r24, Y+9	; 0x09
    2fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	9e 83       	std	Y+6, r25	; 0x06
    2fb8:	8d 83       	std	Y+5, r24	; 0x05
    2fba:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbe:	9a 83       	std	Y+2, r25	; 0x02
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <HCLCD_Vid8Bits_ClearScreen+0xf6>
    2fca:	9a 83       	std	Y+2, r25	; 0x02
    2fcc:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    2fce:	2e 96       	adiw	r28, 0x0e	; 14
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <HCLCD_Vid8Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	60 97       	sbiw	r28, 0x10	; 16
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    2ff6:	1f 86       	std	Y+15, r1	; 0x0f
    2ff8:	78 c0       	rjmp	.+240    	; 0x30ea <HCLCD_Vid8Bits_DisplayShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    2ffa:	88 e1       	ldi	r24, 0x18	; 24
    2ffc:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a6 e9       	ldi	r26, 0x96	; 150
    3006:	b3 e4       	ldi	r27, 0x43	; 67
    3008:	8b 87       	std	Y+11, r24	; 0x0b
    300a:	9c 87       	std	Y+12, r25	; 0x0c
    300c:	ad 87       	std	Y+13, r26	; 0x0d
    300e:	be 87       	std	Y+14, r27	; 0x0e
    3010:	6b 85       	ldd	r22, Y+11	; 0x0b
    3012:	7c 85       	ldd	r23, Y+12	; 0x0c
    3014:	8d 85       	ldd	r24, Y+13	; 0x0d
    3016:	9e 85       	ldd	r25, Y+14	; 0x0e
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	4a ef       	ldi	r20, 0xFA	; 250
    301e:	54 e4       	ldi	r21, 0x44	; 68
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	8f 83       	std	Y+7, r24	; 0x07
    302a:	98 87       	std	Y+8, r25	; 0x08
    302c:	a9 87       	std	Y+9, r26	; 0x09
    302e:	ba 87       	std	Y+10, r27	; 0x0a
    3030:	6f 81       	ldd	r22, Y+7	; 0x07
    3032:	78 85       	ldd	r23, Y+8	; 0x08
    3034:	89 85       	ldd	r24, Y+9	; 0x09
    3036:	9a 85       	ldd	r25, Y+10	; 0x0a
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	2c f4       	brge	.+10     	; 0x3052 <HCLCD_Vid8Bits_DisplayShiftLeft+0x72>
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	3f c0       	rjmp	.+126    	; 0x30d0 <HCLCD_Vid8Bits_DisplayShiftLeft+0xf0>
    3052:	6f 81       	ldd	r22, Y+7	; 0x07
    3054:	78 85       	ldd	r23, Y+8	; 0x08
    3056:	89 85       	ldd	r24, Y+9	; 0x09
    3058:	9a 85       	ldd	r25, Y+10	; 0x0a
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	3f ef       	ldi	r19, 0xFF	; 255
    305e:	4f e7       	ldi	r20, 0x7F	; 127
    3060:	57 e4       	ldi	r21, 0x47	; 71
    3062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3066:	18 16       	cp	r1, r24
    3068:	4c f5       	brge	.+82     	; 0x30bc <HCLCD_Vid8Bits_DisplayShiftLeft+0xdc>
    306a:	6b 85       	ldd	r22, Y+11	; 0x0b
    306c:	7c 85       	ldd	r23, Y+12	; 0x0c
    306e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3070:	9e 85       	ldd	r25, Y+14	; 0x0e
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <HCLCD_Vid8Bits_DisplayShiftLeft+0xd2>
    3094:	88 ec       	ldi	r24, 0xC8	; 200
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	9c 83       	std	Y+4, r25	; 0x04
    309a:	8b 83       	std	Y+3, r24	; 0x03
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	9c 81       	ldd	r25, Y+4	; 0x04
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <HCLCD_Vid8Bits_DisplayShiftLeft+0xc0>
    30a4:	9c 83       	std	Y+4, r25	; 0x04
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	9e 83       	std	Y+6, r25	; 0x06
    30b0:	8d 83       	std	Y+5, r24	; 0x05
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	69 f7       	brne	.-38     	; 0x3094 <HCLCD_Vid8Bits_DisplayShiftLeft+0xb4>
    30ba:	14 c0       	rjmp	.+40     	; 0x30e4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x104>
    30bc:	6f 81       	ldd	r22, Y+7	; 0x07
    30be:	78 85       	ldd	r23, Y+8	; 0x08
    30c0:	89 85       	ldd	r24, Y+9	; 0x09
    30c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9e 83       	std	Y+6, r25	; 0x06
    30ce:	8d 83       	std	Y+5, r24	; 0x05
    30d0:	8d 81       	ldd	r24, Y+5	; 0x05
    30d2:	9e 81       	ldd	r25, Y+6	; 0x06
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <HCLCD_Vid8Bits_DisplayShiftLeft+0xfc>
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    30e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e6:	8f 5f       	subi	r24, 0xFF	; 255
    30e8:	8f 87       	std	Y+15, r24	; 0x0f
    30ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    30ec:	88 89       	ldd	r24, Y+16	; 0x10
    30ee:	98 17       	cp	r25, r24
    30f0:	08 f4       	brcc	.+2      	; 0x30f4 <HCLCD_Vid8Bits_DisplayShiftLeft+0x114>
    30f2:	83 cf       	rjmp	.-250    	; 0x2ffa <HCLCD_Vid8Bits_DisplayShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    30f4:	60 96       	adiw	r28, 0x10	; 16
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <HCLCD_Vid8Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	60 97       	sbiw	r28, 0x10	; 16
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    311c:	1f 86       	std	Y+15, r1	; 0x0f
    311e:	78 c0       	rjmp	.+240    	; 0x3210 <HCLCD_Vid8Bits_DisplayShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3120:	8c e1       	ldi	r24, 0x1C	; 28
    3122:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a6 e9       	ldi	r26, 0x96	; 150
    312c:	b3 e4       	ldi	r27, 0x43	; 67
    312e:	8b 87       	std	Y+11, r24	; 0x0b
    3130:	9c 87       	std	Y+12, r25	; 0x0c
    3132:	ad 87       	std	Y+13, r26	; 0x0d
    3134:	be 87       	std	Y+14, r27	; 0x0e
    3136:	6b 85       	ldd	r22, Y+11	; 0x0b
    3138:	7c 85       	ldd	r23, Y+12	; 0x0c
    313a:	8d 85       	ldd	r24, Y+13	; 0x0d
    313c:	9e 85       	ldd	r25, Y+14	; 0x0e
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	4a ef       	ldi	r20, 0xFA	; 250
    3144:	54 e4       	ldi	r21, 0x44	; 68
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	8f 83       	std	Y+7, r24	; 0x07
    3150:	98 87       	std	Y+8, r25	; 0x08
    3152:	a9 87       	std	Y+9, r26	; 0x09
    3154:	ba 87       	std	Y+10, r27	; 0x0a
    3156:	6f 81       	ldd	r22, Y+7	; 0x07
    3158:	78 85       	ldd	r23, Y+8	; 0x08
    315a:	89 85       	ldd	r24, Y+9	; 0x09
    315c:	9a 85       	ldd	r25, Y+10	; 0x0a
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e8       	ldi	r20, 0x80	; 128
    3164:	5f e3       	ldi	r21, 0x3F	; 63
    3166:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316a:	88 23       	and	r24, r24
    316c:	2c f4       	brge	.+10     	; 0x3178 <HCLCD_Vid8Bits_DisplayShiftRight+0x72>
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9e 83       	std	Y+6, r25	; 0x06
    3174:	8d 83       	std	Y+5, r24	; 0x05
    3176:	3f c0       	rjmp	.+126    	; 0x31f6 <HCLCD_Vid8Bits_DisplayShiftRight+0xf0>
    3178:	6f 81       	ldd	r22, Y+7	; 0x07
    317a:	78 85       	ldd	r23, Y+8	; 0x08
    317c:	89 85       	ldd	r24, Y+9	; 0x09
    317e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	3f ef       	ldi	r19, 0xFF	; 255
    3184:	4f e7       	ldi	r20, 0x7F	; 127
    3186:	57 e4       	ldi	r21, 0x47	; 71
    3188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318c:	18 16       	cp	r1, r24
    318e:	4c f5       	brge	.+82     	; 0x31e2 <HCLCD_Vid8Bits_DisplayShiftRight+0xdc>
    3190:	6b 85       	ldd	r22, Y+11	; 0x0b
    3192:	7c 85       	ldd	r23, Y+12	; 0x0c
    3194:	8d 85       	ldd	r24, Y+13	; 0x0d
    3196:	9e 85       	ldd	r25, Y+14	; 0x0e
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e2       	ldi	r20, 0x20	; 32
    319e:	51 e4       	ldi	r21, 0x41	; 65
    31a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9e 83       	std	Y+6, r25	; 0x06
    31b6:	8d 83       	std	Y+5, r24	; 0x05
    31b8:	0f c0       	rjmp	.+30     	; 0x31d8 <HCLCD_Vid8Bits_DisplayShiftRight+0xd2>
    31ba:	88 ec       	ldi	r24, 0xC8	; 200
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9c 83       	std	Y+4, r25	; 0x04
    31c0:	8b 83       	std	Y+3, r24	; 0x03
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	9c 81       	ldd	r25, Y+4	; 0x04
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <HCLCD_Vid8Bits_DisplayShiftRight+0xc0>
    31ca:	9c 83       	std	Y+4, r25	; 0x04
    31cc:	8b 83       	std	Y+3, r24	; 0x03
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	8d 83       	std	Y+5, r24	; 0x05
    31d8:	8d 81       	ldd	r24, Y+5	; 0x05
    31da:	9e 81       	ldd	r25, Y+6	; 0x06
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	69 f7       	brne	.-38     	; 0x31ba <HCLCD_Vid8Bits_DisplayShiftRight+0xb4>
    31e0:	14 c0       	rjmp	.+40     	; 0x320a <HCLCD_Vid8Bits_DisplayShiftRight+0x104>
    31e2:	6f 81       	ldd	r22, Y+7	; 0x07
    31e4:	78 85       	ldd	r23, Y+8	; 0x08
    31e6:	89 85       	ldd	r24, Y+9	; 0x09
    31e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	9a 83       	std	Y+2, r25	; 0x02
    31fc:	89 83       	std	Y+1, r24	; 0x01
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	9a 81       	ldd	r25, Y+2	; 0x02
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <HCLCD_Vid8Bits_DisplayShiftRight+0xfc>
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    320a:	8f 85       	ldd	r24, Y+15	; 0x0f
    320c:	8f 5f       	subi	r24, 0xFF	; 255
    320e:	8f 87       	std	Y+15, r24	; 0x0f
    3210:	9f 85       	ldd	r25, Y+15	; 0x0f
    3212:	88 89       	ldd	r24, Y+16	; 0x10
    3214:	98 17       	cp	r25, r24
    3216:	08 f4       	brcc	.+2      	; 0x321a <HCLCD_Vid8Bits_DisplayShiftRight+0x114>
    3218:	83 cf       	rjmp	.-250    	; 0x3120 <HCLCD_Vid8Bits_DisplayShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    321a:	60 96       	adiw	r28, 0x10	; 16
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <HCLCD_Vid8Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	60 97       	sbiw	r28, 0x10	; 16
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3242:	1f 86       	std	Y+15, r1	; 0x0f
    3244:	78 c0       	rjmp	.+240    	; 0x3336 <HCLCD_Vid8Bits_CursorShiftLeft+0x10a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
    3246:	80 e1       	ldi	r24, 0x10	; 16
    3248:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	a6 e9       	ldi	r26, 0x96	; 150
    3252:	b3 e4       	ldi	r27, 0x43	; 67
    3254:	8b 87       	std	Y+11, r24	; 0x0b
    3256:	9c 87       	std	Y+12, r25	; 0x0c
    3258:	ad 87       	std	Y+13, r26	; 0x0d
    325a:	be 87       	std	Y+14, r27	; 0x0e
    325c:	6b 85       	ldd	r22, Y+11	; 0x0b
    325e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3260:	8d 85       	ldd	r24, Y+13	; 0x0d
    3262:	9e 85       	ldd	r25, Y+14	; 0x0e
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4a ef       	ldi	r20, 0xFA	; 250
    326a:	54 e4       	ldi	r21, 0x44	; 68
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	8f 83       	std	Y+7, r24	; 0x07
    3276:	98 87       	std	Y+8, r25	; 0x08
    3278:	a9 87       	std	Y+9, r26	; 0x09
    327a:	ba 87       	std	Y+10, r27	; 0x0a
    327c:	6f 81       	ldd	r22, Y+7	; 0x07
    327e:	78 85       	ldd	r23, Y+8	; 0x08
    3280:	89 85       	ldd	r24, Y+9	; 0x09
    3282:	9a 85       	ldd	r25, Y+10	; 0x0a
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e8       	ldi	r20, 0x80	; 128
    328a:	5f e3       	ldi	r21, 0x3F	; 63
    328c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3290:	88 23       	and	r24, r24
    3292:	2c f4       	brge	.+10     	; 0x329e <HCLCD_Vid8Bits_CursorShiftLeft+0x72>
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
    329c:	3f c0       	rjmp	.+126    	; 0x331c <HCLCD_Vid8Bits_CursorShiftLeft+0xf0>
    329e:	6f 81       	ldd	r22, Y+7	; 0x07
    32a0:	78 85       	ldd	r23, Y+8	; 0x08
    32a2:	89 85       	ldd	r24, Y+9	; 0x09
    32a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	3f ef       	ldi	r19, 0xFF	; 255
    32aa:	4f e7       	ldi	r20, 0x7F	; 127
    32ac:	57 e4       	ldi	r21, 0x47	; 71
    32ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b2:	18 16       	cp	r1, r24
    32b4:	4c f5       	brge	.+82     	; 0x3308 <HCLCD_Vid8Bits_CursorShiftLeft+0xdc>
    32b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    32bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e2       	ldi	r20, 0x20	; 32
    32c4:	51 e4       	ldi	r21, 0x41	; 65
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	bc 01       	movw	r22, r24
    32d0:	cd 01       	movw	r24, r26
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9e 83       	std	Y+6, r25	; 0x06
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	0f c0       	rjmp	.+30     	; 0x32fe <HCLCD_Vid8Bits_CursorShiftLeft+0xd2>
    32e0:	88 ec       	ldi	r24, 0xC8	; 200
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9c 83       	std	Y+4, r25	; 0x04
    32e6:	8b 83       	std	Y+3, r24	; 0x03
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9c 81       	ldd	r25, Y+4	; 0x04
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <HCLCD_Vid8Bits_CursorShiftLeft+0xc0>
    32f0:	9c 83       	std	Y+4, r25	; 0x04
    32f2:	8b 83       	std	Y+3, r24	; 0x03
    32f4:	8d 81       	ldd	r24, Y+5	; 0x05
    32f6:	9e 81       	ldd	r25, Y+6	; 0x06
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	9e 83       	std	Y+6, r25	; 0x06
    32fc:	8d 83       	std	Y+5, r24	; 0x05
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	69 f7       	brne	.-38     	; 0x32e0 <HCLCD_Vid8Bits_CursorShiftLeft+0xb4>
    3306:	14 c0       	rjmp	.+40     	; 0x3330 <HCLCD_Vid8Bits_CursorShiftLeft+0x104>
    3308:	6f 81       	ldd	r22, Y+7	; 0x07
    330a:	78 85       	ldd	r23, Y+8	; 0x08
    330c:	89 85       	ldd	r24, Y+9	; 0x09
    330e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	9a 81       	ldd	r25, Y+2	; 0x02
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <HCLCD_Vid8Bits_CursorShiftLeft+0xfc>
    332c:	9a 83       	std	Y+2, r25	; 0x02
    332e:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid8Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3330:	8f 85       	ldd	r24, Y+15	; 0x0f
    3332:	8f 5f       	subi	r24, 0xFF	; 255
    3334:	8f 87       	std	Y+15, r24	; 0x0f
    3336:	9f 85       	ldd	r25, Y+15	; 0x0f
    3338:	88 89       	ldd	r24, Y+16	; 0x10
    333a:	98 17       	cp	r25, r24
    333c:	08 f4       	brcc	.+2      	; 0x3340 <HCLCD_Vid8Bits_CursorShiftLeft+0x114>
    333e:	83 cf       	rjmp	.-250    	; 0x3246 <HCLCD_Vid8Bits_CursorShiftLeft+0x1a>
 {
	 HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_LEFT);
  _delay_ms(300);
 }
}
    3340:	60 96       	adiw	r28, 0x10	; 16
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <HCLCD_Vid8Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	60 97       	sbiw	r28, 0x10	; 16
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3368:	1f 86       	std	Y+15, r1	; 0x0f
    336a:	78 c0       	rjmp	.+240    	; 0x345c <HCLCD_Vid8Bits_CursorShiftRight+0x10a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    336c:	84 e1       	ldi	r24, 0x14	; 20
    336e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <HCLCD_Vid8Bits_SendCommand>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a6 e9       	ldi	r26, 0x96	; 150
    3378:	b3 e4       	ldi	r27, 0x43	; 67
    337a:	8b 87       	std	Y+11, r24	; 0x0b
    337c:	9c 87       	std	Y+12, r25	; 0x0c
    337e:	ad 87       	std	Y+13, r26	; 0x0d
    3380:	be 87       	std	Y+14, r27	; 0x0e
    3382:	6b 85       	ldd	r22, Y+11	; 0x0b
    3384:	7c 85       	ldd	r23, Y+12	; 0x0c
    3386:	8d 85       	ldd	r24, Y+13	; 0x0d
    3388:	9e 85       	ldd	r25, Y+14	; 0x0e
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a ef       	ldi	r20, 0xFA	; 250
    3390:	54 e4       	ldi	r21, 0x44	; 68
    3392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8f 83       	std	Y+7, r24	; 0x07
    339c:	98 87       	std	Y+8, r25	; 0x08
    339e:	a9 87       	std	Y+9, r26	; 0x09
    33a0:	ba 87       	std	Y+10, r27	; 0x0a
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	2c f4       	brge	.+10     	; 0x33c4 <HCLCD_Vid8Bits_CursorShiftRight+0x72>
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <HCLCD_Vid8Bits_CursorShiftRight+0xf0>
    33c4:	6f 81       	ldd	r22, Y+7	; 0x07
    33c6:	78 85       	ldd	r23, Y+8	; 0x08
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	57 e4       	ldi	r21, 0x47	; 71
    33d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d8:	18 16       	cp	r1, r24
    33da:	4c f5       	brge	.+82     	; 0x342e <HCLCD_Vid8Bits_CursorShiftRight+0xdc>
    33dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33de:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	8d 83       	std	Y+5, r24	; 0x05
    3404:	0f c0       	rjmp	.+30     	; 0x3424 <HCLCD_Vid8Bits_CursorShiftRight+0xd2>
    3406:	88 ec       	ldi	r24, 0xC8	; 200
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	8b 83       	std	Y+3, r24	; 0x03
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <HCLCD_Vid8Bits_CursorShiftRight+0xc0>
    3416:	9c 83       	std	Y+4, r25	; 0x04
    3418:	8b 83       	std	Y+3, r24	; 0x03
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	9e 81       	ldd	r25, Y+6	; 0x06
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	9e 83       	std	Y+6, r25	; 0x06
    3422:	8d 83       	std	Y+5, r24	; 0x05
    3424:	8d 81       	ldd	r24, Y+5	; 0x05
    3426:	9e 81       	ldd	r25, Y+6	; 0x06
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	69 f7       	brne	.-38     	; 0x3406 <HCLCD_Vid8Bits_CursorShiftRight+0xb4>
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <HCLCD_Vid8Bits_CursorShiftRight+0x104>
    342e:	6f 81       	ldd	r22, Y+7	; 0x07
    3430:	78 85       	ldd	r23, Y+8	; 0x08
    3432:	89 85       	ldd	r24, Y+9	; 0x09
    3434:	9a 85       	ldd	r25, Y+10	; 0x0a
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	9e 81       	ldd	r25, Y+6	; 0x06
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <HCLCD_Vid8Bits_CursorShiftRight+0xfc>
    3452:	9a 83       	std	Y+2, r25	; 0x02
    3454:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid8Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3456:	8f 85       	ldd	r24, Y+15	; 0x0f
    3458:	8f 5f       	subi	r24, 0xFF	; 255
    345a:	8f 87       	std	Y+15, r24	; 0x0f
    345c:	9f 85       	ldd	r25, Y+15	; 0x0f
    345e:	88 89       	ldd	r24, Y+16	; 0x10
    3460:	98 17       	cp	r25, r24
    3462:	08 f4       	brcc	.+2      	; 0x3466 <HCLCD_Vid8Bits_CursorShiftRight+0x114>
    3464:	83 cf       	rjmp	.-250    	; 0x336c <HCLCD_Vid8Bits_CursorShiftRight+0x1a>
	{
		HCLCD_Vid8Bits_SendCommand(CURSOR_SHIFT_RIGHT);
      _delay_ms(300);
	}
}
    3466:	60 96       	adiw	r28, 0x10	; 16
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <HCLCD_Vid4Bits_SendCommand>:
/****************************************************************************************************************************************/

/*Send Command 4 Bits*/
void HCLCD_Vid4Bits_SendCommand(u8 Copy_u8Command )
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	2f 97       	sbiw	r28, 0x0f	; 15
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	cd bf       	out	0x3d, r28	; 61
    348c:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	62 e0       	ldi	r22, 0x02	; 2
    3492:	40 e0       	ldi	r20, 0x00	; 0
    3494:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	62 e0       	ldi	r22, 0x02	; 2
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/*Send  Command*/
	//LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Command);
    34a2:	84 e0       	ldi	r24, 0x04	; 4
    34a4:	62 e0       	ldi	r22, 0x02	; 2
    34a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    34a8:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	62 e0       	ldi	r22, 0x02	; 2
    34b0:	41 e0       	ldi	r20, 0x01	; 1
    34b2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	a0 e0       	ldi	r26, 0x00	; 0
    34bc:	b0 e4       	ldi	r27, 0x40	; 64
    34be:	8b 87       	std	Y+11, r24	; 0x0b
    34c0:	9c 87       	std	Y+12, r25	; 0x0c
    34c2:	ad 87       	std	Y+13, r26	; 0x0d
    34c4:	be 87       	std	Y+14, r27	; 0x0e
    34c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    34cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	4a ef       	ldi	r20, 0xFA	; 250
    34d4:	54 e4       	ldi	r21, 0x44	; 68
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	8f 83       	std	Y+7, r24	; 0x07
    34e0:	98 87       	std	Y+8, r25	; 0x08
    34e2:	a9 87       	std	Y+9, r26	; 0x09
    34e4:	ba 87       	std	Y+10, r27	; 0x0a
    34e6:	6f 81       	ldd	r22, Y+7	; 0x07
    34e8:	78 85       	ldd	r23, Y+8	; 0x08
    34ea:	89 85       	ldd	r24, Y+9	; 0x09
    34ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e8       	ldi	r20, 0x80	; 128
    34f4:	5f e3       	ldi	r21, 0x3F	; 63
    34f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34fa:	88 23       	and	r24, r24
    34fc:	2c f4       	brge	.+10     	; 0x3508 <HCLCD_Vid4Bits_SendCommand+0x90>
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	9e 83       	std	Y+6, r25	; 0x06
    3504:	8d 83       	std	Y+5, r24	; 0x05
    3506:	3f c0       	rjmp	.+126    	; 0x3586 <HCLCD_Vid4Bits_SendCommand+0x10e>
    3508:	6f 81       	ldd	r22, Y+7	; 0x07
    350a:	78 85       	ldd	r23, Y+8	; 0x08
    350c:	89 85       	ldd	r24, Y+9	; 0x09
    350e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	3f ef       	ldi	r19, 0xFF	; 255
    3514:	4f e7       	ldi	r20, 0x7F	; 127
    3516:	57 e4       	ldi	r21, 0x47	; 71
    3518:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    351c:	18 16       	cp	r1, r24
    351e:	4c f5       	brge	.+82     	; 0x3572 <HCLCD_Vid4Bits_SendCommand+0xfa>
    3520:	6b 85       	ldd	r22, Y+11	; 0x0b
    3522:	7c 85       	ldd	r23, Y+12	; 0x0c
    3524:	8d 85       	ldd	r24, Y+13	; 0x0d
    3526:	9e 85       	ldd	r25, Y+14	; 0x0e
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e2       	ldi	r20, 0x20	; 32
    352e:	51 e4       	ldi	r21, 0x41	; 65
    3530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	bc 01       	movw	r22, r24
    353a:	cd 01       	movw	r24, r26
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	9e 83       	std	Y+6, r25	; 0x06
    3546:	8d 83       	std	Y+5, r24	; 0x05
    3548:	0f c0       	rjmp	.+30     	; 0x3568 <HCLCD_Vid4Bits_SendCommand+0xf0>
    354a:	88 ec       	ldi	r24, 0xC8	; 200
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	9c 83       	std	Y+4, r25	; 0x04
    3550:	8b 83       	std	Y+3, r24	; 0x03
    3552:	8b 81       	ldd	r24, Y+3	; 0x03
    3554:	9c 81       	ldd	r25, Y+4	; 0x04
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	f1 f7       	brne	.-4      	; 0x3556 <HCLCD_Vid4Bits_SendCommand+0xde>
    355a:	9c 83       	std	Y+4, r25	; 0x04
    355c:	8b 83       	std	Y+3, r24	; 0x03
    355e:	8d 81       	ldd	r24, Y+5	; 0x05
    3560:	9e 81       	ldd	r25, Y+6	; 0x06
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	69 f7       	brne	.-38     	; 0x354a <HCLCD_Vid4Bits_SendCommand+0xd2>
    3570:	14 c0       	rjmp	.+40     	; 0x359a <HCLCD_Vid4Bits_SendCommand+0x122>
    3572:	6f 81       	ldd	r22, Y+7	; 0x07
    3574:	78 85       	ldd	r23, Y+8	; 0x08
    3576:	89 85       	ldd	r24, Y+9	; 0x09
    3578:	9a 85       	ldd	r25, Y+10	; 0x0a
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9e 83       	std	Y+6, r25	; 0x06
    3584:	8d 83       	std	Y+5, r24	; 0x05
    3586:	8d 81       	ldd	r24, Y+5	; 0x05
    3588:	9e 81       	ldd	r25, Y+6	; 0x06
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
    358e:	89 81       	ldd	r24, Y+1	; 0x01
    3590:	9a 81       	ldd	r25, Y+2	; 0x02
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <HCLCD_Vid4Bits_SendCommand+0x11a>
    3596:	9a 83       	std	Y+2, r25	; 0x02
    3598:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    359a:	82 e0       	ldi	r24, 0x02	; 2
    359c:	62 e0       	ldi	r22, 0x02	; 2
    359e:	40 e0       	ldi	r20, 0x00	; 0
    35a0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
}
    35a4:	2f 96       	adiw	r28, 0x0f	; 15
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	cf 91       	pop	r28
    35b2:	df 91       	pop	r29
    35b4:	08 95       	ret

000035b6 <HCLCD_Vid4Bits_Init>:


/*LCD 4 Bits Initialization*/

void HCLCD_Vid4Bits_Init(void)
{
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	e9 97       	sbiw	r28, 0x39	; 57
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    35ca:	87 e0       	ldi	r24, 0x07	; 7
    35cc:	89 af       	std	Y+57, r24	; 0x39
    35ce:	08 c0       	rjmp	.+16     	; 0x35e0 <HCLCD_Vid4Bits_Init+0x2a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    35d0:	89 ad       	ldd	r24, Y+57	; 0x39
    35d2:	62 e0       	ldi	r22, 0x02	; 2
    35d4:	41 e0       	ldi	r20, 0x01	; 1
    35d6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
void HCLCD_Vid4Bits_Init(void)
{
	/*Fill This Function*/
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    35da:	89 ad       	ldd	r24, Y+57	; 0x39
    35dc:	81 50       	subi	r24, 0x01	; 1
    35de:	89 af       	std	Y+57, r24	; 0x39
    35e0:	89 ad       	ldd	r24, Y+57	; 0x39
    35e2:	84 30       	cpi	r24, 0x04	; 4
    35e4:	ac f7       	brge	.-22     	; 0x35d0 <HCLCD_Vid4Bits_Init+0x1a>
	{
		MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	62 e0       	ldi	r22, 0x02	; 2
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	62 e0       	ldi	r22, 0x02	; 2
    35f4:	41 e0       	ldi	r20, 0x01	; 1
    35f6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    35fa:	82 e0       	ldi	r24, 0x02	; 2
    35fc:	62 e0       	ldi	r22, 0x02	; 2
    35fe:	41 e0       	ldi	r20, 0x01	; 1
    3600:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MDIO_Error_State_SetPinDirection>
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	a0 ef       	ldi	r26, 0xF0	; 240
    360a:	b1 e4       	ldi	r27, 0x41	; 65
    360c:	8d ab       	std	Y+53, r24	; 0x35
    360e:	9e ab       	std	Y+54, r25	; 0x36
    3610:	af ab       	std	Y+55, r26	; 0x37
    3612:	b8 af       	std	Y+56, r27	; 0x38
    3614:	6d a9       	ldd	r22, Y+53	; 0x35
    3616:	7e a9       	ldd	r23, Y+54	; 0x36
    3618:	8f a9       	ldd	r24, Y+55	; 0x37
    361a:	98 ad       	ldd	r25, Y+56	; 0x38
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	4a ef       	ldi	r20, 0xFA	; 250
    3622:	54 e4       	ldi	r21, 0x44	; 68
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	89 ab       	std	Y+49, r24	; 0x31
    362e:	9a ab       	std	Y+50, r25	; 0x32
    3630:	ab ab       	std	Y+51, r26	; 0x33
    3632:	bc ab       	std	Y+52, r27	; 0x34
    3634:	69 a9       	ldd	r22, Y+49	; 0x31
    3636:	7a a9       	ldd	r23, Y+50	; 0x32
    3638:	8b a9       	ldd	r24, Y+51	; 0x33
    363a:	9c a9       	ldd	r25, Y+52	; 0x34
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e8       	ldi	r20, 0x80	; 128
    3642:	5f e3       	ldi	r21, 0x3F	; 63
    3644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3648:	88 23       	and	r24, r24
    364a:	2c f4       	brge	.+10     	; 0x3656 <HCLCD_Vid4Bits_Init+0xa0>
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	98 ab       	std	Y+48, r25	; 0x30
    3652:	8f a7       	std	Y+47, r24	; 0x2f
    3654:	3f c0       	rjmp	.+126    	; 0x36d4 <HCLCD_Vid4Bits_Init+0x11e>
    3656:	69 a9       	ldd	r22, Y+49	; 0x31
    3658:	7a a9       	ldd	r23, Y+50	; 0x32
    365a:	8b a9       	ldd	r24, Y+51	; 0x33
    365c:	9c a9       	ldd	r25, Y+52	; 0x34
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	3f ef       	ldi	r19, 0xFF	; 255
    3662:	4f e7       	ldi	r20, 0x7F	; 127
    3664:	57 e4       	ldi	r21, 0x47	; 71
    3666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    366a:	18 16       	cp	r1, r24
    366c:	4c f5       	brge	.+82     	; 0x36c0 <HCLCD_Vid4Bits_Init+0x10a>
    366e:	6d a9       	ldd	r22, Y+53	; 0x35
    3670:	7e a9       	ldd	r23, Y+54	; 0x36
    3672:	8f a9       	ldd	r24, Y+55	; 0x37
    3674:	98 ad       	ldd	r25, Y+56	; 0x38
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	40 e2       	ldi	r20, 0x20	; 32
    367c:	51 e4       	ldi	r21, 0x41	; 65
    367e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	bc 01       	movw	r22, r24
    3688:	cd 01       	movw	r24, r26
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	98 ab       	std	Y+48, r25	; 0x30
    3694:	8f a7       	std	Y+47, r24	; 0x2f
    3696:	0f c0       	rjmp	.+30     	; 0x36b6 <HCLCD_Vid4Bits_Init+0x100>
    3698:	88 ec       	ldi	r24, 0xC8	; 200
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9e a7       	std	Y+46, r25	; 0x2e
    369e:	8d a7       	std	Y+45, r24	; 0x2d
    36a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    36a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <HCLCD_Vid4Bits_Init+0xee>
    36a8:	9e a7       	std	Y+46, r25	; 0x2e
    36aa:	8d a7       	std	Y+45, r24	; 0x2d
    36ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ae:	98 a9       	ldd	r25, Y+48	; 0x30
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	98 ab       	std	Y+48, r25	; 0x30
    36b4:	8f a7       	std	Y+47, r24	; 0x2f
    36b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    36b8:	98 a9       	ldd	r25, Y+48	; 0x30
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	69 f7       	brne	.-38     	; 0x3698 <HCLCD_Vid4Bits_Init+0xe2>
    36be:	14 c0       	rjmp	.+40     	; 0x36e8 <HCLCD_Vid4Bits_Init+0x132>
    36c0:	69 a9       	ldd	r22, Y+49	; 0x31
    36c2:	7a a9       	ldd	r23, Y+50	; 0x32
    36c4:	8b a9       	ldd	r24, Y+51	; 0x33
    36c6:	9c a9       	ldd	r25, Y+52	; 0x34
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	98 ab       	std	Y+48, r25	; 0x30
    36d2:	8f a7       	std	Y+47, r24	; 0x2f
    36d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36d6:	98 a9       	ldd	r25, Y+48	; 0x30
    36d8:	9c a7       	std	Y+44, r25	; 0x2c
    36da:	8b a7       	std	Y+43, r24	; 0x2b
    36dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    36de:	9c a5       	ldd	r25, Y+44	; 0x2c
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <HCLCD_Vid4Bits_Init+0x12a>
    36e4:	9c a7       	std	Y+44, r25	; 0x2c
    36e6:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET>>4);
    36ee:	82 e0       	ldi	r24, 0x02	; 2
    36f0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_FUNCTION_SET);
    36f4:	88 e2       	ldi	r24, 0x28	; 40
    36f6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e8       	ldi	r26, 0x80	; 128
    3700:	bf e3       	ldi	r27, 0x3F	; 63
    3702:	8f a3       	std	Y+39, r24	; 0x27
    3704:	98 a7       	std	Y+40, r25	; 0x28
    3706:	a9 a7       	std	Y+41, r26	; 0x29
    3708:	ba a7       	std	Y+42, r27	; 0x2a
    370a:	6f a1       	ldd	r22, Y+39	; 0x27
    370c:	78 a5       	ldd	r23, Y+40	; 0x28
    370e:	89 a5       	ldd	r24, Y+41	; 0x29
    3710:	9a a5       	ldd	r25, Y+42	; 0x2a
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	4a ef       	ldi	r20, 0xFA	; 250
    3718:	54 e4       	ldi	r21, 0x44	; 68
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	8b a3       	std	Y+35, r24	; 0x23
    3724:	9c a3       	std	Y+36, r25	; 0x24
    3726:	ad a3       	std	Y+37, r26	; 0x25
    3728:	be a3       	std	Y+38, r27	; 0x26
    372a:	6b a1       	ldd	r22, Y+35	; 0x23
    372c:	7c a1       	ldd	r23, Y+36	; 0x24
    372e:	8d a1       	ldd	r24, Y+37	; 0x25
    3730:	9e a1       	ldd	r25, Y+38	; 0x26
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	2c f4       	brge	.+10     	; 0x374c <HCLCD_Vid4Bits_Init+0x196>
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	9a a3       	std	Y+34, r25	; 0x22
    3748:	89 a3       	std	Y+33, r24	; 0x21
    374a:	3f c0       	rjmp	.+126    	; 0x37ca <HCLCD_Vid4Bits_Init+0x214>
    374c:	6b a1       	ldd	r22, Y+35	; 0x23
    374e:	7c a1       	ldd	r23, Y+36	; 0x24
    3750:	8d a1       	ldd	r24, Y+37	; 0x25
    3752:	9e a1       	ldd	r25, Y+38	; 0x26
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	3f ef       	ldi	r19, 0xFF	; 255
    3758:	4f e7       	ldi	r20, 0x7F	; 127
    375a:	57 e4       	ldi	r21, 0x47	; 71
    375c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3760:	18 16       	cp	r1, r24
    3762:	4c f5       	brge	.+82     	; 0x37b6 <HCLCD_Vid4Bits_Init+0x200>
    3764:	6f a1       	ldd	r22, Y+39	; 0x27
    3766:	78 a5       	ldd	r23, Y+40	; 0x28
    3768:	89 a5       	ldd	r24, Y+41	; 0x29
    376a:	9a a5       	ldd	r25, Y+42	; 0x2a
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e2       	ldi	r20, 0x20	; 32
    3772:	51 e4       	ldi	r21, 0x41	; 65
    3774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	bc 01       	movw	r22, r24
    377e:	cd 01       	movw	r24, r26
    3780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	9a a3       	std	Y+34, r25	; 0x22
    378a:	89 a3       	std	Y+33, r24	; 0x21
    378c:	0f c0       	rjmp	.+30     	; 0x37ac <HCLCD_Vid4Bits_Init+0x1f6>
    378e:	88 ec       	ldi	r24, 0xC8	; 200
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	98 a3       	std	Y+32, r25	; 0x20
    3794:	8f 8f       	std	Y+31, r24	; 0x1f
    3796:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3798:	98 a1       	ldd	r25, Y+32	; 0x20
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <HCLCD_Vid4Bits_Init+0x1e4>
    379e:	98 a3       	std	Y+32, r25	; 0x20
    37a0:	8f 8f       	std	Y+31, r24	; 0x1f
    37a2:	89 a1       	ldd	r24, Y+33	; 0x21
    37a4:	9a a1       	ldd	r25, Y+34	; 0x22
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	9a a3       	std	Y+34, r25	; 0x22
    37aa:	89 a3       	std	Y+33, r24	; 0x21
    37ac:	89 a1       	ldd	r24, Y+33	; 0x21
    37ae:	9a a1       	ldd	r25, Y+34	; 0x22
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	69 f7       	brne	.-38     	; 0x378e <HCLCD_Vid4Bits_Init+0x1d8>
    37b4:	14 c0       	rjmp	.+40     	; 0x37de <HCLCD_Vid4Bits_Init+0x228>
    37b6:	6b a1       	ldd	r22, Y+35	; 0x23
    37b8:	7c a1       	ldd	r23, Y+36	; 0x24
    37ba:	8d a1       	ldd	r24, Y+37	; 0x25
    37bc:	9e a1       	ldd	r25, Y+38	; 0x26
    37be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	9a a3       	std	Y+34, r25	; 0x22
    37c8:	89 a3       	std	Y+33, r24	; 0x21
    37ca:	89 a1       	ldd	r24, Y+33	; 0x21
    37cc:	9a a1       	ldd	r25, Y+34	; 0x22
    37ce:	9e 8f       	std	Y+30, r25	; 0x1e
    37d0:	8d 8f       	std	Y+29, r24	; 0x1d
    37d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <HCLCD_Vid4Bits_Init+0x220>
    37da:	9e 8f       	std	Y+30, r25	; 0x1e
    37dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF>>4);
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_DISPLAY_ON_OFF);
    37e4:	8f e0       	ldi	r24, 0x0F	; 15
    37e6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	a0 e8       	ldi	r26, 0x80	; 128
    37f0:	bf e3       	ldi	r27, 0x3F	; 63
    37f2:	89 8f       	std	Y+25, r24	; 0x19
    37f4:	9a 8f       	std	Y+26, r25	; 0x1a
    37f6:	ab 8f       	std	Y+27, r26	; 0x1b
    37f8:	bc 8f       	std	Y+28, r27	; 0x1c
    37fa:	69 8d       	ldd	r22, Y+25	; 0x19
    37fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3800:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	4a ef       	ldi	r20, 0xFA	; 250
    3808:	54 e4       	ldi	r21, 0x44	; 68
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	8d 8b       	std	Y+21, r24	; 0x15
    3814:	9e 8b       	std	Y+22, r25	; 0x16
    3816:	af 8b       	std	Y+23, r26	; 0x17
    3818:	b8 8f       	std	Y+24, r27	; 0x18
    381a:	6d 89       	ldd	r22, Y+21	; 0x15
    381c:	7e 89       	ldd	r23, Y+22	; 0x16
    381e:	8f 89       	ldd	r24, Y+23	; 0x17
    3820:	98 8d       	ldd	r25, Y+24	; 0x18
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e8       	ldi	r20, 0x80	; 128
    3828:	5f e3       	ldi	r21, 0x3F	; 63
    382a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    382e:	88 23       	and	r24, r24
    3830:	2c f4       	brge	.+10     	; 0x383c <HCLCD_Vid4Bits_Init+0x286>
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	9c 8b       	std	Y+20, r25	; 0x14
    3838:	8b 8b       	std	Y+19, r24	; 0x13
    383a:	3f c0       	rjmp	.+126    	; 0x38ba <HCLCD_Vid4Bits_Init+0x304>
    383c:	6d 89       	ldd	r22, Y+21	; 0x15
    383e:	7e 89       	ldd	r23, Y+22	; 0x16
    3840:	8f 89       	ldd	r24, Y+23	; 0x17
    3842:	98 8d       	ldd	r25, Y+24	; 0x18
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	3f ef       	ldi	r19, 0xFF	; 255
    3848:	4f e7       	ldi	r20, 0x7F	; 127
    384a:	57 e4       	ldi	r21, 0x47	; 71
    384c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3850:	18 16       	cp	r1, r24
    3852:	4c f5       	brge	.+82     	; 0x38a6 <HCLCD_Vid4Bits_Init+0x2f0>
    3854:	69 8d       	ldd	r22, Y+25	; 0x19
    3856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    385a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	40 e2       	ldi	r20, 0x20	; 32
    3862:	51 e4       	ldi	r21, 0x41	; 65
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	bc 01       	movw	r22, r24
    386e:	cd 01       	movw	r24, r26
    3870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	9c 8b       	std	Y+20, r25	; 0x14
    387a:	8b 8b       	std	Y+19, r24	; 0x13
    387c:	0f c0       	rjmp	.+30     	; 0x389c <HCLCD_Vid4Bits_Init+0x2e6>
    387e:	88 ec       	ldi	r24, 0xC8	; 200
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9a 8b       	std	Y+18, r25	; 0x12
    3884:	89 8b       	std	Y+17, r24	; 0x11
    3886:	89 89       	ldd	r24, Y+17	; 0x11
    3888:	9a 89       	ldd	r25, Y+18	; 0x12
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <HCLCD_Vid4Bits_Init+0x2d4>
    388e:	9a 8b       	std	Y+18, r25	; 0x12
    3890:	89 8b       	std	Y+17, r24	; 0x11
    3892:	8b 89       	ldd	r24, Y+19	; 0x13
    3894:	9c 89       	ldd	r25, Y+20	; 0x14
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	9c 8b       	std	Y+20, r25	; 0x14
    389a:	8b 8b       	std	Y+19, r24	; 0x13
    389c:	8b 89       	ldd	r24, Y+19	; 0x13
    389e:	9c 89       	ldd	r25, Y+20	; 0x14
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	69 f7       	brne	.-38     	; 0x387e <HCLCD_Vid4Bits_Init+0x2c8>
    38a4:	14 c0       	rjmp	.+40     	; 0x38ce <HCLCD_Vid4Bits_Init+0x318>
    38a6:	6d 89       	ldd	r22, Y+21	; 0x15
    38a8:	7e 89       	ldd	r23, Y+22	; 0x16
    38aa:	8f 89       	ldd	r24, Y+23	; 0x17
    38ac:	98 8d       	ldd	r25, Y+24	; 0x18
    38ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	9c 8b       	std	Y+20, r25	; 0x14
    38b8:	8b 8b       	std	Y+19, r24	; 0x13
    38ba:	8b 89       	ldd	r24, Y+19	; 0x13
    38bc:	9c 89       	ldd	r25, Y+20	; 0x14
    38be:	98 8b       	std	Y+16, r25	; 0x10
    38c0:	8f 87       	std	Y+15, r24	; 0x0f
    38c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c4:	98 89       	ldd	r25, Y+16	; 0x10
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	f1 f7       	brne	.-4      	; 0x38c6 <HCLCD_Vid4Bits_Init+0x310>
    38ca:	98 8b       	std	Y+16, r25	; 0x10
    38cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	a0 e0       	ldi	r26, 0x00	; 0
    38e0:	b0 e4       	ldi	r27, 0x40	; 64
    38e2:	8b 87       	std	Y+11, r24	; 0x0b
    38e4:	9c 87       	std	Y+12, r25	; 0x0c
    38e6:	ad 87       	std	Y+13, r26	; 0x0d
    38e8:	be 87       	std	Y+14, r27	; 0x0e
    38ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	4a ef       	ldi	r20, 0xFA	; 250
    38f8:	54 e4       	ldi	r21, 0x44	; 68
    38fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	8f 83       	std	Y+7, r24	; 0x07
    3904:	98 87       	std	Y+8, r25	; 0x08
    3906:	a9 87       	std	Y+9, r26	; 0x09
    3908:	ba 87       	std	Y+10, r27	; 0x0a
    390a:	6f 81       	ldd	r22, Y+7	; 0x07
    390c:	78 85       	ldd	r23, Y+8	; 0x08
    390e:	89 85       	ldd	r24, Y+9	; 0x09
    3910:	9a 85       	ldd	r25, Y+10	; 0x0a
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	40 e8       	ldi	r20, 0x80	; 128
    3918:	5f e3       	ldi	r21, 0x3F	; 63
    391a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    391e:	88 23       	and	r24, r24
    3920:	2c f4       	brge	.+10     	; 0x392c <HCLCD_Vid4Bits_Init+0x376>
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	9e 83       	std	Y+6, r25	; 0x06
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	3f c0       	rjmp	.+126    	; 0x39aa <HCLCD_Vid4Bits_Init+0x3f4>
    392c:	6f 81       	ldd	r22, Y+7	; 0x07
    392e:	78 85       	ldd	r23, Y+8	; 0x08
    3930:	89 85       	ldd	r24, Y+9	; 0x09
    3932:	9a 85       	ldd	r25, Y+10	; 0x0a
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	3f ef       	ldi	r19, 0xFF	; 255
    3938:	4f e7       	ldi	r20, 0x7F	; 127
    393a:	57 e4       	ldi	r21, 0x47	; 71
    393c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3940:	18 16       	cp	r1, r24
    3942:	4c f5       	brge	.+82     	; 0x3996 <HCLCD_Vid4Bits_Init+0x3e0>
    3944:	6b 85       	ldd	r22, Y+11	; 0x0b
    3946:	7c 85       	ldd	r23, Y+12	; 0x0c
    3948:	8d 85       	ldd	r24, Y+13	; 0x0d
    394a:	9e 85       	ldd	r25, Y+14	; 0x0e
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	40 e2       	ldi	r20, 0x20	; 32
    3952:	51 e4       	ldi	r21, 0x41	; 65
    3954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	bc 01       	movw	r22, r24
    395e:	cd 01       	movw	r24, r26
    3960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	9e 83       	std	Y+6, r25	; 0x06
    396a:	8d 83       	std	Y+5, r24	; 0x05
    396c:	0f c0       	rjmp	.+30     	; 0x398c <HCLCD_Vid4Bits_Init+0x3d6>
    396e:	88 ec       	ldi	r24, 0xC8	; 200
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	9c 83       	std	Y+4, r25	; 0x04
    3974:	8b 83       	std	Y+3, r24	; 0x03
    3976:	8b 81       	ldd	r24, Y+3	; 0x03
    3978:	9c 81       	ldd	r25, Y+4	; 0x04
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	f1 f7       	brne	.-4      	; 0x397a <HCLCD_Vid4Bits_Init+0x3c4>
    397e:	9c 83       	std	Y+4, r25	; 0x04
    3980:	8b 83       	std	Y+3, r24	; 0x03
    3982:	8d 81       	ldd	r24, Y+5	; 0x05
    3984:	9e 81       	ldd	r25, Y+6	; 0x06
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	9e 83       	std	Y+6, r25	; 0x06
    398a:	8d 83       	std	Y+5, r24	; 0x05
    398c:	8d 81       	ldd	r24, Y+5	; 0x05
    398e:	9e 81       	ldd	r25, Y+6	; 0x06
    3990:	00 97       	sbiw	r24, 0x00	; 0
    3992:	69 f7       	brne	.-38     	; 0x396e <HCLCD_Vid4Bits_Init+0x3b8>
    3994:	14 c0       	rjmp	.+40     	; 0x39be <HCLCD_Vid4Bits_Init+0x408>
    3996:	6f 81       	ldd	r22, Y+7	; 0x07
    3998:	78 85       	ldd	r23, Y+8	; 0x08
    399a:	89 85       	ldd	r24, Y+9	; 0x09
    399c:	9a 85       	ldd	r25, Y+10	; 0x0a
    399e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	9e 83       	std	Y+6, r25	; 0x06
    39a8:	8d 83       	std	Y+5, r24	; 0x05
    39aa:	8d 81       	ldd	r24, Y+5	; 0x05
    39ac:	9e 81       	ldd	r25, Y+6	; 0x06
    39ae:	9a 83       	std	Y+2, r25	; 0x02
    39b0:	89 83       	std	Y+1, r24	; 0x01
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	9a 81       	ldd	r25, Y+2	; 0x02
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	f1 f7       	brne	.-4      	; 0x39b6 <HCLCD_Vid4Bits_Init+0x400>
    39ba:	9a 83       	std	Y+2, r25	; 0x02
    39bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET>>4);
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(HCLCD_ENTRY_MODE_SET);
    39c4:	86 e0       	ldi	r24, 0x06	; 6
    39c6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
}
    39ca:	e9 96       	adiw	r28, 0x39	; 57
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <HCLCD_VidWriteChar_4Bits>:


/*Helper function*/
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
    39e4:	2f 97       	sbiw	r28, 0x0f	; 15
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	8f 87       	std	Y+15, r24	; 0x0f
	//u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	62 e0       	ldi	r22, 0x02	; 2
    39f6:	41 e0       	ldi	r20, 0x01	; 1
    39f8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	62 e0       	ldi	r22, 0x02	; 2
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
	/*Send Data*/
	//LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,Copy_u8Data);
    3a06:	84 e0       	ldi	r24, 0x04	; 4
    3a08:	62 e0       	ldi	r22, 0x02	; 2
    3a0a:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a0c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    3a10:	82 e0       	ldi	r24, 0x02	; 2
    3a12:	62 e0       	ldi	r22, 0x02	; 2
    3a14:	41 e0       	ldi	r20, 0x01	; 1
    3a16:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a0 e0       	ldi	r26, 0x00	; 0
    3a20:	b0 e4       	ldi	r27, 0x40	; 64
    3a22:	8b 87       	std	Y+11, r24	; 0x0b
    3a24:	9c 87       	std	Y+12, r25	; 0x0c
    3a26:	ad 87       	std	Y+13, r26	; 0x0d
    3a28:	be 87       	std	Y+14, r27	; 0x0e
    3a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a ef       	ldi	r20, 0xFA	; 250
    3a38:	54 e4       	ldi	r21, 0x44	; 68
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	8f 83       	std	Y+7, r24	; 0x07
    3a44:	98 87       	std	Y+8, r25	; 0x08
    3a46:	a9 87       	std	Y+9, r26	; 0x09
    3a48:	ba 87       	std	Y+10, r27	; 0x0a
    3a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4c:	78 85       	ldd	r23, Y+8	; 0x08
    3a4e:	89 85       	ldd	r24, Y+9	; 0x09
    3a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <HCLCD_VidWriteChar_4Bits+0x90>
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9e 83       	std	Y+6, r25	; 0x06
    3a68:	8d 83       	std	Y+5, r24	; 0x05
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <HCLCD_VidWriteChar_4Bits+0x10e>
    3a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6e:	78 85       	ldd	r23, Y+8	; 0x08
    3a70:	89 85       	ldd	r24, Y+9	; 0x09
    3a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <HCLCD_VidWriteChar_4Bits+0xfa>
    3a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9e 83       	std	Y+6, r25	; 0x06
    3aaa:	8d 83       	std	Y+5, r24	; 0x05
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <HCLCD_VidWriteChar_4Bits+0xf0>
    3aae:	88 ec       	ldi	r24, 0xC8	; 200
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	9c 83       	std	Y+4, r25	; 0x04
    3ab4:	8b 83       	std	Y+3, r24	; 0x03
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <HCLCD_VidWriteChar_4Bits+0xde>
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
    3ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9e 83       	std	Y+6, r25	; 0x06
    3aca:	8d 83       	std	Y+5, r24	; 0x05
    3acc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ace:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <HCLCD_VidWriteChar_4Bits+0xd2>
    3ad4:	14 c0       	rjmp	.+40     	; 0x3afe <HCLCD_VidWriteChar_4Bits+0x122>
    3ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad8:	78 85       	ldd	r23, Y+8	; 0x08
    3ada:	89 85       	ldd	r24, Y+9	; 0x09
    3adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9e 83       	std	Y+6, r25	; 0x06
    3ae8:	8d 83       	std	Y+5, r24	; 0x05
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	9a 83       	std	Y+2, r25	; 0x02
    3af0:	89 83       	std	Y+1, r24	; 0x01
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <HCLCD_VidWriteChar_4Bits+0x11a>
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    3afe:	82 e0       	ldi	r24, 0x02	; 2
    3b00:	62 e0       	ldi	r22, 0x02	; 2
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	0e 94 b3 0b 	call	0x1766	; 0x1766 <MDIO_Error_State_SetPinValue>
}
    3b08:	2f 96       	adiw	r28, 0x0f	; 15
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	cf 91       	pop	r28
    3b16:	df 91       	pop	r29
    3b18:	08 95       	ret

00003b1a <HCLCD_Vid4Bits_DisplayCharacter>:
/*Display Character 4 Bits*/
void HCLCD_Vid4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	0f 92       	push	r0
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	82 95       	swap	r24
    3b2a:	8f 70       	andi	r24, 0x0F	; 15
    3b2c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <HCLCD_VidWriteChar_4Bits>
}
    3b36:	0f 90       	pop	r0
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	08 95       	ret

00003b3e <HCLCD_Vid4Bits_DisplayString>:

/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	00 d0       	rcall	.+0      	; 0x3b44 <HCLCD_Vid4Bits_DisplayString+0x6>
    3b44:	0f 92       	push	r0
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	9b 83       	std	Y+3, r25	; 0x03
    3b4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    3b4e:	19 82       	std	Y+1, r1	; 0x01
    3b50:	0e c0       	rjmp	.+28     	; 0x3b6e <HCLCD_Vid4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	28 2f       	mov	r18, r24
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	e2 0f       	add	r30, r18
    3b60:	f3 1f       	adc	r31, r19
    3b62:	80 81       	ld	r24, Z
    3b64:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
		Loc_u8Count++;
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	8f 5f       	subi	r24, 0xFF	; 255
    3b6c:	89 83       	std	Y+1, r24	; 0x01
/*Display String 4 Bits*/

void HCLCD_Vid4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	28 2f       	mov	r18, r24
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	8a 81       	ldd	r24, Y+2	; 0x02
    3b76:	9b 81       	ldd	r25, Y+3	; 0x03
    3b78:	fc 01       	movw	r30, r24
    3b7a:	e2 0f       	add	r30, r18
    3b7c:	f3 1f       	adc	r31, r19
    3b7e:	80 81       	ld	r24, Z
    3b80:	88 23       	and	r24, r24
    3b82:	39 f7       	brne	.-50     	; 0x3b52 <HCLCD_Vid4Bits_DisplayString+0x14>
	{
		HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	cf 91       	pop	r28
    3b8c:	df 91       	pop	r29
    3b8e:	08 95       	ret

00003b90 <HCLCD_Vid4Bits_DisplayNumber>:

void HCLCD_Vid4Bits_DisplayNumber(u32 Copy_u8Number)
{
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	df 93       	push	r29
    3b96:	cf 93       	push	r28
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	60 97       	sbiw	r28, 0x10	; 16
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	6d 87       	std	Y+13, r22	; 0x0d
    3baa:	7e 87       	std	Y+14, r23	; 0x0e
    3bac:	8f 87       	std	Y+15, r24	; 0x0f
    3bae:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    3bb0:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    3bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb6:	af 85       	ldd	r26, Y+15	; 0x0f
    3bb8:	b8 89       	ldd	r27, Y+16	; 0x10
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	a1 05       	cpc	r26, r1
    3bbe:	b1 05       	cpc	r27, r1
    3bc0:	09 f4       	brne	.+2      	; 0x3bc4 <HCLCD_Vid4Bits_DisplayNumber+0x34>
    3bc2:	4f c0       	rjmp	.+158    	; 0x3c62 <HCLCD_Vid4Bits_DisplayNumber+0xd2>
    3bc4:	2d c0       	rjmp	.+90     	; 0x3c20 <HCLCD_Vid4Bits_DisplayNumber+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
    3bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc8:	08 2f       	mov	r16, r24
    3bca:	10 e0       	ldi	r17, 0x00	; 0
    3bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bd0:	af 85       	ldd	r26, Y+15	; 0x0f
    3bd2:	b8 89       	ldd	r27, Y+16	; 0x10
    3bd4:	2a e0       	ldi	r18, 0x0A	; 10
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e0       	ldi	r20, 0x00	; 0
    3bda:	50 e0       	ldi	r21, 0x00	; 0
    3bdc:	bc 01       	movw	r22, r24
    3bde:	cd 01       	movw	r24, r26
    3be0:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__udivmodsi4>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	28 2f       	mov	r18, r24
    3bea:	ce 01       	movw	r24, r28
    3bec:	03 96       	adiw	r24, 0x03	; 3
    3bee:	fc 01       	movw	r30, r24
    3bf0:	e0 0f       	add	r30, r16
    3bf2:	f1 1f       	adc	r31, r17
    3bf4:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    3bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bfa:	af 85       	ldd	r26, Y+15	; 0x0f
    3bfc:	b8 89       	ldd	r27, Y+16	; 0x10
    3bfe:	2a e0       	ldi	r18, 0x0A	; 10
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	50 e0       	ldi	r21, 0x00	; 0
    3c06:	bc 01       	movw	r22, r24
    3c08:	cd 01       	movw	r24, r26
    3c0a:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__udivmodsi4>
    3c0e:	da 01       	movw	r26, r20
    3c10:	c9 01       	movw	r24, r18
    3c12:	8d 87       	std	Y+13, r24	; 0x0d
    3c14:	9e 87       	std	Y+14, r25	; 0x0e
    3c16:	af 87       	std	Y+15, r26	; 0x0f
    3c18:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1c:	8f 5f       	subi	r24, 0xFF	; 255
    3c1e:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c24:	af 85       	ldd	r26, Y+15	; 0x0f
    3c26:	b8 89       	ldd	r27, Y+16	; 0x10
    3c28:	00 97       	sbiw	r24, 0x00	; 0
    3c2a:	a1 05       	cpc	r26, r1
    3c2c:	b1 05       	cpc	r27, r1
    3c2e:	59 f6       	brne	.-106    	; 0x3bc6 <HCLCD_Vid4Bits_DisplayNumber+0x36>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	81 50       	subi	r24, 0x01	; 1
    3c34:	89 83       	std	Y+1, r24	; 0x01
    3c36:	11 c0       	rjmp	.+34     	; 0x3c5a <HCLCD_Vid4Bits_DisplayNumber+0xca>
		{
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	33 27       	eor	r19, r19
    3c3e:	27 fd       	sbrc	r18, 7
    3c40:	30 95       	com	r19
    3c42:	ce 01       	movw	r24, r28
    3c44:	03 96       	adiw	r24, 0x03	; 3
    3c46:	fc 01       	movw	r30, r24
    3c48:	e2 0f       	add	r30, r18
    3c4a:	f3 1f       	adc	r31, r19
    3c4c:	80 81       	ld	r24, Z
    3c4e:	80 5d       	subi	r24, 0xD0	; 208
    3c50:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
		{
			ARR_Digits[LOC_Count] = (Copy_u8Number%10);
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	81 50       	subi	r24, 0x01	; 1
    3c58:	89 83       	std	Y+1, r24	; 0x01
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	88 23       	and	r24, r24
    3c5e:	64 f7       	brge	.-40     	; 0x3c38 <HCLCD_Vid4Bits_DisplayNumber+0xa8>
    3c60:	03 c0       	rjmp	.+6      	; 0x3c68 <HCLCD_Vid4Bits_DisplayNumber+0xd8>
			HCLCD_Vid4Bits_DisplayCharacter(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_Vid4Bits_DisplayCharacter('0');
    3c62:	80 e3       	ldi	r24, 0x30	; 48
    3c64:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
	}

}
    3c68:	60 96       	adiw	r28, 0x10	; 16
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	1f 91       	pop	r17
    3c7a:	0f 91       	pop	r16
    3c7c:	08 95       	ret

00003c7e <HCLCD_Vid4Bits_SetPosition>:


void HCLCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    3c7e:	df 93       	push	r29
    3c80:	cf 93       	push	r28
    3c82:	00 d0       	rcall	.+0      	; 0x3c84 <HCLCD_Vid4Bits_SetPosition+0x6>
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	89 83       	std	Y+1, r24	; 0x01
    3c8a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	81 30       	cpi	r24, 0x01	; 1
    3c90:	b9 f4       	brne	.+46     	; 0x3cc0 <HCLCD_Vid4Bits_SetPosition+0x42>
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	80 31       	cpi	r24, 0x10	; 16
    3c96:	a0 f4       	brcc	.+40     	; 0x3cc0 <HCLCD_Vid4Bits_SetPosition+0x42>
	{
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3c98:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9a:	88 2f       	mov	r24, r24
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	80 58       	subi	r24, 0x80	; 128
    3ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca2:	95 95       	asr	r25
    3ca4:	87 95       	ror	r24
    3ca6:	95 95       	asr	r25
    3ca8:	87 95       	ror	r24
    3caa:	95 95       	asr	r25
    3cac:	87 95       	ror	r24
    3cae:	95 95       	asr	r25
    3cb0:	87 95       	ror	r24
    3cb2:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	80 58       	subi	r24, 0x80	; 128
    3cba:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    3cbe:	19 c0       	rjmp	.+50     	; 0x3cf2 <HCLCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	82 30       	cpi	r24, 0x02	; 2
    3cc4:	b1 f4       	brne	.+44     	; 0x3cf2 <HCLCD_Vid4Bits_SetPosition+0x74>
    3cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc8:	80 31       	cpi	r24, 0x10	; 16
    3cca:	98 f4       	brcc	.+38     	; 0x3cf2 <HCLCD_Vid4Bits_SetPosition+0x74>
	{
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cce:	88 2f       	mov	r24, r24
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	80 54       	subi	r24, 0x40	; 64
    3cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd6:	95 95       	asr	r25
    3cd8:	87 95       	ror	r24
    3cda:	95 95       	asr	r25
    3cdc:	87 95       	ror	r24
    3cde:	95 95       	asr	r25
    3ce0:	87 95       	ror	r24
    3ce2:	95 95       	asr	r25
    3ce4:	87 95       	ror	r24
    3ce6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3cea:	8a 81       	ldd	r24, Y+2	; 0x02
    3cec:	80 54       	subi	r24, 0x40	; 64
    3cee:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	}
	else
	{
	}
}
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <HCLCD_Vid4Bits_CustomAlphChar>:
 }
*/

/*LCD Create SpecialCharacter 4 Bits*/
void HCLCD_Vid4Bits_CustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    3cfc:	df 93       	push	r29
    3cfe:	cf 93       	push	r28
    3d00:	00 d0       	rcall	.+0      	; 0x3d02 <HCLCD_Vid4Bits_CustomAlphChar+0x6>
    3d02:	00 d0       	rcall	.+0      	; 0x3d04 <HCLCD_Vid4Bits_CustomAlphChar+0x8>
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	8a 83       	std	Y+2, r24	; 0x02
    3d0a:	7c 83       	std	Y+4, r23	; 0x04
    3d0c:	6b 83       	std	Y+3, r22	; 0x03
	       /*you have only 8 patterns to be customized */
	      u8 i;
	      if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    3d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d10:	88 30       	cpi	r24, 0x08	; 8
    3d12:	98 f5       	brcc	.+102    	; 0x3d7a <HCLCD_Vid4Bits_CustomAlphChar+0x7e>
	      {
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
    3d14:	8a 81       	ldd	r24, Y+2	; 0x02
    3d16:	88 2f       	mov	r24, r24
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	08 96       	adiw	r24, 0x08	; 8
    3d1c:	88 0f       	add	r24, r24
    3d1e:	99 1f       	adc	r25, r25
    3d20:	88 0f       	add	r24, r24
    3d22:	99 1f       	adc	r25, r25
    3d24:	88 0f       	add	r24, r24
    3d26:	99 1f       	adc	r25, r25
    3d28:	95 95       	asr	r25
    3d2a:	87 95       	ror	r24
    3d2c:	95 95       	asr	r25
    3d2e:	87 95       	ror	r24
    3d30:	95 95       	asr	r25
    3d32:	87 95       	ror	r24
    3d34:	95 95       	asr	r25
    3d36:	87 95       	ror	r24
    3d38:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));
    3d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3e:	88 2f       	mov	r24, r24
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	08 96       	adiw	r24, 0x08	; 8
    3d44:	88 0f       	add	r24, r24
    3d46:	99 1f       	adc	r25, r25
    3d48:	88 0f       	add	r24, r24
    3d4a:	99 1f       	adc	r25, r25
    3d4c:	88 0f       	add	r24, r24
    3d4e:	99 1f       	adc	r25, r25
    3d50:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3d54:	19 82       	std	Y+1, r1	; 0x01
    3d56:	0e c0       	rjmp	.+28     	; 0x3d74 <HCLCD_Vid4Bits_CustomAlphChar+0x78>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
    3d58:	89 81       	ldd	r24, Y+1	; 0x01
    3d5a:	28 2f       	mov	r18, r24
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d60:	9c 81       	ldd	r25, Y+4	; 0x04
    3d62:	fc 01       	movw	r30, r24
    3d64:	e2 0f       	add	r30, r18
    3d66:	f3 1f       	adc	r31, r19
    3d68:	80 81       	ld	r24, Z
    3d6a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
	    	  /*Address counter point on CGRAM*/
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE))>>4);
	    	  HCLCD_Vid4Bits_SendCommand((CGRAM_OFFSET+(Copy_u8PatternNumber*PATTERN_SIZE)));

	    	  /*Write your pattern in CGRAM*/
	          for(i=0;i<8;i++)
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
    3d70:	8f 5f       	subi	r24, 0xFF	; 255
    3d72:	89 83       	std	Y+1, r24	; 0x01
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	88 30       	cpi	r24, 0x08	; 8
    3d78:	78 f3       	brcs	.-34     	; 0x3d58 <HCLCD_Vid4Bits_CustomAlphChar+0x5c>
	          {
	        	  HCLCD_Vid4Bits_DisplayCharacter(PCopy_u8Pattern[i]);
	          }
	      }
}
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	08 95       	ret

00003d88 <HCLCD_Vid4Bits_ClearScreen>:
/**/
void HCLCD_Vid4Bits_ClearScreen(void)
{
    3d88:	df 93       	push	r29
    3d8a:	cf 93       	push	r28
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    3d90:	2e 97       	sbiw	r28, 0x0e	; 14
    3d92:	0f b6       	in	r0, 0x3f	; 63
    3d94:	f8 94       	cli
    3d96:	de bf       	out	0x3e, r29	; 62
    3d98:	0f be       	out	0x3f, r0	; 63
    3d9a:	cd bf       	out	0x3d, r28	; 61
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR>>4);
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	HCLCD_Vid4Bits_SendCommand(DISPLAY_CLEAR);
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	a0 e0       	ldi	r26, 0x00	; 0
    3dae:	b0 e4       	ldi	r27, 0x40	; 64
    3db0:	8b 87       	std	Y+11, r24	; 0x0b
    3db2:	9c 87       	std	Y+12, r25	; 0x0c
    3db4:	ad 87       	std	Y+13, r26	; 0x0d
    3db6:	be 87       	std	Y+14, r27	; 0x0e
    3db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dc0:	20 e0       	ldi	r18, 0x00	; 0
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	4a ef       	ldi	r20, 0xFA	; 250
    3dc6:	54 e4       	ldi	r21, 0x44	; 68
    3dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	cb 01       	movw	r24, r22
    3dd0:	8f 83       	std	Y+7, r24	; 0x07
    3dd2:	98 87       	std	Y+8, r25	; 0x08
    3dd4:	a9 87       	std	Y+9, r26	; 0x09
    3dd6:	ba 87       	std	Y+10, r27	; 0x0a
    3dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dda:	78 85       	ldd	r23, Y+8	; 0x08
    3ddc:	89 85       	ldd	r24, Y+9	; 0x09
    3dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	40 e8       	ldi	r20, 0x80	; 128
    3de6:	5f e3       	ldi	r21, 0x3F	; 63
    3de8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dec:	88 23       	and	r24, r24
    3dee:	2c f4       	brge	.+10     	; 0x3dfa <HCLCD_Vid4Bits_ClearScreen+0x72>
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	9e 83       	std	Y+6, r25	; 0x06
    3df6:	8d 83       	std	Y+5, r24	; 0x05
    3df8:	3f c0       	rjmp	.+126    	; 0x3e78 <HCLCD_Vid4Bits_ClearScreen+0xf0>
    3dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfc:	78 85       	ldd	r23, Y+8	; 0x08
    3dfe:	89 85       	ldd	r24, Y+9	; 0x09
    3e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	3f ef       	ldi	r19, 0xFF	; 255
    3e06:	4f e7       	ldi	r20, 0x7F	; 127
    3e08:	57 e4       	ldi	r21, 0x47	; 71
    3e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e0e:	18 16       	cp	r1, r24
    3e10:	4c f5       	brge	.+82     	; 0x3e64 <HCLCD_Vid4Bits_ClearScreen+0xdc>
    3e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	40 e2       	ldi	r20, 0x20	; 32
    3e20:	51 e4       	ldi	r21, 0x41	; 65
    3e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e26:	dc 01       	movw	r26, r24
    3e28:	cb 01       	movw	r24, r22
    3e2a:	bc 01       	movw	r22, r24
    3e2c:	cd 01       	movw	r24, r26
    3e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	9e 83       	std	Y+6, r25	; 0x06
    3e38:	8d 83       	std	Y+5, r24	; 0x05
    3e3a:	0f c0       	rjmp	.+30     	; 0x3e5a <HCLCD_Vid4Bits_ClearScreen+0xd2>
    3e3c:	88 ec       	ldi	r24, 0xC8	; 200
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	9c 83       	std	Y+4, r25	; 0x04
    3e42:	8b 83       	std	Y+3, r24	; 0x03
    3e44:	8b 81       	ldd	r24, Y+3	; 0x03
    3e46:	9c 81       	ldd	r25, Y+4	; 0x04
    3e48:	01 97       	sbiw	r24, 0x01	; 1
    3e4a:	f1 f7       	brne	.-4      	; 0x3e48 <HCLCD_Vid4Bits_ClearScreen+0xc0>
    3e4c:	9c 83       	std	Y+4, r25	; 0x04
    3e4e:	8b 83       	std	Y+3, r24	; 0x03
    3e50:	8d 81       	ldd	r24, Y+5	; 0x05
    3e52:	9e 81       	ldd	r25, Y+6	; 0x06
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	9e 83       	std	Y+6, r25	; 0x06
    3e58:	8d 83       	std	Y+5, r24	; 0x05
    3e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e5e:	00 97       	sbiw	r24, 0x00	; 0
    3e60:	69 f7       	brne	.-38     	; 0x3e3c <HCLCD_Vid4Bits_ClearScreen+0xb4>
    3e62:	14 c0       	rjmp	.+40     	; 0x3e8c <HCLCD_Vid4Bits_ClearScreen+0x104>
    3e64:	6f 81       	ldd	r22, Y+7	; 0x07
    3e66:	78 85       	ldd	r23, Y+8	; 0x08
    3e68:	89 85       	ldd	r24, Y+9	; 0x09
    3e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	9e 83       	std	Y+6, r25	; 0x06
    3e76:	8d 83       	std	Y+5, r24	; 0x05
    3e78:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7c:	9a 83       	std	Y+2, r25	; 0x02
    3e7e:	89 83       	std	Y+1, r24	; 0x01
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	9a 81       	ldd	r25, Y+2	; 0x02
    3e84:	01 97       	sbiw	r24, 0x01	; 1
    3e86:	f1 f7       	brne	.-4      	; 0x3e84 <HCLCD_Vid4Bits_ClearScreen+0xfc>
    3e88:	9a 83       	std	Y+2, r25	; 0x02
    3e8a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
}
    3e8c:	2e 96       	adiw	r28, 0x0e	; 14
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	cf 91       	pop	r28
    3e9a:	df 91       	pop	r29
    3e9c:	08 95       	ret

00003e9e <HCLCD_Vid4Bits_DisplayShiftLeft>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
    3e9e:	df 93       	push	r29
    3ea0:	cf 93       	push	r28
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	60 97       	sbiw	r28, 0x10	; 16
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
    3eb2:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3eb4:	1f 86       	std	Y+15, r1	; 0x0f
    3eb6:	7b c0       	rjmp	.+246    	; 0x3fae <HCLCD_Vid4Bits_DisplayShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);
    3ebe:	88 e1       	ldi	r24, 0x18	; 24
    3ec0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	a6 e9       	ldi	r26, 0x96	; 150
    3eca:	b3 e4       	ldi	r27, 0x43	; 67
    3ecc:	8b 87       	std	Y+11, r24	; 0x0b
    3ece:	9c 87       	std	Y+12, r25	; 0x0c
    3ed0:	ad 87       	std	Y+13, r26	; 0x0d
    3ed2:	be 87       	std	Y+14, r27	; 0x0e
    3ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	4a ef       	ldi	r20, 0xFA	; 250
    3ee2:	54 e4       	ldi	r21, 0x44	; 68
    3ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	8f 83       	std	Y+7, r24	; 0x07
    3eee:	98 87       	std	Y+8, r25	; 0x08
    3ef0:	a9 87       	std	Y+9, r26	; 0x09
    3ef2:	ba 87       	std	Y+10, r27	; 0x0a
    3ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef6:	78 85       	ldd	r23, Y+8	; 0x08
    3ef8:	89 85       	ldd	r24, Y+9	; 0x09
    3efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e8       	ldi	r20, 0x80	; 128
    3f02:	5f e3       	ldi	r21, 0x3F	; 63
    3f04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f08:	88 23       	and	r24, r24
    3f0a:	2c f4       	brge	.+10     	; 0x3f16 <HCLCD_Vid4Bits_DisplayShiftLeft+0x78>
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	9e 83       	std	Y+6, r25	; 0x06
    3f12:	8d 83       	std	Y+5, r24	; 0x05
    3f14:	3f c0       	rjmp	.+126    	; 0x3f94 <HCLCD_Vid4Bits_DisplayShiftLeft+0xf6>
    3f16:	6f 81       	ldd	r22, Y+7	; 0x07
    3f18:	78 85       	ldd	r23, Y+8	; 0x08
    3f1a:	89 85       	ldd	r24, Y+9	; 0x09
    3f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	3f ef       	ldi	r19, 0xFF	; 255
    3f22:	4f e7       	ldi	r20, 0x7F	; 127
    3f24:	57 e4       	ldi	r21, 0x47	; 71
    3f26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f2a:	18 16       	cp	r1, r24
    3f2c:	4c f5       	brge	.+82     	; 0x3f80 <HCLCD_Vid4Bits_DisplayShiftLeft+0xe2>
    3f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	40 e2       	ldi	r20, 0x20	; 32
    3f3c:	51 e4       	ldi	r21, 0x41	; 65
    3f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	bc 01       	movw	r22, r24
    3f48:	cd 01       	movw	r24, r26
    3f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	9e 83       	std	Y+6, r25	; 0x06
    3f54:	8d 83       	std	Y+5, r24	; 0x05
    3f56:	0f c0       	rjmp	.+30     	; 0x3f76 <HCLCD_Vid4Bits_DisplayShiftLeft+0xd8>
    3f58:	88 ec       	ldi	r24, 0xC8	; 200
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	9c 83       	std	Y+4, r25	; 0x04
    3f5e:	8b 83       	std	Y+3, r24	; 0x03
    3f60:	8b 81       	ldd	r24, Y+3	; 0x03
    3f62:	9c 81       	ldd	r25, Y+4	; 0x04
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	f1 f7       	brne	.-4      	; 0x3f64 <HCLCD_Vid4Bits_DisplayShiftLeft+0xc6>
    3f68:	9c 83       	std	Y+4, r25	; 0x04
    3f6a:	8b 83       	std	Y+3, r24	; 0x03
    3f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f70:	01 97       	sbiw	r24, 0x01	; 1
    3f72:	9e 83       	std	Y+6, r25	; 0x06
    3f74:	8d 83       	std	Y+5, r24	; 0x05
    3f76:	8d 81       	ldd	r24, Y+5	; 0x05
    3f78:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7a:	00 97       	sbiw	r24, 0x00	; 0
    3f7c:	69 f7       	brne	.-38     	; 0x3f58 <HCLCD_Vid4Bits_DisplayShiftLeft+0xba>
    3f7e:	14 c0       	rjmp	.+40     	; 0x3fa8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x10a>
    3f80:	6f 81       	ldd	r22, Y+7	; 0x07
    3f82:	78 85       	ldd	r23, Y+8	; 0x08
    3f84:	89 85       	ldd	r24, Y+9	; 0x09
    3f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	9e 83       	std	Y+6, r25	; 0x06
    3f92:	8d 83       	std	Y+5, r24	; 0x05
    3f94:	8d 81       	ldd	r24, Y+5	; 0x05
    3f96:	9e 81       	ldd	r25, Y+6	; 0x06
    3f98:	9a 83       	std	Y+2, r25	; 0x02
    3f9a:	89 83       	std	Y+1, r24	; 0x01
    3f9c:	89 81       	ldd	r24, Y+1	; 0x01
    3f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <HCLCD_Vid4Bits_DisplayShiftLeft+0x102>
    3fa4:	9a 83       	std	Y+2, r25	; 0x02
    3fa6:	89 83       	std	Y+1, r24	; 0x01
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    3fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3faa:	8f 5f       	subi	r24, 0xFF	; 255
    3fac:	8f 87       	std	Y+15, r24	; 0x0f
    3fae:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fb0:	88 89       	ldd	r24, Y+16	; 0x10
    3fb2:	98 17       	cp	r25, r24
    3fb4:	08 f4       	brcc	.+2      	; 0x3fb8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x11a>
    3fb6:	80 cf       	rjmp	.-256    	; 0x3eb8 <HCLCD_Vid4Bits_DisplayShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    3fb8:	60 96       	adiw	r28, 0x10	; 16
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <HCLCD_Vid4Bits_DisplayShiftRight>:
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
    3fd2:	60 97       	sbiw	r28, 0x10	; 16
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	f8 94       	cli
    3fd8:	de bf       	out	0x3e, r29	; 62
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    3fe0:	1f 86       	std	Y+15, r1	; 0x0f
    3fe2:	7b c0       	rjmp	.+246    	; 0x40da <HCLCD_Vid4Bits_DisplayShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);
    3fea:	8c e1       	ldi	r24, 0x1C	; 28
    3fec:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	a6 e9       	ldi	r26, 0x96	; 150
    3ff6:	b3 e4       	ldi	r27, 0x43	; 67
    3ff8:	8b 87       	std	Y+11, r24	; 0x0b
    3ffa:	9c 87       	std	Y+12, r25	; 0x0c
    3ffc:	ad 87       	std	Y+13, r26	; 0x0d
    3ffe:	be 87       	std	Y+14, r27	; 0x0e
    4000:	6b 85       	ldd	r22, Y+11	; 0x0b
    4002:	7c 85       	ldd	r23, Y+12	; 0x0c
    4004:	8d 85       	ldd	r24, Y+13	; 0x0d
    4006:	9e 85       	ldd	r25, Y+14	; 0x0e
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	4a ef       	ldi	r20, 0xFA	; 250
    400e:	54 e4       	ldi	r21, 0x44	; 68
    4010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	8f 83       	std	Y+7, r24	; 0x07
    401a:	98 87       	std	Y+8, r25	; 0x08
    401c:	a9 87       	std	Y+9, r26	; 0x09
    401e:	ba 87       	std	Y+10, r27	; 0x0a
    4020:	6f 81       	ldd	r22, Y+7	; 0x07
    4022:	78 85       	ldd	r23, Y+8	; 0x08
    4024:	89 85       	ldd	r24, Y+9	; 0x09
    4026:	9a 85       	ldd	r25, Y+10	; 0x0a
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e8       	ldi	r20, 0x80	; 128
    402e:	5f e3       	ldi	r21, 0x3F	; 63
    4030:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4034:	88 23       	and	r24, r24
    4036:	2c f4       	brge	.+10     	; 0x4042 <HCLCD_Vid4Bits_DisplayShiftRight+0x78>
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	9e 83       	std	Y+6, r25	; 0x06
    403e:	8d 83       	std	Y+5, r24	; 0x05
    4040:	3f c0       	rjmp	.+126    	; 0x40c0 <HCLCD_Vid4Bits_DisplayShiftRight+0xf6>
    4042:	6f 81       	ldd	r22, Y+7	; 0x07
    4044:	78 85       	ldd	r23, Y+8	; 0x08
    4046:	89 85       	ldd	r24, Y+9	; 0x09
    4048:	9a 85       	ldd	r25, Y+10	; 0x0a
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	3f ef       	ldi	r19, 0xFF	; 255
    404e:	4f e7       	ldi	r20, 0x7F	; 127
    4050:	57 e4       	ldi	r21, 0x47	; 71
    4052:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4056:	18 16       	cp	r1, r24
    4058:	4c f5       	brge	.+82     	; 0x40ac <HCLCD_Vid4Bits_DisplayShiftRight+0xe2>
    405a:	6b 85       	ldd	r22, Y+11	; 0x0b
    405c:	7c 85       	ldd	r23, Y+12	; 0x0c
    405e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4060:	9e 85       	ldd	r25, Y+14	; 0x0e
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e2       	ldi	r20, 0x20	; 32
    4068:	51 e4       	ldi	r21, 0x41	; 65
    406a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	bc 01       	movw	r22, r24
    4074:	cd 01       	movw	r24, r26
    4076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	9e 83       	std	Y+6, r25	; 0x06
    4080:	8d 83       	std	Y+5, r24	; 0x05
    4082:	0f c0       	rjmp	.+30     	; 0x40a2 <HCLCD_Vid4Bits_DisplayShiftRight+0xd8>
    4084:	88 ec       	ldi	r24, 0xC8	; 200
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	9c 83       	std	Y+4, r25	; 0x04
    408a:	8b 83       	std	Y+3, r24	; 0x03
    408c:	8b 81       	ldd	r24, Y+3	; 0x03
    408e:	9c 81       	ldd	r25, Y+4	; 0x04
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	f1 f7       	brne	.-4      	; 0x4090 <HCLCD_Vid4Bits_DisplayShiftRight+0xc6>
    4094:	9c 83       	std	Y+4, r25	; 0x04
    4096:	8b 83       	std	Y+3, r24	; 0x03
    4098:	8d 81       	ldd	r24, Y+5	; 0x05
    409a:	9e 81       	ldd	r25, Y+6	; 0x06
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	9e 83       	std	Y+6, r25	; 0x06
    40a0:	8d 83       	std	Y+5, r24	; 0x05
    40a2:	8d 81       	ldd	r24, Y+5	; 0x05
    40a4:	9e 81       	ldd	r25, Y+6	; 0x06
    40a6:	00 97       	sbiw	r24, 0x00	; 0
    40a8:	69 f7       	brne	.-38     	; 0x4084 <HCLCD_Vid4Bits_DisplayShiftRight+0xba>
    40aa:	14 c0       	rjmp	.+40     	; 0x40d4 <HCLCD_Vid4Bits_DisplayShiftRight+0x10a>
    40ac:	6f 81       	ldd	r22, Y+7	; 0x07
    40ae:	78 85       	ldd	r23, Y+8	; 0x08
    40b0:	89 85       	ldd	r24, Y+9	; 0x09
    40b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	9e 83       	std	Y+6, r25	; 0x06
    40be:	8d 83       	std	Y+5, r24	; 0x05
    40c0:	8d 81       	ldd	r24, Y+5	; 0x05
    40c2:	9e 81       	ldd	r25, Y+6	; 0x06
    40c4:	9a 83       	std	Y+2, r25	; 0x02
    40c6:	89 83       	std	Y+1, r24	; 0x01
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	9a 81       	ldd	r25, Y+2	; 0x02
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	f1 f7       	brne	.-4      	; 0x40cc <HCLCD_Vid4Bits_DisplayShiftRight+0x102>
    40d0:	9a 83       	std	Y+2, r25	; 0x02
    40d2:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_DisplayShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    40d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40d6:	8f 5f       	subi	r24, 0xFF	; 255
    40d8:	8f 87       	std	Y+15, r24	; 0x0f
    40da:	9f 85       	ldd	r25, Y+15	; 0x0f
    40dc:	88 89       	ldd	r24, Y+16	; 0x10
    40de:	98 17       	cp	r25, r24
    40e0:	08 f4       	brcc	.+2      	; 0x40e4 <HCLCD_Vid4Bits_DisplayShiftRight+0x11a>
    40e2:	80 cf       	rjmp	.-256    	; 0x3fe4 <HCLCD_Vid4Bits_DisplayShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(DISPLAY_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    40e4:	60 96       	adiw	r28, 0x10	; 16
    40e6:	0f b6       	in	r0, 0x3f	; 63
    40e8:	f8 94       	cli
    40ea:	de bf       	out	0x3e, r29	; 62
    40ec:	0f be       	out	0x3f, r0	; 63
    40ee:	cd bf       	out	0x3d, r28	; 61
    40f0:	cf 91       	pop	r28
    40f2:	df 91       	pop	r29
    40f4:	08 95       	ret

000040f6 <HCLCD_Vid4Bits_CursorShiftLeft>:
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
    40f6:	df 93       	push	r29
    40f8:	cf 93       	push	r28
    40fa:	cd b7       	in	r28, 0x3d	; 61
    40fc:	de b7       	in	r29, 0x3e	; 62
    40fe:	60 97       	sbiw	r28, 0x10	; 16
    4100:	0f b6       	in	r0, 0x3f	; 63
    4102:	f8 94       	cli
    4104:	de bf       	out	0x3e, r29	; 62
    4106:	0f be       	out	0x3f, r0	; 63
    4108:	cd bf       	out	0x3d, r28	; 61
    410a:	88 8b       	std	Y+16, r24	; 0x10
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    410c:	1f 86       	std	Y+15, r1	; 0x0f
    410e:	7b c0       	rjmp	.+246    	; 0x4206 <HCLCD_Vid4Bits_CursorShiftLeft+0x110>
 {
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);
    4116:	80 e1       	ldi	r24, 0x10	; 16
    4118:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	a6 e9       	ldi	r26, 0x96	; 150
    4122:	b3 e4       	ldi	r27, 0x43	; 67
    4124:	8b 87       	std	Y+11, r24	; 0x0b
    4126:	9c 87       	std	Y+12, r25	; 0x0c
    4128:	ad 87       	std	Y+13, r26	; 0x0d
    412a:	be 87       	std	Y+14, r27	; 0x0e
    412c:	6b 85       	ldd	r22, Y+11	; 0x0b
    412e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4130:	8d 85       	ldd	r24, Y+13	; 0x0d
    4132:	9e 85       	ldd	r25, Y+14	; 0x0e
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	4a ef       	ldi	r20, 0xFA	; 250
    413a:	54 e4       	ldi	r21, 0x44	; 68
    413c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	8f 83       	std	Y+7, r24	; 0x07
    4146:	98 87       	std	Y+8, r25	; 0x08
    4148:	a9 87       	std	Y+9, r26	; 0x09
    414a:	ba 87       	std	Y+10, r27	; 0x0a
    414c:	6f 81       	ldd	r22, Y+7	; 0x07
    414e:	78 85       	ldd	r23, Y+8	; 0x08
    4150:	89 85       	ldd	r24, Y+9	; 0x09
    4152:	9a 85       	ldd	r25, Y+10	; 0x0a
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e8       	ldi	r20, 0x80	; 128
    415a:	5f e3       	ldi	r21, 0x3F	; 63
    415c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4160:	88 23       	and	r24, r24
    4162:	2c f4       	brge	.+10     	; 0x416e <HCLCD_Vid4Bits_CursorShiftLeft+0x78>
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	9e 83       	std	Y+6, r25	; 0x06
    416a:	8d 83       	std	Y+5, r24	; 0x05
    416c:	3f c0       	rjmp	.+126    	; 0x41ec <HCLCD_Vid4Bits_CursorShiftLeft+0xf6>
    416e:	6f 81       	ldd	r22, Y+7	; 0x07
    4170:	78 85       	ldd	r23, Y+8	; 0x08
    4172:	89 85       	ldd	r24, Y+9	; 0x09
    4174:	9a 85       	ldd	r25, Y+10	; 0x0a
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	3f ef       	ldi	r19, 0xFF	; 255
    417a:	4f e7       	ldi	r20, 0x7F	; 127
    417c:	57 e4       	ldi	r21, 0x47	; 71
    417e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4182:	18 16       	cp	r1, r24
    4184:	4c f5       	brge	.+82     	; 0x41d8 <HCLCD_Vid4Bits_CursorShiftLeft+0xe2>
    4186:	6b 85       	ldd	r22, Y+11	; 0x0b
    4188:	7c 85       	ldd	r23, Y+12	; 0x0c
    418a:	8d 85       	ldd	r24, Y+13	; 0x0d
    418c:	9e 85       	ldd	r25, Y+14	; 0x0e
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e2       	ldi	r20, 0x20	; 32
    4194:	51 e4       	ldi	r21, 0x41	; 65
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9e 83       	std	Y+6, r25	; 0x06
    41ac:	8d 83       	std	Y+5, r24	; 0x05
    41ae:	0f c0       	rjmp	.+30     	; 0x41ce <HCLCD_Vid4Bits_CursorShiftLeft+0xd8>
    41b0:	88 ec       	ldi	r24, 0xC8	; 200
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	9c 83       	std	Y+4, r25	; 0x04
    41b6:	8b 83       	std	Y+3, r24	; 0x03
    41b8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ba:	9c 81       	ldd	r25, Y+4	; 0x04
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <HCLCD_Vid4Bits_CursorShiftLeft+0xc6>
    41c0:	9c 83       	std	Y+4, r25	; 0x04
    41c2:	8b 83       	std	Y+3, r24	; 0x03
    41c4:	8d 81       	ldd	r24, Y+5	; 0x05
    41c6:	9e 81       	ldd	r25, Y+6	; 0x06
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	9e 83       	std	Y+6, r25	; 0x06
    41cc:	8d 83       	std	Y+5, r24	; 0x05
    41ce:	8d 81       	ldd	r24, Y+5	; 0x05
    41d0:	9e 81       	ldd	r25, Y+6	; 0x06
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	69 f7       	brne	.-38     	; 0x41b0 <HCLCD_Vid4Bits_CursorShiftLeft+0xba>
    41d6:	14 c0       	rjmp	.+40     	; 0x4200 <HCLCD_Vid4Bits_CursorShiftLeft+0x10a>
    41d8:	6f 81       	ldd	r22, Y+7	; 0x07
    41da:	78 85       	ldd	r23, Y+8	; 0x08
    41dc:	89 85       	ldd	r24, Y+9	; 0x09
    41de:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	9e 83       	std	Y+6, r25	; 0x06
    41ea:	8d 83       	std	Y+5, r24	; 0x05
    41ec:	8d 81       	ldd	r24, Y+5	; 0x05
    41ee:	9e 81       	ldd	r25, Y+6	; 0x06
    41f0:	9a 83       	std	Y+2, r25	; 0x02
    41f2:	89 83       	std	Y+1, r24	; 0x01
    41f4:	89 81       	ldd	r24, Y+1	; 0x01
    41f6:	9a 81       	ldd	r25, Y+2	; 0x02
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <HCLCD_Vid4Bits_CursorShiftLeft+0x102>
    41fc:	9a 83       	std	Y+2, r25	; 0x02
    41fe:	89 83       	std	Y+1, r24	; 0x01
}
 /**/
 void HCLCD_Vid4Bits_CursorShiftLeft(u8 Copy_ShiftNumber)
{
	u8 i ;
 for(i=0 ; i<Copy_ShiftNumber ;i++)
    4200:	8f 85       	ldd	r24, Y+15	; 0x0f
    4202:	8f 5f       	subi	r24, 0xFF	; 255
    4204:	8f 87       	std	Y+15, r24	; 0x0f
    4206:	9f 85       	ldd	r25, Y+15	; 0x0f
    4208:	88 89       	ldd	r24, Y+16	; 0x10
    420a:	98 17       	cp	r25, r24
    420c:	08 f4       	brcc	.+2      	; 0x4210 <HCLCD_Vid4Bits_CursorShiftLeft+0x11a>
    420e:	80 cf       	rjmp	.-256    	; 0x4110 <HCLCD_Vid4Bits_CursorShiftLeft+0x1a>
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT>>4);
	 HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_LEFT);

  _delay_ms(300);
 }
}
    4210:	60 96       	adiw	r28, 0x10	; 16
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	f8 94       	cli
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	cd bf       	out	0x3d, r28	; 61
    421c:	cf 91       	pop	r28
    421e:	df 91       	pop	r29
    4220:	08 95       	ret

00004222 <HCLCD_Vid4Bits_CursorShiftRight>:
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
    4222:	df 93       	push	r29
    4224:	cf 93       	push	r28
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	60 97       	sbiw	r28, 0x10	; 16
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	f8 94       	cli
    4230:	de bf       	out	0x3e, r29	; 62
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	cd bf       	out	0x3d, r28	; 61
    4236:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    4238:	1f 86       	std	Y+15, r1	; 0x0f
    423a:	7b c0       	rjmp	.+246    	; 0x4332 <HCLCD_Vid4Bits_CursorShiftRight+0x110>
	{
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);
    4242:	84 e1       	ldi	r24, 0x14	; 20
    4244:	0e 94 3c 1a 	call	0x3478	; 0x3478 <HCLCD_Vid4Bits_SendCommand>
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	a6 e9       	ldi	r26, 0x96	; 150
    424e:	b3 e4       	ldi	r27, 0x43	; 67
    4250:	8b 87       	std	Y+11, r24	; 0x0b
    4252:	9c 87       	std	Y+12, r25	; 0x0c
    4254:	ad 87       	std	Y+13, r26	; 0x0d
    4256:	be 87       	std	Y+14, r27	; 0x0e
    4258:	6b 85       	ldd	r22, Y+11	; 0x0b
    425a:	7c 85       	ldd	r23, Y+12	; 0x0c
    425c:	8d 85       	ldd	r24, Y+13	; 0x0d
    425e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	4a ef       	ldi	r20, 0xFA	; 250
    4266:	54 e4       	ldi	r21, 0x44	; 68
    4268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	8f 83       	std	Y+7, r24	; 0x07
    4272:	98 87       	std	Y+8, r25	; 0x08
    4274:	a9 87       	std	Y+9, r26	; 0x09
    4276:	ba 87       	std	Y+10, r27	; 0x0a
    4278:	6f 81       	ldd	r22, Y+7	; 0x07
    427a:	78 85       	ldd	r23, Y+8	; 0x08
    427c:	89 85       	ldd	r24, Y+9	; 0x09
    427e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	40 e8       	ldi	r20, 0x80	; 128
    4286:	5f e3       	ldi	r21, 0x3F	; 63
    4288:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    428c:	88 23       	and	r24, r24
    428e:	2c f4       	brge	.+10     	; 0x429a <HCLCD_Vid4Bits_CursorShiftRight+0x78>
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	9e 83       	std	Y+6, r25	; 0x06
    4296:	8d 83       	std	Y+5, r24	; 0x05
    4298:	3f c0       	rjmp	.+126    	; 0x4318 <HCLCD_Vid4Bits_CursorShiftRight+0xf6>
    429a:	6f 81       	ldd	r22, Y+7	; 0x07
    429c:	78 85       	ldd	r23, Y+8	; 0x08
    429e:	89 85       	ldd	r24, Y+9	; 0x09
    42a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	3f ef       	ldi	r19, 0xFF	; 255
    42a6:	4f e7       	ldi	r20, 0x7F	; 127
    42a8:	57 e4       	ldi	r21, 0x47	; 71
    42aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42ae:	18 16       	cp	r1, r24
    42b0:	4c f5       	brge	.+82     	; 0x4304 <HCLCD_Vid4Bits_CursorShiftRight+0xe2>
    42b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	40 e2       	ldi	r20, 0x20	; 32
    42c0:	51 e4       	ldi	r21, 0x41	; 65
    42c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	bc 01       	movw	r22, r24
    42cc:	cd 01       	movw	r24, r26
    42ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	9e 83       	std	Y+6, r25	; 0x06
    42d8:	8d 83       	std	Y+5, r24	; 0x05
    42da:	0f c0       	rjmp	.+30     	; 0x42fa <HCLCD_Vid4Bits_CursorShiftRight+0xd8>
    42dc:	88 ec       	ldi	r24, 0xC8	; 200
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	9c 83       	std	Y+4, r25	; 0x04
    42e2:	8b 83       	std	Y+3, r24	; 0x03
    42e4:	8b 81       	ldd	r24, Y+3	; 0x03
    42e6:	9c 81       	ldd	r25, Y+4	; 0x04
    42e8:	01 97       	sbiw	r24, 0x01	; 1
    42ea:	f1 f7       	brne	.-4      	; 0x42e8 <HCLCD_Vid4Bits_CursorShiftRight+0xc6>
    42ec:	9c 83       	std	Y+4, r25	; 0x04
    42ee:	8b 83       	std	Y+3, r24	; 0x03
    42f0:	8d 81       	ldd	r24, Y+5	; 0x05
    42f2:	9e 81       	ldd	r25, Y+6	; 0x06
    42f4:	01 97       	sbiw	r24, 0x01	; 1
    42f6:	9e 83       	std	Y+6, r25	; 0x06
    42f8:	8d 83       	std	Y+5, r24	; 0x05
    42fa:	8d 81       	ldd	r24, Y+5	; 0x05
    42fc:	9e 81       	ldd	r25, Y+6	; 0x06
    42fe:	00 97       	sbiw	r24, 0x00	; 0
    4300:	69 f7       	brne	.-38     	; 0x42dc <HCLCD_Vid4Bits_CursorShiftRight+0xba>
    4302:	14 c0       	rjmp	.+40     	; 0x432c <HCLCD_Vid4Bits_CursorShiftRight+0x10a>
    4304:	6f 81       	ldd	r22, Y+7	; 0x07
    4306:	78 85       	ldd	r23, Y+8	; 0x08
    4308:	89 85       	ldd	r24, Y+9	; 0x09
    430a:	9a 85       	ldd	r25, Y+10	; 0x0a
    430c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	9e 83       	std	Y+6, r25	; 0x06
    4316:	8d 83       	std	Y+5, r24	; 0x05
    4318:	8d 81       	ldd	r24, Y+5	; 0x05
    431a:	9e 81       	ldd	r25, Y+6	; 0x06
    431c:	9a 83       	std	Y+2, r25	; 0x02
    431e:	89 83       	std	Y+1, r24	; 0x01
    4320:	89 81       	ldd	r24, Y+1	; 0x01
    4322:	9a 81       	ldd	r25, Y+2	; 0x02
    4324:	01 97       	sbiw	r24, 0x01	; 1
    4326:	f1 f7       	brne	.-4      	; 0x4324 <HCLCD_Vid4Bits_CursorShiftRight+0x102>
    4328:	9a 83       	std	Y+2, r25	; 0x02
    432a:	89 83       	std	Y+1, r24	; 0x01
 }
}
/**/
 void HCLCD_Vid4Bits_CursorShiftRight(u8 Copy_ShiftNumber)
{
	for(u8 i=0;i <Copy_ShiftNumber;i++)
    432c:	8f 85       	ldd	r24, Y+15	; 0x0f
    432e:	8f 5f       	subi	r24, 0xFF	; 255
    4330:	8f 87       	std	Y+15, r24	; 0x0f
    4332:	9f 85       	ldd	r25, Y+15	; 0x0f
    4334:	88 89       	ldd	r24, Y+16	; 0x10
    4336:	98 17       	cp	r25, r24
    4338:	08 f4       	brcc	.+2      	; 0x433c <HCLCD_Vid4Bits_CursorShiftRight+0x11a>
    433a:	80 cf       	rjmp	.-256    	; 0x423c <HCLCD_Vid4Bits_CursorShiftRight+0x1a>
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT>>4);
		HCLCD_Vid4Bits_SendCommand(CURSOR_SHIFT_RIGHT);

      _delay_ms(300);
	}
}
    433c:	60 96       	adiw	r28, 0x10	; 16
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	cf 91       	pop	r28
    434a:	df 91       	pop	r29
    434c:	08 95       	ret

0000434e <main>:
/*******************************************************************************************************/
/*                                    Beginning of the System                                          */
/*******************************************************************************************************/

int main(void)
{
    434e:	af 92       	push	r10
    4350:	bf 92       	push	r11
    4352:	cf 92       	push	r12
    4354:	df 92       	push	r13
    4356:	ef 92       	push	r14
    4358:	ff 92       	push	r15
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
    4366:	cb 56       	subi	r28, 0x6B	; 107
    4368:	d0 40       	sbci	r29, 0x00	; 0
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	f8 94       	cli
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	cd bf       	out	0x3d, r28	; 61

	/*******************************************************************************************************/
	/*                                          System variables                                           */
	/*******************************************************************************************************/

	u16 LOC_u16DigitalValue     = 0;
    4374:	1c aa       	std	Y+52, r1	; 0x34
    4376:	1b aa       	std	Y+51, r1	; 0x33
	u16 LOC_u16AnalogValue      = 0;
    4378:	1a aa       	std	Y+50, r1	; 0x32
    437a:	19 aa       	std	Y+49, r1	; 0x31
	u16 LOC_u16Analog_OldValue  = 0;
    437c:	18 aa       	std	Y+48, r1	; 0x30
    437e:	1f a6       	std	Y+47, r1	; 0x2f
	u16 LOC_u16OCR_Value        = 0;
    4380:	1e a6       	std	Y+46, r1	; 0x2e
    4382:	1d a6       	std	Y+45, r1	; 0x2d
	u32 LOC_u32Freq             = 0;
    4384:	19 a6       	std	Y+41, r1	; 0x29
    4386:	1a a6       	std	Y+42, r1	; 0x2a
    4388:	1b a6       	std	Y+43, r1	; 0x2b
    438a:	1c a6       	std	Y+44, r1	; 0x2c
	u16 LOC_u16DutyCycle        = 0;
    438c:	18 a6       	std	Y+40, r1	; 0x28
    438e:	1f a2       	std	Y+39, r1	; 0x27
	u8 pattern_low[8]           ={0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00};
    4390:	88 e0       	ldi	r24, 0x08	; 8
    4392:	fe 01       	movw	r30, r28
    4394:	f5 96       	adiw	r30, 0x35	; 53
    4396:	df 01       	movw	r26, r30
    4398:	a8 2e       	mov	r10, r24
    439a:	1d 92       	st	X+, r1
    439c:	aa 94       	dec	r10
    439e:	e9 f7       	brne	.-6      	; 0x439a <main+0x4c>
    43a0:	8f e1       	ldi	r24, 0x1F	; 31
    43a2:	8b af       	std	Y+59, r24	; 0x3b
	u8 pattern_high[8]          ={0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    43a4:	88 e0       	ldi	r24, 0x08	; 8
    43a6:	fe 01       	movw	r30, r28
    43a8:	fd 96       	adiw	r30, 0x3d	; 61
    43aa:	df 01       	movw	r26, r30
    43ac:	a8 2e       	mov	r10, r24
    43ae:	1d 92       	st	X+, r1
    43b0:	aa 94       	dec	r10
    43b2:	e9 f7       	brne	.-6      	; 0x43ae <main+0x60>
    43b4:	8f e1       	ldi	r24, 0x1F	; 31
    43b6:	8d af       	std	Y+61, r24	; 0x3d
	u8 pattern_rising[8]        ={0x1F,0x10,0x10,0x10,0x10,0x10,0x10,0x00};
    43b8:	ce 01       	movw	r24, r28
    43ba:	8b 5b       	subi	r24, 0xBB	; 187
    43bc:	9f 4f       	sbci	r25, 0xFF	; 255
    43be:	6f 96       	adiw	r28, 0x1f	; 31
    43c0:	9f af       	std	Y+63, r25	; 0x3f
    43c2:	8e af       	std	Y+62, r24	; 0x3e
    43c4:	6f 97       	sbiw	r28, 0x1f	; 31
    43c6:	06 eb       	ldi	r16, 0xB6	; 182
    43c8:	11 e0       	ldi	r17, 0x01	; 1
    43ca:	a1 96       	adiw	r28, 0x21	; 33
    43cc:	1f af       	std	Y+63, r17	; 0x3f
    43ce:	0e af       	std	Y+62, r16	; 0x3e
    43d0:	a1 97       	sbiw	r28, 0x21	; 33
    43d2:	18 e0       	ldi	r17, 0x08	; 8
    43d4:	a2 96       	adiw	r28, 0x22	; 34
    43d6:	1f af       	std	Y+63, r17	; 0x3f
    43d8:	a2 97       	sbiw	r28, 0x22	; 34
    43da:	a1 96       	adiw	r28, 0x21	; 33
    43dc:	ae ad       	ldd	r26, Y+62	; 0x3e
    43de:	bf ad       	ldd	r27, Y+63	; 0x3f
    43e0:	a1 97       	sbiw	r28, 0x21	; 33
    43e2:	0c 90       	ld	r0, X
    43e4:	a1 96       	adiw	r28, 0x21	; 33
    43e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    43e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    43ea:	a1 97       	sbiw	r28, 0x21	; 33
    43ec:	31 96       	adiw	r30, 0x01	; 1
    43ee:	a1 96       	adiw	r28, 0x21	; 33
    43f0:	ff af       	std	Y+63, r31	; 0x3f
    43f2:	ee af       	std	Y+62, r30	; 0x3e
    43f4:	a1 97       	sbiw	r28, 0x21	; 33
    43f6:	6f 96       	adiw	r28, 0x1f	; 31
    43f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    43fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    43fc:	6f 97       	sbiw	r28, 0x1f	; 31
    43fe:	0c 92       	st	X, r0
    4400:	6f 96       	adiw	r28, 0x1f	; 31
    4402:	ee ad       	ldd	r30, Y+62	; 0x3e
    4404:	ff ad       	ldd	r31, Y+63	; 0x3f
    4406:	6f 97       	sbiw	r28, 0x1f	; 31
    4408:	31 96       	adiw	r30, 0x01	; 1
    440a:	6f 96       	adiw	r28, 0x1f	; 31
    440c:	ff af       	std	Y+63, r31	; 0x3f
    440e:	ee af       	std	Y+62, r30	; 0x3e
    4410:	6f 97       	sbiw	r28, 0x1f	; 31
    4412:	a2 96       	adiw	r28, 0x22	; 34
    4414:	ff ad       	ldd	r31, Y+63	; 0x3f
    4416:	a2 97       	sbiw	r28, 0x22	; 34
    4418:	f1 50       	subi	r31, 0x01	; 1
    441a:	a2 96       	adiw	r28, 0x22	; 34
    441c:	ff af       	std	Y+63, r31	; 0x3f
    441e:	a2 97       	sbiw	r28, 0x22	; 34
    4420:	a2 96       	adiw	r28, 0x22	; 34
    4422:	af ac       	ldd	r10, Y+63	; 0x3f
    4424:	a2 97       	sbiw	r28, 0x22	; 34
    4426:	aa 20       	and	r10, r10
    4428:	c1 f6       	brne	.-80     	; 0x43da <main+0x8c>
	u8 pattern_falling[8]       ={0x1F,0x01,0x01,0x01,0x01,0x01,0x01,0x00};
    442a:	ce 01       	movw	r24, r28
    442c:	83 5b       	subi	r24, 0xB3	; 179
    442e:	9f 4f       	sbci	r25, 0xFF	; 255
    4430:	a4 96       	adiw	r28, 0x24	; 36
    4432:	9f af       	std	Y+63, r25	; 0x3f
    4434:	8e af       	std	Y+62, r24	; 0x3e
    4436:	a4 97       	sbiw	r28, 0x24	; 36
    4438:	0e ea       	ldi	r16, 0xAE	; 174
    443a:	11 e0       	ldi	r17, 0x01	; 1
    443c:	a6 96       	adiw	r28, 0x26	; 38
    443e:	1f af       	std	Y+63, r17	; 0x3f
    4440:	0e af       	std	Y+62, r16	; 0x3e
    4442:	a6 97       	sbiw	r28, 0x26	; 38
    4444:	18 e0       	ldi	r17, 0x08	; 8
    4446:	a7 96       	adiw	r28, 0x27	; 39
    4448:	1f af       	std	Y+63, r17	; 0x3f
    444a:	a7 97       	sbiw	r28, 0x27	; 39
    444c:	a6 96       	adiw	r28, 0x26	; 38
    444e:	ae ad       	ldd	r26, Y+62	; 0x3e
    4450:	bf ad       	ldd	r27, Y+63	; 0x3f
    4452:	a6 97       	sbiw	r28, 0x26	; 38
    4454:	0c 90       	ld	r0, X
    4456:	a6 96       	adiw	r28, 0x26	; 38
    4458:	ee ad       	ldd	r30, Y+62	; 0x3e
    445a:	ff ad       	ldd	r31, Y+63	; 0x3f
    445c:	a6 97       	sbiw	r28, 0x26	; 38
    445e:	31 96       	adiw	r30, 0x01	; 1
    4460:	a6 96       	adiw	r28, 0x26	; 38
    4462:	ff af       	std	Y+63, r31	; 0x3f
    4464:	ee af       	std	Y+62, r30	; 0x3e
    4466:	a6 97       	sbiw	r28, 0x26	; 38
    4468:	a4 96       	adiw	r28, 0x24	; 36
    446a:	ae ad       	ldd	r26, Y+62	; 0x3e
    446c:	bf ad       	ldd	r27, Y+63	; 0x3f
    446e:	a4 97       	sbiw	r28, 0x24	; 36
    4470:	0c 92       	st	X, r0
    4472:	a4 96       	adiw	r28, 0x24	; 36
    4474:	ee ad       	ldd	r30, Y+62	; 0x3e
    4476:	ff ad       	ldd	r31, Y+63	; 0x3f
    4478:	a4 97       	sbiw	r28, 0x24	; 36
    447a:	31 96       	adiw	r30, 0x01	; 1
    447c:	a4 96       	adiw	r28, 0x24	; 36
    447e:	ff af       	std	Y+63, r31	; 0x3f
    4480:	ee af       	std	Y+62, r30	; 0x3e
    4482:	a4 97       	sbiw	r28, 0x24	; 36
    4484:	a7 96       	adiw	r28, 0x27	; 39
    4486:	ff ad       	ldd	r31, Y+63	; 0x3f
    4488:	a7 97       	sbiw	r28, 0x27	; 39
    448a:	f1 50       	subi	r31, 0x01	; 1
    448c:	a7 96       	adiw	r28, 0x27	; 39
    448e:	ff af       	std	Y+63, r31	; 0x3f
    4490:	a7 97       	sbiw	r28, 0x27	; 39
    4492:	a7 96       	adiw	r28, 0x27	; 39
    4494:	af ac       	ldd	r10, Y+63	; 0x3f
    4496:	a7 97       	sbiw	r28, 0x27	; 39
    4498:	aa 20       	and	r10, r10
    449a:	c1 f6       	brne	.-80     	; 0x444c <main+0xfe>
	u8 pattern_full[8]          ={0x1F,0x11,0x11,0x11,0x11,0x11,0x11,0x00};
    449c:	ce 01       	movw	r24, r28
    449e:	8b 5a       	subi	r24, 0xAB	; 171
    44a0:	9f 4f       	sbci	r25, 0xFF	; 255
    44a2:	a9 96       	adiw	r28, 0x29	; 41
    44a4:	9f af       	std	Y+63, r25	; 0x3f
    44a6:	8e af       	std	Y+62, r24	; 0x3e
    44a8:	a9 97       	sbiw	r28, 0x29	; 41
    44aa:	06 ea       	ldi	r16, 0xA6	; 166
    44ac:	11 e0       	ldi	r17, 0x01	; 1
    44ae:	ab 96       	adiw	r28, 0x2b	; 43
    44b0:	1f af       	std	Y+63, r17	; 0x3f
    44b2:	0e af       	std	Y+62, r16	; 0x3e
    44b4:	ab 97       	sbiw	r28, 0x2b	; 43
    44b6:	18 e0       	ldi	r17, 0x08	; 8
    44b8:	ac 96       	adiw	r28, 0x2c	; 44
    44ba:	1f af       	std	Y+63, r17	; 0x3f
    44bc:	ac 97       	sbiw	r28, 0x2c	; 44
    44be:	ab 96       	adiw	r28, 0x2b	; 43
    44c0:	ae ad       	ldd	r26, Y+62	; 0x3e
    44c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    44c4:	ab 97       	sbiw	r28, 0x2b	; 43
    44c6:	0c 90       	ld	r0, X
    44c8:	ab 96       	adiw	r28, 0x2b	; 43
    44ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    44cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    44ce:	ab 97       	sbiw	r28, 0x2b	; 43
    44d0:	31 96       	adiw	r30, 0x01	; 1
    44d2:	ab 96       	adiw	r28, 0x2b	; 43
    44d4:	ff af       	std	Y+63, r31	; 0x3f
    44d6:	ee af       	std	Y+62, r30	; 0x3e
    44d8:	ab 97       	sbiw	r28, 0x2b	; 43
    44da:	a9 96       	adiw	r28, 0x29	; 41
    44dc:	ae ad       	ldd	r26, Y+62	; 0x3e
    44de:	bf ad       	ldd	r27, Y+63	; 0x3f
    44e0:	a9 97       	sbiw	r28, 0x29	; 41
    44e2:	0c 92       	st	X, r0
    44e4:	a9 96       	adiw	r28, 0x29	; 41
    44e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    44e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    44ea:	a9 97       	sbiw	r28, 0x29	; 41
    44ec:	31 96       	adiw	r30, 0x01	; 1
    44ee:	a9 96       	adiw	r28, 0x29	; 41
    44f0:	ff af       	std	Y+63, r31	; 0x3f
    44f2:	ee af       	std	Y+62, r30	; 0x3e
    44f4:	a9 97       	sbiw	r28, 0x29	; 41
    44f6:	ac 96       	adiw	r28, 0x2c	; 44
    44f8:	ff ad       	ldd	r31, Y+63	; 0x3f
    44fa:	ac 97       	sbiw	r28, 0x2c	; 44
    44fc:	f1 50       	subi	r31, 0x01	; 1
    44fe:	ac 96       	adiw	r28, 0x2c	; 44
    4500:	ff af       	std	Y+63, r31	; 0x3f
    4502:	ac 97       	sbiw	r28, 0x2c	; 44
    4504:	ac 96       	adiw	r28, 0x2c	; 44
    4506:	af ac       	ldd	r10, Y+63	; 0x3f
    4508:	ac 97       	sbiw	r28, 0x2c	; 44
    450a:	aa 20       	and	r10, r10
    450c:	c1 f6       	brne	.-80     	; 0x44be <main+0x170>

	/*******************************************************************************************************/
	/*                                      System Initialization                                          */
	/*******************************************************************************************************/

	HLED_VidInit(&Y_LED4);                                             /*Generate PWM on this OC0-->Pin PB3*/
    450e:	84 e9       	ldi	r24, 0x94	; 148
    4510:	91 e0       	ldi	r25, 0x01	; 1
    4512:	0e 94 b8 10 	call	0x2170	; 0x2170 <HLED_VidInit>

	HCLCD_Vid4Bits_Init();                                             /*        LCD Initialization        */
    4516:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <HCLCD_Vid4Bits_Init>

	/*Initialize patterns*/
	HCLCD_Vid4Bits_CustomAlphChar(0, pattern_low);
    451a:	9e 01       	movw	r18, r28
    451c:	2b 5c       	subi	r18, 0xCB	; 203
    451e:	3f 4f       	sbci	r19, 0xFF	; 255
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	b9 01       	movw	r22, r18
    4524:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <HCLCD_Vid4Bits_CustomAlphChar>
	HCLCD_Vid4Bits_CustomAlphChar(1, pattern_high);
    4528:	9e 01       	movw	r18, r28
    452a:	23 5c       	subi	r18, 0xC3	; 195
    452c:	3f 4f       	sbci	r19, 0xFF	; 255
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	b9 01       	movw	r22, r18
    4532:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <HCLCD_Vid4Bits_CustomAlphChar>
	HCLCD_Vid4Bits_CustomAlphChar(2, pattern_rising);
    4536:	9e 01       	movw	r18, r28
    4538:	2b 5b       	subi	r18, 0xBB	; 187
    453a:	3f 4f       	sbci	r19, 0xFF	; 255
    453c:	82 e0       	ldi	r24, 0x02	; 2
    453e:	b9 01       	movw	r22, r18
    4540:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <HCLCD_Vid4Bits_CustomAlphChar>
	HCLCD_Vid4Bits_CustomAlphChar(3, pattern_falling);
    4544:	9e 01       	movw	r18, r28
    4546:	23 5b       	subi	r18, 0xB3	; 179
    4548:	3f 4f       	sbci	r19, 0xFF	; 255
    454a:	83 e0       	ldi	r24, 0x03	; 3
    454c:	b9 01       	movw	r22, r18
    454e:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <HCLCD_Vid4Bits_CustomAlphChar>
	HCLCD_Vid4Bits_CustomAlphChar(4, pattern_full);
    4552:	9e 01       	movw	r18, r28
    4554:	2b 5a       	subi	r18, 0xAB	; 171
    4556:	3f 4f       	sbci	r19, 0xFF	; 255
    4558:	84 e0       	ldi	r24, 0x04	; 4
    455a:	b9 01       	movw	r22, r18
    455c:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <HCLCD_Vid4Bits_CustomAlphChar>

	HCLCD_Vid4Bits_SetPosition(1,0);
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	60 e0       	ldi	r22, 0x00	; 0
    4564:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HCLCD_Vid4Bits_SetPosition>

	HCLCD_Vid4Bits_DisplayString((u8*)"Welcome....");                  /*       Send Welcome message       */
    4568:	80 e6       	ldi	r24, 0x60	; 96
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	aa e7       	ldi	r26, 0x7A	; 122
    4576:	b4 e4       	ldi	r27, 0x44	; 68
    4578:	89 8f       	std	Y+25, r24	; 0x19
    457a:	9a 8f       	std	Y+26, r25	; 0x1a
    457c:	ab 8f       	std	Y+27, r26	; 0x1b
    457e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4580:	69 8d       	ldd	r22, Y+25	; 0x19
    4582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4584:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4586:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	4a ef       	ldi	r20, 0xFA	; 250
    458e:	54 e4       	ldi	r21, 0x44	; 68
    4590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	8d 8b       	std	Y+21, r24	; 0x15
    459a:	9e 8b       	std	Y+22, r25	; 0x16
    459c:	af 8b       	std	Y+23, r26	; 0x17
    459e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45a0:	6d 89       	ldd	r22, Y+21	; 0x15
    45a2:	7e 89       	ldd	r23, Y+22	; 0x16
    45a4:	8f 89       	ldd	r24, Y+23	; 0x17
    45a6:	98 8d       	ldd	r25, Y+24	; 0x18
    45a8:	20 e0       	ldi	r18, 0x00	; 0
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	40 e8       	ldi	r20, 0x80	; 128
    45ae:	5f e3       	ldi	r21, 0x3F	; 63
    45b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45b4:	88 23       	and	r24, r24
    45b6:	2c f4       	brge	.+10     	; 0x45c2 <main+0x274>
		__ticks = 1;
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	9c 8b       	std	Y+20, r25	; 0x14
    45be:	8b 8b       	std	Y+19, r24	; 0x13
    45c0:	3f c0       	rjmp	.+126    	; 0x4640 <main+0x2f2>
	else if (__tmp > 65535)
    45c2:	6d 89       	ldd	r22, Y+21	; 0x15
    45c4:	7e 89       	ldd	r23, Y+22	; 0x16
    45c6:	8f 89       	ldd	r24, Y+23	; 0x17
    45c8:	98 8d       	ldd	r25, Y+24	; 0x18
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	3f ef       	ldi	r19, 0xFF	; 255
    45ce:	4f e7       	ldi	r20, 0x7F	; 127
    45d0:	57 e4       	ldi	r21, 0x47	; 71
    45d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45d6:	18 16       	cp	r1, r24
    45d8:	4c f5       	brge	.+82     	; 0x462c <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45da:	69 8d       	ldd	r22, Y+25	; 0x19
    45dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	40 e2       	ldi	r20, 0x20	; 32
    45e8:	51 e4       	ldi	r21, 0x41	; 65
    45ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	bc 01       	movw	r22, r24
    45f4:	cd 01       	movw	r24, r26
    45f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	9c 8b       	std	Y+20, r25	; 0x14
    4600:	8b 8b       	std	Y+19, r24	; 0x13
    4602:	0f c0       	rjmp	.+30     	; 0x4622 <main+0x2d4>
    4604:	88 ec       	ldi	r24, 0xC8	; 200
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	9a 8b       	std	Y+18, r25	; 0x12
    460a:	89 8b       	std	Y+17, r24	; 0x11
    460c:	89 89       	ldd	r24, Y+17	; 0x11
    460e:	9a 89       	ldd	r25, Y+18	; 0x12
    4610:	01 97       	sbiw	r24, 0x01	; 1
    4612:	f1 f7       	brne	.-4      	; 0x4610 <main+0x2c2>
    4614:	9a 8b       	std	Y+18, r25	; 0x12
    4616:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4618:	8b 89       	ldd	r24, Y+19	; 0x13
    461a:	9c 89       	ldd	r25, Y+20	; 0x14
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	9c 8b       	std	Y+20, r25	; 0x14
    4620:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4622:	8b 89       	ldd	r24, Y+19	; 0x13
    4624:	9c 89       	ldd	r25, Y+20	; 0x14
    4626:	00 97       	sbiw	r24, 0x00	; 0
    4628:	69 f7       	brne	.-38     	; 0x4604 <main+0x2b6>
    462a:	14 c0       	rjmp	.+40     	; 0x4654 <main+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    462c:	6d 89       	ldd	r22, Y+21	; 0x15
    462e:	7e 89       	ldd	r23, Y+22	; 0x16
    4630:	8f 89       	ldd	r24, Y+23	; 0x17
    4632:	98 8d       	ldd	r25, Y+24	; 0x18
    4634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	9c 8b       	std	Y+20, r25	; 0x14
    463e:	8b 8b       	std	Y+19, r24	; 0x13
    4640:	8b 89       	ldd	r24, Y+19	; 0x13
    4642:	9c 89       	ldd	r25, Y+20	; 0x14
    4644:	98 8b       	std	Y+16, r25	; 0x10
    4646:	8f 87       	std	Y+15, r24	; 0x0f
    4648:	8f 85       	ldd	r24, Y+15	; 0x0f
    464a:	98 89       	ldd	r25, Y+16	; 0x10
    464c:	01 97       	sbiw	r24, 0x01	; 1
    464e:	f1 f7       	brne	.-4      	; 0x464c <main+0x2fe>
    4650:	98 8b       	std	Y+16, r25	; 0x10
    4652:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	HCLCD_Vid4Bits_ClearScreen();
    4654:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <HCLCD_Vid4Bits_ClearScreen>
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	aa e7       	ldi	r26, 0x7A	; 122
    465e:	b4 e4       	ldi	r27, 0x44	; 68
    4660:	8b 87       	std	Y+11, r24	; 0x0b
    4662:	9c 87       	std	Y+12, r25	; 0x0c
    4664:	ad 87       	std	Y+13, r26	; 0x0d
    4666:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4668:	6b 85       	ldd	r22, Y+11	; 0x0b
    466a:	7c 85       	ldd	r23, Y+12	; 0x0c
    466c:	8d 85       	ldd	r24, Y+13	; 0x0d
    466e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	4a ef       	ldi	r20, 0xFA	; 250
    4676:	54 e4       	ldi	r21, 0x44	; 68
    4678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	8f 83       	std	Y+7, r24	; 0x07
    4682:	98 87       	std	Y+8, r25	; 0x08
    4684:	a9 87       	std	Y+9, r26	; 0x09
    4686:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4688:	6f 81       	ldd	r22, Y+7	; 0x07
    468a:	78 85       	ldd	r23, Y+8	; 0x08
    468c:	89 85       	ldd	r24, Y+9	; 0x09
    468e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	40 e8       	ldi	r20, 0x80	; 128
    4696:	5f e3       	ldi	r21, 0x3F	; 63
    4698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    469c:	88 23       	and	r24, r24
    469e:	2c f4       	brge	.+10     	; 0x46aa <main+0x35c>
		__ticks = 1;
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	9e 83       	std	Y+6, r25	; 0x06
    46a6:	8d 83       	std	Y+5, r24	; 0x05
    46a8:	3f c0       	rjmp	.+126    	; 0x4728 <main+0x3da>
	else if (__tmp > 65535)
    46aa:	6f 81       	ldd	r22, Y+7	; 0x07
    46ac:	78 85       	ldd	r23, Y+8	; 0x08
    46ae:	89 85       	ldd	r24, Y+9	; 0x09
    46b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	3f ef       	ldi	r19, 0xFF	; 255
    46b6:	4f e7       	ldi	r20, 0x7F	; 127
    46b8:	57 e4       	ldi	r21, 0x47	; 71
    46ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46be:	18 16       	cp	r1, r24
    46c0:	4c f5       	brge	.+82     	; 0x4714 <main+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	40 e2       	ldi	r20, 0x20	; 32
    46d0:	51 e4       	ldi	r21, 0x41	; 65
    46d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	bc 01       	movw	r22, r24
    46dc:	cd 01       	movw	r24, r26
    46de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	9e 83       	std	Y+6, r25	; 0x06
    46e8:	8d 83       	std	Y+5, r24	; 0x05
    46ea:	0f c0       	rjmp	.+30     	; 0x470a <main+0x3bc>
    46ec:	88 ec       	ldi	r24, 0xC8	; 200
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	9c 83       	std	Y+4, r25	; 0x04
    46f2:	8b 83       	std	Y+3, r24	; 0x03
    46f4:	8b 81       	ldd	r24, Y+3	; 0x03
    46f6:	9c 81       	ldd	r25, Y+4	; 0x04
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	f1 f7       	brne	.-4      	; 0x46f8 <main+0x3aa>
    46fc:	9c 83       	std	Y+4, r25	; 0x04
    46fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4700:	8d 81       	ldd	r24, Y+5	; 0x05
    4702:	9e 81       	ldd	r25, Y+6	; 0x06
    4704:	01 97       	sbiw	r24, 0x01	; 1
    4706:	9e 83       	std	Y+6, r25	; 0x06
    4708:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    470a:	8d 81       	ldd	r24, Y+5	; 0x05
    470c:	9e 81       	ldd	r25, Y+6	; 0x06
    470e:	00 97       	sbiw	r24, 0x00	; 0
    4710:	69 f7       	brne	.-38     	; 0x46ec <main+0x39e>
    4712:	14 c0       	rjmp	.+40     	; 0x473c <main+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4714:	6f 81       	ldd	r22, Y+7	; 0x07
    4716:	78 85       	ldd	r23, Y+8	; 0x08
    4718:	89 85       	ldd	r24, Y+9	; 0x09
    471a:	9a 85       	ldd	r25, Y+10	; 0x0a
    471c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	9e 83       	std	Y+6, r25	; 0x06
    4726:	8d 83       	std	Y+5, r24	; 0x05
    4728:	8d 81       	ldd	r24, Y+5	; 0x05
    472a:	9e 81       	ldd	r25, Y+6	; 0x06
    472c:	9a 83       	std	Y+2, r25	; 0x02
    472e:	89 83       	std	Y+1, r24	; 0x01
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	9a 81       	ldd	r25, Y+2	; 0x02
    4734:	01 97       	sbiw	r24, 0x01	; 1
    4736:	f1 f7       	brne	.-4      	; 0x4734 <main+0x3e6>
    4738:	9a 83       	std	Y+2, r25	; 0x02
    473a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	MADC_VidInit();                                                  /*         Initialize ADC           */
    473c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <MADC_VidInit>
	/*                    F_cpu = 8MHz, prescaler = 64 -->F_timer = 125000HZ ,                             */
	/*                    T_tick = 8 micro second ,One_OVF = 256*8 = 2048  micro second ,                  */
	/*	                  F_out = Fcpu/N*510                                                               */
	/*******************************************************************************************************/

	MTIMER0_VidInit();                                              /*Timer0 Initialization in Phase Correct PWM */
    4740:	0e 94 17 07 	call	0xe2e	; 0xe2e <MTIMER0_VidInit>
	/*                              Set CTC Value 63-->DutyCycle  =25%                                     */
	/*                              Set CTC Value 0 -->DutyCycle  =0%                                      */
	/*******************************************************************************************************/


	MTIMER0_VidSetCTCValue(191);                                       /*Set CTC Value 191 -->DutyCycle=75%*/
    4744:	8f eb       	ldi	r24, 0xBF	; 191
    4746:	0e 94 56 07 	call	0xeac	; 0xeac <MTIMER0_VidSetCTCValue>
	/*                    F_cpu = 8MHz, NO_Prescaler --> F_timer = 8MHz -->T_tick = 0.125 micro second     */
	/*	                 one_OFV = 0.125 *65536 = 8192 micro second = 8.192 ms                             */
	/*                   TIMER1 Sense Control----> Rising Edge                                             */
	/*******************************************************************************************************/

	MTIMER1_VidInit();                                                 /*    TIMER1 initialized in ICU     */
    474a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <MTIMER1_VidInit>

	MTIMER1_VidICF_SetCallBack(&App_TIMER1_ICF_ISR);                   /* Set Input Capture Call Back func */
    474e:	80 e9       	ldi	r24, 0x90	; 144
    4750:	95 e2       	ldi	r25, 0x25	; 37
    4752:	0e 94 81 08 	call	0x1102	; 0x1102 <MTIMER1_VidICF_SetCallBack>
	MTIMER1_VidOVF_SetCallBack(&App_TIMER1_OVF_ISR);                   /*   Set overflow Call Back func    */
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	96 e2       	ldi	r25, 0x26	; 38
    475a:	0e 94 6f 08 	call	0x10de	; 0x10de <MTIMER1_VidOVF_SetCallBack>


	MGIE_VidEnable();                                                  /*          Enable To GIE           */
    475e:	0e 94 ed 08 	call	0x11da	; 0x11da <MGIE_VidEnable>
	while(1)
	{
		/*******************************************************************************************************/
		/*                                         Calculate signal Features                                   */
		/*******************************************************************************************************/
		if(Flag==3){
    4762:	80 91 bf 01 	lds	r24, 0x01BF
    4766:	83 30       	cpi	r24, 0x03	; 3
    4768:	09 f0       	breq	.+2      	; 0x476c <main+0x41e>
    476a:	92 c0       	rjmp	.+292    	; 0x4890 <main+0x542>
			LOC_u32Freq =(1000000/((T3-T1)*0.125));                         /*           Frequency in HZ           */
    476c:	20 91 c9 01 	lds	r18, 0x01C9
    4770:	30 91 ca 01 	lds	r19, 0x01CA
    4774:	40 91 cb 01 	lds	r20, 0x01CB
    4778:	50 91 cc 01 	lds	r21, 0x01CC
    477c:	80 91 c1 01 	lds	r24, 0x01C1
    4780:	90 91 c2 01 	lds	r25, 0x01C2
    4784:	a0 91 c3 01 	lds	r26, 0x01C3
    4788:	b0 91 c4 01 	lds	r27, 0x01C4
    478c:	69 01       	movw	r12, r18
    478e:	7a 01       	movw	r14, r20
    4790:	c8 1a       	sub	r12, r24
    4792:	d9 0a       	sbc	r13, r25
    4794:	ea 0a       	sbc	r14, r26
    4796:	fb 0a       	sbc	r15, r27
    4798:	d7 01       	movw	r26, r14
    479a:	c6 01       	movw	r24, r12
    479c:	bc 01       	movw	r22, r24
    479e:	cd 01       	movw	r24, r26
    47a0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	bc 01       	movw	r22, r24
    47aa:	cd 01       	movw	r24, r26
    47ac:	20 e0       	ldi	r18, 0x00	; 0
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	40 e0       	ldi	r20, 0x00	; 0
    47b2:	5e e3       	ldi	r21, 0x3E	; 62
    47b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b8:	dc 01       	movw	r26, r24
    47ba:	cb 01       	movw	r24, r22
    47bc:	9c 01       	movw	r18, r24
    47be:	ad 01       	movw	r20, r26
    47c0:	60 e0       	ldi	r22, 0x00	; 0
    47c2:	74 e2       	ldi	r23, 0x24	; 36
    47c4:	84 e7       	ldi	r24, 0x74	; 116
    47c6:	99 e4       	ldi	r25, 0x49	; 73
    47c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    47cc:	dc 01       	movw	r26, r24
    47ce:	cb 01       	movw	r24, r22
    47d0:	bc 01       	movw	r22, r24
    47d2:	cd 01       	movw	r24, r26
    47d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	89 a7       	std	Y+41, r24	; 0x29
    47de:	9a a7       	std	Y+42, r25	; 0x2a
    47e0:	ab a7       	std	Y+43, r26	; 0x2b
    47e2:	bc a7       	std	Y+44, r27	; 0x2c
			LOC_u16DutyCycle=((f32)(T2-T1)/(T3-T1)*100);                    /*         calculate Duty Cycle        */
    47e4:	20 91 c5 01 	lds	r18, 0x01C5
    47e8:	30 91 c6 01 	lds	r19, 0x01C6
    47ec:	40 91 c7 01 	lds	r20, 0x01C7
    47f0:	50 91 c8 01 	lds	r21, 0x01C8
    47f4:	80 91 c1 01 	lds	r24, 0x01C1
    47f8:	90 91 c2 01 	lds	r25, 0x01C2
    47fc:	a0 91 c3 01 	lds	r26, 0x01C3
    4800:	b0 91 c4 01 	lds	r27, 0x01C4
    4804:	79 01       	movw	r14, r18
    4806:	8a 01       	movw	r16, r20
    4808:	e8 1a       	sub	r14, r24
    480a:	f9 0a       	sbc	r15, r25
    480c:	0a 0b       	sbc	r16, r26
    480e:	1b 0b       	sbc	r17, r27
    4810:	d8 01       	movw	r26, r16
    4812:	c7 01       	movw	r24, r14
    4814:	bc 01       	movw	r22, r24
    4816:	cd 01       	movw	r24, r26
    4818:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    481c:	7b 01       	movw	r14, r22
    481e:	8c 01       	movw	r16, r24
    4820:	20 91 c9 01 	lds	r18, 0x01C9
    4824:	30 91 ca 01 	lds	r19, 0x01CA
    4828:	40 91 cb 01 	lds	r20, 0x01CB
    482c:	50 91 cc 01 	lds	r21, 0x01CC
    4830:	80 91 c1 01 	lds	r24, 0x01C1
    4834:	90 91 c2 01 	lds	r25, 0x01C2
    4838:	a0 91 c3 01 	lds	r26, 0x01C3
    483c:	b0 91 c4 01 	lds	r27, 0x01C4
    4840:	59 01       	movw	r10, r18
    4842:	6a 01       	movw	r12, r20
    4844:	a8 1a       	sub	r10, r24
    4846:	b9 0a       	sbc	r11, r25
    4848:	ca 0a       	sbc	r12, r26
    484a:	db 0a       	sbc	r13, r27
    484c:	d6 01       	movw	r26, r12
    484e:	c5 01       	movw	r24, r10
    4850:	bc 01       	movw	r22, r24
    4852:	cd 01       	movw	r24, r26
    4854:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4858:	9b 01       	movw	r18, r22
    485a:	ac 01       	movw	r20, r24
    485c:	c8 01       	movw	r24, r16
    485e:	b7 01       	movw	r22, r14
    4860:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4864:	dc 01       	movw	r26, r24
    4866:	cb 01       	movw	r24, r22
    4868:	bc 01       	movw	r22, r24
    486a:	cd 01       	movw	r24, r26
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	48 ec       	ldi	r20, 0xC8	; 200
    4872:	52 e4       	ldi	r21, 0x42	; 66
    4874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4878:	dc 01       	movw	r26, r24
    487a:	cb 01       	movw	r24, r22
    487c:	bc 01       	movw	r22, r24
    487e:	cd 01       	movw	r24, r26
    4880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	98 a7       	std	Y+40, r25	; 0x28
    488a:	8f a3       	std	Y+39, r24	; 0x27
			Flag = 0 ;
    488c:	10 92 bf 01 	sts	0x01BF, r1
		}

		/*******************************************************************************************************/
		/*                                         Update PWM signal                                           */
		/*******************************************************************************************************/
		LOC_u16DigitalValue=MADC_u16ADC_StartConversion(CHANNEL_0);
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <MADC_u16ADC_StartConversion>
    4896:	9c ab       	std	Y+52, r25	; 0x34
    4898:	8b ab       	std	Y+51, r24	; 0x33
		LOC_u16AnalogValue=(LOC_u16DigitalValue*5000UL)/1023;            /*        Read Analog Voltage         */
    489a:	8b a9       	ldd	r24, Y+51	; 0x33
    489c:	9c a9       	ldd	r25, Y+52	; 0x34
    489e:	cc 01       	movw	r24, r24
    48a0:	a0 e0       	ldi	r26, 0x00	; 0
    48a2:	b0 e0       	ldi	r27, 0x00	; 0
    48a4:	28 e8       	ldi	r18, 0x88	; 136
    48a6:	33 e1       	ldi	r19, 0x13	; 19
    48a8:	40 e0       	ldi	r20, 0x00	; 0
    48aa:	50 e0       	ldi	r21, 0x00	; 0
    48ac:	bc 01       	movw	r22, r24
    48ae:	cd 01       	movw	r24, r26
    48b0:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__mulsi3>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	2f ef       	ldi	r18, 0xFF	; 255
    48ba:	33 e0       	ldi	r19, 0x03	; 3
    48bc:	40 e0       	ldi	r20, 0x00	; 0
    48be:	50 e0       	ldi	r21, 0x00	; 0
    48c0:	bc 01       	movw	r22, r24
    48c2:	cd 01       	movw	r24, r26
    48c4:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__udivmodsi4>
    48c8:	da 01       	movw	r26, r20
    48ca:	c9 01       	movw	r24, r18
    48cc:	9a ab       	std	Y+50, r25	; 0x32
    48ce:	89 ab       	std	Y+49, r24	; 0x31
		LOC_u16OCR_Value = LOC_u16DigitalValue/4 ;                       /*           update PWM               */
    48d0:	8b a9       	ldd	r24, Y+51	; 0x33
    48d2:	9c a9       	ldd	r25, Y+52	; 0x34
    48d4:	96 95       	lsr	r25
    48d6:	87 95       	ror	r24
    48d8:	96 95       	lsr	r25
    48da:	87 95       	ror	r24
    48dc:	9e a7       	std	Y+46, r25	; 0x2e
    48de:	8d a7       	std	Y+45, r24	; 0x2d
		HCLCD_Vid4Bits_SetPosition(1,0);                             /*  Position of Duty on LCD first row */
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	60 e0       	ldi	r22, 0x00	; 0
    48e4:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*) "D =");
    48e8:	8c e6       	ldi	r24, 0x6C	; 108
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_DisplayNumber(LOC_u16DutyCycle);
    48f0:	8f a1       	ldd	r24, Y+39	; 0x27
    48f2:	98 a5       	ldd	r25, Y+40	; 0x28
    48f4:	cc 01       	movw	r24, r24
    48f6:	a0 e0       	ldi	r26, 0x00	; 0
    48f8:	b0 e0       	ldi	r27, 0x00	; 0
    48fa:	bc 01       	movw	r22, r24
    48fc:	cd 01       	movw	r24, r26
    48fe:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <HCLCD_Vid4Bits_DisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"%");
    4902:	80 e7       	ldi	r24, 0x70	; 112
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_SetPosition(1,8);
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	68 e0       	ldi	r22, 0x08	; 8
    490e:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HCLCD_Vid4Bits_SetPosition>
		HCLCD_Vid4Bits_DisplayString((u8*)"F =");
    4912:	82 e7       	ldi	r24, 0x72	; 114
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
		HCLCD_Vid4Bits_DisplayNumber(LOC_u32Freq);
    491a:	89 a5       	ldd	r24, Y+41	; 0x29
    491c:	9a a5       	ldd	r25, Y+42	; 0x2a
    491e:	ab a5       	ldd	r26, Y+43	; 0x2b
    4920:	bc a5       	ldd	r27, Y+44	; 0x2c
    4922:	bc 01       	movw	r22, r24
    4924:	cd 01       	movw	r24, r26
    4926:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <HCLCD_Vid4Bits_DisplayNumber>
		HCLCD_Vid4Bits_DisplayString((u8*)"Hz");
    492a:	86 e7       	ldi	r24, 0x76	; 118
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
		if(LOC_u16AnalogValue!=LOC_u16Analog_OldValue)                   /*       Check if signal change       */
    4932:	29 a9       	ldd	r18, Y+49	; 0x31
    4934:	3a a9       	ldd	r19, Y+50	; 0x32
    4936:	8f a5       	ldd	r24, Y+47	; 0x2f
    4938:	98 a9       	ldd	r25, Y+48	; 0x30
    493a:	28 17       	cp	r18, r24
    493c:	39 07       	cpc	r19, r25
    493e:	09 f4       	brne	.+2      	; 0x4942 <main+0x5f4>
    4940:	10 cf       	rjmp	.-480    	; 0x4762 <main+0x414>
		{
			LOC_u16Analog_OldValue=LOC_u16AnalogValue;
    4942:	89 a9       	ldd	r24, Y+49	; 0x31
    4944:	9a a9       	ldd	r25, Y+50	; 0x32
    4946:	98 ab       	std	Y+48, r25	; 0x30
    4948:	8f a7       	std	Y+47, r24	; 0x2f
			MTIMER0_VidSetCTCValue(LOC_u16OCR_Value);
    494a:	8d a5       	ldd	r24, Y+45	; 0x2d
    494c:	0e 94 56 07 	call	0xeac	; 0xeac <MTIMER0_VidSetCTCValue>

			/*******************************************************************************************************/
			/*                                         Display Signal Calculations                                  */
			/*******************************************************************************************************/

			HCLCD_Vid4Bits_SetPosition(1,0);                             /*  Position of Duty on LCD first row */
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	60 e0       	ldi	r22, 0x00	; 0
    4954:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HCLCD_Vid4Bits_SetPosition>
			HCLCD_Vid4Bits_DisplayString((u8*) "D =");
    4958:	8c e6       	ldi	r24, 0x6C	; 108
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_DisplayNumber(LOC_u16DutyCycle);
    4960:	8f a1       	ldd	r24, Y+39	; 0x27
    4962:	98 a5       	ldd	r25, Y+40	; 0x28
    4964:	cc 01       	movw	r24, r24
    4966:	a0 e0       	ldi	r26, 0x00	; 0
    4968:	b0 e0       	ldi	r27, 0x00	; 0
    496a:	bc 01       	movw	r22, r24
    496c:	cd 01       	movw	r24, r26
    496e:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <HCLCD_Vid4Bits_DisplayNumber>
			HCLCD_Vid4Bits_DisplayString((u8*)"%");
    4972:	80 e7       	ldi	r24, 0x70	; 112
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_SetPosition(1,9);
    497a:	81 e0       	ldi	r24, 0x01	; 1
    497c:	69 e0       	ldi	r22, 0x09	; 9
    497e:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HCLCD_Vid4Bits_SetPosition>
			HCLCD_Vid4Bits_DisplayString((u8*)"F =");
    4982:	82 e7       	ldi	r24, 0x72	; 114
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_DisplayNumber(LOC_u32Freq);
    498a:	89 a5       	ldd	r24, Y+41	; 0x29
    498c:	9a a5       	ldd	r25, Y+42	; 0x2a
    498e:	ab a5       	ldd	r26, Y+43	; 0x2b
    4990:	bc a5       	ldd	r27, Y+44	; 0x2c
    4992:	bc 01       	movw	r22, r24
    4994:	cd 01       	movw	r24, r26
    4996:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <HCLCD_Vid4Bits_DisplayNumber>
			HCLCD_Vid4Bits_DisplayString((u8*)"Hz");
    499a:	86 e7       	ldi	r24, 0x76	; 118
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
			/*******************************************************************************************************/
			/*                                         Display Signal shape                                        */
			/*******************************************************************************************************/
			HCLCD_Vid4Bits_SetPosition(2,0);                             /*  Position of Signal Shape          */
    49a2:	82 e0       	ldi	r24, 0x02	; 2
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HCLCD_Vid4Bits_SetPosition>
			HCLCD_Vid4Bits_DisplayString((u8*)"                  ");     /*          Clear Line Two            */
    49aa:	89 e7       	ldi	r24, 0x79	; 121
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <HCLCD_Vid4Bits_DisplayString>
			HCLCD_Vid4Bits_SetPosition(2,0);
    49b2:	82 e0       	ldi	r24, 0x02	; 2
    49b4:	60 e0       	ldi	r22, 0x00	; 0
    49b6:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HCLCD_Vid4Bits_SetPosition>
			if(LOC_u16DutyCycle==0 && (LOC_u16DutyCycle <=10) )
    49ba:	8f a1       	ldd	r24, Y+39	; 0x27
    49bc:	98 a5       	ldd	r25, Y+40	; 0x28
    49be:	00 97       	sbiw	r24, 0x00	; 0
    49c0:	f9 f4       	brne	.+62     	; 0x4a00 <main+0x6b2>
    49c2:	8f a1       	ldd	r24, Y+39	; 0x27
    49c4:	98 a5       	ldd	r25, Y+40	; 0x28
    49c6:	8b 30       	cpi	r24, 0x0B	; 11
    49c8:	91 05       	cpc	r25, r1
    49ca:	d0 f4       	brcc	.+52     	; 0x4a00 <main+0x6b2>
			{
				//0%
				for(int i = 0 ; i<= 16;i++)
    49cc:	1e a2       	std	Y+38, r1	; 0x26
    49ce:	1d a2       	std	Y+37, r1	; 0x25
    49d0:	11 c0       	rjmp	.+34     	; 0x49f4 <main+0x6a6>
				{
					HCLCD_Vid4Bits_DisplayCharacter(0);
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    49d8:	80 e0       	ldi	r24, 0x00	; 0
    49da:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
			HCLCD_Vid4Bits_DisplayString((u8*)"                  ");     /*          Clear Line Two            */
			HCLCD_Vid4Bits_SetPosition(2,0);
			if(LOC_u16DutyCycle==0 && (LOC_u16DutyCycle <=10) )
			{
				//0%
				for(int i = 0 ; i<= 16;i++)
    49ea:	8d a1       	ldd	r24, Y+37	; 0x25
    49ec:	9e a1       	ldd	r25, Y+38	; 0x26
    49ee:	01 96       	adiw	r24, 0x01	; 1
    49f0:	9e a3       	std	Y+38, r25	; 0x26
    49f2:	8d a3       	std	Y+37, r24	; 0x25
    49f4:	8d a1       	ldd	r24, Y+37	; 0x25
    49f6:	9e a1       	ldd	r25, Y+38	; 0x26
    49f8:	81 31       	cpi	r24, 0x11	; 17
    49fa:	91 05       	cpc	r25, r1
    49fc:	54 f3       	brlt	.-44     	; 0x49d2 <main+0x684>
    49fe:	b1 ce       	rjmp	.-670    	; 0x4762 <main+0x414>
					HCLCD_Vid4Bits_DisplayCharacter(0);
					HCLCD_Vid4Bits_DisplayCharacter(0);
				}

			}
			else if((LOC_u16DutyCycle>=20) && (LOC_u16DutyCycle<=30 ))
    4a00:	8f a1       	ldd	r24, Y+39	; 0x27
    4a02:	98 a5       	ldd	r25, Y+40	; 0x28
    4a04:	84 31       	cpi	r24, 0x14	; 20
    4a06:	91 05       	cpc	r25, r1
    4a08:	f8 f0       	brcs	.+62     	; 0x4a48 <main+0x6fa>
    4a0a:	8f a1       	ldd	r24, Y+39	; 0x27
    4a0c:	98 a5       	ldd	r25, Y+40	; 0x28
    4a0e:	8f 31       	cpi	r24, 0x1F	; 31
    4a10:	91 05       	cpc	r25, r1
    4a12:	d0 f4       	brcc	.+52     	; 0x4a48 <main+0x6fa>
			{
				//25%
				for(int i = 0 ; i<= 16;i++)
    4a14:	1c a2       	std	Y+36, r1	; 0x24
    4a16:	1b a2       	std	Y+35, r1	; 0x23
    4a18:	11 c0       	rjmp	.+34     	; 0x4a3c <main+0x6ee>
				{
					HCLCD_Vid4Bits_DisplayCharacter(4);
    4a1a:	84 e0       	ldi	r24, 0x04	; 4
    4a1c:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>

			}
			else if((LOC_u16DutyCycle>=20) && (LOC_u16DutyCycle<=30 ))
			{
				//25%
				for(int i = 0 ; i<= 16;i++)
    4a32:	8b a1       	ldd	r24, Y+35	; 0x23
    4a34:	9c a1       	ldd	r25, Y+36	; 0x24
    4a36:	01 96       	adiw	r24, 0x01	; 1
    4a38:	9c a3       	std	Y+36, r25	; 0x24
    4a3a:	8b a3       	std	Y+35, r24	; 0x23
    4a3c:	8b a1       	ldd	r24, Y+35	; 0x23
    4a3e:	9c a1       	ldd	r25, Y+36	; 0x24
    4a40:	81 31       	cpi	r24, 0x11	; 17
    4a42:	91 05       	cpc	r25, r1
    4a44:	54 f3       	brlt	.-44     	; 0x4a1a <main+0x6cc>
    4a46:	8d ce       	rjmp	.-742    	; 0x4762 <main+0x414>
					HCLCD_Vid4Bits_DisplayCharacter(0);
					HCLCD_Vid4Bits_DisplayCharacter(0);
				}

			}
			else if((LOC_u16DutyCycle>=45) && (LOC_u16DutyCycle<=55 ))
    4a48:	8f a1       	ldd	r24, Y+39	; 0x27
    4a4a:	98 a5       	ldd	r25, Y+40	; 0x28
    4a4c:	8d 32       	cpi	r24, 0x2D	; 45
    4a4e:	91 05       	cpc	r25, r1
    4a50:	f8 f0       	brcs	.+62     	; 0x4a90 <main+0x742>
    4a52:	8f a1       	ldd	r24, Y+39	; 0x27
    4a54:	98 a5       	ldd	r25, Y+40	; 0x28
    4a56:	88 33       	cpi	r24, 0x38	; 56
    4a58:	91 05       	cpc	r25, r1
    4a5a:	d0 f4       	brcc	.+52     	; 0x4a90 <main+0x742>
			{
				//50%
				for(int i = 0 ; i<= 16;i++)
    4a5c:	1a a2       	std	Y+34, r1	; 0x22
    4a5e:	19 a2       	std	Y+33, r1	; 0x21
    4a60:	11 c0       	rjmp	.+34     	; 0x4a84 <main+0x736>
				{
					HCLCD_Vid4Bits_DisplayCharacter(2);
    4a62:	82 e0       	ldi	r24, 0x02	; 2
    4a64:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(3);
    4a68:	83 e0       	ldi	r24, 0x03	; 3
    4a6a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>

			}
			else if((LOC_u16DutyCycle>=45) && (LOC_u16DutyCycle<=55 ))
			{
				//50%
				for(int i = 0 ; i<= 16;i++)
    4a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    4a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    4a7e:	01 96       	adiw	r24, 0x01	; 1
    4a80:	9a a3       	std	Y+34, r25	; 0x22
    4a82:	89 a3       	std	Y+33, r24	; 0x21
    4a84:	89 a1       	ldd	r24, Y+33	; 0x21
    4a86:	9a a1       	ldd	r25, Y+34	; 0x22
    4a88:	81 31       	cpi	r24, 0x11	; 17
    4a8a:	91 05       	cpc	r25, r1
    4a8c:	54 f3       	brlt	.-44     	; 0x4a62 <main+0x714>
    4a8e:	69 ce       	rjmp	.-814    	; 0x4762 <main+0x414>
					HCLCD_Vid4Bits_DisplayCharacter(0);
					HCLCD_Vid4Bits_DisplayCharacter(0);
				}

			}
			else if((LOC_u16DutyCycle>=65) && (LOC_u16DutyCycle<=85 ))
    4a90:	8f a1       	ldd	r24, Y+39	; 0x27
    4a92:	98 a5       	ldd	r25, Y+40	; 0x28
    4a94:	81 34       	cpi	r24, 0x41	; 65
    4a96:	91 05       	cpc	r25, r1
    4a98:	f8 f0       	brcs	.+62     	; 0x4ad8 <main+0x78a>
    4a9a:	8f a1       	ldd	r24, Y+39	; 0x27
    4a9c:	98 a5       	ldd	r25, Y+40	; 0x28
    4a9e:	86 35       	cpi	r24, 0x56	; 86
    4aa0:	91 05       	cpc	r25, r1
    4aa2:	d0 f4       	brcc	.+52     	; 0x4ad8 <main+0x78a>
			{
				//75%
				for(int i = 0 ; i<= 16;i++)
    4aa4:	18 a2       	std	Y+32, r1	; 0x20
    4aa6:	1f 8e       	std	Y+31, r1	; 0x1f
    4aa8:	11 c0       	rjmp	.+34     	; 0x4acc <main+0x77e>
				{
					HCLCD_Vid4Bits_DisplayCharacter(2);
    4aaa:	82 e0       	ldi	r24, 0x02	; 2
    4aac:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(1);
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(3);
    4ab6:	83 e0       	ldi	r24, 0x03	; 3
    4ab8:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(0);
    4abc:	80 e0       	ldi	r24, 0x00	; 0
    4abe:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>

			}
			else if((LOC_u16DutyCycle>=65) && (LOC_u16DutyCycle<=85 ))
			{
				//75%
				for(int i = 0 ; i<= 16;i++)
    4ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    4ac6:	01 96       	adiw	r24, 0x01	; 1
    4ac8:	98 a3       	std	Y+32, r25	; 0x20
    4aca:	8f 8f       	std	Y+31, r24	; 0x1f
    4acc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ace:	98 a1       	ldd	r25, Y+32	; 0x20
    4ad0:	81 31       	cpi	r24, 0x11	; 17
    4ad2:	91 05       	cpc	r25, r1
    4ad4:	54 f3       	brlt	.-44     	; 0x4aaa <main+0x75c>
    4ad6:	45 ce       	rjmp	.-886    	; 0x4762 <main+0x414>
					HCLCD_Vid4Bits_DisplayCharacter(3);
					HCLCD_Vid4Bits_DisplayCharacter(0);
				}

			}
			else if((LOC_u16DutyCycle>=90) && (LOC_u16DutyCycle=100 ))
    4ad8:	8f a1       	ldd	r24, Y+39	; 0x27
    4ada:	98 a5       	ldd	r25, Y+40	; 0x28
    4adc:	8a 35       	cpi	r24, 0x5A	; 90
    4ade:	91 05       	cpc	r25, r1
    4ae0:	08 f4       	brcc	.+2      	; 0x4ae4 <main+0x796>
    4ae2:	3f ce       	rjmp	.-898    	; 0x4762 <main+0x414>
    4ae4:	84 e6       	ldi	r24, 0x64	; 100
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	98 a7       	std	Y+40, r25	; 0x28
    4aea:	8f a3       	std	Y+39, r24	; 0x27
			{
				//100%
				for(int i = 0 ; i<= 16;i++)
    4aec:	1e 8e       	std	Y+30, r1	; 0x1e
    4aee:	1d 8e       	std	Y+29, r1	; 0x1d
    4af0:	11 c0       	rjmp	.+34     	; 0x4b14 <main+0x7c6>
				{
					HCLCD_Vid4Bits_DisplayCharacter(1);
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(1);
    4af8:	81 e0       	ldi	r24, 0x01	; 1
    4afa:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(1);
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>
					HCLCD_Vid4Bits_DisplayCharacter(1);
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <HCLCD_Vid4Bits_DisplayCharacter>

			}
			else if((LOC_u16DutyCycle>=90) && (LOC_u16DutyCycle=100 ))
			{
				//100%
				for(int i = 0 ; i<= 16;i++)
    4b0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b0e:	01 96       	adiw	r24, 0x01	; 1
    4b10:	9e 8f       	std	Y+30, r25	; 0x1e
    4b12:	8d 8f       	std	Y+29, r24	; 0x1d
    4b14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b18:	81 31       	cpi	r24, 0x11	; 17
    4b1a:	91 05       	cpc	r25, r1
    4b1c:	54 f3       	brlt	.-44     	; 0x4af2 <main+0x7a4>
    4b1e:	21 ce       	rjmp	.-958    	; 0x4762 <main+0x414>

00004b20 <App_TIMER1_ICF_ISR>:

}


void App_TIMER1_ICF_ISR(void)
{
    4b20:	df 93       	push	r29
    4b22:	cf 93       	push	r28
    4b24:	cd b7       	in	r28, 0x3d	; 61
    4b26:	de b7       	in	r29, 0x3e	; 62
	if(Flag==0)
    4b28:	80 91 bf 01 	lds	r24, 0x01BF
    4b2c:	88 23       	and	r24, r24
    4b2e:	09 f5       	brne	.+66     	; 0x4b72 <App_TIMER1_ICF_ISR+0x52>
	{
		T1= MTIMER1_u16GetICR1Value()+Count*65536;
    4b30:	0e 94 45 08 	call	0x108a	; 0x108a <MTIMER1_u16GetICR1Value>
    4b34:	9c 01       	movw	r18, r24
    4b36:	40 e0       	ldi	r20, 0x00	; 0
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	80 91 c0 01 	lds	r24, 0x01C0
    4b3e:	88 2f       	mov	r24, r24
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	a0 e0       	ldi	r26, 0x00	; 0
    4b44:	b0 e0       	ldi	r27, 0x00	; 0
    4b46:	dc 01       	movw	r26, r24
    4b48:	99 27       	eor	r25, r25
    4b4a:	88 27       	eor	r24, r24
    4b4c:	82 0f       	add	r24, r18
    4b4e:	93 1f       	adc	r25, r19
    4b50:	a4 1f       	adc	r26, r20
    4b52:	b5 1f       	adc	r27, r21
    4b54:	80 93 c1 01 	sts	0x01C1, r24
    4b58:	90 93 c2 01 	sts	0x01C2, r25
    4b5c:	a0 93 c3 01 	sts	0x01C3, r26
    4b60:	b0 93 c4 01 	sts	0x01C4, r27
		MTIMER1_VidSenseControl(MTIMER1_ICU_FALLING_EDGE);
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	0e 94 50 08 	call	0x10a0	; 0x10a0 <MTIMER1_VidSenseControl>
		Flag=1;
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	80 93 bf 01 	sts	0x01BF, r24
    4b70:	46 c0       	rjmp	.+140    	; 0x4bfe <App_TIMER1_ICF_ISR+0xde>
	}
	else if(Flag==1)
    4b72:	80 91 bf 01 	lds	r24, 0x01BF
    4b76:	81 30       	cpi	r24, 0x01	; 1
    4b78:	09 f5       	brne	.+66     	; 0x4bbc <App_TIMER1_ICF_ISR+0x9c>
	{
		T2=	 MTIMER1_u16GetICR1Value()+Count*65536;
    4b7a:	0e 94 45 08 	call	0x108a	; 0x108a <MTIMER1_u16GetICR1Value>
    4b7e:	9c 01       	movw	r18, r24
    4b80:	40 e0       	ldi	r20, 0x00	; 0
    4b82:	50 e0       	ldi	r21, 0x00	; 0
    4b84:	80 91 c0 01 	lds	r24, 0x01C0
    4b88:	88 2f       	mov	r24, r24
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	a0 e0       	ldi	r26, 0x00	; 0
    4b8e:	b0 e0       	ldi	r27, 0x00	; 0
    4b90:	dc 01       	movw	r26, r24
    4b92:	99 27       	eor	r25, r25
    4b94:	88 27       	eor	r24, r24
    4b96:	82 0f       	add	r24, r18
    4b98:	93 1f       	adc	r25, r19
    4b9a:	a4 1f       	adc	r26, r20
    4b9c:	b5 1f       	adc	r27, r21
    4b9e:	80 93 c5 01 	sts	0x01C5, r24
    4ba2:	90 93 c6 01 	sts	0x01C6, r25
    4ba6:	a0 93 c7 01 	sts	0x01C7, r26
    4baa:	b0 93 c8 01 	sts	0x01C8, r27
		MTIMER1_VidSenseControl(MTIMER1_ICU_RISING_EDGE);
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <MTIMER1_VidSenseControl>
		Flag=2;
    4bb4:	82 e0       	ldi	r24, 0x02	; 2
    4bb6:	80 93 bf 01 	sts	0x01BF, r24
    4bba:	21 c0       	rjmp	.+66     	; 0x4bfe <App_TIMER1_ICF_ISR+0xde>
	}
	else if(Flag==2)
    4bbc:	80 91 bf 01 	lds	r24, 0x01BF
    4bc0:	82 30       	cpi	r24, 0x02	; 2
    4bc2:	e9 f4       	brne	.+58     	; 0x4bfe <App_TIMER1_ICF_ISR+0xde>
	{
		T3= MTIMER1_u16GetICR1Value()+Count*65536;
    4bc4:	0e 94 45 08 	call	0x108a	; 0x108a <MTIMER1_u16GetICR1Value>
    4bc8:	9c 01       	movw	r18, r24
    4bca:	40 e0       	ldi	r20, 0x00	; 0
    4bcc:	50 e0       	ldi	r21, 0x00	; 0
    4bce:	80 91 c0 01 	lds	r24, 0x01C0
    4bd2:	88 2f       	mov	r24, r24
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	a0 e0       	ldi	r26, 0x00	; 0
    4bd8:	b0 e0       	ldi	r27, 0x00	; 0
    4bda:	dc 01       	movw	r26, r24
    4bdc:	99 27       	eor	r25, r25
    4bde:	88 27       	eor	r24, r24
    4be0:	82 0f       	add	r24, r18
    4be2:	93 1f       	adc	r25, r19
    4be4:	a4 1f       	adc	r26, r20
    4be6:	b5 1f       	adc	r27, r21
    4be8:	80 93 c9 01 	sts	0x01C9, r24
    4bec:	90 93 ca 01 	sts	0x01CA, r25
    4bf0:	a0 93 cb 01 	sts	0x01CB, r26
    4bf4:	b0 93 cc 01 	sts	0x01CC, r27
		Flag=3;
    4bf8:	83 e0       	ldi	r24, 0x03	; 3
    4bfa:	80 93 bf 01 	sts	0x01BF, r24
	}
}
    4bfe:	cf 91       	pop	r28
    4c00:	df 91       	pop	r29
    4c02:	08 95       	ret

00004c04 <App_TIMER1_OVF_ISR>:

void App_TIMER1_OVF_ISR(void)
{
    4c04:	df 93       	push	r29
    4c06:	cf 93       	push	r28
    4c08:	cd b7       	in	r28, 0x3d	; 61
    4c0a:	de b7       	in	r29, 0x3e	; 62
	Count++ ;
    4c0c:	80 91 c0 01 	lds	r24, 0x01C0
    4c10:	8f 5f       	subi	r24, 0xFF	; 255
    4c12:	80 93 c0 01 	sts	0x01C0, r24
}
    4c16:	cf 91       	pop	r28
    4c18:	df 91       	pop	r29
    4c1a:	08 95       	ret

00004c1c <__mulsi3>:
    4c1c:	62 9f       	mul	r22, r18
    4c1e:	d0 01       	movw	r26, r0
    4c20:	73 9f       	mul	r23, r19
    4c22:	f0 01       	movw	r30, r0
    4c24:	82 9f       	mul	r24, r18
    4c26:	e0 0d       	add	r30, r0
    4c28:	f1 1d       	adc	r31, r1
    4c2a:	64 9f       	mul	r22, r20
    4c2c:	e0 0d       	add	r30, r0
    4c2e:	f1 1d       	adc	r31, r1
    4c30:	92 9f       	mul	r25, r18
    4c32:	f0 0d       	add	r31, r0
    4c34:	83 9f       	mul	r24, r19
    4c36:	f0 0d       	add	r31, r0
    4c38:	74 9f       	mul	r23, r20
    4c3a:	f0 0d       	add	r31, r0
    4c3c:	65 9f       	mul	r22, r21
    4c3e:	f0 0d       	add	r31, r0
    4c40:	99 27       	eor	r25, r25
    4c42:	72 9f       	mul	r23, r18
    4c44:	b0 0d       	add	r27, r0
    4c46:	e1 1d       	adc	r30, r1
    4c48:	f9 1f       	adc	r31, r25
    4c4a:	63 9f       	mul	r22, r19
    4c4c:	b0 0d       	add	r27, r0
    4c4e:	e1 1d       	adc	r30, r1
    4c50:	f9 1f       	adc	r31, r25
    4c52:	bd 01       	movw	r22, r26
    4c54:	cf 01       	movw	r24, r30
    4c56:	11 24       	eor	r1, r1
    4c58:	08 95       	ret

00004c5a <__udivmodsi4>:
    4c5a:	a1 e2       	ldi	r26, 0x21	; 33
    4c5c:	1a 2e       	mov	r1, r26
    4c5e:	aa 1b       	sub	r26, r26
    4c60:	bb 1b       	sub	r27, r27
    4c62:	fd 01       	movw	r30, r26
    4c64:	0d c0       	rjmp	.+26     	; 0x4c80 <__udivmodsi4_ep>

00004c66 <__udivmodsi4_loop>:
    4c66:	aa 1f       	adc	r26, r26
    4c68:	bb 1f       	adc	r27, r27
    4c6a:	ee 1f       	adc	r30, r30
    4c6c:	ff 1f       	adc	r31, r31
    4c6e:	a2 17       	cp	r26, r18
    4c70:	b3 07       	cpc	r27, r19
    4c72:	e4 07       	cpc	r30, r20
    4c74:	f5 07       	cpc	r31, r21
    4c76:	20 f0       	brcs	.+8      	; 0x4c80 <__udivmodsi4_ep>
    4c78:	a2 1b       	sub	r26, r18
    4c7a:	b3 0b       	sbc	r27, r19
    4c7c:	e4 0b       	sbc	r30, r20
    4c7e:	f5 0b       	sbc	r31, r21

00004c80 <__udivmodsi4_ep>:
    4c80:	66 1f       	adc	r22, r22
    4c82:	77 1f       	adc	r23, r23
    4c84:	88 1f       	adc	r24, r24
    4c86:	99 1f       	adc	r25, r25
    4c88:	1a 94       	dec	r1
    4c8a:	69 f7       	brne	.-38     	; 0x4c66 <__udivmodsi4_loop>
    4c8c:	60 95       	com	r22
    4c8e:	70 95       	com	r23
    4c90:	80 95       	com	r24
    4c92:	90 95       	com	r25
    4c94:	9b 01       	movw	r18, r22
    4c96:	ac 01       	movw	r20, r24
    4c98:	bd 01       	movw	r22, r26
    4c9a:	cf 01       	movw	r24, r30
    4c9c:	08 95       	ret

00004c9e <__prologue_saves__>:
    4c9e:	2f 92       	push	r2
    4ca0:	3f 92       	push	r3
    4ca2:	4f 92       	push	r4
    4ca4:	5f 92       	push	r5
    4ca6:	6f 92       	push	r6
    4ca8:	7f 92       	push	r7
    4caa:	8f 92       	push	r8
    4cac:	9f 92       	push	r9
    4cae:	af 92       	push	r10
    4cb0:	bf 92       	push	r11
    4cb2:	cf 92       	push	r12
    4cb4:	df 92       	push	r13
    4cb6:	ef 92       	push	r14
    4cb8:	ff 92       	push	r15
    4cba:	0f 93       	push	r16
    4cbc:	1f 93       	push	r17
    4cbe:	cf 93       	push	r28
    4cc0:	df 93       	push	r29
    4cc2:	cd b7       	in	r28, 0x3d	; 61
    4cc4:	de b7       	in	r29, 0x3e	; 62
    4cc6:	ca 1b       	sub	r28, r26
    4cc8:	db 0b       	sbc	r29, r27
    4cca:	0f b6       	in	r0, 0x3f	; 63
    4ccc:	f8 94       	cli
    4cce:	de bf       	out	0x3e, r29	; 62
    4cd0:	0f be       	out	0x3f, r0	; 63
    4cd2:	cd bf       	out	0x3d, r28	; 61
    4cd4:	09 94       	ijmp

00004cd6 <__epilogue_restores__>:
    4cd6:	2a 88       	ldd	r2, Y+18	; 0x12
    4cd8:	39 88       	ldd	r3, Y+17	; 0x11
    4cda:	48 88       	ldd	r4, Y+16	; 0x10
    4cdc:	5f 84       	ldd	r5, Y+15	; 0x0f
    4cde:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ce0:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ce2:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ce4:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ce6:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ce8:	b9 84       	ldd	r11, Y+9	; 0x09
    4cea:	c8 84       	ldd	r12, Y+8	; 0x08
    4cec:	df 80       	ldd	r13, Y+7	; 0x07
    4cee:	ee 80       	ldd	r14, Y+6	; 0x06
    4cf0:	fd 80       	ldd	r15, Y+5	; 0x05
    4cf2:	0c 81       	ldd	r16, Y+4	; 0x04
    4cf4:	1b 81       	ldd	r17, Y+3	; 0x03
    4cf6:	aa 81       	ldd	r26, Y+2	; 0x02
    4cf8:	b9 81       	ldd	r27, Y+1	; 0x01
    4cfa:	ce 0f       	add	r28, r30
    4cfc:	d1 1d       	adc	r29, r1
    4cfe:	0f b6       	in	r0, 0x3f	; 63
    4d00:	f8 94       	cli
    4d02:	de bf       	out	0x3e, r29	; 62
    4d04:	0f be       	out	0x3f, r0	; 63
    4d06:	cd bf       	out	0x3d, r28	; 61
    4d08:	ed 01       	movw	r28, r26
    4d0a:	08 95       	ret

00004d0c <_exit>:
    4d0c:	f8 94       	cli

00004d0e <__stop_program>:
    4d0e:	ff cf       	rjmp	.-2      	; 0x4d0e <__stop_program>
