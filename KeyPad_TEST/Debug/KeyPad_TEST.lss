
KeyPad_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003516  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00003516  0000358a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026a0  00000000  00000000  000035ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d2a  00000000  00000000  00005c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000069b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000ad70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000aef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ba40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <main>
      7a:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e9       	ldi	r26, 0x9F	; 159
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e9       	ldi	r24, 0x9F	; 159
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e9       	ldi	r22, 0x9F	; 159
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	0f 92       	push	r0
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     c98:	ea e3       	ldi	r30, 0x3A	; 58
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	87 ec       	ldi	r24, 0xC7	; 199
     c9e:	80 83       	st	Z, r24
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     ca0:	e7 e3       	ldi	r30, 0x37	; 55
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	8f e0       	ldi	r24, 0x0F	; 15
     ca6:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     ca8:	e4 e3       	ldi	r30, 0x34	; 52
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     cb6:	eb e3       	ldi	r30, 0x3B	; 59
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	80 83       	st	Z, r24
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     cc4:	e5 e3       	ldi	r30, 0x35	; 53
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     cca:	e2 e3       	ldi	r30, 0x32	; 50
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	2e 97       	sbiw	r28, 0x0e	; 14
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	6b 83       	std	Y+3, r22	; 0x03
     cf0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <DIO_u8SetPinDirection+0x26>
     cfc:	0c c1       	rjmp	.+536    	; 0xf16 <DIO_u8SetPinDirection+0x23e>
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	08 f0       	brcs	.+2      	; 0xd06 <DIO_u8SetPinDirection+0x2e>
     d04:	08 c1       	rjmp	.+528    	; 0xf16 <DIO_u8SetPinDirection+0x23e>
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	88 23       	and	r24, r24
     d0a:	21 f0       	breq	.+8      	; 0xd14 <DIO_u8SetPinDirection+0x3c>
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	09 f0       	breq	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x3c>
     d12:	01 c1       	rjmp	.+514    	; 0xf16 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	3e 87       	std	Y+14, r19	; 0x0e
     d1c:	2d 87       	std	Y+13, r18	; 0x0d
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	9e 85       	ldd	r25, Y+14	; 0x0e
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <DIO_u8SetPinDirection+0x52>
     d28:	4f c0       	rjmp	.+158    	; 0xdc8 <DIO_u8SetPinDirection+0xf0>
     d2a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d2c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	2c f4       	brge	.+10     	; 0xd3e <DIO_u8SetPinDirection+0x66>
     d34:	8d 85       	ldd	r24, Y+13	; 0x0d
     d36:	9e 85       	ldd	r25, Y+14	; 0x0e
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	71 f0       	breq	.+28     	; 0xd58 <DIO_u8SetPinDirection+0x80>
     d3c:	ed c0       	rjmp	.+474    	; 0xf18 <DIO_u8SetPinDirection+0x240>
     d3e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d40:	3e 85       	ldd	r19, Y+14	; 0x0e
     d42:	22 30       	cpi	r18, 0x02	; 2
     d44:	31 05       	cpc	r19, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <DIO_u8SetPinDirection+0x72>
     d48:	77 c0       	rjmp	.+238    	; 0xe38 <DIO_u8SetPinDirection+0x160>
     d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4e:	83 30       	cpi	r24, 0x03	; 3
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_u8SetPinDirection+0x7e>
     d54:	a9 c0       	rjmp	.+338    	; 0xea8 <DIO_u8SetPinDirection+0x1d0>
     d56:	e0 c0       	rjmp	.+448    	; 0xf18 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3c 87       	std	Y+12, r19	; 0x0c
     d60:	2b 87       	std	Y+11, r18	; 0x0b
     d62:	8b 85       	ldd	r24, Y+11	; 0x0b
     d64:	9c 85       	ldd	r25, Y+12	; 0x0c
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	d1 f0       	breq	.+52     	; 0xd9e <DIO_u8SetPinDirection+0xc6>
     d6a:	2b 85       	ldd	r18, Y+11	; 0x0b
     d6c:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6e:	21 30       	cpi	r18, 0x01	; 1
     d70:	31 05       	cpc	r19, r1
     d72:	09 f0       	breq	.+2      	; 0xd76 <DIO_u8SetPinDirection+0x9e>
     d74:	d1 c0       	rjmp	.+418    	; 0xf18 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     d76:	aa e3       	ldi	r26, 0x3A	; 58
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_u8SetPinDirection+0xbc>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_u8SetPinDirection+0xb8>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	bd c0       	rjmp	.+378    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     d9e:	aa e3       	ldi	r26, 0x3A	; 58
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ea e3       	ldi	r30, 0x3A	; 58
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_u8SetPinDirection+0xe4>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_u8SetPinDirection+0xe0>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	a8 c0       	rjmp	.+336    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3a 87       	std	Y+10, r19	; 0x0a
     dd0:	29 87       	std	Y+9, r18	; 0x09
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	d1 f0       	breq	.+52     	; 0xe0e <DIO_u8SetPinDirection+0x136>
     dda:	29 85       	ldd	r18, Y+9	; 0x09
     ddc:	3a 85       	ldd	r19, Y+10	; 0x0a
     dde:	21 30       	cpi	r18, 0x01	; 1
     de0:	31 05       	cpc	r19, r1
     de2:	09 f0       	breq	.+2      	; 0xde6 <DIO_u8SetPinDirection+0x10e>
     de4:	99 c0       	rjmp	.+306    	; 0xf18 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     de6:	a7 e3       	ldi	r26, 0x37	; 55
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_u8SetPinDirection+0x12c>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_u8SetPinDirection+0x128>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	85 c0       	rjmp	.+266    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     e0e:	a7 e3       	ldi	r26, 0x37	; 55
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e7 e3       	ldi	r30, 0x37	; 55
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_u8SetPinDirection+0x154>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_u8SetPinDirection+0x150>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	70 c0       	rjmp	.+224    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	38 87       	std	Y+8, r19	; 0x08
     e40:	2f 83       	std	Y+7, r18	; 0x07
     e42:	8f 81       	ldd	r24, Y+7	; 0x07
     e44:	98 85       	ldd	r25, Y+8	; 0x08
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	d1 f0       	breq	.+52     	; 0xe7e <DIO_u8SetPinDirection+0x1a6>
     e4a:	2f 81       	ldd	r18, Y+7	; 0x07
     e4c:	38 85       	ldd	r19, Y+8	; 0x08
     e4e:	21 30       	cpi	r18, 0x01	; 1
     e50:	31 05       	cpc	r19, r1
     e52:	09 f0       	breq	.+2      	; 0xe56 <DIO_u8SetPinDirection+0x17e>
     e54:	61 c0       	rjmp	.+194    	; 0xf18 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     e56:	a4 e3       	ldi	r26, 0x34	; 52
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e4 e3       	ldi	r30, 0x34	; 52
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_u8SetPinDirection+0x19c>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_u8SetPinDirection+0x198>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	4d c0       	rjmp	.+154    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     e7e:	a4 e3       	ldi	r26, 0x34	; 52
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e4 e3       	ldi	r30, 0x34	; 52
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_u8SetPinDirection+0x1c4>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_u8SetPinDirection+0x1c0>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	38 c0       	rjmp	.+112    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	3e 83       	std	Y+6, r19	; 0x06
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	c9 f0       	breq	.+50     	; 0xeec <DIO_u8SetPinDirection+0x214>
     eba:	2d 81       	ldd	r18, Y+5	; 0x05
     ebc:	3e 81       	ldd	r19, Y+6	; 0x06
     ebe:	21 30       	cpi	r18, 0x01	; 1
     ec0:	31 05       	cpc	r19, r1
     ec2:	51 f5       	brne	.+84     	; 0xf18 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
     ec4:	a1 e3       	ldi	r26, 0x31	; 49
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e1 e3       	ldi	r30, 0x31	; 49
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_u8SetPinDirection+0x20a>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_u8SetPinDirection+0x206>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	16 c0       	rjmp	.+44     	; 0xf18 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
     eec:	a1 e3       	ldi	r26, 0x31	; 49
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e1 e3       	ldi	r30, 0x31	; 49
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_u8SetPinDirection+0x232>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_u8SetPinDirection+0x22e>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     f16:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1a:	2e 96       	adiw	r28, 0x0e	; 14
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	2e 97       	sbiw	r28, 0x0e	; 14
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	8a 83       	std	Y+2, r24	; 0x02
     f42:	6b 83       	std	Y+3, r22	; 0x03
     f44:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	84 30       	cpi	r24, 0x04	; 4
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <DIO_u8SetPinValue+0x26>
     f50:	0c c1       	rjmp	.+536    	; 0x116a <DIO_u8SetPinValue+0x23e>
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 30       	cpi	r24, 0x08	; 8
     f56:	08 f0       	brcs	.+2      	; 0xf5a <DIO_u8SetPinValue+0x2e>
     f58:	08 c1       	rjmp	.+528    	; 0x116a <DIO_u8SetPinValue+0x23e>
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	21 f0       	breq	.+8      	; 0xf68 <DIO_u8SetPinValue+0x3c>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	88 23       	and	r24, r24
     f64:	09 f0       	breq	.+2      	; 0xf68 <DIO_u8SetPinValue+0x3c>
     f66:	01 c1       	rjmp	.+514    	; 0x116a <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3e 87       	std	Y+14, r19	; 0x0e
     f70:	2d 87       	std	Y+13, r18	; 0x0d
     f72:	8d 85       	ldd	r24, Y+13	; 0x0d
     f74:	9e 85       	ldd	r25, Y+14	; 0x0e
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	91 05       	cpc	r25, r1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <DIO_u8SetPinValue+0x52>
     f7c:	4f c0       	rjmp	.+158    	; 0x101c <DIO_u8SetPinValue+0xf0>
     f7e:	2d 85       	ldd	r18, Y+13	; 0x0d
     f80:	3e 85       	ldd	r19, Y+14	; 0x0e
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <DIO_u8SetPinValue+0x66>
     f88:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	71 f0       	breq	.+28     	; 0xfac <DIO_u8SetPinValue+0x80>
     f90:	ed c0       	rjmp	.+474    	; 0x116c <DIO_u8SetPinValue+0x240>
     f92:	2d 85       	ldd	r18, Y+13	; 0x0d
     f94:	3e 85       	ldd	r19, Y+14	; 0x0e
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <DIO_u8SetPinValue+0x72>
     f9c:	77 c0       	rjmp	.+238    	; 0x108c <DIO_u8SetPinValue+0x160>
     f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <DIO_u8SetPinValue+0x7e>
     fa8:	a9 c0       	rjmp	.+338    	; 0x10fc <DIO_u8SetPinValue+0x1d0>
     faa:	e0 c0       	rjmp	.+448    	; 0x116c <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3c 87       	std	Y+12, r19	; 0x0c
     fb4:	2b 87       	std	Y+11, r18	; 0x0b
     fb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	d1 f0       	breq	.+52     	; 0xff2 <DIO_u8SetPinValue+0xc6>
     fbe:	2b 85       	ldd	r18, Y+11	; 0x0b
     fc0:	3c 85       	ldd	r19, Y+12	; 0x0c
     fc2:	21 30       	cpi	r18, 0x01	; 1
     fc4:	31 05       	cpc	r19, r1
     fc6:	09 f0       	breq	.+2      	; 0xfca <DIO_u8SetPinValue+0x9e>
     fc8:	d1 c0       	rjmp	.+418    	; 0x116c <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
     fca:	ab e3       	ldi	r26, 0x3B	; 59
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb e3       	ldi	r30, 0x3B	; 59
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_u8SetPinValue+0xbc>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_u8SetPinValue+0xb8>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	bd c0       	rjmp	.+378    	; 0x116c <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
     ff2:	ab e3       	ldi	r26, 0x3B	; 59
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	eb e3       	ldi	r30, 0x3B	; 59
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_u8SetPinValue+0xe4>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_u8SetPinValue+0xe0>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	a8 c0       	rjmp	.+336    	; 0x116c <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	3a 87       	std	Y+10, r19	; 0x0a
    1024:	29 87       	std	Y+9, r18	; 0x09
    1026:	89 85       	ldd	r24, Y+9	; 0x09
    1028:	9a 85       	ldd	r25, Y+10	; 0x0a
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	d1 f0       	breq	.+52     	; 0x1062 <DIO_u8SetPinValue+0x136>
    102e:	29 85       	ldd	r18, Y+9	; 0x09
    1030:	3a 85       	ldd	r19, Y+10	; 0x0a
    1032:	21 30       	cpi	r18, 0x01	; 1
    1034:	31 05       	cpc	r19, r1
    1036:	09 f0       	breq	.+2      	; 0x103a <DIO_u8SetPinValue+0x10e>
    1038:	99 c0       	rjmp	.+306    	; 0x116c <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    103a:	a8 e3       	ldi	r26, 0x38	; 56
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e8 e3       	ldi	r30, 0x38	; 56
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_u8SetPinValue+0x12c>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_u8SetPinValue+0x128>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	85 c0       	rjmp	.+266    	; 0x116c <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    1062:	a8 e3       	ldi	r26, 0x38	; 56
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e8 e3       	ldi	r30, 0x38	; 56
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinValue+0x154>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinValue+0x150>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	70 c0       	rjmp	.+224    	; 0x116c <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	38 87       	std	Y+8, r19	; 0x08
    1094:	2f 83       	std	Y+7, r18	; 0x07
    1096:	8f 81       	ldd	r24, Y+7	; 0x07
    1098:	98 85       	ldd	r25, Y+8	; 0x08
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	d1 f0       	breq	.+52     	; 0x10d2 <DIO_u8SetPinValue+0x1a6>
    109e:	2f 81       	ldd	r18, Y+7	; 0x07
    10a0:	38 85       	ldd	r19, Y+8	; 0x08
    10a2:	21 30       	cpi	r18, 0x01	; 1
    10a4:	31 05       	cpc	r19, r1
    10a6:	09 f0       	breq	.+2      	; 0x10aa <DIO_u8SetPinValue+0x17e>
    10a8:	61 c0       	rjmp	.+194    	; 0x116c <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    10aa:	a5 e3       	ldi	r26, 0x35	; 53
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e5 e3       	ldi	r30, 0x35	; 53
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_u8SetPinValue+0x19c>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_u8SetPinValue+0x198>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	4d c0       	rjmp	.+154    	; 0x116c <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    10d2:	a5 e3       	ldi	r26, 0x35	; 53
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e3       	ldi	r30, 0x35	; 53
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_u8SetPinValue+0x1c4>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_u8SetPinValue+0x1c0>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	38 c0       	rjmp	.+112    	; 0x116c <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3e 83       	std	Y+6, r19	; 0x06
    1104:	2d 83       	std	Y+5, r18	; 0x05
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	c9 f0       	breq	.+50     	; 0x1140 <DIO_u8SetPinValue+0x214>
    110e:	2d 81       	ldd	r18, Y+5	; 0x05
    1110:	3e 81       	ldd	r19, Y+6	; 0x06
    1112:	21 30       	cpi	r18, 0x01	; 1
    1114:	31 05       	cpc	r19, r1
    1116:	51 f5       	brne	.+84     	; 0x116c <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    1118:	a2 e3       	ldi	r26, 0x32	; 50
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e2 e3       	ldi	r30, 0x32	; 50
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8SetPinValue+0x20a>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_u8SetPinValue+0x206>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	16 c0       	rjmp	.+44     	; 0x116c <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    1140:	a2 e3       	ldi	r26, 0x32	; 50
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e2 e3       	ldi	r30, 0x32	; 50
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_u8SetPinValue+0x232>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_u8SetPinValue+0x22e>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	01 c0       	rjmp	.+2      	; 0x116c <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    116a:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
}
    116e:	2e 96       	adiw	r28, 0x0e	; 14
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	27 97       	sbiw	r28, 0x07	; 7
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	6b 83       	std	Y+3, r22	; 0x03
    1198:	5d 83       	std	Y+5, r21	; 0x05
    119a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	84 30       	cpi	r24, 0x04	; 4
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <DIO_u8GetPinValue+0x28>
    11a6:	ea c0       	rjmp	.+468    	; 0x137c <DIO_u8GetPinValue+0x1fc>
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	88 30       	cpi	r24, 0x08	; 8
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <DIO_u8GetPinValue+0x30>
    11ae:	e6 c0       	rjmp	.+460    	; 0x137c <DIO_u8GetPinValue+0x1fc>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	09 f4       	brne	.+2      	; 0x11ba <DIO_u8GetPinValue+0x3a>
    11b8:	e1 c0       	rjmp	.+450    	; 0x137c <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3f 83       	std	Y+7, r19	; 0x07
    11c2:	2e 83       	std	Y+6, r18	; 0x06
    11c4:	4e 81       	ldd	r20, Y+6	; 0x06
    11c6:	5f 81       	ldd	r21, Y+7	; 0x07
    11c8:	41 30       	cpi	r20, 0x01	; 1
    11ca:	51 05       	cpc	r21, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <DIO_u8GetPinValue+0x50>
    11ce:	48 c0       	rjmp	.+144    	; 0x1260 <DIO_u8GetPinValue+0xe0>
    11d0:	8e 81       	ldd	r24, Y+6	; 0x06
    11d2:	9f 81       	ldd	r25, Y+7	; 0x07
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	91 05       	cpc	r25, r1
    11d8:	34 f4       	brge	.+12     	; 0x11e6 <DIO_u8GetPinValue+0x66>
    11da:	2e 81       	ldd	r18, Y+6	; 0x06
    11dc:	3f 81       	ldd	r19, Y+7	; 0x07
    11de:	21 15       	cp	r18, r1
    11e0:	31 05       	cpc	r19, r1
    11e2:	71 f0       	breq	.+28     	; 0x1200 <DIO_u8GetPinValue+0x80>
    11e4:	cc c0       	rjmp	.+408    	; 0x137e <DIO_u8GetPinValue+0x1fe>
    11e6:	4e 81       	ldd	r20, Y+6	; 0x06
    11e8:	5f 81       	ldd	r21, Y+7	; 0x07
    11ea:	42 30       	cpi	r20, 0x02	; 2
    11ec:	51 05       	cpc	r21, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <DIO_u8GetPinValue+0x72>
    11f0:	67 c0       	rjmp	.+206    	; 0x12c0 <DIO_u8GetPinValue+0x140>
    11f2:	8e 81       	ldd	r24, Y+6	; 0x06
    11f4:	9f 81       	ldd	r25, Y+7	; 0x07
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	91 05       	cpc	r25, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <DIO_u8GetPinValue+0x7e>
    11fc:	90 c0       	rjmp	.+288    	; 0x131e <DIO_u8GetPinValue+0x19e>
    11fe:	bf c0       	rjmp	.+382    	; 0x137e <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    1200:	e9 e3       	ldi	r30, 0x39	; 57
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a9 01       	movw	r20, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_u8GetPinValue+0x98>
    1214:	55 95       	asr	r21
    1216:	47 95       	ror	r20
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_u8GetPinValue+0x94>
    121c:	ca 01       	movw	r24, r20
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	90 70       	andi	r25, 0x00	; 0
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	21 f4       	brne	.+8      	; 0x122e <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1226:	ec 81       	ldd	r30, Y+4	; 0x04
    1228:	fd 81       	ldd	r31, Y+5	; 0x05
    122a:	10 82       	st	Z, r1
    122c:	a8 c0       	rjmp	.+336    	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    122e:	e9 e3       	ldi	r30, 0x39	; 57
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a9 01       	movw	r20, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8GetPinValue+0xc6>
    1242:	55 95       	asr	r21
    1244:	47 95       	ror	r20
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8GetPinValue+0xc2>
    124a:	ca 01       	movw	r24, r20
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	90 70       	andi	r25, 0x00	; 0
    1250:	88 23       	and	r24, r24
    1252:	09 f4       	brne	.+2      	; 0x1256 <DIO_u8GetPinValue+0xd6>
    1254:	94 c0       	rjmp	.+296    	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1256:	ec 81       	ldd	r30, Y+4	; 0x04
    1258:	fd 81       	ldd	r31, Y+5	; 0x05
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 83       	st	Z, r24
    125e:	8f c0       	rjmp	.+286    	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    1260:	e6 e3       	ldi	r30, 0x36	; 54
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a9 01       	movw	r20, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_u8GetPinValue+0xf8>
    1274:	55 95       	asr	r21
    1276:	47 95       	ror	r20
    1278:	8a 95       	dec	r24
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_u8GetPinValue+0xf4>
    127c:	ca 01       	movw	r24, r20
    127e:	81 70       	andi	r24, 0x01	; 1
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	21 f4       	brne	.+8      	; 0x128e <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1286:	ec 81       	ldd	r30, Y+4	; 0x04
    1288:	fd 81       	ldd	r31, Y+5	; 0x05
    128a:	10 82       	st	Z, r1
    128c:	78 c0       	rjmp	.+240    	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    128e:	e6 e3       	ldi	r30, 0x36	; 54
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_u8GetPinValue+0x126>
    12a2:	55 95       	asr	r21
    12a4:	47 95       	ror	r20
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_u8GetPinValue+0x122>
    12aa:	ca 01       	movw	r24, r20
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	90 70       	andi	r25, 0x00	; 0
    12b0:	88 23       	and	r24, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_u8GetPinValue+0x136>
    12b4:	64 c0       	rjmp	.+200    	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    12b6:	ec 81       	ldd	r30, Y+4	; 0x04
    12b8:	fd 81       	ldd	r31, Y+5	; 0x05
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 83       	st	Z, r24
    12be:	5f c0       	rjmp	.+190    	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    12c0:	e3 e3       	ldi	r30, 0x33	; 51
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_u8GetPinValue+0x158>
    12d4:	55 95       	asr	r21
    12d6:	47 95       	ror	r20
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_u8GetPinValue+0x154>
    12dc:	ca 01       	movw	r24, r20
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	21 f4       	brne	.+8      	; 0x12ee <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12e6:	ec 81       	ldd	r30, Y+4	; 0x04
    12e8:	fd 81       	ldd	r31, Y+5	; 0x05
    12ea:	10 82       	st	Z, r1
    12ec:	48 c0       	rjmp	.+144    	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    12ee:	e3 e3       	ldi	r30, 0x33	; 51
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_u8GetPinValue+0x186>
    1302:	55 95       	asr	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_u8GetPinValue+0x182>
    130a:	ca 01       	movw	r24, r20
    130c:	81 70       	andi	r24, 0x01	; 1
    130e:	90 70       	andi	r25, 0x00	; 0
    1310:	88 23       	and	r24, r24
    1312:	a9 f1       	breq	.+106    	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1314:	ec 81       	ldd	r30, Y+4	; 0x04
    1316:	fd 81       	ldd	r31, Y+5	; 0x05
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	80 83       	st	Z, r24
    131c:	30 c0       	rjmp	.+96     	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    131e:	e0 e3       	ldi	r30, 0x30	; 48
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a9 01       	movw	r20, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_u8GetPinValue+0x1b6>
    1332:	55 95       	asr	r21
    1334:	47 95       	ror	r20
    1336:	8a 95       	dec	r24
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_u8GetPinValue+0x1b2>
    133a:	ca 01       	movw	r24, r20
    133c:	81 70       	andi	r24, 0x01	; 1
    133e:	90 70       	andi	r25, 0x00	; 0
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	21 f4       	brne	.+8      	; 0x134c <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1344:	ec 81       	ldd	r30, Y+4	; 0x04
    1346:	fd 81       	ldd	r31, Y+5	; 0x05
    1348:	10 82       	st	Z, r1
    134a:	19 c0       	rjmp	.+50     	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    134c:	e0 e3       	ldi	r30, 0x30	; 48
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_u8GetPinValue+0x1e4>
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_u8GetPinValue+0x1e0>
    1368:	ca 01       	movw	r24, r20
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	90 70       	andi	r25, 0x00	; 0
    136e:	88 23       	and	r24, r24
    1370:	31 f0       	breq	.+12     	; 0x137e <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1372:	ec 81       	ldd	r30, Y+4	; 0x04
    1374:	fd 81       	ldd	r31, Y+5	; 0x05
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	80 83       	st	Z, r24
    137a:	01 c0       	rjmp	.+2      	; 0x137e <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    137c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1380:	27 96       	adiw	r28, 0x07	; 7
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	2d 97       	sbiw	r28, 0x0d	; 13
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <DIO_u8SetPortDirection+0x24>
    13b4:	87 c0       	rjmp	.+270    	; 0x14c4 <DIO_u8SetPortDirection+0x132>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	21 f0       	breq	.+8      	; 0x13c4 <DIO_u8SetPortDirection+0x32>
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 23       	and	r24, r24
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <DIO_u8SetPortDirection+0x32>
    13c2:	80 c0       	rjmp	.+256    	; 0x14c4 <DIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3d 87       	std	Y+13, r19	; 0x0d
    13cc:	2c 87       	std	Y+12, r18	; 0x0c
    13ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	71 f1       	breq	.+92     	; 0x1434 <DIO_u8SetPortDirection+0xa2>
    13d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13da:	3d 85       	ldd	r19, Y+13	; 0x0d
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <DIO_u8SetPortDirection+0x5a>
    13e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	69 f0       	breq	.+26     	; 0x1404 <DIO_u8SetPortDirection+0x72>
    13ea:	6d c0       	rjmp	.+218    	; 0x14c6 <DIO_u8SetPortDirection+0x134>
    13ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	b9 f1       	breq	.+110    	; 0x1464 <DIO_u8SetPortDirection+0xd2>
    13f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <DIO_u8SetPortDirection+0x70>
    1400:	49 c0       	rjmp	.+146    	; 0x1494 <DIO_u8SetPortDirection+0x102>
    1402:	61 c0       	rjmp	.+194    	; 0x14c6 <DIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	3b 87       	std	Y+11, r19	; 0x0b
    140c:	2a 87       	std	Y+10, r18	; 0x0a
    140e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1410:	9b 85       	ldd	r25, Y+11	; 0x0b
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	31 f0       	breq	.+12     	; 0x1422 <DIO_u8SetPortDirection+0x90>
    1416:	2a 85       	ldd	r18, Y+10	; 0x0a
    1418:	3b 85       	ldd	r19, Y+11	; 0x0b
    141a:	21 30       	cpi	r18, 0x01	; 1
    141c:	31 05       	cpc	r19, r1
    141e:	29 f0       	breq	.+10     	; 0x142a <DIO_u8SetPortDirection+0x98>
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    1422:	ea e3       	ldi	r30, 0x3A	; 58
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	10 82       	st	Z, r1
    1428:	4e c0       	rjmp	.+156    	; 0x14c6 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    142a:	ea e3       	ldi	r30, 0x3A	; 58
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	80 83       	st	Z, r24
    1432:	49 c0       	rjmp	.+146    	; 0x14c6 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	39 87       	std	Y+9, r19	; 0x09
    143c:	28 87       	std	Y+8, r18	; 0x08
    143e:	88 85       	ldd	r24, Y+8	; 0x08
    1440:	99 85       	ldd	r25, Y+9	; 0x09
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	31 f0       	breq	.+12     	; 0x1452 <DIO_u8SetPortDirection+0xc0>
    1446:	28 85       	ldd	r18, Y+8	; 0x08
    1448:	39 85       	ldd	r19, Y+9	; 0x09
    144a:	21 30       	cpi	r18, 0x01	; 1
    144c:	31 05       	cpc	r19, r1
    144e:	29 f0       	breq	.+10     	; 0x145a <DIO_u8SetPortDirection+0xc8>
    1450:	3a c0       	rjmp	.+116    	; 0x14c6 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    1452:	e7 e3       	ldi	r30, 0x37	; 55
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	10 82       	st	Z, r1
    1458:	36 c0       	rjmp	.+108    	; 0x14c6 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    145a:	e7 e3       	ldi	r30, 0x37	; 55
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	80 83       	st	Z, r24
    1462:	31 c0       	rjmp	.+98     	; 0x14c6 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3f 83       	std	Y+7, r19	; 0x07
    146c:	2e 83       	std	Y+6, r18	; 0x06
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	31 f0       	breq	.+12     	; 0x1482 <DIO_u8SetPortDirection+0xf0>
    1476:	2e 81       	ldd	r18, Y+6	; 0x06
    1478:	3f 81       	ldd	r19, Y+7	; 0x07
    147a:	21 30       	cpi	r18, 0x01	; 1
    147c:	31 05       	cpc	r19, r1
    147e:	29 f0       	breq	.+10     	; 0x148a <DIO_u8SetPortDirection+0xf8>
    1480:	22 c0       	rjmp	.+68     	; 0x14c6 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    1482:	e4 e3       	ldi	r30, 0x34	; 52
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	10 82       	st	Z, r1
    1488:	1e c0       	rjmp	.+60     	; 0x14c6 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    148a:	e4 e3       	ldi	r30, 0x34	; 52
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	80 83       	st	Z, r24
    1492:	19 c0       	rjmp	.+50     	; 0x14c6 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3d 83       	std	Y+5, r19	; 0x05
    149c:	2c 83       	std	Y+4, r18	; 0x04
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	31 f0       	breq	.+12     	; 0x14b2 <DIO_u8SetPortDirection+0x120>
    14a6:	2c 81       	ldd	r18, Y+4	; 0x04
    14a8:	3d 81       	ldd	r19, Y+5	; 0x05
    14aa:	21 30       	cpi	r18, 0x01	; 1
    14ac:	31 05       	cpc	r19, r1
    14ae:	29 f0       	breq	.+10     	; 0x14ba <DIO_u8SetPortDirection+0x128>
    14b0:	0a c0       	rjmp	.+20     	; 0x14c6 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    14b2:	e1 e3       	ldi	r30, 0x31	; 49
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	10 82       	st	Z, r1
    14b8:	06 c0       	rjmp	.+12     	; 0x14c6 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    14ba:	e1 e3       	ldi	r30, 0x31	; 49
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8f ef       	ldi	r24, 0xFF	; 255
    14c0:	80 83       	st	Z, r24
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <DIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    14c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	2d 96       	adiw	r28, 0x0d	; 13
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <DIO_u8SetPortValue+0x6>
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <DIO_u8SetPortValue+0x8>
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3d 83       	std	Y+5, r19	; 0x05
    14f8:	2c 83       	std	Y+4, r18	; 0x04
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	d1 f0       	breq	.+52     	; 0x1538 <DIO_u8SetPortValue+0x5e>
    1504:	2c 81       	ldd	r18, Y+4	; 0x04
    1506:	3d 81       	ldd	r19, Y+5	; 0x05
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	31 05       	cpc	r19, r1
    150c:	2c f4       	brge	.+10     	; 0x1518 <DIO_u8SetPortValue+0x3e>
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	61 f0       	breq	.+24     	; 0x152e <DIO_u8SetPortValue+0x54>
    1516:	1f c0       	rjmp	.+62     	; 0x1556 <DIO_u8SetPortValue+0x7c>
    1518:	2c 81       	ldd	r18, Y+4	; 0x04
    151a:	3d 81       	ldd	r19, Y+5	; 0x05
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	81 f0       	breq	.+32     	; 0x1542 <DIO_u8SetPortValue+0x68>
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	81 f0       	breq	.+32     	; 0x154c <DIO_u8SetPortValue+0x72>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    152e:	eb e3       	ldi	r30, 0x3B	; 59
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	80 83       	st	Z, r24
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    1538:	e8 e3       	ldi	r30, 0x38	; 56
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	80 83       	st	Z, r24
    1540:	0b c0       	rjmp	.+22     	; 0x1558 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    1542:	e5 e3       	ldi	r30, 0x35	; 53
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	80 83       	st	Z, r24
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    154c:	e2 e3       	ldi	r30, 0x32	; 50
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	80 83       	st	Z, r24
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    1556:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1558:	89 81       	ldd	r24, Y+1	; 0x01
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_u8GetPortValue+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <DIO_u8GetPortValue+0x8>
    1572:	00 d0       	rcall	.+0      	; 0x1574 <DIO_u8GetPortValue+0xa>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	8a 83       	std	Y+2, r24	; 0x02
    157a:	7c 83       	std	Y+4, r23	; 0x04
    157c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	e9 f1       	breq	.+122    	; 0x1604 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3e 83       	std	Y+6, r19	; 0x06
    1592:	2d 83       	std	Y+5, r18	; 0x05
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	91 05       	cpc	r25, r1
    159c:	e1 f0       	breq	.+56     	; 0x15d6 <DIO_u8GetPortValue+0x6c>
    159e:	2d 81       	ldd	r18, Y+5	; 0x05
    15a0:	3e 81       	ldd	r19, Y+6	; 0x06
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <DIO_u8GetPortValue+0x48>
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	61 f0       	breq	.+24     	; 0x15c8 <DIO_u8GetPortValue+0x5e>
    15b0:	27 c0       	rjmp	.+78     	; 0x1600 <DIO_u8GetPortValue+0x96>
    15b2:	2d 81       	ldd	r18, Y+5	; 0x05
    15b4:	3e 81       	ldd	r19, Y+6	; 0x06
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	a1 f0       	breq	.+40     	; 0x15e4 <DIO_u8GetPortValue+0x7a>
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	91 05       	cpc	r25, r1
    15c4:	b1 f0       	breq	.+44     	; 0x15f2 <DIO_u8GetPortValue+0x88>
    15c6:	1c c0       	rjmp	.+56     	; 0x1600 <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    15c8:	e9 e3       	ldi	r30, 0x39	; 57
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	eb 81       	ldd	r30, Y+3	; 0x03
    15d0:	fc 81       	ldd	r31, Y+4	; 0x04
    15d2:	80 83       	st	Z, r24
    15d4:	18 c0       	rjmp	.+48     	; 0x1606 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    15d6:	e6 e3       	ldi	r30, 0x36	; 54
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	eb 81       	ldd	r30, Y+3	; 0x03
    15de:	fc 81       	ldd	r31, Y+4	; 0x04
    15e0:	80 83       	st	Z, r24
    15e2:	11 c0       	rjmp	.+34     	; 0x1606 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    15e4:	e3 e3       	ldi	r30, 0x33	; 51
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	eb 81       	ldd	r30, Y+3	; 0x03
    15ec:	fc 81       	ldd	r31, Y+4	; 0x04
    15ee:	80 83       	st	Z, r24
    15f0:	0a c0       	rjmp	.+20     	; 0x1606 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    15f2:	e0 e3       	ldi	r30, 0x30	; 48
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	80 83       	st	Z, r24
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    1600:	19 82       	std	Y+1, r1	; 0x01
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1604:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	26 96       	adiw	r28, 0x06	; 6
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <KPD_u8GetKey>:
static u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN, KPD_u8_R2_PIN, KPD_u8_R3_PIN, KPD_u8_R4_PIN};
static u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN, KPD_u8_C2_PIN, KPD_u8_C3_PIN, KPD_u8_C4_PIN};

/* Rows output *//* Columns Input */
u8 KPD_u8GetKey(u8 * Copy_pu8ReturnedKey)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	a3 97       	sbiw	r28, 0x23	; 35
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	9b a3       	std	Y+35, r25	; 0x23
    1630:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
    1636:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
    1638:	8a a1       	ldd	r24, Y+34	; 0x22
    163a:	9b a1       	ldd	r25, Y+35	; 0x23
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	09 f4       	brne	.+2      	; 0x1642 <KPD_u8GetKey+0x28>
    1640:	53 c1       	rjmp	.+678    	; 0x18e8 <KPD_u8GetKey+0x2ce>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1642:	ea a1       	ldd	r30, Y+34	; 0x22
    1644:	fb a1       	ldd	r31, Y+35	; 0x23
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	80 83       	st	Z, r24
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    164a:	1f 8e       	std	Y+31, r1	; 0x1f
    164c:	48 c1       	rjmp	.+656    	; 0x18de <KPD_u8GetKey+0x2c4>
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
    164e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	fc 01       	movw	r30, r24
    1656:	e9 54       	subi	r30, 0x49	; 73
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	90 81       	ld	r25, Z
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	69 2f       	mov	r22, r25
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    1666:	1e 8e       	std	Y+30, r1	; 0x1e
    1668:	24 c1       	rjmp	.+584    	; 0x18b2 <KPD_u8GetKey+0x298>
		    {
			    DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    166a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	fc 01       	movw	r30, r24
    1672:	e5 54       	subi	r30, 0x45	; 69
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	90 81       	ld	r25, Z
    1678:	9e 01       	movw	r18, r28
    167a:	2f 5d       	subi	r18, 0xDF	; 223
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	69 2f       	mov	r22, r25
    1682:	a9 01       	movw	r20, r18
    1684:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
    1688:	89 a1       	ldd	r24, Y+33	; 0x21
    168a:	88 23       	and	r24, r24
    168c:	09 f0       	breq	.+2      	; 0x1690 <KPD_u8GetKey+0x76>
    168e:	0e c1       	rjmp	.+540    	; 0x18ac <KPD_u8GetKey+0x292>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 ea       	ldi	r26, 0xA0	; 160
    1696:	b1 e4       	ldi	r27, 0x41	; 65
    1698:	89 8f       	std	Y+25, r24	; 0x19
    169a:	9a 8f       	std	Y+26, r25	; 0x1a
    169c:	ab 8f       	std	Y+27, r26	; 0x1b
    169e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	69 8d       	ldd	r22, Y+25	; 0x19
    16a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a ef       	ldi	r20, 0xFA	; 250
    16ae:	54 e4       	ldi	r21, 0x44	; 68
    16b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	8d 8b       	std	Y+21, r24	; 0x15
    16ba:	9e 8b       	std	Y+22, r25	; 0x16
    16bc:	af 8b       	std	Y+23, r26	; 0x17
    16be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16c0:	6d 89       	ldd	r22, Y+21	; 0x15
    16c2:	7e 89       	ldd	r23, Y+22	; 0x16
    16c4:	8f 89       	ldd	r24, Y+23	; 0x17
    16c6:	98 8d       	ldd	r25, Y+24	; 0x18
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5f e3       	ldi	r21, 0x3F	; 63
    16d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d4:	88 23       	and	r24, r24
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <KPD_u8GetKey+0xc8>
		__ticks = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9c 8b       	std	Y+20, r25	; 0x14
    16de:	8b 8b       	std	Y+19, r24	; 0x13
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <KPD_u8GetKey+0x146>
	else if (__tmp > 65535)
    16e2:	6d 89       	ldd	r22, Y+21	; 0x15
    16e4:	7e 89       	ldd	r23, Y+22	; 0x16
    16e6:	8f 89       	ldd	r24, Y+23	; 0x17
    16e8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	4c f5       	brge	.+82     	; 0x174c <KPD_u8GetKey+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	69 8d       	ldd	r22, Y+25	; 0x19
    16fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1700:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	51 e4       	ldi	r21, 0x41	; 65
    170a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9c 8b       	std	Y+20, r25	; 0x14
    1720:	8b 8b       	std	Y+19, r24	; 0x13
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <KPD_u8GetKey+0x128>
    1724:	88 ec       	ldi	r24, 0xC8	; 200
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9a 8b       	std	Y+18, r25	; 0x12
    172a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172c:	89 89       	ldd	r24, Y+17	; 0x11
    172e:	9a 89       	ldd	r25, Y+18	; 0x12
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <KPD_u8GetKey+0x116>
    1734:	9a 8b       	std	Y+18, r25	; 0x12
    1736:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	8b 89       	ldd	r24, Y+19	; 0x13
    173a:	9c 89       	ldd	r25, Y+20	; 0x14
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	9c 8b       	std	Y+20, r25	; 0x14
    1740:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	8b 89       	ldd	r24, Y+19	; 0x13
    1744:	9c 89       	ldd	r25, Y+20	; 0x14
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f7       	brne	.-38     	; 0x1724 <KPD_u8GetKey+0x10a>
    174a:	24 c0       	rjmp	.+72     	; 0x1794 <KPD_u8GetKey+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	6d 89       	ldd	r22, Y+21	; 0x15
    174e:	7e 89       	ldd	r23, Y+22	; 0x16
    1750:	8f 89       	ldd	r24, Y+23	; 0x17
    1752:	98 8d       	ldd	r25, Y+24	; 0x18
    1754:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9c 8b       	std	Y+20, r25	; 0x14
    175e:	8b 8b       	std	Y+19, r24	; 0x13
    1760:	8b 89       	ldd	r24, Y+19	; 0x13
    1762:	9c 89       	ldd	r25, Y+20	; 0x14
    1764:	98 8b       	std	Y+16, r25	; 0x10
    1766:	8f 87       	std	Y+15, r24	; 0x0f
    1768:	8f 85       	ldd	r24, Y+15	; 0x0f
    176a:	98 89       	ldd	r25, Y+16	; 0x10
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <KPD_u8GetKey+0x152>
    1770:	98 8b       	std	Y+16, r25	; 0x10
    1772:	8f 87       	std	Y+15, r24	; 0x0f
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <KPD_u8GetKey+0x17a>
			    {
				    /* Debouncing */
				    _delay_ms(20);
				    while(Local_u8ReturnedPinValue == DIO_u8_LOW)
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    1776:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	fc 01       	movw	r30, r24
    177e:	e5 54       	subi	r30, 0x45	; 69
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	90 81       	ld	r25, Z
    1784:	9e 01       	movw	r18, r28
    1786:	2f 5d       	subi	r18, 0xDF	; 223
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	69 2f       	mov	r22, r25
    178e:	a9 01       	movw	r20, r18
    1790:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
			    {
				    /* Debouncing */
				    _delay_ms(20);
				    while(Local_u8ReturnedPinValue == DIO_u8_LOW)
    1794:	89 a1       	ldd	r24, Y+33	; 0x21
    1796:	88 23       	and	r24, r24
    1798:	71 f3       	breq	.-36     	; 0x1776 <KPD_u8GetKey+0x15c>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e2       	ldi	r26, 0x20	; 32
    17a0:	b1 e4       	ldi	r27, 0x41	; 65
    17a2:	8b 87       	std	Y+11, r24	; 0x0b
    17a4:	9c 87       	std	Y+12, r25	; 0x0c
    17a6:	ad 87       	std	Y+13, r26	; 0x0d
    17a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a ef       	ldi	r20, 0xFA	; 250
    17b8:	54 e4       	ldi	r21, 0x44	; 68
    17ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	8f 83       	std	Y+7, r24	; 0x07
    17c4:	98 87       	std	Y+8, r25	; 0x08
    17c6:	a9 87       	std	Y+9, r26	; 0x09
    17c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	2c f4       	brge	.+10     	; 0x17ec <KPD_u8GetKey+0x1d2>
		__ticks = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <KPD_u8GetKey+0x250>
	else if (__tmp > 65535)
    17ec:	6f 81       	ldd	r22, Y+7	; 0x07
    17ee:	78 85       	ldd	r23, Y+8	; 0x08
    17f0:	89 85       	ldd	r24, Y+9	; 0x09
    17f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	4c f5       	brge	.+82     	; 0x1856 <KPD_u8GetKey+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	6b 85       	ldd	r22, Y+11	; 0x0b
    1806:	7c 85       	ldd	r23, Y+12	; 0x0c
    1808:	8d 85       	ldd	r24, Y+13	; 0x0d
    180a:	9e 85       	ldd	r25, Y+14	; 0x0e
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	0f c0       	rjmp	.+30     	; 0x184c <KPD_u8GetKey+0x232>
    182e:	88 ec       	ldi	r24, 0xC8	; 200
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9c 83       	std	Y+4, r25	; 0x04
    1834:	8b 83       	std	Y+3, r24	; 0x03
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <KPD_u8GetKey+0x220>
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	69 f7       	brne	.-38     	; 0x182e <KPD_u8GetKey+0x214>
    1854:	14 c0       	rjmp	.+40     	; 0x187e <KPD_u8GetKey+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	6f 81       	ldd	r22, Y+7	; 0x07
    1858:	78 85       	ldd	r23, Y+8	; 0x08
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	9a 85       	ldd	r25, Y+10	; 0x0a
    185e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <KPD_u8GetKey+0x25c>
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
				    }
				     _delay_ms(10);
                     * Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8_RowsCounter][Local_u8_ColsCounter];	
    187e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1880:	48 2f       	mov	r20, r24
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	ca 01       	movw	r24, r20
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	82 0f       	add	r24, r18
    1896:	93 1f       	adc	r25, r19
    1898:	fc 01       	movw	r30, r24
    189a:	e9 55       	subi	r30, 0x59	; 89
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	ea a1       	ldd	r30, Y+34	; 0x22
    18a2:	fb a1       	ldd	r31, Y+35	; 0x23
    18a4:	80 83       	st	Z, r24
                     Local_u8Flag = 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	8d 8f       	std	Y+29, r24	; 0x1d
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <KPD_u8GetKey+0x2a0>
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    18ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
    18b0:	8e 8f       	std	Y+30, r24	; 0x1e
    18b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18b4:	84 30       	cpi	r24, 0x04	; 4
    18b6:	08 f4       	brcc	.+2      	; 0x18ba <KPD_u8GetKey+0x2a0>
    18b8:	d8 ce       	rjmp	.-592    	; 0x166a <KPD_u8GetKey+0x50>
					break;
					
			    }
		     }
			 /* Deactivate currently Row  */
		     DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_HIGH);
    18ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	fc 01       	movw	r30, r24
    18c2:	e9 54       	subi	r30, 0x49	; 73
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	90 81       	ld	r25, Z
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	69 2f       	mov	r22, r25
    18cc:	41 e0       	ldi	r20, 0x01	; 1
    18ce:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
		   	 if(Local_u8Flag == 1)
    18d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	49 f0       	breq	.+18     	; 0x18ea <KPD_u8GetKey+0x2d0>
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    18d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18da:	8f 5f       	subi	r24, 0xFF	; 255
    18dc:	8f 8f       	std	Y+31, r24	; 0x1f
    18de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e0:	84 30       	cpi	r24, 0x04	; 4
    18e2:	08 f4       	brcc	.+2      	; 0x18e6 <KPD_u8GetKey+0x2cc>
    18e4:	b4 ce       	rjmp	.-664    	; 0x164e <KPD_u8GetKey+0x34>
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <KPD_u8GetKey+0x2d0>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    18e8:	18 a2       	std	Y+32, r1	; 0x20
	}
	return Local_u8ErrorState;
    18ea:	88 a1       	ldd	r24, Y+32	; 0x20
	
}
    18ec:	a3 96       	adiw	r28, 0x23	; 35
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit     (void)
{
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	cc 54       	subi	r28, 0x4C	; 76
    190c:	d0 40       	sbci	r29, 0x00	; 0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	fe 01       	movw	r30, r28
    191a:	e7 5b       	subi	r30, 0xB7	; 183
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	ac e0       	ldi	r26, 0x0C	; 12
    1924:	b2 e4       	ldi	r27, 0x42	; 66
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192e:	8e 01       	movw	r16, r28
    1930:	0b 5b       	subi	r16, 0xBB	; 187
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	fe 01       	movw	r30, r28
    1936:	e7 5b       	subi	r30, 0xB7	; 183
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	60 81       	ld	r22, Z
    193c:	71 81       	ldd	r23, Z+1	; 0x01
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	4a ef       	ldi	r20, 0xFA	; 250
    1948:	54 e4       	ldi	r21, 0x44	; 68
    194a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	f8 01       	movw	r30, r16
    1954:	80 83       	st	Z, r24
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	a2 83       	std	Z+2, r26	; 0x02
    195a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    195c:	fe 01       	movw	r30, r28
    195e:	eb 5b       	subi	r30, 0xBB	; 187
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	44 f4       	brge	.+16     	; 0x198a <LCD_voidInit+0x8c>
		__ticks = 1;
    197a:	fe 01       	movw	r30, r28
    197c:	ed 5b       	subi	r30, 0xBD	; 189
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24
    1988:	64 c0       	rjmp	.+200    	; 0x1a52 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    198a:	fe 01       	movw	r30, r28
    198c:	eb 5b       	subi	r30, 0xBB	; 187
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	0c f0       	brlt	.+2      	; 0x19aa <LCD_voidInit+0xac>
    19a8:	43 c0       	rjmp	.+134    	; 0x1a30 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	fe 01       	movw	r30, r28
    19ac:	e7 5b       	subi	r30, 0xB7	; 183
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	51 e4       	ldi	r21, 0x41	; 65
    19c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	8e 01       	movw	r16, r28
    19ca:	0d 5b       	subi	r16, 0xBD	; 189
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	f8 01       	movw	r30, r16
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
    19e0:	1f c0       	rjmp	.+62     	; 0x1a20 <LCD_voidInit+0x122>
    19e2:	fe 01       	movw	r30, r28
    19e4:	ef 5b       	subi	r30, 0xBF	; 191
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	88 ec       	ldi	r24, 0xC8	; 200
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	fe 01       	movw	r30, r28
    19f2:	ef 5b       	subi	r30, 0xBF	; 191
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <LCD_voidInit+0xfc>
    19fe:	fe 01       	movw	r30, r28
    1a00:	ef 5b       	subi	r30, 0xBF	; 191
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a08:	de 01       	movw	r26, r28
    1a0a:	ad 5b       	subi	r26, 0xBD	; 189
    1a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0e:	fe 01       	movw	r30, r28
    1a10:	ed 5b       	subi	r30, 0xBD	; 189
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	11 96       	adiw	r26, 0x01	; 1
    1a1c:	9c 93       	st	X, r25
    1a1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a20:	fe 01       	movw	r30, r28
    1a22:	ed 5b       	subi	r30, 0xBD	; 189
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	d1 f6       	brne	.-76     	; 0x19e2 <LCD_voidInit+0xe4>
    1a2e:	24 c0       	rjmp	.+72     	; 0x1a78 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	8e 01       	movw	r16, r28
    1a32:	0d 5b       	subi	r16, 0xBD	; 189
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	fe 01       	movw	r30, r28
    1a38:	eb 5b       	subi	r30, 0xBB	; 187
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
    1a52:	fe 01       	movw	r30, r28
    1a54:	ed 5b       	subi	r30, 0xBD	; 189
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ff 96       	adiw	r30, 0x3f	; 63
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
    1a64:	fe 01       	movw	r30, r28
    1a66:	ff 96       	adiw	r30, 0x3f	; 63
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <LCD_voidInit+0x16e>
    1a70:	fe 01       	movw	r30, r28
    1a72:	ff 96       	adiw	r30, 0x3f	; 63
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd 0b00111000 */
	LCD_voidSendCmnd(0b00111000);
    1a78:	88 e3       	ldi	r24, 0x38	; 56
    1a7a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e2       	ldi	r26, 0x20	; 32
    1a84:	b2 e4       	ldi	r27, 0x42	; 66
    1a86:	8b af       	std	Y+59, r24	; 0x3b
    1a88:	9c af       	std	Y+60, r25	; 0x3c
    1a8a:	ad af       	std	Y+61, r26	; 0x3d
    1a8c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a8e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a90:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a92:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a94:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a96:	2b ea       	ldi	r18, 0xAB	; 171
    1a98:	3a ea       	ldi	r19, 0xAA	; 170
    1a9a:	4a e2       	ldi	r20, 0x2A	; 42
    1a9c:	50 e4       	ldi	r21, 0x40	; 64
    1a9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8f ab       	std	Y+55, r24	; 0x37
    1aa8:	98 af       	std	Y+56, r25	; 0x38
    1aaa:	a9 af       	std	Y+57, r26	; 0x39
    1aac:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1aae:	6f a9       	ldd	r22, Y+55	; 0x37
    1ab0:	78 ad       	ldd	r23, Y+56	; 0x38
    1ab2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	1c f4       	brge	.+6      	; 0x1acc <LCD_voidInit+0x1ce>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	8e ab       	std	Y+54, r24	; 0x36
    1aca:	91 c0       	rjmp	.+290    	; 0x1bee <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1acc:	6f a9       	ldd	r22, Y+55	; 0x37
    1ace:	78 ad       	ldd	r23, Y+56	; 0x38
    1ad0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ad2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	53 e4       	ldi	r21, 0x43	; 67
    1adc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ae0:	18 16       	cp	r1, r24
    1ae2:	0c f0       	brlt	.+2      	; 0x1ae6 <LCD_voidInit+0x1e8>
    1ae4:	7b c0       	rjmp	.+246    	; 0x1bdc <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1ae6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ae8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1aea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a e7       	ldi	r20, 0x7A	; 122
    1af4:	54 e4       	ldi	r21, 0x44	; 68
    1af6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8a ab       	std	Y+50, r24	; 0x32
    1b00:	9b ab       	std	Y+51, r25	; 0x33
    1b02:	ac ab       	std	Y+52, r26	; 0x34
    1b04:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6a a9       	ldd	r22, Y+50	; 0x32
    1b08:	7b a9       	ldd	r23, Y+51	; 0x33
    1b0a:	8c a9       	ldd	r24, Y+52	; 0x34
    1b0c:	9d a9       	ldd	r25, Y+53	; 0x35
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a ef       	ldi	r20, 0xFA	; 250
    1b14:	54 e4       	ldi	r21, 0x44	; 68
    1b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8e a7       	std	Y+46, r24	; 0x2e
    1b20:	9f a7       	std	Y+47, r25	; 0x2f
    1b22:	a8 ab       	std	Y+48, r26	; 0x30
    1b24:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1b26:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b28:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b2a:	88 a9       	ldd	r24, Y+48	; 0x30
    1b2c:	99 a9       	ldd	r25, Y+49	; 0x31
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <LCD_voidInit+0x24a>
		__ticks = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9d a7       	std	Y+45, r25	; 0x2d
    1b44:	8c a7       	std	Y+44, r24	; 0x2c
    1b46:	3f c0       	rjmp	.+126    	; 0x1bc6 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1b48:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b4a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b4c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b4e:	99 a9       	ldd	r25, Y+49	; 0x31
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	4c f5       	brge	.+82     	; 0x1bb2 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	6a a9       	ldd	r22, Y+50	; 0x32
    1b62:	7b a9       	ldd	r23, Y+51	; 0x33
    1b64:	8c a9       	ldd	r24, Y+52	; 0x34
    1b66:	9d a9       	ldd	r25, Y+53	; 0x35
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9d a7       	std	Y+45, r25	; 0x2d
    1b86:	8c a7       	std	Y+44, r24	; 0x2c
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <LCD_voidInit+0x2aa>
    1b8a:	88 ec       	ldi	r24, 0xC8	; 200
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9b a7       	std	Y+43, r25	; 0x2b
    1b90:	8a a7       	std	Y+42, r24	; 0x2a
    1b92:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b94:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_voidInit+0x298>
    1b9a:	9b a7       	std	Y+43, r25	; 0x2b
    1b9c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ba0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9d a7       	std	Y+45, r25	; 0x2d
    1ba6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1baa:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <LCD_voidInit+0x28c>
    1bb0:	24 c0       	rjmp	.+72     	; 0x1bfa <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bb4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bb6:	88 a9       	ldd	r24, Y+48	; 0x30
    1bb8:	99 a9       	ldd	r25, Y+49	; 0x31
    1bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9d a7       	std	Y+45, r25	; 0x2d
    1bc4:	8c a7       	std	Y+44, r24	; 0x2c
    1bc6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bc8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bca:	99 a7       	std	Y+41, r25	; 0x29
    1bcc:	88 a7       	std	Y+40, r24	; 0x28
    1bce:	88 a5       	ldd	r24, Y+40	; 0x28
    1bd0:	99 a5       	ldd	r25, Y+41	; 0x29
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_voidInit+0x2d4>
    1bd6:	99 a7       	std	Y+41, r25	; 0x29
    1bd8:	88 a7       	std	Y+40, r24	; 0x28
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bdc:	6f a9       	ldd	r22, Y+55	; 0x37
    1bde:	78 ad       	ldd	r23, Y+56	; 0x38
    1be0:	89 ad       	ldd	r24, Y+57	; 0x39
    1be2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1be4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	8e ab       	std	Y+54, r24	; 0x36
    1bee:	8e a9       	ldd	r24, Y+54	; 0x36
    1bf0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bf2:	8f a1       	ldd	r24, Y+39	; 0x27
    1bf4:	8a 95       	dec	r24
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_voidInit+0x2f6>
    1bf8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    1bfa:	8f e0       	ldi	r24, 0x0F	; 15
    1bfc:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a0 e2       	ldi	r26, 0x20	; 32
    1c06:	b2 e4       	ldi	r27, 0x42	; 66
    1c08:	8b a3       	std	Y+35, r24	; 0x23
    1c0a:	9c a3       	std	Y+36, r25	; 0x24
    1c0c:	ad a3       	std	Y+37, r26	; 0x25
    1c0e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c10:	6b a1       	ldd	r22, Y+35	; 0x23
    1c12:	7c a1       	ldd	r23, Y+36	; 0x24
    1c14:	8d a1       	ldd	r24, Y+37	; 0x25
    1c16:	9e a1       	ldd	r25, Y+38	; 0x26
    1c18:	2b ea       	ldi	r18, 0xAB	; 171
    1c1a:	3a ea       	ldi	r19, 0xAA	; 170
    1c1c:	4a e2       	ldi	r20, 0x2A	; 42
    1c1e:	50 e4       	ldi	r21, 0x40	; 64
    1c20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	8f 8f       	std	Y+31, r24	; 0x1f
    1c2a:	98 a3       	std	Y+32, r25	; 0x20
    1c2c:	a9 a3       	std	Y+33, r26	; 0x21
    1c2e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c30:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c32:	78 a1       	ldd	r23, Y+32	; 0x20
    1c34:	89 a1       	ldd	r24, Y+33	; 0x21
    1c36:	9a a1       	ldd	r25, Y+34	; 0x22
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	1c f4       	brge	.+6      	; 0x1c4e <LCD_voidInit+0x350>
		__ticks = 1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c4c:	91 c0       	rjmp	.+290    	; 0x1d70 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1c4e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c50:	78 a1       	ldd	r23, Y+32	; 0x20
    1c52:	89 a1       	ldd	r24, Y+33	; 0x21
    1c54:	9a a1       	ldd	r25, Y+34	; 0x22
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	53 e4       	ldi	r21, 0x43	; 67
    1c5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c62:	18 16       	cp	r1, r24
    1c64:	0c f0       	brlt	.+2      	; 0x1c68 <LCD_voidInit+0x36a>
    1c66:	7b c0       	rjmp	.+246    	; 0x1d5e <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1c68:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a e7       	ldi	r20, 0x7A	; 122
    1c76:	54 e4       	ldi	r21, 0x44	; 68
    1c78:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8a 8f       	std	Y+26, r24	; 0x1a
    1c82:	9b 8f       	std	Y+27, r25	; 0x1b
    1c84:	ac 8f       	std	Y+28, r26	; 0x1c
    1c86:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c8a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a ef       	ldi	r20, 0xFA	; 250
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8e 8b       	std	Y+22, r24	; 0x16
    1ca2:	9f 8b       	std	Y+23, r25	; 0x17
    1ca4:	a8 8f       	std	Y+24, r26	; 0x18
    1ca6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ca8:	6e 89       	ldd	r22, Y+22	; 0x16
    1caa:	7f 89       	ldd	r23, Y+23	; 0x17
    1cac:	88 8d       	ldd	r24, Y+24	; 0x18
    1cae:	99 8d       	ldd	r25, Y+25	; 0x19
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <LCD_voidInit+0x3cc>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9d 8b       	std	Y+21, r25	; 0x15
    1cc6:	8c 8b       	std	Y+20, r24	; 0x14
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1cca:	6e 89       	ldd	r22, Y+22	; 0x16
    1ccc:	7f 89       	ldd	r23, Y+23	; 0x17
    1cce:	88 8d       	ldd	r24, Y+24	; 0x18
    1cd0:	99 8d       	ldd	r25, Y+25	; 0x19
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ce4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ce6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ce8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9d 8b       	std	Y+21, r25	; 0x15
    1d08:	8c 8b       	std	Y+20, r24	; 0x14
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <LCD_voidInit+0x42c>
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9b 8b       	std	Y+19, r25	; 0x13
    1d12:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d14:	8a 89       	ldd	r24, Y+18	; 0x12
    1d16:	9b 89       	ldd	r25, Y+19	; 0x13
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_voidInit+0x41a>
    1d1c:	9b 8b       	std	Y+19, r25	; 0x13
    1d1e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8c 89       	ldd	r24, Y+20	; 0x14
    1d22:	9d 89       	ldd	r25, Y+21	; 0x15
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9d 8b       	std	Y+21, r25	; 0x15
    1d28:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d2c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <LCD_voidInit+0x40e>
    1d32:	24 c0       	rjmp	.+72     	; 0x1d7c <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6e 89       	ldd	r22, Y+22	; 0x16
    1d36:	7f 89       	ldd	r23, Y+23	; 0x17
    1d38:	88 8d       	ldd	r24, Y+24	; 0x18
    1d3a:	99 8d       	ldd	r25, Y+25	; 0x19
    1d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9d 8b       	std	Y+21, r25	; 0x15
    1d46:	8c 8b       	std	Y+20, r24	; 0x14
    1d48:	8c 89       	ldd	r24, Y+20	; 0x14
    1d4a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d4c:	99 8b       	std	Y+17, r25	; 0x11
    1d4e:	88 8b       	std	Y+16, r24	; 0x10
    1d50:	88 89       	ldd	r24, Y+16	; 0x10
    1d52:	99 89       	ldd	r25, Y+17	; 0x11
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_voidInit+0x456>
    1d58:	99 8b       	std	Y+17, r25	; 0x11
    1d5a:	88 8b       	std	Y+16, r24	; 0x10
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d5e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d60:	78 a1       	ldd	r23, Y+32	; 0x20
    1d62:	89 a1       	ldd	r24, Y+33	; 0x21
    1d64:	9a a1       	ldd	r25, Y+34	; 0x22
    1d66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d76:	8a 95       	dec	r24
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_voidInit+0x478>
    1d7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 e0       	ldi	r26, 0x00	; 0
    1d88:	b0 e4       	ldi	r27, 0x40	; 64
    1d8a:	8b 87       	std	Y+11, r24	; 0x0b
    1d8c:	9c 87       	std	Y+12, r25	; 0x0c
    1d8e:	ad 87       	std	Y+13, r26	; 0x0d
    1d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a ef       	ldi	r20, 0xFA	; 250
    1da0:	54 e4       	ldi	r21, 0x44	; 68
    1da2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8f 83       	std	Y+7, r24	; 0x07
    1dac:	98 87       	std	Y+8, r25	; 0x08
    1dae:	a9 87       	std	Y+9, r26	; 0x09
    1db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <LCD_voidInit+0x536>
    1e16:	88 ec       	ldi	r24, 0xC8	; 200
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_voidInit+0x524>
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <LCD_voidInit+0x518>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_voidInit+0x560>
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
	
}
    1e6c:	c4 5b       	subi	r28, 0xB4	; 180
    1e6e:	df 4f       	sbci	r29, 0xFF	; 255
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <LCD_voidClear>:

void LCD_voidClear       (void)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00000001);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ea4:	b1 e4       	ldi	r27, 0x41	; 65
    1ea6:	8b 87       	std	Y+11, r24	; 0x0b
    1ea8:	9c 87       	std	Y+12, r25	; 0x0c
    1eaa:	ad 87       	std	Y+13, r26	; 0x0d
    1eac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a ef       	ldi	r20, 0xFA	; 250
    1ebc:	54 e4       	ldi	r21, 0x44	; 68
    1ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8f 83       	std	Y+7, r24	; 0x07
    1ec8:	98 87       	std	Y+8, r25	; 0x08
    1eca:	a9 87       	std	Y+9, r26	; 0x09
    1ecc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <LCD_voidClear+0x6c>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	3f c0       	rjmp	.+126    	; 0x1f6e <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef2:	78 85       	ldd	r23, Y+8	; 0x08
    1ef4:	89 85       	ldd	r24, Y+9	; 0x09
    1ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	4c f5       	brge	.+82     	; 0x1f5a <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <LCD_voidClear+0xcc>
    1f32:	88 ec       	ldi	r24, 0xC8	; 200
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_voidClear+0xba>
    1f42:	9c 83       	std	Y+4, r25	; 0x04
    1f44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <LCD_voidClear+0xae>
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_voidClear+0xf6>
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    1f82:	2e 96       	adiw	r28, 0x0e	; 14
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <LCD_voidCursorBlinkerOff>:

void LCD_voidCursorBlinkerOff(void)
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00001100);
    1fa8:	8c e0       	ldi	r24, 0x0C	; 12
    1faa:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 ea       	ldi	r26, 0xA0	; 160
    1fb4:	b1 e4       	ldi	r27, 0x41	; 65
    1fb6:	8b 87       	std	Y+11, r24	; 0x0b
    1fb8:	9c 87       	std	Y+12, r25	; 0x0c
    1fba:	ad 87       	std	Y+13, r26	; 0x0d
    1fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8f 83       	std	Y+7, r24	; 0x07
    1fd8:	98 87       	std	Y+8, r25	; 0x08
    1fda:	a9 87       	std	Y+9, r26	; 0x09
    1fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <LCD_voidCursorBlinkerOff+0x6c>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <LCD_voidCursorBlinkerOff+0xea>
	else if (__tmp > 65535)
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <LCD_voidCursorBlinkerOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	6b 85       	ldd	r22, Y+11	; 0x0b
    201a:	7c 85       	ldd	r23, Y+12	; 0x0c
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <LCD_voidCursorBlinkerOff+0xcc>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_voidCursorBlinkerOff+0xba>
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <LCD_voidCursorBlinkerOff+0xae>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <LCD_voidCursorBlinkerOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	9a 81       	ldd	r25, Y+2	; 0x02
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_voidCursorBlinkerOff+0xf6>
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2092:	2e 96       	adiw	r28, 0x0e	; 14
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd (u8 Copy_u8Cmnd)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	e1 97       	sbiw	r28, 0x31	; 49
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	61 e0       	ldi	r22, 0x01	; 1
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	/* Send Cmnd byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	69 a9       	ldd	r22, Y+49	; 0x31
    20d2:	0e 94 6d 0a 	call	0x14da	; 0x14da <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 e8       	ldi	r26, 0x80	; 128
    20e6:	bf e3       	ldi	r27, 0x3F	; 63
    20e8:	8d a7       	std	Y+45, r24	; 0x2d
    20ea:	9e a7       	std	Y+46, r25	; 0x2e
    20ec:	af a7       	std	Y+47, r26	; 0x2f
    20ee:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    20f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    20f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f6:	98 a9       	ldd	r25, Y+48	; 0x30
    20f8:	2b ea       	ldi	r18, 0xAB	; 171
    20fa:	3a ea       	ldi	r19, 0xAA	; 170
    20fc:	4a e2       	ldi	r20, 0x2A	; 42
    20fe:	50 e4       	ldi	r21, 0x40	; 64
    2100:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	89 a7       	std	Y+41, r24	; 0x29
    210a:	9a a7       	std	Y+42, r25	; 0x2a
    210c:	ab a7       	std	Y+43, r26	; 0x2b
    210e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2110:	69 a5       	ldd	r22, Y+41	; 0x29
    2112:	7a a5       	ldd	r23, Y+42	; 0x2a
    2114:	8b a5       	ldd	r24, Y+43	; 0x2b
    2116:	9c a5       	ldd	r25, Y+44	; 0x2c
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	1c f4       	brge	.+6      	; 0x212e <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	88 a7       	std	Y+40, r24	; 0x28
    212c:	91 c0       	rjmp	.+290    	; 0x2250 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    212e:	69 a5       	ldd	r22, Y+41	; 0x29
    2130:	7a a5       	ldd	r23, Y+42	; 0x2a
    2132:	8b a5       	ldd	r24, Y+43	; 0x2b
    2134:	9c a5       	ldd	r25, Y+44	; 0x2c
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	53 e4       	ldi	r21, 0x43	; 67
    213e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	0c f0       	brlt	.+2      	; 0x2148 <LCD_voidSendCmnd+0xa4>
    2146:	7b c0       	rjmp	.+246    	; 0x223e <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2148:	6d a5       	ldd	r22, Y+45	; 0x2d
    214a:	7e a5       	ldd	r23, Y+46	; 0x2e
    214c:	8f a5       	ldd	r24, Y+47	; 0x2f
    214e:	98 a9       	ldd	r25, Y+48	; 0x30
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	54 e4       	ldi	r21, 0x44	; 68
    2158:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8c a3       	std	Y+36, r24	; 0x24
    2162:	9d a3       	std	Y+37, r25	; 0x25
    2164:	ae a3       	std	Y+38, r26	; 0x26
    2166:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	6c a1       	ldd	r22, Y+36	; 0x24
    216a:	7d a1       	ldd	r23, Y+37	; 0x25
    216c:	8e a1       	ldd	r24, Y+38	; 0x26
    216e:	9f a1       	ldd	r25, Y+39	; 0x27
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a ef       	ldi	r20, 0xFA	; 250
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	88 a3       	std	Y+32, r24	; 0x20
    2182:	99 a3       	std	Y+33, r25	; 0x21
    2184:	aa a3       	std	Y+34, r26	; 0x22
    2186:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2188:	68 a1       	ldd	r22, Y+32	; 0x20
    218a:	79 a1       	ldd	r23, Y+33	; 0x21
    218c:	8a a1       	ldd	r24, Y+34	; 0x22
    218e:	9b a1       	ldd	r25, Y+35	; 0x23
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    219c:	88 23       	and	r24, r24
    219e:	2c f4       	brge	.+10     	; 0x21aa <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9f 8f       	std	Y+31, r25	; 0x1f
    21a6:	8e 8f       	std	Y+30, r24	; 0x1e
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    21aa:	68 a1       	ldd	r22, Y+32	; 0x20
    21ac:	79 a1       	ldd	r23, Y+33	; 0x21
    21ae:	8a a1       	ldd	r24, Y+34	; 0x22
    21b0:	9b a1       	ldd	r25, Y+35	; 0x23
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	3f ef       	ldi	r19, 0xFF	; 255
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	57 e4       	ldi	r21, 0x47	; 71
    21ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	4c f5       	brge	.+82     	; 0x2214 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c2:	6c a1       	ldd	r22, Y+36	; 0x24
    21c4:	7d a1       	ldd	r23, Y+37	; 0x25
    21c6:	8e a1       	ldd	r24, Y+38	; 0x26
    21c8:	9f a1       	ldd	r25, Y+39	; 0x27
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e2       	ldi	r20, 0x20	; 32
    21d0:	51 e4       	ldi	r21, 0x41	; 65
    21d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9f 8f       	std	Y+31, r25	; 0x1f
    21e8:	8e 8f       	std	Y+30, r24	; 0x1e
    21ea:	0f c0       	rjmp	.+30     	; 0x220a <LCD_voidSendCmnd+0x166>
    21ec:	88 ec       	ldi	r24, 0xC8	; 200
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9d 8f       	std	Y+29, r25	; 0x1d
    21f2:	8c 8f       	std	Y+28, r24	; 0x1c
    21f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_voidSendCmnd+0x154>
    21fc:	9d 8f       	std	Y+29, r25	; 0x1d
    21fe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2202:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	9f 8f       	std	Y+31, r25	; 0x1f
    2208:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    220c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	69 f7       	brne	.-38     	; 0x21ec <LCD_voidSendCmnd+0x148>
    2212:	24 c0       	rjmp	.+72     	; 0x225c <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	68 a1       	ldd	r22, Y+32	; 0x20
    2216:	79 a1       	ldd	r23, Y+33	; 0x21
    2218:	8a a1       	ldd	r24, Y+34	; 0x22
    221a:	9b a1       	ldd	r25, Y+35	; 0x23
    221c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9f 8f       	std	Y+31, r25	; 0x1f
    2226:	8e 8f       	std	Y+30, r24	; 0x1e
    2228:	8e 8d       	ldd	r24, Y+30	; 0x1e
    222a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    222c:	9b 8f       	std	Y+27, r25	; 0x1b
    222e:	8a 8f       	std	Y+26, r24	; 0x1a
    2230:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2232:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_voidSendCmnd+0x190>
    2238:	9b 8f       	std	Y+27, r25	; 0x1b
    223a:	8a 8f       	std	Y+26, r24	; 0x1a
    223c:	0f c0       	rjmp	.+30     	; 0x225c <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    223e:	69 a5       	ldd	r22, Y+41	; 0x29
    2240:	7a a5       	ldd	r23, Y+42	; 0x2a
    2242:	8b a5       	ldd	r24, Y+43	; 0x2b
    2244:	9c a5       	ldd	r25, Y+44	; 0x2c
    2246:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	88 a7       	std	Y+40, r24	; 0x28
    2250:	88 a5       	ldd	r24, Y+40	; 0x28
    2252:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2254:	89 8d       	ldd	r24, Y+25	; 0x19
    2256:	8a 95       	dec	r24
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_voidSendCmnd+0x1b2>
    225a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	62 e0       	ldi	r22, 0x02	; 2
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e8       	ldi	r26, 0x80	; 128
    226c:	bf e3       	ldi	r27, 0x3F	; 63
    226e:	8d 8b       	std	Y+21, r24	; 0x15
    2270:	9e 8b       	std	Y+22, r25	; 0x16
    2272:	af 8b       	std	Y+23, r26	; 0x17
    2274:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2276:	6d 89       	ldd	r22, Y+21	; 0x15
    2278:	7e 89       	ldd	r23, Y+22	; 0x16
    227a:	8f 89       	ldd	r24, Y+23	; 0x17
    227c:	98 8d       	ldd	r25, Y+24	; 0x18
    227e:	2b ea       	ldi	r18, 0xAB	; 171
    2280:	3a ea       	ldi	r19, 0xAA	; 170
    2282:	4a e2       	ldi	r20, 0x2A	; 42
    2284:	50 e4       	ldi	r21, 0x40	; 64
    2286:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	89 8b       	std	Y+17, r24	; 0x11
    2290:	9a 8b       	std	Y+18, r25	; 0x12
    2292:	ab 8b       	std	Y+19, r26	; 0x13
    2294:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2296:	69 89       	ldd	r22, Y+17	; 0x11
    2298:	7a 89       	ldd	r23, Y+18	; 0x12
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	9c 89       	ldd	r25, Y+20	; 0x14
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	1c f4       	brge	.+6      	; 0x22b4 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	88 8b       	std	Y+16, r24	; 0x10
    22b2:	91 c0       	rjmp	.+290    	; 0x23d6 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    22b4:	69 89       	ldd	r22, Y+17	; 0x11
    22b6:	7a 89       	ldd	r23, Y+18	; 0x12
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	9c 89       	ldd	r25, Y+20	; 0x14
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	53 e4       	ldi	r21, 0x43	; 67
    22c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	0c f0       	brlt	.+2      	; 0x22ce <LCD_voidSendCmnd+0x22a>
    22cc:	7b c0       	rjmp	.+246    	; 0x23c4 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    22ce:	6d 89       	ldd	r22, Y+21	; 0x15
    22d0:	7e 89       	ldd	r23, Y+22	; 0x16
    22d2:	8f 89       	ldd	r24, Y+23	; 0x17
    22d4:	98 8d       	ldd	r25, Y+24	; 0x18
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4a e7       	ldi	r20, 0x7A	; 122
    22dc:	54 e4       	ldi	r21, 0x44	; 68
    22de:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	8c 87       	std	Y+12, r24	; 0x0c
    22e8:	9d 87       	std	Y+13, r25	; 0x0d
    22ea:	ae 87       	std	Y+14, r26	; 0x0e
    22ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    22f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    22f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a ef       	ldi	r20, 0xFA	; 250
    22fc:	54 e4       	ldi	r21, 0x44	; 68
    22fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	88 87       	std	Y+8, r24	; 0x08
    2308:	99 87       	std	Y+9, r25	; 0x09
    230a:	aa 87       	std	Y+10, r26	; 0x0a
    230c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    230e:	68 85       	ldd	r22, Y+8	; 0x08
    2310:	79 85       	ldd	r23, Y+9	; 0x09
    2312:	8a 85       	ldd	r24, Y+10	; 0x0a
    2314:	9b 85       	ldd	r25, Y+11	; 0x0b
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9f 83       	std	Y+7, r25	; 0x07
    232c:	8e 83       	std	Y+6, r24	; 0x06
    232e:	3f c0       	rjmp	.+126    	; 0x23ae <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2330:	68 85       	ldd	r22, Y+8	; 0x08
    2332:	79 85       	ldd	r23, Y+9	; 0x09
    2334:	8a 85       	ldd	r24, Y+10	; 0x0a
    2336:	9b 85       	ldd	r25, Y+11	; 0x0b
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	4c f5       	brge	.+82     	; 0x239a <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	6c 85       	ldd	r22, Y+12	; 0x0c
    234a:	7d 85       	ldd	r23, Y+13	; 0x0d
    234c:	8e 85       	ldd	r24, Y+14	; 0x0e
    234e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9f 83       	std	Y+7, r25	; 0x07
    236e:	8e 83       	std	Y+6, r24	; 0x06
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <LCD_voidSendCmnd+0x2ec>
    2372:	88 ec       	ldi	r24, 0xC8	; 200
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9d 83       	std	Y+5, r25	; 0x05
    2378:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <LCD_voidSendCmnd+0x2da>
    2382:	9d 83       	std	Y+5, r25	; 0x05
    2384:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8e 81       	ldd	r24, Y+6	; 0x06
    2388:	9f 81       	ldd	r25, Y+7	; 0x07
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9f 83       	std	Y+7, r25	; 0x07
    238e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8e 81       	ldd	r24, Y+6	; 0x06
    2392:	9f 81       	ldd	r25, Y+7	; 0x07
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <LCD_voidSendCmnd+0x2ce>
    2398:	24 c0       	rjmp	.+72     	; 0x23e2 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	68 85       	ldd	r22, Y+8	; 0x08
    239c:	79 85       	ldd	r23, Y+9	; 0x09
    239e:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9f 83       	std	Y+7, r25	; 0x07
    23ac:	8e 83       	std	Y+6, r24	; 0x06
    23ae:	8e 81       	ldd	r24, Y+6	; 0x06
    23b0:	9f 81       	ldd	r25, Y+7	; 0x07
    23b2:	9b 83       	std	Y+3, r25	; 0x03
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <LCD_voidSendCmnd+0x316>
    23be:	9b 83       	std	Y+3, r25	; 0x03
    23c0:	8a 83       	std	Y+2, r24	; 0x02
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23c4:	69 89       	ldd	r22, Y+17	; 0x11
    23c6:	7a 89       	ldd	r23, Y+18	; 0x12
    23c8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ca:	9c 89       	ldd	r25, Y+20	; 0x14
    23cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	88 8b       	std	Y+16, r24	; 0x10
    23d6:	88 89       	ldd	r24, Y+16	; 0x10
    23d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	8a 95       	dec	r24
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_voidSendCmnd+0x338>
    23e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    23e2:	e1 96       	adiw	r28, 0x31	; 49
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <LCD_voidSendChar>:
void LCD_voidSendChar (u8 Copy_u8Char)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	e1 97       	sbiw	r28, 0x31	; 49
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 1 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	/* Send Char byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    241e:	83 e0       	ldi	r24, 0x03	; 3
    2420:	69 a9       	ldd	r22, Y+49	; 0x31
    2422:	0e 94 6d 0a 	call	0x14da	; 0x14da <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 e8       	ldi	r26, 0x80	; 128
    2436:	bf e3       	ldi	r27, 0x3F	; 63
    2438:	8d a7       	std	Y+45, r24	; 0x2d
    243a:	9e a7       	std	Y+46, r25	; 0x2e
    243c:	af a7       	std	Y+47, r26	; 0x2f
    243e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2440:	6d a5       	ldd	r22, Y+45	; 0x2d
    2442:	7e a5       	ldd	r23, Y+46	; 0x2e
    2444:	8f a5       	ldd	r24, Y+47	; 0x2f
    2446:	98 a9       	ldd	r25, Y+48	; 0x30
    2448:	2b ea       	ldi	r18, 0xAB	; 171
    244a:	3a ea       	ldi	r19, 0xAA	; 170
    244c:	4a e2       	ldi	r20, 0x2A	; 42
    244e:	50 e4       	ldi	r21, 0x40	; 64
    2450:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	89 a7       	std	Y+41, r24	; 0x29
    245a:	9a a7       	std	Y+42, r25	; 0x2a
    245c:	ab a7       	std	Y+43, r26	; 0x2b
    245e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2460:	69 a5       	ldd	r22, Y+41	; 0x29
    2462:	7a a5       	ldd	r23, Y+42	; 0x2a
    2464:	8b a5       	ldd	r24, Y+43	; 0x2b
    2466:	9c a5       	ldd	r25, Y+44	; 0x2c
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	1c f4       	brge	.+6      	; 0x247e <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	88 a7       	std	Y+40, r24	; 0x28
    247c:	91 c0       	rjmp	.+290    	; 0x25a0 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    247e:	69 a5       	ldd	r22, Y+41	; 0x29
    2480:	7a a5       	ldd	r23, Y+42	; 0x2a
    2482:	8b a5       	ldd	r24, Y+43	; 0x2b
    2484:	9c a5       	ldd	r25, Y+44	; 0x2c
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	53 e4       	ldi	r21, 0x43	; 67
    248e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	0c f0       	brlt	.+2      	; 0x2498 <LCD_voidSendChar+0xa4>
    2496:	7b c0       	rjmp	.+246    	; 0x258e <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2498:	6d a5       	ldd	r22, Y+45	; 0x2d
    249a:	7e a5       	ldd	r23, Y+46	; 0x2e
    249c:	8f a5       	ldd	r24, Y+47	; 0x2f
    249e:	98 a9       	ldd	r25, Y+48	; 0x30
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a e7       	ldi	r20, 0x7A	; 122
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	8c a3       	std	Y+36, r24	; 0x24
    24b2:	9d a3       	std	Y+37, r25	; 0x25
    24b4:	ae a3       	std	Y+38, r26	; 0x26
    24b6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6c a1       	ldd	r22, Y+36	; 0x24
    24ba:	7d a1       	ldd	r23, Y+37	; 0x25
    24bc:	8e a1       	ldd	r24, Y+38	; 0x26
    24be:	9f a1       	ldd	r25, Y+39	; 0x27
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	88 a3       	std	Y+32, r24	; 0x20
    24d2:	99 a3       	std	Y+33, r25	; 0x21
    24d4:	aa a3       	std	Y+34, r26	; 0x22
    24d6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24d8:	68 a1       	ldd	r22, Y+32	; 0x20
    24da:	79 a1       	ldd	r23, Y+33	; 0x21
    24dc:	8a a1       	ldd	r24, Y+34	; 0x22
    24de:	9b a1       	ldd	r25, Y+35	; 0x23
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <LCD_voidSendChar+0x106>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9f 8f       	std	Y+31, r25	; 0x1f
    24f6:	8e 8f       	std	Y+30, r24	; 0x1e
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    24fa:	68 a1       	ldd	r22, Y+32	; 0x20
    24fc:	79 a1       	ldd	r23, Y+33	; 0x21
    24fe:	8a a1       	ldd	r24, Y+34	; 0x22
    2500:	9b a1       	ldd	r25, Y+35	; 0x23
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6c a1       	ldd	r22, Y+36	; 0x24
    2514:	7d a1       	ldd	r23, Y+37	; 0x25
    2516:	8e a1       	ldd	r24, Y+38	; 0x26
    2518:	9f a1       	ldd	r25, Y+39	; 0x27
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9f 8f       	std	Y+31, r25	; 0x1f
    2538:	8e 8f       	std	Y+30, r24	; 0x1e
    253a:	0f c0       	rjmp	.+30     	; 0x255a <LCD_voidSendChar+0x166>
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9d 8f       	std	Y+29, r25	; 0x1d
    2542:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2544:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2546:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_voidSendChar+0x154>
    254c:	9d 8f       	std	Y+29, r25	; 0x1d
    254e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2552:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9f 8f       	std	Y+31, r25	; 0x1f
    2558:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    255c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <LCD_voidSendChar+0x148>
    2562:	24 c0       	rjmp	.+72     	; 0x25ac <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	68 a1       	ldd	r22, Y+32	; 0x20
    2566:	79 a1       	ldd	r23, Y+33	; 0x21
    2568:	8a a1       	ldd	r24, Y+34	; 0x22
    256a:	9b a1       	ldd	r25, Y+35	; 0x23
    256c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9f 8f       	std	Y+31, r25	; 0x1f
    2576:	8e 8f       	std	Y+30, r24	; 0x1e
    2578:	8e 8d       	ldd	r24, Y+30	; 0x1e
    257a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    257c:	9b 8f       	std	Y+27, r25	; 0x1b
    257e:	8a 8f       	std	Y+26, r24	; 0x1a
    2580:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2582:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_voidSendChar+0x190>
    2588:	9b 8f       	std	Y+27, r25	; 0x1b
    258a:	8a 8f       	std	Y+26, r24	; 0x1a
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    258e:	69 a5       	ldd	r22, Y+41	; 0x29
    2590:	7a a5       	ldd	r23, Y+42	; 0x2a
    2592:	8b a5       	ldd	r24, Y+43	; 0x2b
    2594:	9c a5       	ldd	r25, Y+44	; 0x2c
    2596:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	88 a7       	std	Y+40, r24	; 0x28
    25a0:	88 a5       	ldd	r24, Y+40	; 0x28
    25a2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25a4:	89 8d       	ldd	r24, Y+25	; 0x19
    25a6:	8a 95       	dec	r24
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_voidSendChar+0x1b2>
    25aa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	62 e0       	ldi	r22, 0x02	; 2
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a0 e8       	ldi	r26, 0x80	; 128
    25bc:	bf e3       	ldi	r27, 0x3F	; 63
    25be:	8d 8b       	std	Y+21, r24	; 0x15
    25c0:	9e 8b       	std	Y+22, r25	; 0x16
    25c2:	af 8b       	std	Y+23, r26	; 0x17
    25c4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25c6:	6d 89       	ldd	r22, Y+21	; 0x15
    25c8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ca:	8f 89       	ldd	r24, Y+23	; 0x17
    25cc:	98 8d       	ldd	r25, Y+24	; 0x18
    25ce:	2b ea       	ldi	r18, 0xAB	; 171
    25d0:	3a ea       	ldi	r19, 0xAA	; 170
    25d2:	4a e2       	ldi	r20, 0x2A	; 42
    25d4:	50 e4       	ldi	r21, 0x40	; 64
    25d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	89 8b       	std	Y+17, r24	; 0x11
    25e0:	9a 8b       	std	Y+18, r25	; 0x12
    25e2:	ab 8b       	std	Y+19, r26	; 0x13
    25e4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25e6:	69 89       	ldd	r22, Y+17	; 0x11
    25e8:	7a 89       	ldd	r23, Y+18	; 0x12
    25ea:	8b 89       	ldd	r24, Y+19	; 0x13
    25ec:	9c 89       	ldd	r25, Y+20	; 0x14
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	1c f4       	brge	.+6      	; 0x2604 <LCD_voidSendChar+0x210>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	88 8b       	std	Y+16, r24	; 0x10
    2602:	91 c0       	rjmp	.+290    	; 0x2726 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    2604:	69 89       	ldd	r22, Y+17	; 0x11
    2606:	7a 89       	ldd	r23, Y+18	; 0x12
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	53 e4       	ldi	r21, 0x43	; 67
    2614:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	0c f0       	brlt	.+2      	; 0x261e <LCD_voidSendChar+0x22a>
    261c:	7b c0       	rjmp	.+246    	; 0x2714 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    261e:	6d 89       	ldd	r22, Y+21	; 0x15
    2620:	7e 89       	ldd	r23, Y+22	; 0x16
    2622:	8f 89       	ldd	r24, Y+23	; 0x17
    2624:	98 8d       	ldd	r25, Y+24	; 0x18
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a e7       	ldi	r20, 0x7A	; 122
    262c:	54 e4       	ldi	r21, 0x44	; 68
    262e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	8c 87       	std	Y+12, r24	; 0x0c
    2638:	9d 87       	std	Y+13, r25	; 0x0d
    263a:	ae 87       	std	Y+14, r26	; 0x0e
    263c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2640:	7d 85       	ldd	r23, Y+13	; 0x0d
    2642:	8e 85       	ldd	r24, Y+14	; 0x0e
    2644:	9f 85       	ldd	r25, Y+15	; 0x0f
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a ef       	ldi	r20, 0xFA	; 250
    264c:	54 e4       	ldi	r21, 0x44	; 68
    264e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	88 87       	std	Y+8, r24	; 0x08
    2658:	99 87       	std	Y+9, r25	; 0x09
    265a:	aa 87       	std	Y+10, r26	; 0x0a
    265c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    265e:	68 85       	ldd	r22, Y+8	; 0x08
    2660:	79 85       	ldd	r23, Y+9	; 0x09
    2662:	8a 85       	ldd	r24, Y+10	; 0x0a
    2664:	9b 85       	ldd	r25, Y+11	; 0x0b
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2672:	88 23       	and	r24, r24
    2674:	2c f4       	brge	.+10     	; 0x2680 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9f 83       	std	Y+7, r25	; 0x07
    267c:	8e 83       	std	Y+6, r24	; 0x06
    267e:	3f c0       	rjmp	.+126    	; 0x26fe <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2680:	68 85       	ldd	r22, Y+8	; 0x08
    2682:	79 85       	ldd	r23, Y+9	; 0x09
    2684:	8a 85       	ldd	r24, Y+10	; 0x0a
    2686:	9b 85       	ldd	r25, Y+11	; 0x0b
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	4c f5       	brge	.+82     	; 0x26ea <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2698:	6c 85       	ldd	r22, Y+12	; 0x0c
    269a:	7d 85       	ldd	r23, Y+13	; 0x0d
    269c:	8e 85       	ldd	r24, Y+14	; 0x0e
    269e:	9f 85       	ldd	r25, Y+15	; 0x0f
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e2       	ldi	r20, 0x20	; 32
    26a6:	51 e4       	ldi	r21, 0x41	; 65
    26a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9f 83       	std	Y+7, r25	; 0x07
    26be:	8e 83       	std	Y+6, r24	; 0x06
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <LCD_voidSendChar+0x2ec>
    26c2:	88 ec       	ldi	r24, 0xC8	; 200
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9d 83       	std	Y+5, r25	; 0x05
    26c8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26ca:	8c 81       	ldd	r24, Y+4	; 0x04
    26cc:	9d 81       	ldd	r25, Y+5	; 0x05
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_voidSendChar+0x2da>
    26d2:	9d 83       	std	Y+5, r25	; 0x05
    26d4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d6:	8e 81       	ldd	r24, Y+6	; 0x06
    26d8:	9f 81       	ldd	r25, Y+7	; 0x07
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	9f 83       	std	Y+7, r25	; 0x07
    26de:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
    26e2:	9f 81       	ldd	r25, Y+7	; 0x07
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	69 f7       	brne	.-38     	; 0x26c2 <LCD_voidSendChar+0x2ce>
    26e8:	24 c0       	rjmp	.+72     	; 0x2732 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ea:	68 85       	ldd	r22, Y+8	; 0x08
    26ec:	79 85       	ldd	r23, Y+9	; 0x09
    26ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    26f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9f 83       	std	Y+7, r25	; 0x07
    26fc:	8e 83       	std	Y+6, r24	; 0x06
    26fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2700:	9f 81       	ldd	r25, Y+7	; 0x07
    2702:	9b 83       	std	Y+3, r25	; 0x03
    2704:	8a 83       	std	Y+2, r24	; 0x02
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_voidSendChar+0x316>
    270e:	9b 83       	std	Y+3, r25	; 0x03
    2710:	8a 83       	std	Y+2, r24	; 0x02
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2714:	69 89       	ldd	r22, Y+17	; 0x11
    2716:	7a 89       	ldd	r23, Y+18	; 0x12
    2718:	8b 89       	ldd	r24, Y+19	; 0x13
    271a:	9c 89       	ldd	r25, Y+20	; 0x14
    271c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	88 8b       	std	Y+16, r24	; 0x10
    2726:	88 89       	ldd	r24, Y+16	; 0x10
    2728:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	8a 95       	dec	r24
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_voidSendChar+0x338>
    2730:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    2732:	e1 96       	adiw	r28, 0x31	; 49
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <LCD_voidWriteString>:
void LCD_voidWriteString (u8 * Copy_pu8String)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <LCD_voidWriteString+0x6>
    274a:	00 d0       	rcall	.+0      	; 0x274c <LCD_voidWriteString+0x8>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8String != NULL )
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	21 f1       	breq	.+72     	; 0x27a4 <LCD_voidWriteString+0x60>
	{
	    u8 x = 0;
    275c:	1a 82       	std	Y+2, r1	; 0x02
	    u8 i = 0;
    275e:	19 82       	std	Y+1, r1	; 0x01
    2760:	16 c0       	rjmp	.+44     	; 0x278e <LCD_voidWriteString+0x4a>
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	8f 5f       	subi	r24, 0xFF	; 255
    2766:	8a 83       	std	Y+2, r24	; 0x02
    2768:	0e c0       	rjmp	.+28     	; 0x2786 <LCD_voidWriteString+0x42>
		 for(  ; i < x; i++)
		 {
		  /* Write Character on LCD */
		  LCD_voidSendChar (Copy_pu8String[i]);
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	fc 01       	movw	r30, r24
    2776:	e2 0f       	add	r30, r18
    2778:	f3 1f       	adc	r31, r19
    277a:	80 81       	ld	r24, Z
    277c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
		 for(  ; i < x; i++)
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	99 81       	ldd	r25, Y+1	; 0x01
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	98 17       	cp	r25, r24
    278c:	70 f3       	brcs	.-36     	; 0x276a <LCD_voidWriteString+0x26>
{
	if(Copy_pu8String != NULL )
	{
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	80 81       	ld	r24, Z
    27a0:	88 23       	and	r24, r24
    27a2:	f9 f6       	brne	.-66     	; 0x2762 <LCD_voidWriteString+0x1e>
		 }
		 
		}
	}
	
}
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <LCD_u8_GoTo_XY>:
u8 LCD_u8_GoTo_XY     (u8 Copy_u8X,u8 Copy_u8Y)
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <LCD_u8_GoTo_XY+0x6>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <LCD_u8_GoTo_XY+0x8>
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <LCD_u8_GoTo_XY+0xa>
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	8a 83       	std	Y+2, r24	; 0x02
    27c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8X <=1)&&(Copy_u8Y <= 39))
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	82 30       	cpi	r24, 0x02	; 2
    27cc:	e0 f4       	brcc	.+56     	; 0x2806 <LCD_u8_GoTo_XY+0x54>
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	88 32       	cpi	r24, 0x28	; 40
    27d2:	c8 f4       	brcc	.+50     	; 0x2806 <LCD_u8_GoTo_XY+0x54>
	{
		switch(Copy_u8X)
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	3d 83       	std	Y+5, r19	; 0x05
    27dc:	2c 83       	std	Y+4, r18	; 0x04
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	31 f0       	breq	.+12     	; 0x27f2 <LCD_u8_GoTo_XY+0x40>
    27e6:	2c 81       	ldd	r18, Y+4	; 0x04
    27e8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ea:	21 30       	cpi	r18, 0x01	; 1
    27ec:	31 05       	cpc	r19, r1
    27ee:	31 f0       	breq	.+12     	; 0x27fc <LCD_u8_GoTo_XY+0x4a>
    27f0:	0b c0       	rjmp	.+22     	; 0x2808 <LCD_u8_GoTo_XY+0x56>
		{
		case LCD_u8_LINE0 : LCD_voidSendCmnd(0x80 + Copy_u8Y);break;
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	80 58       	subi	r24, 0x80	; 128
    27f6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    27fa:	06 c0       	rjmp	.+12     	; 0x2808 <LCD_u8_GoTo_XY+0x56>

		case LCD_u8_LINE1 : LCD_voidSendCmnd(0xC0 + Copy_u8Y);break;
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	80 54       	subi	r24, 0x40	; 64
    2800:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    2804:	01 c0       	rjmp	.+2      	; 0x2808 <LCD_u8_GoTo_XY+0x56>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    2806:	19 82       	std	Y+1, r1	; 0x01
	}


}
    2808:	26 96       	adiw	r28, 0x06	; 6
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <LCD_voidWriteNumber>:
void LCD_voidWriteNumber (u32  Copy_u32Num)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	66 97       	sbiw	r28, 0x16	; 22
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	6b 8b       	std	Y+19, r22	; 0x13
    2830:	7c 8b       	std	Y+20, r23	; 0x14
    2832:	8d 8b       	std	Y+21, r24	; 0x15
    2834:	9e 8b       	std	Y+22, r25	; 0x16

	u8 Arr[10];
	u8 Local_Remainder = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	88 87       	std	Y+8, r24	; 0x08
	u32 Local_Number = Copy_u32Num;
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	ad 89       	ldd	r26, Y+21	; 0x15
    2840:	be 89       	ldd	r27, Y+22	; 0x16
    2842:	8c 83       	std	Y+4, r24	; 0x04
    2844:	9d 83       	std	Y+5, r25	; 0x05
    2846:	ae 83       	std	Y+6, r26	; 0x06
    2848:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_Counter = 0;
    284a:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    284c:	8a e0       	ldi	r24, 0x0A	; 10
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	42 c0       	rjmp	.+132    	; 0x28d6 <LCD_voidWriteNumber+0xbc>
	{
		Local_Remainder = Local_Number % 10 ;
    2852:	8c 81       	ldd	r24, Y+4	; 0x04
    2854:	9d 81       	ldd	r25, Y+5	; 0x05
    2856:	ae 81       	ldd	r26, Y+6	; 0x06
    2858:	bf 81       	ldd	r27, Y+7	; 0x07
    285a:	2a e0       	ldi	r18, 0x0A	; 10
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 30 1a 	call	0x3460	; 0x3460 <__udivmodsi4>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	88 87       	std	Y+8, r24	; 0x08
		Local_Number    = Local_Number /10 ;
    2870:	8c 81       	ldd	r24, Y+4	; 0x04
    2872:	9d 81       	ldd	r25, Y+5	; 0x05
    2874:	ae 81       	ldd	r26, Y+6	; 0x06
    2876:	bf 81       	ldd	r27, Y+7	; 0x07
    2878:	2a e0       	ldi	r18, 0x0A	; 10
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 30 1a 	call	0x3460	; 0x3460 <__udivmodsi4>
    2888:	da 01       	movw	r26, r20
    288a:	c9 01       	movw	r24, r18
    288c:	8c 83       	std	Y+4, r24	; 0x04
    288e:	9d 83       	std	Y+5, r25	; 0x05
    2890:	ae 83       	std	Y+6, r26	; 0x06
    2892:	bf 83       	std	Y+7, r27	; 0x07

		if((Local_Remainder ==0) && (Local_Number<1) && (Local_Counter>0) )
    2894:	88 85       	ldd	r24, Y+8	; 0x08
    2896:	88 23       	and	r24, r24
    2898:	59 f4       	brne	.+22     	; 0x28b0 <LCD_voidWriteNumber+0x96>
    289a:	8c 81       	ldd	r24, Y+4	; 0x04
    289c:	9d 81       	ldd	r25, Y+5	; 0x05
    289e:	ae 81       	ldd	r26, Y+6	; 0x06
    28a0:	bf 81       	ldd	r27, Y+7	; 0x07
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	a1 05       	cpc	r26, r1
    28a6:	b1 05       	cpc	r27, r1
    28a8:	19 f4       	brne	.+6      	; 0x28b0 <LCD_voidWriteNumber+0x96>
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	88 23       	and	r24, r24
    28ae:	b9 f4       	brne	.+46     	; 0x28de <LCD_voidWriteNumber+0xc4>
		{
			break;
		}
		Local_Counter ++;
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	8f 5f       	subi	r24, 0xFF	; 255
    28b4:	8b 83       	std	Y+3, r24	; 0x03
		Arr[initial-1] = Local_Remainder ;
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	88 2f       	mov	r24, r24
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9c 01       	movw	r18, r24
    28be:	21 50       	subi	r18, 0x01	; 1
    28c0:	30 40       	sbci	r19, 0x00	; 0
    28c2:	ce 01       	movw	r24, r28
    28c4:	09 96       	adiw	r24, 0x09	; 9
    28c6:	fc 01       	movw	r30, r24
    28c8:	e2 0f       	add	r30, r18
    28ca:	f3 1f       	adc	r31, r19
    28cc:	88 85       	ldd	r24, Y+8	; 0x08
    28ce:	80 83       	st	Z, r24
	u32 Local_Number = Copy_u32Num;
	u8 Local_Counter = 0;
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	81 50       	subi	r24, 0x01	; 1
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	88 23       	and	r24, r24
    28da:	09 f0       	breq	.+2      	; 0x28de <LCD_voidWriteNumber+0xc4>
    28dc:	ba cf       	rjmp	.-140    	; 0x2852 <LCD_voidWriteNumber+0x38>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    28de:	8a e0       	ldi	r24, 0x0A	; 10
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	89 1b       	sub	r24, r25
    28e4:	8a 83       	std	Y+2, r24	; 0x02
    28e6:	0f c0       	rjmp	.+30     	; 0x2906 <LCD_voidWriteNumber+0xec>
	{
		LCD_voidSendChar(Arr[Local_Counter2]+48);
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	ce 01       	movw	r24, r28
    28f0:	09 96       	adiw	r24, 0x09	; 9
    28f2:	fc 01       	movw	r30, r24
    28f4:	e2 0f       	add	r30, r18
    28f6:	f3 1f       	adc	r31, r19
    28f8:	80 81       	ld	r24, Z
    28fa:	80 5d       	subi	r24, 0xD0	; 208
    28fc:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	8a 83       	std	Y+2, r24	; 0x02
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	8a 30       	cpi	r24, 0x0A	; 10
    290a:	70 f3       	brcs	.-36     	; 0x28e8 <LCD_voidWriteNumber+0xce>
		LCD_voidSendChar(Arr[Local_Counter2]+48);
	}



}
    290c:	66 96       	adiw	r28, 0x16	; 22
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharNo,u8 Copy_u8X,u8 Copy_u8Y,u8 * Copy_PSpecialChar)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	28 97       	sbiw	r28, 0x08	; 8
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	8a 83       	std	Y+2, r24	; 0x02
    2934:	6b 83       	std	Y+3, r22	; 0x03
    2936:	4c 83       	std	Y+4, r20	; 0x04
    2938:	3e 83       	std	Y+6, r19	; 0x06
    293a:	2d 83       	std	Y+5, r18	; 0x05

	switch(Copy_u8CharNo)
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	38 87       	std	Y+8, r19	; 0x08
    2944:	2f 83       	std	Y+7, r18	; 0x07
    2946:	8f 81       	ldd	r24, Y+7	; 0x07
    2948:	98 85       	ldd	r25, Y+8	; 0x08
    294a:	83 30       	cpi	r24, 0x03	; 3
    294c:	91 05       	cpc	r25, r1
    294e:	a9 f1       	breq	.+106    	; 0x29ba <LCD_voidSendSpecialChar+0x9c>
    2950:	2f 81       	ldd	r18, Y+7	; 0x07
    2952:	38 85       	ldd	r19, Y+8	; 0x08
    2954:	24 30       	cpi	r18, 0x04	; 4
    2956:	31 05       	cpc	r19, r1
    2958:	7c f4       	brge	.+30     	; 0x2978 <LCD_voidSendSpecialChar+0x5a>
    295a:	8f 81       	ldd	r24, Y+7	; 0x07
    295c:	98 85       	ldd	r25, Y+8	; 0x08
    295e:	81 30       	cpi	r24, 0x01	; 1
    2960:	91 05       	cpc	r25, r1
    2962:	19 f1       	breq	.+70     	; 0x29aa <LCD_voidSendSpecialChar+0x8c>
    2964:	2f 81       	ldd	r18, Y+7	; 0x07
    2966:	38 85       	ldd	r19, Y+8	; 0x08
    2968:	22 30       	cpi	r18, 0x02	; 2
    296a:	31 05       	cpc	r19, r1
    296c:	14 f5       	brge	.+68     	; 0x29b2 <LCD_voidSendSpecialChar+0x94>
    296e:	8f 81       	ldd	r24, Y+7	; 0x07
    2970:	98 85       	ldd	r25, Y+8	; 0x08
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	b1 f0       	breq	.+44     	; 0x29a2 <LCD_voidSendSpecialChar+0x84>
    2976:	34 c0       	rjmp	.+104    	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>
    2978:	2f 81       	ldd	r18, Y+7	; 0x07
    297a:	38 85       	ldd	r19, Y+8	; 0x08
    297c:	25 30       	cpi	r18, 0x05	; 5
    297e:	31 05       	cpc	r19, r1
    2980:	21 f1       	breq	.+72     	; 0x29ca <LCD_voidSendSpecialChar+0xac>
    2982:	8f 81       	ldd	r24, Y+7	; 0x07
    2984:	98 85       	ldd	r25, Y+8	; 0x08
    2986:	85 30       	cpi	r24, 0x05	; 5
    2988:	91 05       	cpc	r25, r1
    298a:	dc f0       	brlt	.+54     	; 0x29c2 <LCD_voidSendSpecialChar+0xa4>
    298c:	2f 81       	ldd	r18, Y+7	; 0x07
    298e:	38 85       	ldd	r19, Y+8	; 0x08
    2990:	26 30       	cpi	r18, 0x06	; 6
    2992:	31 05       	cpc	r19, r1
    2994:	f1 f0       	breq	.+60     	; 0x29d2 <LCD_voidSendSpecialChar+0xb4>
    2996:	8f 81       	ldd	r24, Y+7	; 0x07
    2998:	98 85       	ldd	r25, Y+8	; 0x08
    299a:	87 30       	cpi	r24, 0x07	; 7
    299c:	91 05       	cpc	r25, r1
    299e:	e9 f0       	breq	.+58     	; 0x29da <LCD_voidSendSpecialChar+0xbc>
    29a0:	1f c0       	rjmp	.+62     	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>
	{
	case 0:
		LCD_voidSendCmnd(0b01000000);
    29a2:	80 e4       	ldi	r24, 0x40	; 64
    29a4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    29a8:	1b c0       	rjmp	.+54     	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>

		break;
	case 1:
	    LCD_voidSendCmnd(0b01001000);
    29aa:	88 e4       	ldi	r24, 0x48	; 72
    29ac:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    29b0:	17 c0       	rjmp	.+46     	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 2:
	    LCD_voidSendCmnd(0b01010000);
    29b2:	80 e5       	ldi	r24, 0x50	; 80
    29b4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    29b8:	13 c0       	rjmp	.+38     	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 3:
	    LCD_voidSendCmnd(0b01011000);
    29ba:	88 e5       	ldi	r24, 0x58	; 88
    29bc:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 4:
	    LCD_voidSendCmnd(0b01100000);
    29c2:	80 e6       	ldi	r24, 0x60	; 96
    29c4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    29c8:	0b c0       	rjmp	.+22     	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 5:
	    LCD_voidSendCmnd(0b01101000);
    29ca:	88 e6       	ldi	r24, 0x68	; 104
    29cc:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    29d0:	07 c0       	rjmp	.+14     	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 6:
	    LCD_voidSendCmnd(0b01110000);
    29d2:	80 e7       	ldi	r24, 0x70	; 112
    29d4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 7:
	    LCD_voidSendCmnd(0b01111000);
    29da:	88 e7       	ldi	r24, 0x78	; 120
    29dc:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    29e0:	19 82       	std	Y+1, r1	; 0x01
    29e2:	0e c0       	rjmp	.+28     	; 0x2a00 <LCD_voidSendSpecialChar+0xe2>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	fc 01       	movw	r30, r24
    29f0:	e2 0f       	add	r30, r18
    29f2:	f3 1f       	adc	r31, r19
    29f4:	80 81       	ld	r24, Z
    29f6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
	    LCD_voidSendCmnd(0b01111000);
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	8f 5f       	subi	r24, 0xFF	; 255
    29fe:	89 83       	std	Y+1, r24	; 0x01
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	88 30       	cpi	r24, 0x08	; 8
    2a04:	78 f3       	brcs	.-34     	; 0x29e4 <LCD_voidSendSpecialChar+0xc6>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
	 }

	 LCD_u8_GoTo_XY( Copy_u8X, Copy_u8Y);
    2a06:	8b 81       	ldd	r24, Y+3	; 0x03
    2a08:	6c 81       	ldd	r22, Y+4	; 0x04
    2a0a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_u8_GoTo_XY>
	 LCD_voidSendChar(Copy_u8CharNo);
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>


}
    2a14:	28 96       	adiw	r28, 0x08	; 8
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <LCD_voidShiftDispRight>:

void LCD_voidShiftDispRight(void)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011100);
    2a2e:	8c e1       	ldi	r24, 0x1C	; 28
    2a30:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <LCD_voidShiftDispLeft>:
void LCD_voidShiftDispLeft(void)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011000);
    2a42:	88 e1       	ldi	r24, 0x18	; 24
    2a44:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendCmnd>
}
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <main>:
/* HAL */
#include "LCD_interface.h"
#include "KPD_interface.h"

int main(void)
{
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	c3 55       	subi	r28, 0x53	; 83
    2a5c:	d0 40       	sbci	r29, 0x00	; 0
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8Key,Operator = 0,counter=0 , counter2=0;
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e0 5b       	subi	r30, 0xB0	; 176
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	10 82       	st	Z, r1
    2a70:	fe 01       	movw	r30, r28
    2a72:	e1 5b       	subi	r30, 0xB1	; 177
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	10 82       	st	Z, r1
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e2 5b       	subi	r30, 0xB2	; 178
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	10 82       	st	Z, r1
    u16 password = 2580 ,value , Num1=0;
    2a80:	fe 01       	movw	r30, r28
    2a82:	e4 5b       	subi	r30, 0xB4	; 180
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	84 e1       	ldi	r24, 0x14	; 20
    2a88:	9a e0       	ldi	r25, 0x0A	; 10
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e8 5b       	subi	r30, 0xB8	; 184
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	11 82       	std	Z+1, r1	; 0x01
    2a96:	10 82       	st	Z, r1
	DIO_u8Init();
    2a98:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_u8Init>
    LCD_voidInit();
    2a9c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_voidInit>
    LCD_voidWriteString("Enter Passcode :");
    2aa0:	80 e6       	ldi	r24, 0x60	; 96
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_voidWriteString>
    LCD_u8_GoTo_XY(1,4);
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	64 e0       	ldi	r22, 0x04	; 4
    2aac:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_u8_GoTo_XY>

    while(1)
    {

       KPD_u8GetKey(&Local_u8Key);
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	8f 5a       	subi	r24, 0xAF	; 175
    2ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab6:	0e 94 0d 0b 	call	0x161a	; 0x161a <KPD_u8GetKey>
       if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    2aba:	fe 01       	movw	r30, r28
    2abc:	ef 5a       	subi	r30, 0xAF	; 175
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ac4:	a9 f3       	breq	.-22     	; 0x2ab0 <main+0x62>
       {
    	   if(counter<4)
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e1 5b       	subi	r30, 0xB1	; 177
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	84 30       	cpi	r24, 0x04	; 4
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <main+0x86>
    2ad2:	f5 c1       	rjmp	.+1002   	; 0x2ebe <main+0x470>
    	   {
    		   counter++;
    2ad4:	de 01       	movw	r26, r28
    2ad6:	a1 5b       	subi	r26, 0xB1	; 177
    2ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	e1 5b       	subi	r30, 0xB1	; 177
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8f 5f       	subi	r24, 0xFF	; 255
    2ae4:	8c 93       	st	X, r24

    	   switch(Local_u8Key)
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ef 5a       	subi	r30, 0xAF	; 175
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 81       	ld	r24, Z
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	64 96       	adiw	r28, 0x14	; 20
    2af4:	3f af       	std	Y+63, r19	; 0x3f
    2af6:	2e af       	std	Y+62, r18	; 0x3e
    2af8:	64 97       	sbiw	r28, 0x14	; 20
    2afa:	64 96       	adiw	r28, 0x14	; 20
    2afc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2afe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b00:	64 97       	sbiw	r28, 0x14	; 20
    2b02:	84 33       	cpi	r24, 0x34	; 52
    2b04:	91 05       	cpc	r25, r1
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <main+0xbc>
    2b08:	f7 c0       	rjmp	.+494    	; 0x2cf8 <main+0x2aa>
    2b0a:	64 96       	adiw	r28, 0x14	; 20
    2b0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b10:	64 97       	sbiw	r28, 0x14	; 20
    2b12:	e5 33       	cpi	r30, 0x35	; 53
    2b14:	f1 05       	cpc	r31, r1
    2b16:	4c f5       	brge	.+82     	; 0x2b6a <main+0x11c>
    2b18:	64 96       	adiw	r28, 0x14	; 20
    2b1a:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b1c:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b1e:	64 97       	sbiw	r28, 0x14	; 20
    2b20:	21 33       	cpi	r18, 0x31	; 49
    2b22:	31 05       	cpc	r19, r1
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <main+0xda>
    2b26:	76 c0       	rjmp	.+236    	; 0x2c14 <main+0x1c6>
    2b28:	64 96       	adiw	r28, 0x14	; 20
    2b2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b2e:	64 97       	sbiw	r28, 0x14	; 20
    2b30:	82 33       	cpi	r24, 0x32	; 50
    2b32:	91 05       	cpc	r25, r1
    2b34:	4c f4       	brge	.+18     	; 0x2b48 <main+0xfa>
    2b36:	64 96       	adiw	r28, 0x14	; 20
    2b38:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b3a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b3c:	64 97       	sbiw	r28, 0x14	; 20
    2b3e:	e0 33       	cpi	r30, 0x30	; 48
    2b40:	f1 05       	cpc	r31, r1
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <main+0xf8>
    2b44:	43 c0       	rjmp	.+134    	; 0x2bcc <main+0x17e>
    2b46:	bb c1       	rjmp	.+886    	; 0x2ebe <main+0x470>
    2b48:	64 96       	adiw	r28, 0x14	; 20
    2b4a:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b4c:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b4e:	64 97       	sbiw	r28, 0x14	; 20
    2b50:	22 33       	cpi	r18, 0x32	; 50
    2b52:	31 05       	cpc	r19, r1
    2b54:	09 f4       	brne	.+2      	; 0x2b58 <main+0x10a>
    2b56:	84 c0       	rjmp	.+264    	; 0x2c60 <main+0x212>
    2b58:	64 96       	adiw	r28, 0x14	; 20
    2b5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b5e:	64 97       	sbiw	r28, 0x14	; 20
    2b60:	83 33       	cpi	r24, 0x33	; 51
    2b62:	91 05       	cpc	r25, r1
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <main+0x11a>
    2b66:	a2 c0       	rjmp	.+324    	; 0x2cac <main+0x25e>
    2b68:	aa c1       	rjmp	.+852    	; 0x2ebe <main+0x470>
    2b6a:	64 96       	adiw	r28, 0x14	; 20
    2b6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b70:	64 97       	sbiw	r28, 0x14	; 20
    2b72:	e7 33       	cpi	r30, 0x37	; 55
    2b74:	f1 05       	cpc	r31, r1
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <main+0x12c>
    2b78:	31 c1       	rjmp	.+610    	; 0x2ddc <main+0x38e>
    2b7a:	64 96       	adiw	r28, 0x14	; 20
    2b7c:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b7e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b80:	64 97       	sbiw	r28, 0x14	; 20
    2b82:	28 33       	cpi	r18, 0x38	; 56
    2b84:	31 05       	cpc	r19, r1
    2b86:	8c f4       	brge	.+34     	; 0x2baa <main+0x15c>
    2b88:	64 96       	adiw	r28, 0x14	; 20
    2b8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b8e:	64 97       	sbiw	r28, 0x14	; 20
    2b90:	85 33       	cpi	r24, 0x35	; 53
    2b92:	91 05       	cpc	r25, r1
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <main+0x14a>
    2b96:	d6 c0       	rjmp	.+428    	; 0x2d44 <main+0x2f6>
    2b98:	64 96       	adiw	r28, 0x14	; 20
    2b9a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b9e:	64 97       	sbiw	r28, 0x14	; 20
    2ba0:	e6 33       	cpi	r30, 0x36	; 54
    2ba2:	f1 05       	cpc	r31, r1
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <main+0x15a>
    2ba6:	f4 c0       	rjmp	.+488    	; 0x2d90 <main+0x342>
    2ba8:	8a c1       	rjmp	.+788    	; 0x2ebe <main+0x470>
    2baa:	64 96       	adiw	r28, 0x14	; 20
    2bac:	2e ad       	ldd	r18, Y+62	; 0x3e
    2bae:	3f ad       	ldd	r19, Y+63	; 0x3f
    2bb0:	64 97       	sbiw	r28, 0x14	; 20
    2bb2:	28 33       	cpi	r18, 0x38	; 56
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <main+0x16c>
    2bb8:	37 c1       	rjmp	.+622    	; 0x2e28 <main+0x3da>
    2bba:	64 96       	adiw	r28, 0x14	; 20
    2bbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bc0:	64 97       	sbiw	r28, 0x14	; 20
    2bc2:	89 33       	cpi	r24, 0x39	; 57
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <main+0x17c>
    2bc8:	55 c1       	rjmp	.+682    	; 0x2e74 <main+0x426>
    2bca:	79 c1       	rjmp	.+754    	; 0x2ebe <main+0x470>
    	   {
    	   case '0':
    		   value =0;
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e6 5b       	subi	r30, 0xB6	; 182
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	11 82       	std	Z+1, r1	; 0x01
    2bd4:	10 82       	st	Z, r1
    		   Num1 = (Num1*10) +value ;
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e8 5b       	subi	r30, 0xB8	; 184
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	9c 01       	movw	r18, r24
    2be2:	22 0f       	add	r18, r18
    2be4:	33 1f       	adc	r19, r19
    2be6:	c9 01       	movw	r24, r18
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	28 0f       	add	r18, r24
    2bf2:	39 1f       	adc	r19, r25
    2bf4:	de 01       	movw	r26, r28
    2bf6:	a8 5b       	subi	r26, 0xB8	; 184
    2bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e6 5b       	subi	r30, 0xB6	; 182
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	82 0f       	add	r24, r18
    2c06:	93 1f       	adc	r25, r19
    2c08:	8d 93       	st	X+, r24
    2c0a:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2c0c:	8a e2       	ldi	r24, 0x2A	; 42
    2c0e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2c12:	55 c1       	rjmp	.+682    	; 0x2ebe <main+0x470>
    		   break;
    	   case '1':
    		   value =1;
    2c14:	fe 01       	movw	r30, r28
    2c16:	e6 5b       	subi	r30, 0xB6	; 182
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	80 83       	st	Z, r24
    		   Num1 = (Num1*10) +value ;
    2c22:	fe 01       	movw	r30, r28
    2c24:	e8 5b       	subi	r30, 0xB8	; 184
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	91 81       	ldd	r25, Z+1	; 0x01
    2c2c:	9c 01       	movw	r18, r24
    2c2e:	22 0f       	add	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	c9 01       	movw	r24, r18
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	28 0f       	add	r18, r24
    2c3e:	39 1f       	adc	r19, r25
    2c40:	de 01       	movw	r26, r28
    2c42:	a8 5b       	subi	r26, 0xB8	; 184
    2c44:	bf 4f       	sbci	r27, 0xFF	; 255
    2c46:	fe 01       	movw	r30, r28
    2c48:	e6 5b       	subi	r30, 0xB6	; 182
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	80 81       	ld	r24, Z
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	82 0f       	add	r24, r18
    2c52:	93 1f       	adc	r25, r19
    2c54:	8d 93       	st	X+, r24
    2c56:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2c58:	8a e2       	ldi	r24, 0x2A	; 42
    2c5a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2c5e:	2f c1       	rjmp	.+606    	; 0x2ebe <main+0x470>
    		   break;
    	   case '2':
    	       value =2;
    2c60:	fe 01       	movw	r30, r28
    2c62:	e6 5b       	subi	r30, 0xB6	; 182
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	82 e0       	ldi	r24, 0x02	; 2
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    	       Num1 = (Num1*10) +value ;
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e8 5b       	subi	r30, 0xB8	; 184
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	9c 01       	movw	r18, r24
    2c7a:	22 0f       	add	r18, r18
    2c7c:	33 1f       	adc	r19, r19
    2c7e:	c9 01       	movw	r24, r18
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	28 0f       	add	r18, r24
    2c8a:	39 1f       	adc	r19, r25
    2c8c:	de 01       	movw	r26, r28
    2c8e:	a8 5b       	subi	r26, 0xB8	; 184
    2c90:	bf 4f       	sbci	r27, 0xFF	; 255
    2c92:	fe 01       	movw	r30, r28
    2c94:	e6 5b       	subi	r30, 0xB6	; 182
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	82 0f       	add	r24, r18
    2c9e:	93 1f       	adc	r25, r19
    2ca0:	8d 93       	st	X+, r24
    2ca2:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2ca4:	8a e2       	ldi	r24, 0x2A	; 42
    2ca6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2caa:	09 c1       	rjmp	.+530    	; 0x2ebe <main+0x470>
    	       break;
    	   case '3':
    	       value =3;
    2cac:	fe 01       	movw	r30, r28
    2cae:	e6 5b       	subi	r30, 0xB6	; 182
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24
    	       Num1 = (Num1*10) +value ;
    2cba:	fe 01       	movw	r30, r28
    2cbc:	e8 5b       	subi	r30, 0xB8	; 184
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	80 81       	ld	r24, Z
    2cc2:	91 81       	ldd	r25, Z+1	; 0x01
    2cc4:	9c 01       	movw	r18, r24
    2cc6:	22 0f       	add	r18, r18
    2cc8:	33 1f       	adc	r19, r19
    2cca:	c9 01       	movw	r24, r18
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	28 0f       	add	r18, r24
    2cd6:	39 1f       	adc	r19, r25
    2cd8:	de 01       	movw	r26, r28
    2cda:	a8 5b       	subi	r26, 0xB8	; 184
    2cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e6 5b       	subi	r30, 0xB6	; 182
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	82 0f       	add	r24, r18
    2cea:	93 1f       	adc	r25, r19
    2cec:	8d 93       	st	X+, r24
    2cee:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2cf0:	8a e2       	ldi	r24, 0x2A	; 42
    2cf2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2cf6:	e3 c0       	rjmp	.+454    	; 0x2ebe <main+0x470>
    	       break;
    	   case '4':
    	       value =4;
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	e6 5b       	subi	r30, 0xB6	; 182
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	84 e0       	ldi	r24, 0x04	; 4
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	80 83       	st	Z, r24
    	       Num1 = (Num1*10) +value ;
    2d06:	fe 01       	movw	r30, r28
    2d08:	e8 5b       	subi	r30, 0xB8	; 184
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	80 81       	ld	r24, Z
    2d0e:	91 81       	ldd	r25, Z+1	; 0x01
    2d10:	9c 01       	movw	r18, r24
    2d12:	22 0f       	add	r18, r18
    2d14:	33 1f       	adc	r19, r19
    2d16:	c9 01       	movw	r24, r18
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	28 0f       	add	r18, r24
    2d22:	39 1f       	adc	r19, r25
    2d24:	de 01       	movw	r26, r28
    2d26:	a8 5b       	subi	r26, 0xB8	; 184
    2d28:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e6 5b       	subi	r30, 0xB6	; 182
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	82 0f       	add	r24, r18
    2d36:	93 1f       	adc	r25, r19
    2d38:	8d 93       	st	X+, r24
    2d3a:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2d3c:	8a e2       	ldi	r24, 0x2A	; 42
    2d3e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2d42:	bd c0       	rjmp	.+378    	; 0x2ebe <main+0x470>
    	       break;
    	   case '5':
    	       value =5;
    2d44:	fe 01       	movw	r30, r28
    2d46:	e6 5b       	subi	r30, 0xB6	; 182
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	85 e0       	ldi	r24, 0x05	; 5
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	80 83       	st	Z, r24
    	       Num1 = (Num1*10) +value ;
    2d52:	fe 01       	movw	r30, r28
    2d54:	e8 5b       	subi	r30, 0xB8	; 184
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	9c 01       	movw	r18, r24
    2d5e:	22 0f       	add	r18, r18
    2d60:	33 1f       	adc	r19, r19
    2d62:	c9 01       	movw	r24, r18
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	88 0f       	add	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	28 0f       	add	r18, r24
    2d6e:	39 1f       	adc	r19, r25
    2d70:	de 01       	movw	r26, r28
    2d72:	a8 5b       	subi	r26, 0xB8	; 184
    2d74:	bf 4f       	sbci	r27, 0xFF	; 255
    2d76:	fe 01       	movw	r30, r28
    2d78:	e6 5b       	subi	r30, 0xB6	; 182
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	82 0f       	add	r24, r18
    2d82:	93 1f       	adc	r25, r19
    2d84:	8d 93       	st	X+, r24
    2d86:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2d88:	8a e2       	ldi	r24, 0x2A	; 42
    2d8a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2d8e:	97 c0       	rjmp	.+302    	; 0x2ebe <main+0x470>
    	       break;
    	   case '6':
    	       value =6;
    2d90:	fe 01       	movw	r30, r28
    2d92:	e6 5b       	subi	r30, 0xB6	; 182
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	86 e0       	ldi	r24, 0x06	; 6
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	91 83       	std	Z+1, r25	; 0x01
    2d9c:	80 83       	st	Z, r24
    	       Num1 = (Num1*10) +value ;
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e8 5b       	subi	r30, 0xB8	; 184
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	9c 01       	movw	r18, r24
    2daa:	22 0f       	add	r18, r18
    2dac:	33 1f       	adc	r19, r19
    2dae:	c9 01       	movw	r24, r18
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	88 0f       	add	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	28 0f       	add	r18, r24
    2dba:	39 1f       	adc	r19, r25
    2dbc:	de 01       	movw	r26, r28
    2dbe:	a8 5b       	subi	r26, 0xB8	; 184
    2dc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e6 5b       	subi	r30, 0xB6	; 182
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	82 0f       	add	r24, r18
    2dce:	93 1f       	adc	r25, r19
    2dd0:	8d 93       	st	X+, r24
    2dd2:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2dd4:	8a e2       	ldi	r24, 0x2A	; 42
    2dd6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2dda:	71 c0       	rjmp	.+226    	; 0x2ebe <main+0x470>
    	       break;
    	   case '7':
    	       value =7;
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e6 5b       	subi	r30, 0xB6	; 182
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	87 e0       	ldi	r24, 0x07	; 7
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24
    	       Num1 = (Num1*10) +value ;
    2dea:	fe 01       	movw	r30, r28
    2dec:	e8 5b       	subi	r30, 0xB8	; 184
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 81       	ld	r24, Z
    2df2:	91 81       	ldd	r25, Z+1	; 0x01
    2df4:	9c 01       	movw	r18, r24
    2df6:	22 0f       	add	r18, r18
    2df8:	33 1f       	adc	r19, r19
    2dfa:	c9 01       	movw	r24, r18
    2dfc:	88 0f       	add	r24, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	28 0f       	add	r18, r24
    2e06:	39 1f       	adc	r19, r25
    2e08:	de 01       	movw	r26, r28
    2e0a:	a8 5b       	subi	r26, 0xB8	; 184
    2e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e6 5b       	subi	r30, 0xB6	; 182
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	91 81       	ldd	r25, Z+1	; 0x01
    2e18:	82 0f       	add	r24, r18
    2e1a:	93 1f       	adc	r25, r19
    2e1c:	8d 93       	st	X+, r24
    2e1e:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2e20:	8a e2       	ldi	r24, 0x2A	; 42
    2e22:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2e26:	4b c0       	rjmp	.+150    	; 0x2ebe <main+0x470>
    	        break;
       	   case '8':
        	   value =8;
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e6 5b       	subi	r30, 0xB6	; 182
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	88 e0       	ldi	r24, 0x08	; 8
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
        	   Num1 = (Num1*10) +value ;
    2e36:	fe 01       	movw	r30, r28
    2e38:	e8 5b       	subi	r30, 0xB8	; 184
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 81       	ld	r24, Z
    2e3e:	91 81       	ldd	r25, Z+1	; 0x01
    2e40:	9c 01       	movw	r18, r24
    2e42:	22 0f       	add	r18, r18
    2e44:	33 1f       	adc	r19, r19
    2e46:	c9 01       	movw	r24, r18
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	28 0f       	add	r18, r24
    2e52:	39 1f       	adc	r19, r25
    2e54:	de 01       	movw	r26, r28
    2e56:	a8 5b       	subi	r26, 0xB8	; 184
    2e58:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e6 5b       	subi	r30, 0xB6	; 182
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	82 0f       	add	r24, r18
    2e66:	93 1f       	adc	r25, r19
    2e68:	8d 93       	st	X+, r24
    2e6a:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2e6c:	8a e2       	ldi	r24, 0x2A	; 42
    2e6e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
    2e72:	25 c0       	rjmp	.+74     	; 0x2ebe <main+0x470>
        	    break;
           case '9':
        	   value =9;
    2e74:	fe 01       	movw	r30, r28
    2e76:	e6 5b       	subi	r30, 0xB6	; 182
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	89 e0       	ldi	r24, 0x09	; 9
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	80 83       	st	Z, r24
        	   Num1 = (Num1*10) +value ;
    2e82:	fe 01       	movw	r30, r28
    2e84:	e8 5b       	subi	r30, 0xB8	; 184
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	80 81       	ld	r24, Z
    2e8a:	91 81       	ldd	r25, Z+1	; 0x01
    2e8c:	9c 01       	movw	r18, r24
    2e8e:	22 0f       	add	r18, r18
    2e90:	33 1f       	adc	r19, r19
    2e92:	c9 01       	movw	r24, r18
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	28 0f       	add	r18, r24
    2e9e:	39 1f       	adc	r19, r25
    2ea0:	de 01       	movw	r26, r28
    2ea2:	a8 5b       	subi	r26, 0xB8	; 184
    2ea4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e6 5b       	subi	r30, 0xB6	; 182
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	82 0f       	add	r24, r18
    2eb2:	93 1f       	adc	r25, r19
    2eb4:	8d 93       	st	X+, r24
    2eb6:	9c 93       	st	X, r25
    		   LCD_voidSendChar('*');
    2eb8:	8a e2       	ldi	r24, 0x2A	; 42
    2eba:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_voidSendChar>
        	    break;
    	   }

    	   }
    	   if(counter>3)
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e1 5b       	subi	r30, 0xB1	; 177
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	84 30       	cpi	r24, 0x04	; 4
    2ec8:	08 f4       	brcc	.+2      	; 0x2ecc <main+0x47e>
    2eca:	f2 cd       	rjmp	.-1052   	; 0x2ab0 <main+0x62>
    	   {
    		   if(Num1 == password)
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e8 5b       	subi	r30, 0xB8	; 184
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	de 01       	movw	r26, r28
    2ed4:	a4 5b       	subi	r26, 0xB4	; 180
    2ed6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed8:	20 81       	ld	r18, Z
    2eda:	31 81       	ldd	r19, Z+1	; 0x01
    2edc:	8d 91       	ld	r24, X+
    2ede:	9c 91       	ld	r25, X
    2ee0:	11 97       	sbiw	r26, 0x01	; 1
    2ee2:	28 17       	cp	r18, r24
    2ee4:	39 07       	cpc	r19, r25
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <main+0x49c>
    2ee8:	a5 c0       	rjmp	.+330    	; 0x3034 <main+0x5e6>
    2eea:	fe 01       	movw	r30, r28
    2eec:	ed 5b       	subi	r30, 0xBD	; 189
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	aa e7       	ldi	r26, 0x7A	; 122
    2ef6:	b4 e4       	ldi	r27, 0x44	; 68
    2ef8:	80 83       	st	Z, r24
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	a2 83       	std	Z+2, r26	; 0x02
    2efe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f00:	8e 01       	movw	r16, r28
    2f02:	01 5c       	subi	r16, 0xC1	; 193
    2f04:	1f 4f       	sbci	r17, 0xFF	; 255
    2f06:	fe 01       	movw	r30, r28
    2f08:	ed 5b       	subi	r30, 0xBD	; 189
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	60 81       	ld	r22, Z
    2f0e:	71 81       	ldd	r23, Z+1	; 0x01
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	4a ef       	ldi	r20, 0xFA	; 250
    2f1a:	54 e4       	ldi	r21, 0x44	; 68
    2f1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	f8 01       	movw	r30, r16
    2f26:	80 83       	st	Z, r24
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	a2 83       	std	Z+2, r26	; 0x02
    2f2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ff 96       	adiw	r30, 0x3f	; 63
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	40 e8       	ldi	r20, 0x80	; 128
    2f40:	5f e3       	ldi	r21, 0x3F	; 63
    2f42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f46:	88 23       	and	r24, r24
    2f48:	2c f4       	brge	.+10     	; 0x2f54 <main+0x506>
		__ticks = 1;
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	9e af       	std	Y+62, r25	; 0x3e
    2f50:	8d af       	std	Y+61, r24	; 0x3d
    2f52:	46 c0       	rjmp	.+140    	; 0x2fe0 <main+0x592>
	else if (__tmp > 65535)
    2f54:	fe 01       	movw	r30, r28
    2f56:	ff 96       	adiw	r30, 0x3f	; 63
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	3f ef       	ldi	r19, 0xFF	; 255
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	57 e4       	ldi	r21, 0x47	; 71
    2f68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f6c:	18 16       	cp	r1, r24
    2f6e:	64 f5       	brge	.+88     	; 0x2fc8 <main+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f70:	fe 01       	movw	r30, r28
    2f72:	ed 5b       	subi	r30, 0xBD	; 189
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	60 81       	ld	r22, Z
    2f78:	71 81       	ldd	r23, Z+1	; 0x01
    2f7a:	82 81       	ldd	r24, Z+2	; 0x02
    2f7c:	93 81       	ldd	r25, Z+3	; 0x03
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e2       	ldi	r20, 0x20	; 32
    2f84:	51 e4       	ldi	r21, 0x41	; 65
    2f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	9e af       	std	Y+62, r25	; 0x3e
    2f9c:	8d af       	std	Y+61, r24	; 0x3d
    2f9e:	0f c0       	rjmp	.+30     	; 0x2fbe <main+0x570>
    2fa0:	88 ec       	ldi	r24, 0xC8	; 200
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	9c af       	std	Y+60, r25	; 0x3c
    2fa6:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2faa:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <main+0x55e>
    2fb0:	9c af       	std	Y+60, r25	; 0x3c
    2fb2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	9e af       	std	Y+62, r25	; 0x3e
    2fbc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fc2:	00 97       	sbiw	r24, 0x00	; 0
    2fc4:	69 f7       	brne	.-38     	; 0x2fa0 <main+0x552>
    2fc6:	16 c0       	rjmp	.+44     	; 0x2ff4 <main+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ff 96       	adiw	r30, 0x3f	; 63
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9e af       	std	Y+62, r25	; 0x3e
    2fde:	8d af       	std	Y+61, r24	; 0x3d
    2fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fe4:	9a af       	std	Y+58, r25	; 0x3a
    2fe6:	89 af       	std	Y+57, r24	; 0x39
    2fe8:	89 ad       	ldd	r24, Y+57	; 0x39
    2fea:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <main+0x59e>
    2ff0:	9a af       	std	Y+58, r25	; 0x3a
    2ff2:	89 af       	std	Y+57, r24	; 0x39
    		   {
    		   _delay_ms(1000);
			   DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_LOW);
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	66 e0       	ldi	r22, 0x06	; 6
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN7,DIO_u8_HIGH);
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	67 e0       	ldi	r22, 0x07	; 7
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    		   LCD_voidClear();
    3008:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_voidClear>
    		   LCD_voidCursorBlinkerOff();
    300c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <LCD_voidCursorBlinkerOff>
    		   LCD_voidWriteString(" Welcome Mohamed");
    3010:	81 e7       	ldi	r24, 0x71	; 113
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_voidWriteString>



    }

	return 0;
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
}
    301c:	cd 5a       	subi	r28, 0xAD	; 173
    301e:	df 4f       	sbci	r29, 0xFF	; 255
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	1f 91       	pop	r17
    3030:	0f 91       	pop	r16
    3032:	08 95       	ret
    		   LCD_voidWriteString(" Welcome Mohamed");
    		   break;
    		   }
    		   else
    		   {
    			   DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN7,DIO_u8_LOW);
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	67 e0       	ldi	r22, 0x07	; 7
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    			   DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_HIGH);
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	66 e0       	ldi	r22, 0x06	; 6
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    			   if(counter2 < 2)
    3048:	fe 01       	movw	r30, r28
    304a:	e2 5b       	subi	r30, 0xB2	; 178
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 81       	ld	r24, Z
    3050:	82 30       	cpi	r24, 0x02	; 2
    3052:	08 f0       	brcs	.+2      	; 0x3056 <main+0x608>
    3054:	8f c0       	rjmp	.+286    	; 0x3174 <main+0x726>
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	aa e7       	ldi	r26, 0x7A	; 122
    305c:	b4 e4       	ldi	r27, 0x44	; 68
    305e:	8d ab       	std	Y+53, r24	; 0x35
    3060:	9e ab       	std	Y+54, r25	; 0x36
    3062:	af ab       	std	Y+55, r26	; 0x37
    3064:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3066:	6d a9       	ldd	r22, Y+53	; 0x35
    3068:	7e a9       	ldd	r23, Y+54	; 0x36
    306a:	8f a9       	ldd	r24, Y+55	; 0x37
    306c:	98 ad       	ldd	r25, Y+56	; 0x38
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	4a ef       	ldi	r20, 0xFA	; 250
    3074:	54 e4       	ldi	r21, 0x44	; 68
    3076:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	89 ab       	std	Y+49, r24	; 0x31
    3080:	9a ab       	std	Y+50, r25	; 0x32
    3082:	ab ab       	std	Y+51, r26	; 0x33
    3084:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3086:	69 a9       	ldd	r22, Y+49	; 0x31
    3088:	7a a9       	ldd	r23, Y+50	; 0x32
    308a:	8b a9       	ldd	r24, Y+51	; 0x33
    308c:	9c a9       	ldd	r25, Y+52	; 0x34
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e8       	ldi	r20, 0x80	; 128
    3094:	5f e3       	ldi	r21, 0x3F	; 63
    3096:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    309a:	88 23       	and	r24, r24
    309c:	2c f4       	brge	.+10     	; 0x30a8 <main+0x65a>
		__ticks = 1;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	98 ab       	std	Y+48, r25	; 0x30
    30a4:	8f a7       	std	Y+47, r24	; 0x2f
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <main+0x6d8>
	else if (__tmp > 65535)
    30a8:	69 a9       	ldd	r22, Y+49	; 0x31
    30aa:	7a a9       	ldd	r23, Y+50	; 0x32
    30ac:	8b a9       	ldd	r24, Y+51	; 0x33
    30ae:	9c a9       	ldd	r25, Y+52	; 0x34
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	3f ef       	ldi	r19, 0xFF	; 255
    30b4:	4f e7       	ldi	r20, 0x7F	; 127
    30b6:	57 e4       	ldi	r21, 0x47	; 71
    30b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30bc:	18 16       	cp	r1, r24
    30be:	4c f5       	brge	.+82     	; 0x3112 <main+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c0:	6d a9       	ldd	r22, Y+53	; 0x35
    30c2:	7e a9       	ldd	r23, Y+54	; 0x36
    30c4:	8f a9       	ldd	r24, Y+55	; 0x37
    30c6:	98 ad       	ldd	r25, Y+56	; 0x38
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e2       	ldi	r20, 0x20	; 32
    30ce:	51 e4       	ldi	r21, 0x41	; 65
    30d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	98 ab       	std	Y+48, r25	; 0x30
    30e6:	8f a7       	std	Y+47, r24	; 0x2f
    30e8:	0f c0       	rjmp	.+30     	; 0x3108 <main+0x6ba>
    30ea:	88 ec       	ldi	r24, 0xC8	; 200
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	9e a7       	std	Y+46, r25	; 0x2e
    30f0:	8d a7       	std	Y+45, r24	; 0x2d
    30f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    30f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <main+0x6a8>
    30fa:	9e a7       	std	Y+46, r25	; 0x2e
    30fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3100:	98 a9       	ldd	r25, Y+48	; 0x30
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	98 ab       	std	Y+48, r25	; 0x30
    3106:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3108:	8f a5       	ldd	r24, Y+47	; 0x2f
    310a:	98 a9       	ldd	r25, Y+48	; 0x30
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	69 f7       	brne	.-38     	; 0x30ea <main+0x69c>
    3110:	14 c0       	rjmp	.+40     	; 0x313a <main+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3112:	69 a9       	ldd	r22, Y+49	; 0x31
    3114:	7a a9       	ldd	r23, Y+50	; 0x32
    3116:	8b a9       	ldd	r24, Y+51	; 0x33
    3118:	9c a9       	ldd	r25, Y+52	; 0x34
    311a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	98 ab       	std	Y+48, r25	; 0x30
    3124:	8f a7       	std	Y+47, r24	; 0x2f
    3126:	8f a5       	ldd	r24, Y+47	; 0x2f
    3128:	98 a9       	ldd	r25, Y+48	; 0x30
    312a:	9c a7       	std	Y+44, r25	; 0x2c
    312c:	8b a7       	std	Y+43, r24	; 0x2b
    312e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3130:	9c a5       	ldd	r25, Y+44	; 0x2c
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <main+0x6e4>
    3136:	9c a7       	std	Y+44, r25	; 0x2c
    3138:	8b a7       	std	Y+43, r24	; 0x2b
    			   {
    	    		 _delay_ms(1000);
    	    		 LCD_voidInit();
    313a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_voidInit>
    			     LCD_voidWriteString("  Try Again ");
    313e:	82 e8       	ldi	r24, 0x82	; 130
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_voidWriteString>
    			     counter = 0 ;
    3146:	fe 01       	movw	r30, r28
    3148:	e1 5b       	subi	r30, 0xB1	; 177
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	10 82       	st	Z, r1
    			     Num1=0;
    314e:	fe 01       	movw	r30, r28
    3150:	e8 5b       	subi	r30, 0xB8	; 184
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	11 82       	std	Z+1, r1	; 0x01
    3156:	10 82       	st	Z, r1
    			     counter2++;
    3158:	de 01       	movw	r26, r28
    315a:	a2 5b       	subi	r26, 0xB2	; 178
    315c:	bf 4f       	sbci	r27, 0xFF	; 255
    315e:	fe 01       	movw	r30, r28
    3160:	e2 5b       	subi	r30, 0xB2	; 178
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	80 81       	ld	r24, Z
    3166:	8f 5f       	subi	r24, 0xFF	; 255
    3168:	8c 93       	st	X, r24
    			     LCD_u8_GoTo_XY(1,4);
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	64 e0       	ldi	r22, 0x04	; 4
    316e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_u8_GoTo_XY>
    3172:	9e cc       	rjmp	.-1732   	; 0x2ab0 <main+0x62>
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	aa e7       	ldi	r26, 0x7A	; 122
    317a:	b4 e4       	ldi	r27, 0x44	; 68
    317c:	8f a3       	std	Y+39, r24	; 0x27
    317e:	98 a7       	std	Y+40, r25	; 0x28
    3180:	a9 a7       	std	Y+41, r26	; 0x29
    3182:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3184:	6f a1       	ldd	r22, Y+39	; 0x27
    3186:	78 a5       	ldd	r23, Y+40	; 0x28
    3188:	89 a5       	ldd	r24, Y+41	; 0x29
    318a:	9a a5       	ldd	r25, Y+42	; 0x2a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4a ef       	ldi	r20, 0xFA	; 250
    3192:	54 e4       	ldi	r21, 0x44	; 68
    3194:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	8b a3       	std	Y+35, r24	; 0x23
    319e:	9c a3       	std	Y+36, r25	; 0x24
    31a0:	ad a3       	std	Y+37, r26	; 0x25
    31a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31a4:	6b a1       	ldd	r22, Y+35	; 0x23
    31a6:	7c a1       	ldd	r23, Y+36	; 0x24
    31a8:	8d a1       	ldd	r24, Y+37	; 0x25
    31aa:	9e a1       	ldd	r25, Y+38	; 0x26
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e8       	ldi	r20, 0x80	; 128
    31b2:	5f e3       	ldi	r21, 0x3F	; 63
    31b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    31b8:	88 23       	and	r24, r24
    31ba:	2c f4       	brge	.+10     	; 0x31c6 <main+0x778>
		__ticks = 1;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9a a3       	std	Y+34, r25	; 0x22
    31c2:	89 a3       	std	Y+33, r24	; 0x21
    31c4:	3f c0       	rjmp	.+126    	; 0x3244 <main+0x7f6>
	else if (__tmp > 65535)
    31c6:	6b a1       	ldd	r22, Y+35	; 0x23
    31c8:	7c a1       	ldd	r23, Y+36	; 0x24
    31ca:	8d a1       	ldd	r24, Y+37	; 0x25
    31cc:	9e a1       	ldd	r25, Y+38	; 0x26
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	3f ef       	ldi	r19, 0xFF	; 255
    31d2:	4f e7       	ldi	r20, 0x7F	; 127
    31d4:	57 e4       	ldi	r21, 0x47	; 71
    31d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    31da:	18 16       	cp	r1, r24
    31dc:	4c f5       	brge	.+82     	; 0x3230 <main+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31de:	6f a1       	ldd	r22, Y+39	; 0x27
    31e0:	78 a5       	ldd	r23, Y+40	; 0x28
    31e2:	89 a5       	ldd	r24, Y+41	; 0x29
    31e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e2       	ldi	r20, 0x20	; 32
    31ec:	51 e4       	ldi	r21, 0x41	; 65
    31ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	9a a3       	std	Y+34, r25	; 0x22
    3204:	89 a3       	std	Y+33, r24	; 0x21
    3206:	0f c0       	rjmp	.+30     	; 0x3226 <main+0x7d8>
    3208:	88 ec       	ldi	r24, 0xC8	; 200
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	98 a3       	std	Y+32, r25	; 0x20
    320e:	8f 8f       	std	Y+31, r24	; 0x1f
    3210:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3212:	98 a1       	ldd	r25, Y+32	; 0x20
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <main+0x7c6>
    3218:	98 a3       	std	Y+32, r25	; 0x20
    321a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321c:	89 a1       	ldd	r24, Y+33	; 0x21
    321e:	9a a1       	ldd	r25, Y+34	; 0x22
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	9a a3       	std	Y+34, r25	; 0x22
    3224:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3226:	89 a1       	ldd	r24, Y+33	; 0x21
    3228:	9a a1       	ldd	r25, Y+34	; 0x22
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	69 f7       	brne	.-38     	; 0x3208 <main+0x7ba>
    322e:	14 c0       	rjmp	.+40     	; 0x3258 <main+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3230:	6b a1       	ldd	r22, Y+35	; 0x23
    3232:	7c a1       	ldd	r23, Y+36	; 0x24
    3234:	8d a1       	ldd	r24, Y+37	; 0x25
    3236:	9e a1       	ldd	r25, Y+38	; 0x26
    3238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	9a a3       	std	Y+34, r25	; 0x22
    3242:	89 a3       	std	Y+33, r24	; 0x21
    3244:	89 a1       	ldd	r24, Y+33	; 0x21
    3246:	9a a1       	ldd	r25, Y+34	; 0x22
    3248:	9e 8f       	std	Y+30, r25	; 0x1e
    324a:	8d 8f       	std	Y+29, r24	; 0x1d
    324c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    324e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <main+0x802>
    3254:	9e 8f       	std	Y+30, r25	; 0x1e
    3256:	8d 8f       	std	Y+29, r24	; 0x1d

    			   }
    			   else
    			   {
    				   _delay_ms(1000);
    				   LCD_voidClear();
    3258:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_voidClear>
    				   LCD_voidCursorBlinkerOff();
    325c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <LCD_voidCursorBlinkerOff>
    				   LCD_voidWriteString(" Out of tries !");
    3260:	8f e8       	ldi	r24, 0x8F	; 143
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_voidWriteString>
    				   for(u8 x =0; ; x++)
    3268:	fe 01       	movw	r30, r28
    326a:	e9 5b       	subi	r30, 0xB9	; 185
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	10 82       	st	Z, r1
    				   {
        			   DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_LOW);
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	66 e0       	ldi	r22, 0x06	; 6
    3274:	40 e0       	ldi	r20, 0x00	; 0
    3276:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	aa ef       	ldi	r26, 0xFA	; 250
    3280:	b3 e4       	ldi	r27, 0x43	; 67
    3282:	89 8f       	std	Y+25, r24	; 0x19
    3284:	9a 8f       	std	Y+26, r25	; 0x1a
    3286:	ab 8f       	std	Y+27, r26	; 0x1b
    3288:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328a:	69 8d       	ldd	r22, Y+25	; 0x19
    328c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    328e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	4a ef       	ldi	r20, 0xFA	; 250
    3298:	54 e4       	ldi	r21, 0x44	; 68
    329a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	8d 8b       	std	Y+21, r24	; 0x15
    32a4:	9e 8b       	std	Y+22, r25	; 0x16
    32a6:	af 8b       	std	Y+23, r26	; 0x17
    32a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32aa:	6d 89       	ldd	r22, Y+21	; 0x15
    32ac:	7e 89       	ldd	r23, Y+22	; 0x16
    32ae:	8f 89       	ldd	r24, Y+23	; 0x17
    32b0:	98 8d       	ldd	r25, Y+24	; 0x18
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e8       	ldi	r20, 0x80	; 128
    32b8:	5f e3       	ldi	r21, 0x3F	; 63
    32ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32be:	88 23       	and	r24, r24
    32c0:	2c f4       	brge	.+10     	; 0x32cc <main+0x87e>
		__ticks = 1;
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	9c 8b       	std	Y+20, r25	; 0x14
    32c8:	8b 8b       	std	Y+19, r24	; 0x13
    32ca:	3f c0       	rjmp	.+126    	; 0x334a <main+0x8fc>
	else if (__tmp > 65535)
    32cc:	6d 89       	ldd	r22, Y+21	; 0x15
    32ce:	7e 89       	ldd	r23, Y+22	; 0x16
    32d0:	8f 89       	ldd	r24, Y+23	; 0x17
    32d2:	98 8d       	ldd	r25, Y+24	; 0x18
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	3f ef       	ldi	r19, 0xFF	; 255
    32d8:	4f e7       	ldi	r20, 0x7F	; 127
    32da:	57 e4       	ldi	r21, 0x47	; 71
    32dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32e0:	18 16       	cp	r1, r24
    32e2:	4c f5       	brge	.+82     	; 0x3336 <main+0x8e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e4:	69 8d       	ldd	r22, Y+25	; 0x19
    32e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e2       	ldi	r20, 0x20	; 32
    32f2:	51 e4       	ldi	r21, 0x41	; 65
    32f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	bc 01       	movw	r22, r24
    32fe:	cd 01       	movw	r24, r26
    3300:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	9c 8b       	std	Y+20, r25	; 0x14
    330a:	8b 8b       	std	Y+19, r24	; 0x13
    330c:	0f c0       	rjmp	.+30     	; 0x332c <main+0x8de>
    330e:	88 ec       	ldi	r24, 0xC8	; 200
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	9a 8b       	std	Y+18, r25	; 0x12
    3314:	89 8b       	std	Y+17, r24	; 0x11
    3316:	89 89       	ldd	r24, Y+17	; 0x11
    3318:	9a 89       	ldd	r25, Y+18	; 0x12
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	f1 f7       	brne	.-4      	; 0x331a <main+0x8cc>
    331e:	9a 8b       	std	Y+18, r25	; 0x12
    3320:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3322:	8b 89       	ldd	r24, Y+19	; 0x13
    3324:	9c 89       	ldd	r25, Y+20	; 0x14
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	9c 8b       	std	Y+20, r25	; 0x14
    332a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332c:	8b 89       	ldd	r24, Y+19	; 0x13
    332e:	9c 89       	ldd	r25, Y+20	; 0x14
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	69 f7       	brne	.-38     	; 0x330e <main+0x8c0>
    3334:	14 c0       	rjmp	.+40     	; 0x335e <main+0x910>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3336:	6d 89       	ldd	r22, Y+21	; 0x15
    3338:	7e 89       	ldd	r23, Y+22	; 0x16
    333a:	8f 89       	ldd	r24, Y+23	; 0x17
    333c:	98 8d       	ldd	r25, Y+24	; 0x18
    333e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9c 8b       	std	Y+20, r25	; 0x14
    3348:	8b 8b       	std	Y+19, r24	; 0x13
    334a:	8b 89       	ldd	r24, Y+19	; 0x13
    334c:	9c 89       	ldd	r25, Y+20	; 0x14
    334e:	98 8b       	std	Y+16, r25	; 0x10
    3350:	8f 87       	std	Y+15, r24	; 0x0f
    3352:	8f 85       	ldd	r24, Y+15	; 0x0f
    3354:	98 89       	ldd	r25, Y+16	; 0x10
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <main+0x908>
    335a:	98 8b       	std	Y+16, r25	; 0x10
    335c:	8f 87       	std	Y+15, r24	; 0x0f
        			   _delay_ms(500);
        			   DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_HIGH);
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	66 e0       	ldi	r22, 0x06	; 6
    3362:	41 e0       	ldi	r20, 0x01	; 1
    3364:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	aa ef       	ldi	r26, 0xFA	; 250
    336e:	b3 e4       	ldi	r27, 0x43	; 67
    3370:	8b 87       	std	Y+11, r24	; 0x0b
    3372:	9c 87       	std	Y+12, r25	; 0x0c
    3374:	ad 87       	std	Y+13, r26	; 0x0d
    3376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3378:	6b 85       	ldd	r22, Y+11	; 0x0b
    337a:	7c 85       	ldd	r23, Y+12	; 0x0c
    337c:	8d 85       	ldd	r24, Y+13	; 0x0d
    337e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4a ef       	ldi	r20, 0xFA	; 250
    3386:	54 e4       	ldi	r21, 0x44	; 68
    3388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	8f 83       	std	Y+7, r24	; 0x07
    3392:	98 87       	std	Y+8, r25	; 0x08
    3394:	a9 87       	std	Y+9, r26	; 0x09
    3396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3398:	6f 81       	ldd	r22, Y+7	; 0x07
    339a:	78 85       	ldd	r23, Y+8	; 0x08
    339c:	89 85       	ldd	r24, Y+9	; 0x09
    339e:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	2c f4       	brge	.+10     	; 0x33ba <main+0x96c>
		__ticks = 1;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9e 83       	std	Y+6, r25	; 0x06
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	3f c0       	rjmp	.+126    	; 0x3438 <main+0x9ea>
	else if (__tmp > 65535)
    33ba:	6f 81       	ldd	r22, Y+7	; 0x07
    33bc:	78 85       	ldd	r23, Y+8	; 0x08
    33be:	89 85       	ldd	r24, Y+9	; 0x09
    33c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	3f ef       	ldi	r19, 0xFF	; 255
    33c6:	4f e7       	ldi	r20, 0x7F	; 127
    33c8:	57 e4       	ldi	r21, 0x47	; 71
    33ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    33ce:	18 16       	cp	r1, r24
    33d0:	4c f5       	brge	.+82     	; 0x3424 <main+0x9d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e2       	ldi	r20, 0x20	; 32
    33e0:	51 e4       	ldi	r21, 0x41	; 65
    33e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	bc 01       	movw	r22, r24
    33ec:	cd 01       	movw	r24, r26
    33ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
    33fa:	0f c0       	rjmp	.+30     	; 0x341a <main+0x9cc>
    33fc:	88 ec       	ldi	r24, 0xC8	; 200
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	9c 83       	std	Y+4, r25	; 0x04
    3402:	8b 83       	std	Y+3, r24	; 0x03
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	9c 81       	ldd	r25, Y+4	; 0x04
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <main+0x9ba>
    340c:	9c 83       	std	Y+4, r25	; 0x04
    340e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3410:	8d 81       	ldd	r24, Y+5	; 0x05
    3412:	9e 81       	ldd	r25, Y+6	; 0x06
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	9e 83       	std	Y+6, r25	; 0x06
    3418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	9e 81       	ldd	r25, Y+6	; 0x06
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	69 f7       	brne	.-38     	; 0x33fc <main+0x9ae>
    3422:	14 c0       	rjmp	.+40     	; 0x344c <main+0x9fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3424:	6f 81       	ldd	r22, Y+7	; 0x07
    3426:	78 85       	ldd	r23, Y+8	; 0x08
    3428:	89 85       	ldd	r24, Y+9	; 0x09
    342a:	9a 85       	ldd	r25, Y+10	; 0x0a
    342c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	9a 83       	std	Y+2, r25	; 0x02
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <main+0x9f6>
    3448:	9a 83       	std	Y+2, r25	; 0x02
    344a:	89 83       	std	Y+1, r24	; 0x01
    			   {
    				   _delay_ms(1000);
    				   LCD_voidClear();
    				   LCD_voidCursorBlinkerOff();
    				   LCD_voidWriteString(" Out of tries !");
    				   for(u8 x =0; ; x++)
    344c:	de 01       	movw	r26, r28
    344e:	a9 5b       	subi	r26, 0xB9	; 185
    3450:	bf 4f       	sbci	r27, 0xFF	; 255
    3452:	fe 01       	movw	r30, r28
    3454:	e9 5b       	subi	r30, 0xB9	; 185
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	80 81       	ld	r24, Z
    345a:	8f 5f       	subi	r24, 0xFF	; 255
    345c:	8c 93       	st	X, r24
    345e:	08 cf       	rjmp	.-496    	; 0x3270 <main+0x822>

00003460 <__udivmodsi4>:
    3460:	a1 e2       	ldi	r26, 0x21	; 33
    3462:	1a 2e       	mov	r1, r26
    3464:	aa 1b       	sub	r26, r26
    3466:	bb 1b       	sub	r27, r27
    3468:	fd 01       	movw	r30, r26
    346a:	0d c0       	rjmp	.+26     	; 0x3486 <__udivmodsi4_ep>

0000346c <__udivmodsi4_loop>:
    346c:	aa 1f       	adc	r26, r26
    346e:	bb 1f       	adc	r27, r27
    3470:	ee 1f       	adc	r30, r30
    3472:	ff 1f       	adc	r31, r31
    3474:	a2 17       	cp	r26, r18
    3476:	b3 07       	cpc	r27, r19
    3478:	e4 07       	cpc	r30, r20
    347a:	f5 07       	cpc	r31, r21
    347c:	20 f0       	brcs	.+8      	; 0x3486 <__udivmodsi4_ep>
    347e:	a2 1b       	sub	r26, r18
    3480:	b3 0b       	sbc	r27, r19
    3482:	e4 0b       	sbc	r30, r20
    3484:	f5 0b       	sbc	r31, r21

00003486 <__udivmodsi4_ep>:
    3486:	66 1f       	adc	r22, r22
    3488:	77 1f       	adc	r23, r23
    348a:	88 1f       	adc	r24, r24
    348c:	99 1f       	adc	r25, r25
    348e:	1a 94       	dec	r1
    3490:	69 f7       	brne	.-38     	; 0x346c <__udivmodsi4_loop>
    3492:	60 95       	com	r22
    3494:	70 95       	com	r23
    3496:	80 95       	com	r24
    3498:	90 95       	com	r25
    349a:	9b 01       	movw	r18, r22
    349c:	ac 01       	movw	r20, r24
    349e:	bd 01       	movw	r22, r26
    34a0:	cf 01       	movw	r24, r30
    34a2:	08 95       	ret

000034a4 <__prologue_saves__>:
    34a4:	2f 92       	push	r2
    34a6:	3f 92       	push	r3
    34a8:	4f 92       	push	r4
    34aa:	5f 92       	push	r5
    34ac:	6f 92       	push	r6
    34ae:	7f 92       	push	r7
    34b0:	8f 92       	push	r8
    34b2:	9f 92       	push	r9
    34b4:	af 92       	push	r10
    34b6:	bf 92       	push	r11
    34b8:	cf 92       	push	r12
    34ba:	df 92       	push	r13
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	ca 1b       	sub	r28, r26
    34ce:	db 0b       	sbc	r29, r27
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	09 94       	ijmp

000034dc <__epilogue_restores__>:
    34dc:	2a 88       	ldd	r2, Y+18	; 0x12
    34de:	39 88       	ldd	r3, Y+17	; 0x11
    34e0:	48 88       	ldd	r4, Y+16	; 0x10
    34e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    34e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    34e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    34e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    34ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    34ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    34ee:	b9 84       	ldd	r11, Y+9	; 0x09
    34f0:	c8 84       	ldd	r12, Y+8	; 0x08
    34f2:	df 80       	ldd	r13, Y+7	; 0x07
    34f4:	ee 80       	ldd	r14, Y+6	; 0x06
    34f6:	fd 80       	ldd	r15, Y+5	; 0x05
    34f8:	0c 81       	ldd	r16, Y+4	; 0x04
    34fa:	1b 81       	ldd	r17, Y+3	; 0x03
    34fc:	aa 81       	ldd	r26, Y+2	; 0x02
    34fe:	b9 81       	ldd	r27, Y+1	; 0x01
    3500:	ce 0f       	add	r28, r30
    3502:	d1 1d       	adc	r29, r1
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	ed 01       	movw	r28, r26
    3510:	08 95       	ret

00003512 <_exit>:
    3512:	f8 94       	cli

00003514 <__stop_program>:
    3514:	ff cf       	rjmp	.-2      	; 0x3514 <__stop_program>
