
Stepper_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000021fa  0000228e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800068  00800068  00002296  2**0
                  ALLOC
  3 .stab         000015d8  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a26  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004296  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000043d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004546  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000618f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000707a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000089e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 36       	cpi	r26, 0x6B	; 107
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea ef       	ldi	r30, 0xFA	; 250
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 92 10 	call	0x2124	; 0x2124 <main>
      8a:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     b50:	ea e3       	ldi	r30, 0x3A	; 58
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8b e7       	ldi	r24, 0x7B	; 123
     b5c:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     b6a:	eb e3       	ldi	r30, 0x3B	; 59
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     b70:	e8 e3       	ldi	r30, 0x38	; 56
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     b76:	e5 e3       	ldi	r30, 0x35	; 53
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     b7c:	e2 e3       	ldi	r30, 0x32	; 50
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	2e 97       	sbiw	r28, 0x0e	; 14
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	8a 83       	std	Y+2, r24	; 0x02
     ba0:	6b 83       	std	Y+3, r22	; 0x03
     ba2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	84 30       	cpi	r24, 0x04	; 4
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <DIO_u8SetPinDirection+0x26>
     bae:	0c c1       	rjmp	.+536    	; 0xdc8 <DIO_u8SetPinDirection+0x23e>
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <DIO_u8SetPinDirection+0x2e>
     bb6:	08 c1       	rjmp	.+528    	; 0xdc8 <DIO_u8SetPinDirection+0x23e>
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
     bba:	88 23       	and	r24, r24
     bbc:	21 f0       	breq	.+8      	; 0xbc6 <DIO_u8SetPinDirection+0x3c>
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <DIO_u8SetPinDirection+0x3c>
     bc4:	01 c1       	rjmp	.+514    	; 0xdc8 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	3e 87       	std	Y+14, r19	; 0x0e
     bce:	2d 87       	std	Y+13, r18	; 0x0d
     bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <DIO_u8SetPinDirection+0x52>
     bda:	4f c0       	rjmp	.+158    	; 0xc7a <DIO_u8SetPinDirection+0xf0>
     bdc:	2d 85       	ldd	r18, Y+13	; 0x0d
     bde:	3e 85       	ldd	r19, Y+14	; 0x0e
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	2c f4       	brge	.+10     	; 0xbf0 <DIO_u8SetPinDirection+0x66>
     be6:	8d 85       	ldd	r24, Y+13	; 0x0d
     be8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	71 f0       	breq	.+28     	; 0xc0a <DIO_u8SetPinDirection+0x80>
     bee:	ed c0       	rjmp	.+474    	; 0xdca <DIO_u8SetPinDirection+0x240>
     bf0:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf2:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	09 f4       	brne	.+2      	; 0xbfc <DIO_u8SetPinDirection+0x72>
     bfa:	77 c0       	rjmp	.+238    	; 0xcea <DIO_u8SetPinDirection+0x160>
     bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	91 05       	cpc	r25, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <DIO_u8SetPinDirection+0x7e>
     c06:	a9 c0       	rjmp	.+338    	; 0xd5a <DIO_u8SetPinDirection+0x1d0>
     c08:	e0 c0       	rjmp	.+448    	; 0xdca <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     c0a:	8c 81       	ldd	r24, Y+4	; 0x04
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	3c 87       	std	Y+12, r19	; 0x0c
     c12:	2b 87       	std	Y+11, r18	; 0x0b
     c14:	8b 85       	ldd	r24, Y+11	; 0x0b
     c16:	9c 85       	ldd	r25, Y+12	; 0x0c
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	d1 f0       	breq	.+52     	; 0xc50 <DIO_u8SetPinDirection+0xc6>
     c1c:	2b 85       	ldd	r18, Y+11	; 0x0b
     c1e:	3c 85       	ldd	r19, Y+12	; 0x0c
     c20:	21 30       	cpi	r18, 0x01	; 1
     c22:	31 05       	cpc	r19, r1
     c24:	09 f0       	breq	.+2      	; 0xc28 <DIO_u8SetPinDirection+0x9e>
     c26:	d1 c0       	rjmp	.+418    	; 0xdca <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     c28:	aa e3       	ldi	r26, 0x3A	; 58
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea e3       	ldi	r30, 0x3A	; 58
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 2e       	mov	r0, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_u8SetPinDirection+0xbc>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_u8SetPinDirection+0xb8>
     c4a:	84 2b       	or	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	bd c0       	rjmp	.+378    	; 0xdca <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     c50:	aa e3       	ldi	r26, 0x3A	; 58
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ea e3       	ldi	r30, 0x3A	; 58
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	48 2f       	mov	r20, r24
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 2e       	mov	r0, r18
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_u8SetPinDirection+0xe4>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_u8SetPinDirection+0xe0>
     c72:	80 95       	com	r24
     c74:	84 23       	and	r24, r20
     c76:	8c 93       	st	X, r24
     c78:	a8 c0       	rjmp	.+336    	; 0xdca <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	3a 87       	std	Y+10, r19	; 0x0a
     c82:	29 87       	std	Y+9, r18	; 0x09
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	d1 f0       	breq	.+52     	; 0xcc0 <DIO_u8SetPinDirection+0x136>
     c8c:	29 85       	ldd	r18, Y+9	; 0x09
     c8e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c90:	21 30       	cpi	r18, 0x01	; 1
     c92:	31 05       	cpc	r19, r1
     c94:	09 f0       	breq	.+2      	; 0xc98 <DIO_u8SetPinDirection+0x10e>
     c96:	99 c0       	rjmp	.+306    	; 0xdca <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     c98:	a7 e3       	ldi	r26, 0x37	; 55
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e7 e3       	ldi	r30, 0x37	; 55
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_u8SetPinDirection+0x12c>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_u8SetPinDirection+0x128>
     cba:	84 2b       	or	r24, r20
     cbc:	8c 93       	st	X, r24
     cbe:	85 c0       	rjmp	.+266    	; 0xdca <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     cc0:	a7 e3       	ldi	r26, 0x37	; 55
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e3       	ldi	r30, 0x37	; 55
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	48 2f       	mov	r20, r24
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 2e       	mov	r0, r18
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <DIO_u8SetPinDirection+0x154>
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <DIO_u8SetPinDirection+0x150>
     ce2:	80 95       	com	r24
     ce4:	84 23       	and	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	70 c0       	rjmp	.+224    	; 0xdca <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	38 87       	std	Y+8, r19	; 0x08
     cf2:	2f 83       	std	Y+7, r18	; 0x07
     cf4:	8f 81       	ldd	r24, Y+7	; 0x07
     cf6:	98 85       	ldd	r25, Y+8	; 0x08
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	d1 f0       	breq	.+52     	; 0xd30 <DIO_u8SetPinDirection+0x1a6>
     cfc:	2f 81       	ldd	r18, Y+7	; 0x07
     cfe:	38 85       	ldd	r19, Y+8	; 0x08
     d00:	21 30       	cpi	r18, 0x01	; 1
     d02:	31 05       	cpc	r19, r1
     d04:	09 f0       	breq	.+2      	; 0xd08 <DIO_u8SetPinDirection+0x17e>
     d06:	61 c0       	rjmp	.+194    	; 0xdca <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     d08:	a4 e3       	ldi	r26, 0x34	; 52
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e4 e3       	ldi	r30, 0x34	; 52
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_u8SetPinDirection+0x19c>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_u8SetPinDirection+0x198>
     d2a:	84 2b       	or	r24, r20
     d2c:	8c 93       	st	X, r24
     d2e:	4d c0       	rjmp	.+154    	; 0xdca <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     d30:	a4 e3       	ldi	r26, 0x34	; 52
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e4 e3       	ldi	r30, 0x34	; 52
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	48 2f       	mov	r20, r24
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 2e       	mov	r0, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_u8SetPinDirection+0x1c4>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_u8SetPinDirection+0x1c0>
     d52:	80 95       	com	r24
     d54:	84 23       	and	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	38 c0       	rjmp	.+112    	; 0xdca <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3e 83       	std	Y+6, r19	; 0x06
     d62:	2d 83       	std	Y+5, r18	; 0x05
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	9e 81       	ldd	r25, Y+6	; 0x06
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	c9 f0       	breq	.+50     	; 0xd9e <DIO_u8SetPinDirection+0x214>
     d6c:	2d 81       	ldd	r18, Y+5	; 0x05
     d6e:	3e 81       	ldd	r19, Y+6	; 0x06
     d70:	21 30       	cpi	r18, 0x01	; 1
     d72:	31 05       	cpc	r19, r1
     d74:	51 f5       	brne	.+84     	; 0xdca <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
     d76:	a1 e3       	ldi	r26, 0x31	; 49
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 e3       	ldi	r30, 0x31	; 49
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_u8SetPinDirection+0x20a>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_u8SetPinDirection+0x206>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
     d9e:	a1 e3       	ldi	r26, 0x31	; 49
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e1 e3       	ldi	r30, 0x31	; 49
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_u8SetPinDirection+0x232>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_u8SetPinDirection+0x22e>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     dc8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
}
     dcc:	2e 96       	adiw	r28, 0x0e	; 14
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	2e 97       	sbiw	r28, 0x0e	; 14
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	6b 83       	std	Y+3, r22	; 0x03
     df6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	84 30       	cpi	r24, 0x04	; 4
     e00:	08 f0       	brcs	.+2      	; 0xe04 <DIO_u8SetPinValue+0x26>
     e02:	0c c1       	rjmp	.+536    	; 0x101c <DIO_u8SetPinValue+0x23e>
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 30       	cpi	r24, 0x08	; 8
     e08:	08 f0       	brcs	.+2      	; 0xe0c <DIO_u8SetPinValue+0x2e>
     e0a:	08 c1       	rjmp	.+528    	; 0x101c <DIO_u8SetPinValue+0x23e>
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	21 f0       	breq	.+8      	; 0xe1a <DIO_u8SetPinValue+0x3c>
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	88 23       	and	r24, r24
     e16:	09 f0       	breq	.+2      	; 0xe1a <DIO_u8SetPinValue+0x3c>
     e18:	01 c1       	rjmp	.+514    	; 0x101c <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3e 87       	std	Y+14, r19	; 0x0e
     e22:	2d 87       	std	Y+13, r18	; 0x0d
     e24:	8d 85       	ldd	r24, Y+13	; 0x0d
     e26:	9e 85       	ldd	r25, Y+14	; 0x0e
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <DIO_u8SetPinValue+0x52>
     e2e:	4f c0       	rjmp	.+158    	; 0xece <DIO_u8SetPinValue+0xf0>
     e30:	2d 85       	ldd	r18, Y+13	; 0x0d
     e32:	3e 85       	ldd	r19, Y+14	; 0x0e
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	2c f4       	brge	.+10     	; 0xe44 <DIO_u8SetPinValue+0x66>
     e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	71 f0       	breq	.+28     	; 0xe5e <DIO_u8SetPinValue+0x80>
     e42:	ed c0       	rjmp	.+474    	; 0x101e <DIO_u8SetPinValue+0x240>
     e44:	2d 85       	ldd	r18, Y+13	; 0x0d
     e46:	3e 85       	ldd	r19, Y+14	; 0x0e
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <DIO_u8SetPinValue+0x72>
     e4e:	77 c0       	rjmp	.+238    	; 0xf3e <DIO_u8SetPinValue+0x160>
     e50:	8d 85       	ldd	r24, Y+13	; 0x0d
     e52:	9e 85       	ldd	r25, Y+14	; 0x0e
     e54:	83 30       	cpi	r24, 0x03	; 3
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <DIO_u8SetPinValue+0x7e>
     e5a:	a9 c0       	rjmp	.+338    	; 0xfae <DIO_u8SetPinValue+0x1d0>
     e5c:	e0 c0       	rjmp	.+448    	; 0x101e <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3c 87       	std	Y+12, r19	; 0x0c
     e66:	2b 87       	std	Y+11, r18	; 0x0b
     e68:	8b 85       	ldd	r24, Y+11	; 0x0b
     e6a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	d1 f0       	breq	.+52     	; 0xea4 <DIO_u8SetPinValue+0xc6>
     e70:	2b 85       	ldd	r18, Y+11	; 0x0b
     e72:	3c 85       	ldd	r19, Y+12	; 0x0c
     e74:	21 30       	cpi	r18, 0x01	; 1
     e76:	31 05       	cpc	r19, r1
     e78:	09 f0       	breq	.+2      	; 0xe7c <DIO_u8SetPinValue+0x9e>
     e7a:	d1 c0       	rjmp	.+418    	; 0x101e <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
     e7c:	ab e3       	ldi	r26, 0x3B	; 59
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	eb e3       	ldi	r30, 0x3B	; 59
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_u8SetPinValue+0xbc>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_u8SetPinValue+0xb8>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	bd c0       	rjmp	.+378    	; 0x101e <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
     ea4:	ab e3       	ldi	r26, 0x3B	; 59
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	eb e3       	ldi	r30, 0x3B	; 59
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_u8SetPinValue+0xe4>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_u8SetPinValue+0xe0>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	a8 c0       	rjmp	.+336    	; 0x101e <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3a 87       	std	Y+10, r19	; 0x0a
     ed6:	29 87       	std	Y+9, r18	; 0x09
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	d1 f0       	breq	.+52     	; 0xf14 <DIO_u8SetPinValue+0x136>
     ee0:	29 85       	ldd	r18, Y+9	; 0x09
     ee2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ee4:	21 30       	cpi	r18, 0x01	; 1
     ee6:	31 05       	cpc	r19, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <DIO_u8SetPinValue+0x10e>
     eea:	99 c0       	rjmp	.+306    	; 0x101e <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
     eec:	a8 e3       	ldi	r26, 0x38	; 56
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e8 e3       	ldi	r30, 0x38	; 56
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_u8SetPinValue+0x12c>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_u8SetPinValue+0x128>
     f0e:	84 2b       	or	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	85 c0       	rjmp	.+266    	; 0x101e <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
     f14:	a8 e3       	ldi	r26, 0x38	; 56
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e8 e3       	ldi	r30, 0x38	; 56
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_u8SetPinValue+0x154>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_u8SetPinValue+0x150>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	70 c0       	rjmp	.+224    	; 0x101e <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	38 87       	std	Y+8, r19	; 0x08
     f46:	2f 83       	std	Y+7, r18	; 0x07
     f48:	8f 81       	ldd	r24, Y+7	; 0x07
     f4a:	98 85       	ldd	r25, Y+8	; 0x08
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	d1 f0       	breq	.+52     	; 0xf84 <DIO_u8SetPinValue+0x1a6>
     f50:	2f 81       	ldd	r18, Y+7	; 0x07
     f52:	38 85       	ldd	r19, Y+8	; 0x08
     f54:	21 30       	cpi	r18, 0x01	; 1
     f56:	31 05       	cpc	r19, r1
     f58:	09 f0       	breq	.+2      	; 0xf5c <DIO_u8SetPinValue+0x17e>
     f5a:	61 c0       	rjmp	.+194    	; 0x101e <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
     f5c:	a5 e3       	ldi	r26, 0x35	; 53
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e5 e3       	ldi	r30, 0x35	; 53
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_u8SetPinValue+0x19c>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_u8SetPinValue+0x198>
     f7e:	84 2b       	or	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	4d c0       	rjmp	.+154    	; 0x101e <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
     f84:	a5 e3       	ldi	r26, 0x35	; 53
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e3       	ldi	r30, 0x35	; 53
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_u8SetPinValue+0x1c4>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_u8SetPinValue+0x1c0>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	38 c0       	rjmp	.+112    	; 0x101e <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3e 83       	std	Y+6, r19	; 0x06
     fb6:	2d 83       	std	Y+5, r18	; 0x05
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	c9 f0       	breq	.+50     	; 0xff2 <DIO_u8SetPinValue+0x214>
     fc0:	2d 81       	ldd	r18, Y+5	; 0x05
     fc2:	3e 81       	ldd	r19, Y+6	; 0x06
     fc4:	21 30       	cpi	r18, 0x01	; 1
     fc6:	31 05       	cpc	r19, r1
     fc8:	51 f5       	brne	.+84     	; 0x101e <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
     fca:	a2 e3       	ldi	r26, 0x32	; 50
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e2 e3       	ldi	r30, 0x32	; 50
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_u8SetPinValue+0x20a>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_u8SetPinValue+0x206>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	16 c0       	rjmp	.+44     	; 0x101e <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
     ff2:	a2 e3       	ldi	r26, 0x32	; 50
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e2 e3       	ldi	r30, 0x32	; 50
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_u8SetPinValue+0x232>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_u8SetPinValue+0x22e>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	01 c0       	rjmp	.+2      	; 0x101e <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    101c:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1020:	2e 96       	adiw	r28, 0x0e	; 14
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	27 97       	sbiw	r28, 0x07	; 7
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	8a 83       	std	Y+2, r24	; 0x02
    1048:	6b 83       	std	Y+3, r22	; 0x03
    104a:	5d 83       	std	Y+5, r21	; 0x05
    104c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	84 30       	cpi	r24, 0x04	; 4
    1056:	08 f0       	brcs	.+2      	; 0x105a <DIO_u8GetPinValue+0x28>
    1058:	ea c0       	rjmp	.+468    	; 0x122e <DIO_u8GetPinValue+0x1fc>
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 30       	cpi	r24, 0x08	; 8
    105e:	08 f0       	brcs	.+2      	; 0x1062 <DIO_u8GetPinValue+0x30>
    1060:	e6 c0       	rjmp	.+460    	; 0x122e <DIO_u8GetPinValue+0x1fc>
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	09 f4       	brne	.+2      	; 0x106c <DIO_u8GetPinValue+0x3a>
    106a:	e1 c0       	rjmp	.+450    	; 0x122e <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	3f 83       	std	Y+7, r19	; 0x07
    1074:	2e 83       	std	Y+6, r18	; 0x06
    1076:	4e 81       	ldd	r20, Y+6	; 0x06
    1078:	5f 81       	ldd	r21, Y+7	; 0x07
    107a:	41 30       	cpi	r20, 0x01	; 1
    107c:	51 05       	cpc	r21, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <DIO_u8GetPinValue+0x50>
    1080:	48 c0       	rjmp	.+144    	; 0x1112 <DIO_u8GetPinValue+0xe0>
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <DIO_u8GetPinValue+0x66>
    108c:	2e 81       	ldd	r18, Y+6	; 0x06
    108e:	3f 81       	ldd	r19, Y+7	; 0x07
    1090:	21 15       	cp	r18, r1
    1092:	31 05       	cpc	r19, r1
    1094:	71 f0       	breq	.+28     	; 0x10b2 <DIO_u8GetPinValue+0x80>
    1096:	cc c0       	rjmp	.+408    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
    1098:	4e 81       	ldd	r20, Y+6	; 0x06
    109a:	5f 81       	ldd	r21, Y+7	; 0x07
    109c:	42 30       	cpi	r20, 0x02	; 2
    109e:	51 05       	cpc	r21, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <DIO_u8GetPinValue+0x72>
    10a2:	67 c0       	rjmp	.+206    	; 0x1172 <DIO_u8GetPinValue+0x140>
    10a4:	8e 81       	ldd	r24, Y+6	; 0x06
    10a6:	9f 81       	ldd	r25, Y+7	; 0x07
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	91 05       	cpc	r25, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <DIO_u8GetPinValue+0x7e>
    10ae:	90 c0       	rjmp	.+288    	; 0x11d0 <DIO_u8GetPinValue+0x19e>
    10b0:	bf c0       	rjmp	.+382    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    10b2:	e9 e3       	ldi	r30, 0x39	; 57
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a9 01       	movw	r20, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8GetPinValue+0x98>
    10c6:	55 95       	asr	r21
    10c8:	47 95       	ror	r20
    10ca:	8a 95       	dec	r24
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_u8GetPinValue+0x94>
    10ce:	ca 01       	movw	r24, r20
    10d0:	81 70       	andi	r24, 0x01	; 1
    10d2:	90 70       	andi	r25, 0x00	; 0
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    10d8:	ec 81       	ldd	r30, Y+4	; 0x04
    10da:	fd 81       	ldd	r31, Y+5	; 0x05
    10dc:	10 82       	st	Z, r1
    10de:	a8 c0       	rjmp	.+336    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    10e0:	e9 e3       	ldi	r30, 0x39	; 57
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_u8GetPinValue+0xc6>
    10f4:	55 95       	asr	r21
    10f6:	47 95       	ror	r20
    10f8:	8a 95       	dec	r24
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_u8GetPinValue+0xc2>
    10fc:	ca 01       	movw	r24, r20
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	90 70       	andi	r25, 0x00	; 0
    1102:	88 23       	and	r24, r24
    1104:	09 f4       	brne	.+2      	; 0x1108 <DIO_u8GetPinValue+0xd6>
    1106:	94 c0       	rjmp	.+296    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1108:	ec 81       	ldd	r30, Y+4	; 0x04
    110a:	fd 81       	ldd	r31, Y+5	; 0x05
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 83       	st	Z, r24
    1110:	8f c0       	rjmp	.+286    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    1112:	e6 e3       	ldi	r30, 0x36	; 54
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8GetPinValue+0xf8>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8GetPinValue+0xf4>
    112e:	ca 01       	movw	r24, r20
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	90 70       	andi	r25, 0x00	; 0
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	21 f4       	brne	.+8      	; 0x1140 <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1138:	ec 81       	ldd	r30, Y+4	; 0x04
    113a:	fd 81       	ldd	r31, Y+5	; 0x05
    113c:	10 82       	st	Z, r1
    113e:	78 c0       	rjmp	.+240    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    1140:	e6 e3       	ldi	r30, 0x36	; 54
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_u8GetPinValue+0x126>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_u8GetPinValue+0x122>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	88 23       	and	r24, r24
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_u8GetPinValue+0x136>
    1166:	64 c0       	rjmp	.+200    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1168:	ec 81       	ldd	r30, Y+4	; 0x04
    116a:	fd 81       	ldd	r31, Y+5	; 0x05
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	80 83       	st	Z, r24
    1170:	5f c0       	rjmp	.+190    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    1172:	e3 e3       	ldi	r30, 0x33	; 51
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_u8GetPinValue+0x158>
    1186:	55 95       	asr	r21
    1188:	47 95       	ror	r20
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_u8GetPinValue+0x154>
    118e:	ca 01       	movw	r24, r20
    1190:	81 70       	andi	r24, 0x01	; 1
    1192:	90 70       	andi	r25, 0x00	; 0
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	21 f4       	brne	.+8      	; 0x11a0 <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1198:	ec 81       	ldd	r30, Y+4	; 0x04
    119a:	fd 81       	ldd	r31, Y+5	; 0x05
    119c:	10 82       	st	Z, r1
    119e:	48 c0       	rjmp	.+144    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_u8GetPinValue+0x186>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_u8GetPinValue+0x182>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	90 70       	andi	r25, 0x00	; 0
    11c2:	88 23       	and	r24, r24
    11c4:	a9 f1       	breq	.+106    	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    11c6:	ec 81       	ldd	r30, Y+4	; 0x04
    11c8:	fd 81       	ldd	r31, Y+5	; 0x05
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 83       	st	Z, r24
    11ce:	30 c0       	rjmp	.+96     	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    11d0:	e0 e3       	ldi	r30, 0x30	; 48
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a9 01       	movw	r20, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_u8GetPinValue+0x1b6>
    11e4:	55 95       	asr	r21
    11e6:	47 95       	ror	r20
    11e8:	8a 95       	dec	r24
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_u8GetPinValue+0x1b2>
    11ec:	ca 01       	movw	r24, r20
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	90 70       	andi	r25, 0x00	; 0
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	21 f4       	brne	.+8      	; 0x11fe <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    11f6:	ec 81       	ldd	r30, Y+4	; 0x04
    11f8:	fd 81       	ldd	r31, Y+5	; 0x05
    11fa:	10 82       	st	Z, r1
    11fc:	19 c0       	rjmp	.+50     	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    11fe:	e0 e3       	ldi	r30, 0x30	; 48
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a9 01       	movw	r20, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_u8GetPinValue+0x1e4>
    1212:	55 95       	asr	r21
    1214:	47 95       	ror	r20
    1216:	8a 95       	dec	r24
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_u8GetPinValue+0x1e0>
    121a:	ca 01       	movw	r24, r20
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	90 70       	andi	r25, 0x00	; 0
    1220:	88 23       	and	r24, r24
    1222:	31 f0       	breq	.+12     	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1224:	ec 81       	ldd	r30, Y+4	; 0x04
    1226:	fd 81       	ldd	r31, Y+5	; 0x05
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 83       	st	Z, r24
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    122e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	27 96       	adiw	r28, 0x07	; 7
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	2d 97       	sbiw	r28, 0x0d	; 13
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	08 f0       	brcs	.+2      	; 0x1268 <DIO_u8SetPortDirection+0x24>
    1266:	87 c0       	rjmp	.+270    	; 0x1376 <DIO_u8SetPortDirection+0x132>
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	21 f0       	breq	.+8      	; 0x1276 <DIO_u8SetPortDirection+0x32>
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 23       	and	r24, r24
    1272:	09 f0       	breq	.+2      	; 0x1276 <DIO_u8SetPortDirection+0x32>
    1274:	80 c0       	rjmp	.+256    	; 0x1376 <DIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3d 87       	std	Y+13, r19	; 0x0d
    127e:	2c 87       	std	Y+12, r18	; 0x0c
    1280:	8c 85       	ldd	r24, Y+12	; 0x0c
    1282:	9d 85       	ldd	r25, Y+13	; 0x0d
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	71 f1       	breq	.+92     	; 0x12e6 <DIO_u8SetPortDirection+0xa2>
    128a:	2c 85       	ldd	r18, Y+12	; 0x0c
    128c:	3d 85       	ldd	r19, Y+13	; 0x0d
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	2c f4       	brge	.+10     	; 0x129e <DIO_u8SetPortDirection+0x5a>
    1294:	8c 85       	ldd	r24, Y+12	; 0x0c
    1296:	9d 85       	ldd	r25, Y+13	; 0x0d
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	69 f0       	breq	.+26     	; 0x12b6 <DIO_u8SetPortDirection+0x72>
    129c:	6d c0       	rjmp	.+218    	; 0x1378 <DIO_u8SetPortDirection+0x134>
    129e:	2c 85       	ldd	r18, Y+12	; 0x0c
    12a0:	3d 85       	ldd	r19, Y+13	; 0x0d
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	b9 f1       	breq	.+110    	; 0x1316 <DIO_u8SetPortDirection+0xd2>
    12a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <DIO_u8SetPortDirection+0x70>
    12b2:	49 c0       	rjmp	.+146    	; 0x1346 <DIO_u8SetPortDirection+0x102>
    12b4:	61 c0       	rjmp	.+194    	; 0x1378 <DIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3b 87       	std	Y+11, r19	; 0x0b
    12be:	2a 87       	std	Y+10, r18	; 0x0a
    12c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	31 f0       	breq	.+12     	; 0x12d4 <DIO_u8SetPortDirection+0x90>
    12c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    12ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    12cc:	21 30       	cpi	r18, 0x01	; 1
    12ce:	31 05       	cpc	r19, r1
    12d0:	29 f0       	breq	.+10     	; 0x12dc <DIO_u8SetPortDirection+0x98>
    12d2:	52 c0       	rjmp	.+164    	; 0x1378 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    12d4:	ea e3       	ldi	r30, 0x3A	; 58
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	10 82       	st	Z, r1
    12da:	4e c0       	rjmp	.+156    	; 0x1378 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    12dc:	ea e3       	ldi	r30, 0x3A	; 58
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	80 83       	st	Z, r24
    12e4:	49 c0       	rjmp	.+146    	; 0x1378 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	39 87       	std	Y+9, r19	; 0x09
    12ee:	28 87       	std	Y+8, r18	; 0x08
    12f0:	88 85       	ldd	r24, Y+8	; 0x08
    12f2:	99 85       	ldd	r25, Y+9	; 0x09
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	31 f0       	breq	.+12     	; 0x1304 <DIO_u8SetPortDirection+0xc0>
    12f8:	28 85       	ldd	r18, Y+8	; 0x08
    12fa:	39 85       	ldd	r19, Y+9	; 0x09
    12fc:	21 30       	cpi	r18, 0x01	; 1
    12fe:	31 05       	cpc	r19, r1
    1300:	29 f0       	breq	.+10     	; 0x130c <DIO_u8SetPortDirection+0xc8>
    1302:	3a c0       	rjmp	.+116    	; 0x1378 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    1304:	e7 e3       	ldi	r30, 0x37	; 55
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	10 82       	st	Z, r1
    130a:	36 c0       	rjmp	.+108    	; 0x1378 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    130c:	e7 e3       	ldi	r30, 0x37	; 55
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	80 83       	st	Z, r24
    1314:	31 c0       	rjmp	.+98     	; 0x1378 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3f 83       	std	Y+7, r19	; 0x07
    131e:	2e 83       	std	Y+6, r18	; 0x06
    1320:	8e 81       	ldd	r24, Y+6	; 0x06
    1322:	9f 81       	ldd	r25, Y+7	; 0x07
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	31 f0       	breq	.+12     	; 0x1334 <DIO_u8SetPortDirection+0xf0>
    1328:	2e 81       	ldd	r18, Y+6	; 0x06
    132a:	3f 81       	ldd	r19, Y+7	; 0x07
    132c:	21 30       	cpi	r18, 0x01	; 1
    132e:	31 05       	cpc	r19, r1
    1330:	29 f0       	breq	.+10     	; 0x133c <DIO_u8SetPortDirection+0xf8>
    1332:	22 c0       	rjmp	.+68     	; 0x1378 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    1334:	e4 e3       	ldi	r30, 0x34	; 52
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	10 82       	st	Z, r1
    133a:	1e c0       	rjmp	.+60     	; 0x1378 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    133c:	e4 e3       	ldi	r30, 0x34	; 52
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	80 83       	st	Z, r24
    1344:	19 c0       	rjmp	.+50     	; 0x1378 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3d 83       	std	Y+5, r19	; 0x05
    134e:	2c 83       	std	Y+4, r18	; 0x04
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	31 f0       	breq	.+12     	; 0x1364 <DIO_u8SetPortDirection+0x120>
    1358:	2c 81       	ldd	r18, Y+4	; 0x04
    135a:	3d 81       	ldd	r19, Y+5	; 0x05
    135c:	21 30       	cpi	r18, 0x01	; 1
    135e:	31 05       	cpc	r19, r1
    1360:	29 f0       	breq	.+10     	; 0x136c <DIO_u8SetPortDirection+0x128>
    1362:	0a c0       	rjmp	.+20     	; 0x1378 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    1364:	e1 e3       	ldi	r30, 0x31	; 49
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    136c:	e1 e3       	ldi	r30, 0x31	; 49
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	80 83       	st	Z, r24
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <DIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1376:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
}
    137a:	2d 96       	adiw	r28, 0x0d	; 13
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_u8SetPortValue+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_u8SetPortValue+0x8>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3d 83       	std	Y+5, r19	; 0x05
    13aa:	2c 83       	std	Y+4, r18	; 0x04
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	d1 f0       	breq	.+52     	; 0x13ea <DIO_u8SetPortValue+0x5e>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <DIO_u8SetPortValue+0x3e>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <DIO_u8SetPortValue+0x54>
    13c8:	1f c0       	rjmp	.+62     	; 0x1408 <DIO_u8SetPortValue+0x7c>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <DIO_u8SetPortValue+0x68>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	81 f0       	breq	.+32     	; 0x13fe <DIO_u8SetPortValue+0x72>
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    13e0:	eb e3       	ldi	r30, 0x3B	; 59
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	80 83       	st	Z, r24
    13e8:	10 c0       	rjmp	.+32     	; 0x140a <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    13ea:	e8 e3       	ldi	r30, 0x38	; 56
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	80 83       	st	Z, r24
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	80 83       	st	Z, r24
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    13fe:	e2 e3       	ldi	r30, 0x32	; 50
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	80 83       	st	Z, r24
    1406:	01 c0       	rjmp	.+2      	; 0x140a <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    1408:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_u8GetPortValue+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <DIO_u8GetPortValue+0x8>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_u8GetPortValue+0xa>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	8a 83       	std	Y+2, r24	; 0x02
    142c:	7c 83       	std	Y+4, r23	; 0x04
    142e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	e9 f1       	breq	.+122    	; 0x14b6 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3e 83       	std	Y+6, r19	; 0x06
    1444:	2d 83       	std	Y+5, r18	; 0x05
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	e1 f0       	breq	.+56     	; 0x1488 <DIO_u8GetPortValue+0x6c>
    1450:	2d 81       	ldd	r18, Y+5	; 0x05
    1452:	3e 81       	ldd	r19, Y+6	; 0x06
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <DIO_u8GetPortValue+0x48>
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <DIO_u8GetPortValue+0x5e>
    1462:	27 c0       	rjmp	.+78     	; 0x14b2 <DIO_u8GetPortValue+0x96>
    1464:	2d 81       	ldd	r18, Y+5	; 0x05
    1466:	3e 81       	ldd	r19, Y+6	; 0x06
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	a1 f0       	breq	.+40     	; 0x1496 <DIO_u8GetPortValue+0x7a>
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	b1 f0       	breq	.+44     	; 0x14a4 <DIO_u8GetPortValue+0x88>
    1478:	1c c0       	rjmp	.+56     	; 0x14b2 <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    147a:	e9 e3       	ldi	r30, 0x39	; 57
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	eb 81       	ldd	r30, Y+3	; 0x03
    1482:	fc 81       	ldd	r31, Y+4	; 0x04
    1484:	80 83       	st	Z, r24
    1486:	18 c0       	rjmp	.+48     	; 0x14b8 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    1488:	e6 e3       	ldi	r30, 0x36	; 54
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	eb 81       	ldd	r30, Y+3	; 0x03
    1490:	fc 81       	ldd	r31, Y+4	; 0x04
    1492:	80 83       	st	Z, r24
    1494:	11 c0       	rjmp	.+34     	; 0x14b8 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    1496:	e3 e3       	ldi	r30, 0x33	; 51
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	eb 81       	ldd	r30, Y+3	; 0x03
    149e:	fc 81       	ldd	r31, Y+4	; 0x04
    14a0:	80 83       	st	Z, r24
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    14a4:	e0 e3       	ldi	r30, 0x30	; 48
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	eb 81       	ldd	r30, Y+3	; 0x03
    14ac:	fc 81       	ldd	r31, Y+4	; 0x04
    14ae:	80 83       	st	Z, r24
    14b0:	03 c0       	rjmp	.+6      	; 0x14b8 <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    14b6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	26 96       	adiw	r28, 0x06	; 6
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <Stepper_u8Rotation>:
#include "STP_private.h"

u16 i;
u8 Local_u8ErrorState;
u8 Stepper_u8Rotation(u16 Copy_u16Angle , u8 Copy_u8Direction)
{
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	c7 57       	subi	r28, 0x77	; 119
    14da:	d0 40       	sbci	r29, 0x00	; 0
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	fe 01       	movw	r30, r28
    14e8:	eb 58       	subi	r30, 0x8B	; 139
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
    14f0:	fe 01       	movw	r30, r28
    14f2:	e9 58       	subi	r30, 0x89	; 137
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	60 83       	st	Z, r22
	if((Copy_u16Angle <=360))
    14f8:	fe 01       	movw	r30, r28
    14fa:	eb 58       	subi	r30, 0x8B	; 139
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	21 e0       	ldi	r18, 0x01	; 1
    1504:	89 36       	cpi	r24, 0x69	; 105
    1506:	92 07       	cpc	r25, r18
    1508:	08 f0       	brcs	.+2      	; 0x150c <Stepper_u8Rotation+0x40>
    150a:	ab c5       	rjmp	.+2902   	; 0x2062 <Stepper_u8Rotation+0xb96>
	{
	    Local_u8ErrorState = STD_TYPES_OK;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	80 93 6a 00 	sts	0x006A, r24
	    u32 NumberofSteps = (u32)((Copy_u16Angle * 2048UL)/360);
    1512:	fe 01       	movw	r30, r28
    1514:	eb 58       	subi	r30, 0x8B	; 139
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	cc 01       	movw	r24, r24
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	07 2e       	mov	r0, r23
    1524:	7b e0       	ldi	r23, 0x0B	; 11
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	aa 1f       	adc	r26, r26
    152c:	bb 1f       	adc	r27, r27
    152e:	7a 95       	dec	r23
    1530:	d1 f7       	brne	.-12     	; 0x1526 <Stepper_u8Rotation+0x5a>
    1532:	70 2d       	mov	r23, r0
    1534:	8e 01       	movw	r16, r28
    1536:	0f 58       	subi	r16, 0x8F	; 143
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	28 e6       	ldi	r18, 0x68	; 104
    153c:	31 e0       	ldi	r19, 0x01	; 1
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 a2 10 	call	0x2144	; 0x2144 <__udivmodsi4>
    154a:	da 01       	movw	r26, r20
    154c:	c9 01       	movw	r24, r18
    154e:	f8 01       	movw	r30, r16
    1550:	80 83       	st	Z, r24
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	a2 83       	std	Z+2, r26	; 0x02
    1556:	b3 83       	std	Z+3, r27	; 0x03
		NumberofSteps = NumberofSteps / 4 ;
    1558:	9e 01       	movw	r18, r28
    155a:	2f 58       	subi	r18, 0x8F	; 143
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	fe 01       	movw	r30, r28
    1560:	ef 58       	subi	r30, 0x8F	; 143
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	a2 81       	ldd	r26, Z+2	; 0x02
    156a:	b3 81       	ldd	r27, Z+3	; 0x03
    156c:	b6 95       	lsr	r27
    156e:	a7 95       	ror	r26
    1570:	97 95       	ror	r25
    1572:	87 95       	ror	r24
    1574:	b6 95       	lsr	r27
    1576:	a7 95       	ror	r26
    1578:	97 95       	ror	r25
    157a:	87 95       	ror	r24
    157c:	f9 01       	movw	r30, r18
    157e:	80 83       	st	Z, r24
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	a2 83       	std	Z+2, r26	; 0x02
    1584:	b3 83       	std	Z+3, r27	; 0x03
		
		if(Copy_u8Direction == AntiClockwise)
    1586:	fe 01       	movw	r30, r28
    1588:	e9 58       	subi	r30, 0x89	; 137
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	80 81       	ld	r24, Z
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	09 f0       	breq	.+2      	; 0x1594 <Stepper_u8Rotation+0xc8>
    1592:	11 c3       	rjmp	.+1570   	; 0x1bb6 <Stepper_u8Rotation+0x6ea>
		{
		for(i=0; i < NumberofSteps ; i++)
    1594:	10 92 69 00 	sts	0x0069, r1
    1598:	10 92 68 00 	sts	0x0068, r1
    159c:	f7 c2       	rjmp	.+1518   	; 0x1b8c <Stepper_u8Rotation+0x6c0>
		{
			
		//STEP 1
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	63 e0       	ldi	r22, 0x03	; 3
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	64 e0       	ldi	r22, 0x04	; 4
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	65 e0       	ldi	r22, 0x05	; 5
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	66 e0       	ldi	r22, 0x06	; 6
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    15c6:	fe 01       	movw	r30, r28
    15c8:	e3 59       	subi	r30, 0x93	; 147
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 ea       	ldi	r26, 0xA0	; 160
    15d2:	b0 e4       	ldi	r27, 0x40	; 64
    15d4:	80 83       	st	Z, r24
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	a2 83       	std	Z+2, r26	; 0x02
    15da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	8e 01       	movw	r16, r28
    15de:	07 59       	subi	r16, 0x97	; 151
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	fe 01       	movw	r30, r28
    15e4:	e3 59       	subi	r30, 0x93	; 147
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a ef       	ldi	r20, 0xFA	; 250
    15f6:	54 e4       	ldi	r21, 0x44	; 68
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	f8 01       	movw	r30, r16
    1602:	80 83       	st	Z, r24
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	a2 83       	std	Z+2, r26	; 0x02
    1608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    160a:	fe 01       	movw	r30, r28
    160c:	e7 59       	subi	r30, 0x97	; 151
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	44 f4       	brge	.+16     	; 0x1638 <Stepper_u8Rotation+0x16c>
		__ticks = 1;
    1628:	fe 01       	movw	r30, r28
    162a:	e9 59       	subi	r30, 0x99	; 153
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	64 c0       	rjmp	.+200    	; 0x1700 <Stepper_u8Rotation+0x234>
	else if (__tmp > 65535)
    1638:	fe 01       	movw	r30, r28
    163a:	e7 59       	subi	r30, 0x97	; 151
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	3f ef       	ldi	r19, 0xFF	; 255
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	57 e4       	ldi	r21, 0x47	; 71
    164e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1652:	18 16       	cp	r1, r24
    1654:	0c f0       	brlt	.+2      	; 0x1658 <Stepper_u8Rotation+0x18c>
    1656:	43 c0       	rjmp	.+134    	; 0x16de <Stepper_u8Rotation+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	fe 01       	movw	r30, r28
    165a:	e3 59       	subi	r30, 0x93	; 147
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e2       	ldi	r20, 0x20	; 32
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	8e 01       	movw	r16, r28
    1678:	09 59       	subi	r16, 0x99	; 153
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	f8 01       	movw	r30, r16
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	80 83       	st	Z, r24
    168e:	1f c0       	rjmp	.+62     	; 0x16ce <Stepper_u8Rotation+0x202>
    1690:	fe 01       	movw	r30, r28
    1692:	eb 59       	subi	r30, 0x9B	; 155
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	88 ec       	ldi	r24, 0xC8	; 200
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    169e:	fe 01       	movw	r30, r28
    16a0:	eb 59       	subi	r30, 0x9B	; 155
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <Stepper_u8Rotation+0x1dc>
    16ac:	fe 01       	movw	r30, r28
    16ae:	eb 59       	subi	r30, 0x9B	; 155
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b6:	de 01       	movw	r26, r28
    16b8:	a9 59       	subi	r26, 0x99	; 153
    16ba:	bf 4f       	sbci	r27, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	e9 59       	subi	r30, 0x99	; 153
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	11 96       	adiw	r26, 0x01	; 1
    16ca:	9c 93       	st	X, r25
    16cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	fe 01       	movw	r30, r28
    16d0:	e9 59       	subi	r30, 0x99	; 153
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	d1 f6       	brne	.-76     	; 0x1690 <Stepper_u8Rotation+0x1c4>
    16dc:	27 c0       	rjmp	.+78     	; 0x172c <Stepper_u8Rotation+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16de:	8e 01       	movw	r16, r28
    16e0:	09 59       	subi	r16, 0x99	; 153
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	fe 01       	movw	r30, r28
    16e6:	e7 59       	subi	r30, 0x97	; 151
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	f8 01       	movw	r30, r16
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
    1700:	de 01       	movw	r26, r28
    1702:	ad 59       	subi	r26, 0x9D	; 157
    1704:	bf 4f       	sbci	r27, 0xFF	; 255
    1706:	fe 01       	movw	r30, r28
    1708:	e9 59       	subi	r30, 0x99	; 153
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	8d 93       	st	X+, r24
    1712:	9c 93       	st	X, r25
    1714:	fe 01       	movw	r30, r28
    1716:	ed 59       	subi	r30, 0x9D	; 157
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <Stepper_u8Rotation+0x252>
    1722:	fe 01       	movw	r30, r28
    1724:	ed 59       	subi	r30, 0x9D	; 157
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
		_delay_ms(5);

        //STEP 2
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	63 e0       	ldi	r22, 0x03	; 3
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	64 e0       	ldi	r22, 0x04	; 4
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	65 e0       	ldi	r22, 0x05	; 5
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    1754:	fe 01       	movw	r30, r28
    1756:	e1 5a       	subi	r30, 0xA1	; 161
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a0 ea       	ldi	r26, 0xA0	; 160
    1760:	b0 e4       	ldi	r27, 0x40	; 64
    1762:	80 83       	st	Z, r24
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	a2 83       	std	Z+2, r26	; 0x02
    1768:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176a:	8e 01       	movw	r16, r28
    176c:	05 5a       	subi	r16, 0xA5	; 165
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	fe 01       	movw	r30, r28
    1772:	e1 5a       	subi	r30, 0xA1	; 161
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a ef       	ldi	r20, 0xFA	; 250
    1784:	54 e4       	ldi	r21, 0x44	; 68
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	f8 01       	movw	r30, r16
    1790:	80 83       	st	Z, r24
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	a2 83       	std	Z+2, r26	; 0x02
    1796:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1798:	fe 01       	movw	r30, r28
    179a:	e5 5a       	subi	r30, 0xA5	; 165
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	60 81       	ld	r22, Z
    17a0:	71 81       	ldd	r23, Z+1	; 0x01
    17a2:	82 81       	ldd	r24, Z+2	; 0x02
    17a4:	93 81       	ldd	r25, Z+3	; 0x03
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e8       	ldi	r20, 0x80	; 128
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	44 f4       	brge	.+16     	; 0x17c6 <Stepper_u8Rotation+0x2fa>
		__ticks = 1;
    17b6:	fe 01       	movw	r30, r28
    17b8:	e7 5a       	subi	r30, 0xA7	; 167
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	64 c0       	rjmp	.+200    	; 0x188e <Stepper_u8Rotation+0x3c2>
	else if (__tmp > 65535)
    17c6:	fe 01       	movw	r30, r28
    17c8:	e5 5a       	subi	r30, 0xA5	; 165
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	57 e4       	ldi	r21, 0x47	; 71
    17dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <Stepper_u8Rotation+0x31a>
    17e4:	43 c0       	rjmp	.+134    	; 0x186c <Stepper_u8Rotation+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	fe 01       	movw	r30, r28
    17e8:	e1 5a       	subi	r30, 0xA1	; 161
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8e 01       	movw	r16, r28
    1806:	07 5a       	subi	r16, 0xA7	; 167
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	f8 01       	movw	r30, r16
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
    181c:	1f c0       	rjmp	.+62     	; 0x185c <Stepper_u8Rotation+0x390>
    181e:	fe 01       	movw	r30, r28
    1820:	e9 5a       	subi	r30, 0xA9	; 169
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	fe 01       	movw	r30, r28
    182e:	e9 5a       	subi	r30, 0xA9	; 169
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <Stepper_u8Rotation+0x36a>
    183a:	fe 01       	movw	r30, r28
    183c:	e9 5a       	subi	r30, 0xA9	; 169
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	de 01       	movw	r26, r28
    1846:	a7 5a       	subi	r26, 0xA7	; 167
    1848:	bf 4f       	sbci	r27, 0xFF	; 255
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5a       	subi	r30, 0xA7	; 167
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	11 96       	adiw	r26, 0x01	; 1
    1858:	9c 93       	st	X, r25
    185a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185c:	fe 01       	movw	r30, r28
    185e:	e7 5a       	subi	r30, 0xA7	; 167
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	d1 f6       	brne	.-76     	; 0x181e <Stepper_u8Rotation+0x352>
    186a:	27 c0       	rjmp	.+78     	; 0x18ba <Stepper_u8Rotation+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186c:	8e 01       	movw	r16, r28
    186e:	07 5a       	subi	r16, 0xA7	; 167
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	fe 01       	movw	r30, r28
    1874:	e5 5a       	subi	r30, 0xA5	; 165
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	f8 01       	movw	r30, r16
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
    188e:	de 01       	movw	r26, r28
    1890:	ab 5a       	subi	r26, 0xAB	; 171
    1892:	bf 4f       	sbci	r27, 0xFF	; 255
    1894:	fe 01       	movw	r30, r28
    1896:	e7 5a       	subi	r30, 0xA7	; 167
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	8d 93       	st	X+, r24
    18a0:	9c 93       	st	X, r25
    18a2:	fe 01       	movw	r30, r28
    18a4:	eb 5a       	subi	r30, 0xAB	; 171
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <Stepper_u8Rotation+0x3e0>
    18b0:	fe 01       	movw	r30, r28
    18b2:	eb 5a       	subi	r30, 0xAB	; 171
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
		_delay_ms(5);

        //STEP 3
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	63 e0       	ldi	r22, 0x03	; 3
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	64 e0       	ldi	r22, 0x04	; 4
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	65 e0       	ldi	r22, 0x05	; 5
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	66 e0       	ldi	r22, 0x06	; 6
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    18e2:	fe 01       	movw	r30, r28
    18e4:	ef 5a       	subi	r30, 0xAF	; 175
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 ea       	ldi	r26, 0xA0	; 160
    18ee:	b0 e4       	ldi	r27, 0x40	; 64
    18f0:	80 83       	st	Z, r24
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	a2 83       	std	Z+2, r26	; 0x02
    18f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	8e 01       	movw	r16, r28
    18fa:	03 5b       	subi	r16, 0xB3	; 179
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	ef 5a       	subi	r30, 0xAF	; 175
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a ef       	ldi	r20, 0xFA	; 250
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	f8 01       	movw	r30, r16
    191e:	80 83       	st	Z, r24
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	a2 83       	std	Z+2, r26	; 0x02
    1924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1926:	fe 01       	movw	r30, r28
    1928:	e3 5b       	subi	r30, 0xB3	; 179
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	44 f4       	brge	.+16     	; 0x1954 <Stepper_u8Rotation+0x488>
		__ticks = 1;
    1944:	fe 01       	movw	r30, r28
    1946:	e5 5b       	subi	r30, 0xB5	; 181
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
    1952:	64 c0       	rjmp	.+200    	; 0x1a1c <Stepper_u8Rotation+0x550>
	else if (__tmp > 65535)
    1954:	fe 01       	movw	r30, r28
    1956:	e3 5b       	subi	r30, 0xB3	; 179
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	0c f0       	brlt	.+2      	; 0x1974 <Stepper_u8Rotation+0x4a8>
    1972:	43 c0       	rjmp	.+134    	; 0x19fa <Stepper_u8Rotation+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1974:	fe 01       	movw	r30, r28
    1976:	ef 5a       	subi	r30, 0xAF	; 175
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e2       	ldi	r20, 0x20	; 32
    1988:	51 e4       	ldi	r21, 0x41	; 65
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8e 01       	movw	r16, r28
    1994:	05 5b       	subi	r16, 0xB5	; 181
    1996:	1f 4f       	sbci	r17, 0xFF	; 255
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	f8 01       	movw	r30, r16
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	1f c0       	rjmp	.+62     	; 0x19ea <Stepper_u8Rotation+0x51e>
    19ac:	fe 01       	movw	r30, r28
    19ae:	e7 5b       	subi	r30, 0xB7	; 183
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	88 ec       	ldi	r24, 0xC8	; 200
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24
    19ba:	fe 01       	movw	r30, r28
    19bc:	e7 5b       	subi	r30, 0xB7	; 183
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <Stepper_u8Rotation+0x4f8>
    19c8:	fe 01       	movw	r30, r28
    19ca:	e7 5b       	subi	r30, 0xB7	; 183
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d2:	de 01       	movw	r26, r28
    19d4:	a5 5b       	subi	r26, 0xB5	; 181
    19d6:	bf 4f       	sbci	r27, 0xFF	; 255
    19d8:	fe 01       	movw	r30, r28
    19da:	e5 5b       	subi	r30, 0xB5	; 181
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	11 96       	adiw	r26, 0x01	; 1
    19e6:	9c 93       	st	X, r25
    19e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	fe 01       	movw	r30, r28
    19ec:	e5 5b       	subi	r30, 0xB5	; 181
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	d1 f6       	brne	.-76     	; 0x19ac <Stepper_u8Rotation+0x4e0>
    19f8:	27 c0       	rjmp	.+78     	; 0x1a48 <Stepper_u8Rotation+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	8e 01       	movw	r16, r28
    19fc:	05 5b       	subi	r16, 0xB5	; 181
    19fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1a00:	fe 01       	movw	r30, r28
    1a02:	e3 5b       	subi	r30, 0xB3	; 179
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	f8 01       	movw	r30, r16
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    1a1c:	de 01       	movw	r26, r28
    1a1e:	a9 5b       	subi	r26, 0xB9	; 185
    1a20:	bf 4f       	sbci	r27, 0xFF	; 255
    1a22:	fe 01       	movw	r30, r28
    1a24:	e5 5b       	subi	r30, 0xB5	; 181
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	8d 93       	st	X+, r24
    1a2e:	9c 93       	st	X, r25
    1a30:	fe 01       	movw	r30, r28
    1a32:	e9 5b       	subi	r30, 0xB9	; 185
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <Stepper_u8Rotation+0x56e>
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e9 5b       	subi	r30, 0xB9	; 185
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	80 83       	st	Z, r24
		_delay_ms(5);

        //STEP 4
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	63 e0       	ldi	r22, 0x03	; 3
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	64 e0       	ldi	r22, 0x04	; 4
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	65 e0       	ldi	r22, 0x05	; 5
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	66 e0       	ldi	r22, 0x06	; 6
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    1a70:	fe 01       	movw	r30, r28
    1a72:	ed 5b       	subi	r30, 0xBD	; 189
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a7c:	b0 e4       	ldi	r27, 0x40	; 64
    1a7e:	80 83       	st	Z, r24
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	a2 83       	std	Z+2, r26	; 0x02
    1a84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	8e 01       	movw	r16, r28
    1a88:	01 5c       	subi	r16, 0xC1	; 193
    1a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	ed 5b       	subi	r30, 0xBD	; 189
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	4a ef       	ldi	r20, 0xFA	; 250
    1aa0:	54 e4       	ldi	r21, 0x44	; 68
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	f8 01       	movw	r30, r16
    1aac:	80 83       	st	Z, r24
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	a2 83       	std	Z+2, r26	; 0x02
    1ab2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ff 96       	adiw	r30, 0x3f	; 63
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	2c f4       	brge	.+10     	; 0x1ada <Stepper_u8Rotation+0x60e>
		__ticks = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9e af       	std	Y+62, r25	; 0x3e
    1ad6:	8d af       	std	Y+61, r24	; 0x3d
    1ad8:	46 c0       	rjmp	.+140    	; 0x1b66 <Stepper_u8Rotation+0x69a>
	else if (__tmp > 65535)
    1ada:	fe 01       	movw	r30, r28
    1adc:	ff 96       	adiw	r30, 0x3f	; 63
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	64 f5       	brge	.+88     	; 0x1b4e <Stepper_u8Rotation+0x682>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	fe 01       	movw	r30, r28
    1af8:	ed 5b       	subi	r30, 0xBD	; 189
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	60 81       	ld	r22, Z
    1afe:	71 81       	ldd	r23, Z+1	; 0x01
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	93 81       	ldd	r25, Z+3	; 0x03
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9e af       	std	Y+62, r25	; 0x3e
    1b22:	8d af       	std	Y+61, r24	; 0x3d
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <Stepper_u8Rotation+0x678>
    1b26:	88 ec       	ldi	r24, 0xC8	; 200
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9c af       	std	Y+60, r25	; 0x3c
    1b2c:	8b af       	std	Y+59, r24	; 0x3b
    1b2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b30:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <Stepper_u8Rotation+0x666>
    1b36:	9c af       	std	Y+60, r25	; 0x3c
    1b38:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	9e af       	std	Y+62, r25	; 0x3e
    1b42:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	69 f7       	brne	.-38     	; 0x1b26 <Stepper_u8Rotation+0x65a>
    1b4c:	16 c0       	rjmp	.+44     	; 0x1b7a <Stepper_u8Rotation+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	fe 01       	movw	r30, r28
    1b50:	ff 96       	adiw	r30, 0x3f	; 63
    1b52:	60 81       	ld	r22, Z
    1b54:	71 81       	ldd	r23, Z+1	; 0x01
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9e af       	std	Y+62, r25	; 0x3e
    1b64:	8d af       	std	Y+61, r24	; 0x3d
    1b66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b6a:	9a af       	std	Y+58, r25	; 0x3a
    1b6c:	89 af       	std	Y+57, r24	; 0x39
    1b6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b70:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <Stepper_u8Rotation+0x6a6>
    1b76:	9a af       	std	Y+58, r25	; 0x3a
    1b78:	89 af       	std	Y+57, r24	; 0x39
	    u32 NumberofSteps = (u32)((Copy_u16Angle * 2048UL)/360);
		NumberofSteps = NumberofSteps / 4 ;
		
		if(Copy_u8Direction == AntiClockwise)
		{
		for(i=0; i < NumberofSteps ; i++)
    1b7a:	80 91 68 00 	lds	r24, 0x0068
    1b7e:	90 91 69 00 	lds	r25, 0x0069
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	90 93 69 00 	sts	0x0069, r25
    1b88:	80 93 68 00 	sts	0x0068, r24
    1b8c:	80 91 68 00 	lds	r24, 0x0068
    1b90:	90 91 69 00 	lds	r25, 0x0069
    1b94:	9c 01       	movw	r18, r24
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ef 58       	subi	r30, 0x8F	; 143
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ba6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ba8:	28 17       	cp	r18, r24
    1baa:	39 07       	cpc	r19, r25
    1bac:	4a 07       	cpc	r20, r26
    1bae:	5b 07       	cpc	r21, r27
    1bb0:	08 f4       	brcc	.+2      	; 0x1bb4 <Stepper_u8Rotation+0x6e8>
    1bb2:	f5 cc       	rjmp	.-1558   	; 0x159e <Stepper_u8Rotation+0xd2>
    1bb4:	41 c2       	rjmp	.+1154   	; 0x2038 <Stepper_u8Rotation+0xb6c>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
		_delay_ms(5);

		}
		}
		else if(Copy_u8Direction == Clockwise)
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e9 58       	subi	r30, 0x89	; 137
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	88 23       	and	r24, r24
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <Stepper_u8Rotation+0x6f8>
    1bc2:	3a c2       	rjmp	.+1140   	; 0x2038 <Stepper_u8Rotation+0xb6c>
		{
		for(i=0; i < NumberofSteps ; i++)
    1bc4:	10 92 69 00 	sts	0x0069, r1
    1bc8:	10 92 68 00 	sts	0x0068, r1
    1bcc:	21 c2       	rjmp	.+1090   	; 0x2010 <Stepper_u8Rotation+0xb44>
		{

		//STEP 1
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	63 e0       	ldi	r22, 0x03	; 3
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	64 e0       	ldi	r22, 0x04	; 4
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	65 e0       	ldi	r22, 0x05	; 5
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	66 e0       	ldi	r22, 0x06	; 6
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 ea       	ldi	r26, 0xA0	; 160
    1bfc:	b0 e4       	ldi	r27, 0x40	; 64
    1bfe:	8d ab       	std	Y+53, r24	; 0x35
    1c00:	9e ab       	std	Y+54, r25	; 0x36
    1c02:	af ab       	std	Y+55, r26	; 0x37
    1c04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	6d a9       	ldd	r22, Y+53	; 0x35
    1c08:	7e a9       	ldd	r23, Y+54	; 0x36
    1c0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a ef       	ldi	r20, 0xFA	; 250
    1c14:	54 e4       	ldi	r21, 0x44	; 68
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	89 ab       	std	Y+49, r24	; 0x31
    1c20:	9a ab       	std	Y+50, r25	; 0x32
    1c22:	ab ab       	std	Y+51, r26	; 0x33
    1c24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c26:	69 a9       	ldd	r22, Y+49	; 0x31
    1c28:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <Stepper_u8Rotation+0x77c>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	98 ab       	std	Y+48, r25	; 0x30
    1c44:	8f a7       	std	Y+47, r24	; 0x2f
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <Stepper_u8Rotation+0x7fa>
	else if (__tmp > 65535)
    1c48:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <Stepper_u8Rotation+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	6d a9       	ldd	r22, Y+53	; 0x35
    1c62:	7e a9       	ldd	r23, Y+54	; 0x36
    1c64:	8f a9       	ldd	r24, Y+55	; 0x37
    1c66:	98 ad       	ldd	r25, Y+56	; 0x38
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	98 ab       	std	Y+48, r25	; 0x30
    1c86:	8f a7       	std	Y+47, r24	; 0x2f
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <Stepper_u8Rotation+0x7dc>
    1c8a:	88 ec       	ldi	r24, 0xC8	; 200
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9e a7       	std	Y+46, r25	; 0x2e
    1c90:	8d a7       	std	Y+45, r24	; 0x2d
    1c92:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c94:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <Stepper_u8Rotation+0x7ca>
    1c9a:	9e a7       	std	Y+46, r25	; 0x2e
    1c9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	98 ab       	std	Y+48, r25	; 0x30
    1ca6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1caa:	98 a9       	ldd	r25, Y+48	; 0x30
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <Stepper_u8Rotation+0x7be>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <Stepper_u8Rotation+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	98 ab       	std	Y+48, r25	; 0x30
    1cc4:	8f a7       	std	Y+47, r24	; 0x2f
    1cc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cca:	9c a7       	std	Y+44, r25	; 0x2c
    1ccc:	8b a7       	std	Y+43, r24	; 0x2b
    1cce:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <Stepper_u8Rotation+0x806>
    1cd6:	9c a7       	std	Y+44, r25	; 0x2c
    1cd8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);

        //STEP 2
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	64 e0       	ldi	r22, 0x04	; 4
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	65 e0       	ldi	r22, 0x05	; 5
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 ea       	ldi	r26, 0xA0	; 160
    1d08:	b0 e4       	ldi	r27, 0x40	; 64
    1d0a:	8f a3       	std	Y+39, r24	; 0x27
    1d0c:	98 a7       	std	Y+40, r25	; 0x28
    1d0e:	a9 a7       	std	Y+41, r26	; 0x29
    1d10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d12:	6f a1       	ldd	r22, Y+39	; 0x27
    1d14:	78 a5       	ldd	r23, Y+40	; 0x28
    1d16:	89 a5       	ldd	r24, Y+41	; 0x29
    1d18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4a ef       	ldi	r20, 0xFA	; 250
    1d20:	54 e4       	ldi	r21, 0x44	; 68
    1d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8b a3       	std	Y+35, r24	; 0x23
    1d2c:	9c a3       	std	Y+36, r25	; 0x24
    1d2e:	ad a3       	std	Y+37, r26	; 0x25
    1d30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d32:	6b a1       	ldd	r22, Y+35	; 0x23
    1d34:	7c a1       	ldd	r23, Y+36	; 0x24
    1d36:	8d a1       	ldd	r24, Y+37	; 0x25
    1d38:	9e a1       	ldd	r25, Y+38	; 0x26
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f e3       	ldi	r21, 0x3F	; 63
    1d42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <Stepper_u8Rotation+0x888>
		__ticks = 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9a a3       	std	Y+34, r25	; 0x22
    1d50:	89 a3       	std	Y+33, r24	; 0x21
    1d52:	3f c0       	rjmp	.+126    	; 0x1dd2 <Stepper_u8Rotation+0x906>
	else if (__tmp > 65535)
    1d54:	6b a1       	ldd	r22, Y+35	; 0x23
    1d56:	7c a1       	ldd	r23, Y+36	; 0x24
    1d58:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    1d60:	4f e7       	ldi	r20, 0x7F	; 127
    1d62:	57 e4       	ldi	r21, 0x47	; 71
    1d64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d68:	18 16       	cp	r1, r24
    1d6a:	4c f5       	brge	.+82     	; 0x1dbe <Stepper_u8Rotation+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d70:	89 a5       	ldd	r24, Y+41	; 0x29
    1d72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9a a3       	std	Y+34, r25	; 0x22
    1d92:	89 a3       	std	Y+33, r24	; 0x21
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <Stepper_u8Rotation+0x8e8>
    1d96:	88 ec       	ldi	r24, 0xC8	; 200
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	98 a3       	std	Y+32, r25	; 0x20
    1d9c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1da0:	98 a1       	ldd	r25, Y+32	; 0x20
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <Stepper_u8Rotation+0x8d6>
    1da6:	98 a3       	std	Y+32, r25	; 0x20
    1da8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1daa:	89 a1       	ldd	r24, Y+33	; 0x21
    1dac:	9a a1       	ldd	r25, Y+34	; 0x22
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	9a a3       	std	Y+34, r25	; 0x22
    1db2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db4:	89 a1       	ldd	r24, Y+33	; 0x21
    1db6:	9a a1       	ldd	r25, Y+34	; 0x22
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <Stepper_u8Rotation+0x8ca>
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <Stepper_u8Rotation+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9a a3       	std	Y+34, r25	; 0x22
    1dd0:	89 a3       	std	Y+33, r24	; 0x21
    1dd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ddc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <Stepper_u8Rotation+0x912>
    1de2:	9e 8f       	std	Y+30, r25	; 0x1e
    1de4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);

        //STEP 3
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	63 e0       	ldi	r22, 0x03	; 3
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	64 e0       	ldi	r22, 0x04	; 4
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	65 e0       	ldi	r22, 0x05	; 5
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	66 e0       	ldi	r22, 0x06	; 6
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 ea       	ldi	r26, 0xA0	; 160
    1e14:	b0 e4       	ldi	r27, 0x40	; 64
    1e16:	89 8f       	std	Y+25, r24	; 0x19
    1e18:	9a 8f       	std	Y+26, r25	; 0x1a
    1e1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a ef       	ldi	r20, 0xFA	; 250
    1e2c:	54 e4       	ldi	r21, 0x44	; 68
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8d 8b       	std	Y+21, r24	; 0x15
    1e38:	9e 8b       	std	Y+22, r25	; 0x16
    1e3a:	af 8b       	std	Y+23, r26	; 0x17
    1e3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <Stepper_u8Rotation+0x994>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9c 8b       	std	Y+20, r25	; 0x14
    1e5c:	8b 8b       	std	Y+19, r24	; 0x13
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <Stepper_u8Rotation+0xa12>
	else if (__tmp > 65535)
    1e60:	6d 89       	ldd	r22, Y+21	; 0x15
    1e62:	7e 89       	ldd	r23, Y+22	; 0x16
    1e64:	8f 89       	ldd	r24, Y+23	; 0x17
    1e66:	98 8d       	ldd	r25, Y+24	; 0x18
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <Stepper_u8Rotation+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	69 8d       	ldd	r22, Y+25	; 0x19
    1e7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <Stepper_u8Rotation+0x9f4>
    1ea2:	88 ec       	ldi	r24, 0xC8	; 200
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9a 8b       	std	Y+18, r25	; 0x12
    1ea8:	89 8b       	std	Y+17, r24	; 0x11
    1eaa:	89 89       	ldd	r24, Y+17	; 0x11
    1eac:	9a 89       	ldd	r25, Y+18	; 0x12
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <Stepper_u8Rotation+0x9e2>
    1eb2:	9a 8b       	std	Y+18, r25	; 0x12
    1eb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <Stepper_u8Rotation+0x9d6>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <Stepper_u8Rotation+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ece:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee2:	98 8b       	std	Y+16, r25	; 0x10
    1ee4:	8f 87       	std	Y+15, r24	; 0x0f
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	98 89       	ldd	r25, Y+16	; 0x10
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <Stepper_u8Rotation+0xa1e>
    1eee:	98 8b       	std	Y+16, r25	; 0x10
    1ef0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

        //STEP 4
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	63 e0       	ldi	r22, 0x03	; 3
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	64 e0       	ldi	r22, 0x04	; 4
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	65 e0       	ldi	r22, 0x05	; 5
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	66 e0       	ldi	r22, 0x06	; 6
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 ea       	ldi	r26, 0xA0	; 160
    1f20:	b0 e4       	ldi	r27, 0x40	; 64
    1f22:	8b 87       	std	Y+11, r24	; 0x0b
    1f24:	9c 87       	std	Y+12, r25	; 0x0c
    1f26:	ad 87       	std	Y+13, r26	; 0x0d
    1f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a ef       	ldi	r20, 0xFA	; 250
    1f38:	54 e4       	ldi	r21, 0x44	; 68
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8f 83       	std	Y+7, r24	; 0x07
    1f44:	98 87       	std	Y+8, r25	; 0x08
    1f46:	a9 87       	std	Y+9, r26	; 0x09
    1f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <Stepper_u8Rotation+0xaa0>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <Stepper_u8Rotation+0xb1e>
	else if (__tmp > 65535)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <Stepper_u8Rotation+0xb0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <Stepper_u8Rotation+0xb00>
    1fae:	88 ec       	ldi	r24, 0xC8	; 200
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <Stepper_u8Rotation+0xaee>
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <Stepper_u8Rotation+0xae2>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <Stepper_u8Rotation+0xb32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <Stepper_u8Rotation+0xb2a>
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01

		}
		}
		else if(Copy_u8Direction == Clockwise)
		{
		for(i=0; i < NumberofSteps ; i++)
    1ffe:	80 91 68 00 	lds	r24, 0x0068
    2002:	90 91 69 00 	lds	r25, 0x0069
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	90 93 69 00 	sts	0x0069, r25
    200c:	80 93 68 00 	sts	0x0068, r24
    2010:	80 91 68 00 	lds	r24, 0x0068
    2014:	90 91 69 00 	lds	r25, 0x0069
    2018:	9c 01       	movw	r18, r24
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	fe 01       	movw	r30, r28
    2020:	ef 58       	subi	r30, 0x8F	; 143
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	a2 81       	ldd	r26, Z+2	; 0x02
    202a:	b3 81       	ldd	r27, Z+3	; 0x03
    202c:	28 17       	cp	r18, r24
    202e:	39 07       	cpc	r19, r25
    2030:	4a 07       	cpc	r20, r26
    2032:	5b 07       	cpc	r21, r27
    2034:	08 f4       	brcc	.+2      	; 0x2038 <Stepper_u8Rotation+0xb6c>
    2036:	cb cd       	rjmp	.-1130   	; 0x1bce <Stepper_u8Rotation+0x702>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
		_delay_ms(5);
		}
		}
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	63 e0       	ldi	r22, 0x03	; 3
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	64 e0       	ldi	r22, 0x04	; 4
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	65 e0       	ldi	r22, 0x05	; 5
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	66 e0       	ldi	r22, 0x06	; 6
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <Stepper_u8Rotation+0xb9a>
		
		
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2062:	10 92 6a 00 	sts	0x006A, r1
	}
	return Local_u8ErrorState;
    2066:	80 91 6a 00 	lds	r24, 0x006A
}
    206a:	c9 58       	subi	r28, 0x89	; 137
    206c:	df 4f       	sbci	r29, 0xFF	; 255
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	08 95       	ret

00002082 <Stepper_voidStop>:

void Stepper_voidStop(void)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	63 e0       	ldi	r22, 0x03	; 3
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	64 e0       	ldi	r22, 0x04	; 4
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	65 e0       	ldi	r22, 0x05	; 5
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	66 e0       	ldi	r22, 0x06	; 6
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>

}
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <DC_voidRotation>:

void DC_voidRotation(u8 Copy_u8Direction)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == Clockwise)
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	88 23       	and	r24, r24
    20c8:	59 f4       	brne	.+22     	; 0x20e0 <DC_voidRotation+0x28>
	{
		DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_LOW);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_HIGH);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
    20de:	0d c0       	rjmp	.+26     	; 0x20fa <DC_voidRotation+0x42>
	}
	else if(Copy_u8Direction == AntiClockwise)
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	81 30       	cpi	r24, 0x01	; 1
    20e4:	51 f4       	brne	.+20     	; 0x20fa <DC_voidRotation+0x42>
	{
		DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_LOW);
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_HIGH);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
	}


}
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <DC_voidStop>:

void DC_voidStop(void)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_LOW);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_LOW);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_u8SetPinValue>
}
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <main>:
#include "STP_interface.h"



int main (void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Init();
    212c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8Init>

	Stepper_u8Rotation(300,Clockwise);
    2130:	8c e2       	ldi	r24, 0x2C	; 44
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Stepper_u8Rotation>



	return 0;
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
}
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <__udivmodsi4>:
    2144:	a1 e2       	ldi	r26, 0x21	; 33
    2146:	1a 2e       	mov	r1, r26
    2148:	aa 1b       	sub	r26, r26
    214a:	bb 1b       	sub	r27, r27
    214c:	fd 01       	movw	r30, r26
    214e:	0d c0       	rjmp	.+26     	; 0x216a <__udivmodsi4_ep>

00002150 <__udivmodsi4_loop>:
    2150:	aa 1f       	adc	r26, r26
    2152:	bb 1f       	adc	r27, r27
    2154:	ee 1f       	adc	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	a2 17       	cp	r26, r18
    215a:	b3 07       	cpc	r27, r19
    215c:	e4 07       	cpc	r30, r20
    215e:	f5 07       	cpc	r31, r21
    2160:	20 f0       	brcs	.+8      	; 0x216a <__udivmodsi4_ep>
    2162:	a2 1b       	sub	r26, r18
    2164:	b3 0b       	sbc	r27, r19
    2166:	e4 0b       	sbc	r30, r20
    2168:	f5 0b       	sbc	r31, r21

0000216a <__udivmodsi4_ep>:
    216a:	66 1f       	adc	r22, r22
    216c:	77 1f       	adc	r23, r23
    216e:	88 1f       	adc	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	1a 94       	dec	r1
    2174:	69 f7       	brne	.-38     	; 0x2150 <__udivmodsi4_loop>
    2176:	60 95       	com	r22
    2178:	70 95       	com	r23
    217a:	80 95       	com	r24
    217c:	90 95       	com	r25
    217e:	9b 01       	movw	r18, r22
    2180:	ac 01       	movw	r20, r24
    2182:	bd 01       	movw	r22, r26
    2184:	cf 01       	movw	r24, r30
    2186:	08 95       	ret

00002188 <__prologue_saves__>:
    2188:	2f 92       	push	r2
    218a:	3f 92       	push	r3
    218c:	4f 92       	push	r4
    218e:	5f 92       	push	r5
    2190:	6f 92       	push	r6
    2192:	7f 92       	push	r7
    2194:	8f 92       	push	r8
    2196:	9f 92       	push	r9
    2198:	af 92       	push	r10
    219a:	bf 92       	push	r11
    219c:	cf 92       	push	r12
    219e:	df 92       	push	r13
    21a0:	ef 92       	push	r14
    21a2:	ff 92       	push	r15
    21a4:	0f 93       	push	r16
    21a6:	1f 93       	push	r17
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	ca 1b       	sub	r28, r26
    21b2:	db 0b       	sbc	r29, r27
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	09 94       	ijmp

000021c0 <__epilogue_restores__>:
    21c0:	2a 88       	ldd	r2, Y+18	; 0x12
    21c2:	39 88       	ldd	r3, Y+17	; 0x11
    21c4:	48 88       	ldd	r4, Y+16	; 0x10
    21c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    21c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    21ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    21cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    21ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    21d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21d2:	b9 84       	ldd	r11, Y+9	; 0x09
    21d4:	c8 84       	ldd	r12, Y+8	; 0x08
    21d6:	df 80       	ldd	r13, Y+7	; 0x07
    21d8:	ee 80       	ldd	r14, Y+6	; 0x06
    21da:	fd 80       	ldd	r15, Y+5	; 0x05
    21dc:	0c 81       	ldd	r16, Y+4	; 0x04
    21de:	1b 81       	ldd	r17, Y+3	; 0x03
    21e0:	aa 81       	ldd	r26, Y+2	; 0x02
    21e2:	b9 81       	ldd	r27, Y+1	; 0x01
    21e4:	ce 0f       	add	r28, r30
    21e6:	d1 1d       	adc	r29, r1
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	ed 01       	movw	r28, r26
    21f4:	08 95       	ret

000021f6 <_exit>:
    21f6:	f8 94       	cli

000021f8 <__stop_program>:
    21f8:	ff cf       	rjmp	.-2      	; 0x21f8 <__stop_program>
