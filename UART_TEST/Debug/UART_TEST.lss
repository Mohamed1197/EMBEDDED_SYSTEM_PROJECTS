
UART_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e4a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002a  00800060  00800060  00000ebe  2**0
                  ALLOC
  2 .stab         0000123c  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c0f  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__vector_13>
  38:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 38       	cpi	r26, 0x8A	; 138
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 10 07 	call	0xe20	; 0xe20 <main>
  74:	0c 94 23 07 	jmp	0xe46	; 0xe46 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
  86:	ea e3       	ldi	r30, 0x3A	; 58
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
  9a:	e1 e3       	ldi	r30, 0x31	; 49
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
  a2:	eb e3       	ldi	r30, 0x3B	; 59
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
  a8:	e8 e3       	ldi	r30, 0x38	; 56
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
  ae:	e5 e3       	ldi	r30, 0x35	; 53
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
  b4:	e2 e3       	ldi	r30, 0x32	; 50
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
  ba:	0f 90       	pop	r0
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	2e 97       	sbiw	r28, 0x0e	; 14
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	8a 83       	std	Y+2, r24	; 0x02
  d8:	6b 83       	std	Y+3, r22	; 0x03
  da:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	08 f0       	brcs	.+2      	; 0xe8 <DIO_u8SetPinDirection+0x26>
  e6:	0c c1       	rjmp	.+536    	; 0x300 <DIO_u8SetPinDirection+0x23e>
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	08 f0       	brcs	.+2      	; 0xf0 <DIO_u8SetPinDirection+0x2e>
  ee:	08 c1       	rjmp	.+528    	; 0x300 <DIO_u8SetPinDirection+0x23e>
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
  f2:	88 23       	and	r24, r24
  f4:	21 f0       	breq	.+8      	; 0xfe <DIO_u8SetPinDirection+0x3c>
  f6:	8c 81       	ldd	r24, Y+4	; 0x04
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	09 f0       	breq	.+2      	; 0xfe <DIO_u8SetPinDirection+0x3c>
  fc:	01 c1       	rjmp	.+514    	; 0x300 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	3e 87       	std	Y+14, r19	; 0x0e
 106:	2d 87       	std	Y+13, r18	; 0x0d
 108:	8d 85       	ldd	r24, Y+13	; 0x0d
 10a:	9e 85       	ldd	r25, Y+14	; 0x0e
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	09 f4       	brne	.+2      	; 0x114 <DIO_u8SetPinDirection+0x52>
 112:	4f c0       	rjmp	.+158    	; 0x1b2 <DIO_u8SetPinDirection+0xf0>
 114:	2d 85       	ldd	r18, Y+13	; 0x0d
 116:	3e 85       	ldd	r19, Y+14	; 0x0e
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	2c f4       	brge	.+10     	; 0x128 <DIO_u8SetPinDirection+0x66>
 11e:	8d 85       	ldd	r24, Y+13	; 0x0d
 120:	9e 85       	ldd	r25, Y+14	; 0x0e
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	71 f0       	breq	.+28     	; 0x142 <DIO_u8SetPinDirection+0x80>
 126:	ed c0       	rjmp	.+474    	; 0x302 <DIO_u8SetPinDirection+0x240>
 128:	2d 85       	ldd	r18, Y+13	; 0x0d
 12a:	3e 85       	ldd	r19, Y+14	; 0x0e
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	31 05       	cpc	r19, r1
 130:	09 f4       	brne	.+2      	; 0x134 <DIO_u8SetPinDirection+0x72>
 132:	77 c0       	rjmp	.+238    	; 0x222 <DIO_u8SetPinDirection+0x160>
 134:	8d 85       	ldd	r24, Y+13	; 0x0d
 136:	9e 85       	ldd	r25, Y+14	; 0x0e
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	91 05       	cpc	r25, r1
 13c:	09 f4       	brne	.+2      	; 0x140 <DIO_u8SetPinDirection+0x7e>
 13e:	a9 c0       	rjmp	.+338    	; 0x292 <DIO_u8SetPinDirection+0x1d0>
 140:	e0 c0       	rjmp	.+448    	; 0x302 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	3c 87       	std	Y+12, r19	; 0x0c
 14a:	2b 87       	std	Y+11, r18	; 0x0b
 14c:	8b 85       	ldd	r24, Y+11	; 0x0b
 14e:	9c 85       	ldd	r25, Y+12	; 0x0c
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	d1 f0       	breq	.+52     	; 0x188 <DIO_u8SetPinDirection+0xc6>
 154:	2b 85       	ldd	r18, Y+11	; 0x0b
 156:	3c 85       	ldd	r19, Y+12	; 0x0c
 158:	21 30       	cpi	r18, 0x01	; 1
 15a:	31 05       	cpc	r19, r1
 15c:	09 f0       	breq	.+2      	; 0x160 <DIO_u8SetPinDirection+0x9e>
 15e:	d1 c0       	rjmp	.+418    	; 0x302 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
 160:	aa e3       	ldi	r26, 0x3A	; 58
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	ea e3       	ldi	r30, 0x3A	; 58
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_u8SetPinDirection+0xbc>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_u8SetPinDirection+0xb8>
 182:	84 2b       	or	r24, r20
 184:	8c 93       	st	X, r24
 186:	bd c0       	rjmp	.+378    	; 0x302 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
 188:	aa e3       	ldi	r26, 0x3A	; 58
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	ea e3       	ldi	r30, 0x3A	; 58
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	48 2f       	mov	r20, r24
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 2e       	mov	r0, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_u8SetPinDirection+0xe4>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_u8SetPinDirection+0xe0>
 1aa:	80 95       	com	r24
 1ac:	84 23       	and	r24, r20
 1ae:	8c 93       	st	X, r24
 1b0:	a8 c0       	rjmp	.+336    	; 0x302 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
 1b2:	8c 81       	ldd	r24, Y+4	; 0x04
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	3a 87       	std	Y+10, r19	; 0x0a
 1ba:	29 87       	std	Y+9, r18	; 0x09
 1bc:	89 85       	ldd	r24, Y+9	; 0x09
 1be:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	d1 f0       	breq	.+52     	; 0x1f8 <DIO_u8SetPinDirection+0x136>
 1c4:	29 85       	ldd	r18, Y+9	; 0x09
 1c6:	3a 85       	ldd	r19, Y+10	; 0x0a
 1c8:	21 30       	cpi	r18, 0x01	; 1
 1ca:	31 05       	cpc	r19, r1
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <DIO_u8SetPinDirection+0x10e>
 1ce:	99 c0       	rjmp	.+306    	; 0x302 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
 1d0:	a7 e3       	ldi	r26, 0x37	; 55
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	e7 e3       	ldi	r30, 0x37	; 55
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	48 2f       	mov	r20, r24
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	28 2f       	mov	r18, r24
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 2e       	mov	r0, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_u8SetPinDirection+0x12c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_u8SetPinDirection+0x128>
 1f2:	84 2b       	or	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	85 c0       	rjmp	.+266    	; 0x302 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
 1f8:	a7 e3       	ldi	r26, 0x37	; 55
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e7 e3       	ldi	r30, 0x37	; 55
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_u8SetPinDirection+0x154>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_u8SetPinDirection+0x150>
 21a:	80 95       	com	r24
 21c:	84 23       	and	r24, r20
 21e:	8c 93       	st	X, r24
 220:	70 c0       	rjmp	.+224    	; 0x302 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
 222:	8c 81       	ldd	r24, Y+4	; 0x04
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	38 87       	std	Y+8, r19	; 0x08
 22a:	2f 83       	std	Y+7, r18	; 0x07
 22c:	8f 81       	ldd	r24, Y+7	; 0x07
 22e:	98 85       	ldd	r25, Y+8	; 0x08
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	d1 f0       	breq	.+52     	; 0x268 <DIO_u8SetPinDirection+0x1a6>
 234:	2f 81       	ldd	r18, Y+7	; 0x07
 236:	38 85       	ldd	r19, Y+8	; 0x08
 238:	21 30       	cpi	r18, 0x01	; 1
 23a:	31 05       	cpc	r19, r1
 23c:	09 f0       	breq	.+2      	; 0x240 <DIO_u8SetPinDirection+0x17e>
 23e:	61 c0       	rjmp	.+194    	; 0x302 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
 240:	a4 e3       	ldi	r26, 0x34	; 52
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e4 e3       	ldi	r30, 0x34	; 52
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	48 2f       	mov	r20, r24
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_u8SetPinDirection+0x19c>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_u8SetPinDirection+0x198>
 262:	84 2b       	or	r24, r20
 264:	8c 93       	st	X, r24
 266:	4d c0       	rjmp	.+154    	; 0x302 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
 268:	a4 e3       	ldi	r26, 0x34	; 52
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	e4 e3       	ldi	r30, 0x34	; 52
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	48 2f       	mov	r20, r24
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 2e       	mov	r0, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8SetPinDirection+0x1c4>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8SetPinDirection+0x1c0>
 28a:	80 95       	com	r24
 28c:	84 23       	and	r24, r20
 28e:	8c 93       	st	X, r24
 290:	38 c0       	rjmp	.+112    	; 0x302 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
 292:	8c 81       	ldd	r24, Y+4	; 0x04
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	3e 83       	std	Y+6, r19	; 0x06
 29a:	2d 83       	std	Y+5, r18	; 0x05
 29c:	8d 81       	ldd	r24, Y+5	; 0x05
 29e:	9e 81       	ldd	r25, Y+6	; 0x06
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	c9 f0       	breq	.+50     	; 0x2d6 <DIO_u8SetPinDirection+0x214>
 2a4:	2d 81       	ldd	r18, Y+5	; 0x05
 2a6:	3e 81       	ldd	r19, Y+6	; 0x06
 2a8:	21 30       	cpi	r18, 0x01	; 1
 2aa:	31 05       	cpc	r19, r1
 2ac:	51 f5       	brne	.+84     	; 0x302 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
 2ae:	a1 e3       	ldi	r26, 0x31	; 49
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	e1 e3       	ldi	r30, 0x31	; 49
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	48 2f       	mov	r20, r24
 2ba:	8b 81       	ldd	r24, Y+3	; 0x03
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_u8SetPinDirection+0x20a>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_u8SetPinDirection+0x206>
 2d0:	84 2b       	or	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	16 c0       	rjmp	.+44     	; 0x302 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
 2d6:	a1 e3       	ldi	r26, 0x31	; 49
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e1 e3       	ldi	r30, 0x31	; 49
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_u8SetPinDirection+0x232>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_u8SetPinDirection+0x22e>
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	8c 93       	st	X, r24
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
 300:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 302:	89 81       	ldd	r24, Y+1	; 0x01
}
 304:	2e 96       	adiw	r28, 0x0e	; 14
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	08 95       	ret

00000316 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
 316:	df 93       	push	r29
 318:	cf 93       	push	r28
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	2e 97       	sbiw	r28, 0x0e	; 14
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	8a 83       	std	Y+2, r24	; 0x02
 32c:	6b 83       	std	Y+3, r22	; 0x03
 32e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	84 30       	cpi	r24, 0x04	; 4
 338:	08 f0       	brcs	.+2      	; 0x33c <DIO_u8SetPinValue+0x26>
 33a:	0c c1       	rjmp	.+536    	; 0x554 <DIO_u8SetPinValue+0x23e>
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
 33e:	88 30       	cpi	r24, 0x08	; 8
 340:	08 f0       	brcs	.+2      	; 0x344 <DIO_u8SetPinValue+0x2e>
 342:	08 c1       	rjmp	.+528    	; 0x554 <DIO_u8SetPinValue+0x23e>
 344:	8c 81       	ldd	r24, Y+4	; 0x04
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	21 f0       	breq	.+8      	; 0x352 <DIO_u8SetPinValue+0x3c>
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	88 23       	and	r24, r24
 34e:	09 f0       	breq	.+2      	; 0x352 <DIO_u8SetPinValue+0x3c>
 350:	01 c1       	rjmp	.+514    	; 0x554 <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	3e 87       	std	Y+14, r19	; 0x0e
 35a:	2d 87       	std	Y+13, r18	; 0x0d
 35c:	8d 85       	ldd	r24, Y+13	; 0x0d
 35e:	9e 85       	ldd	r25, Y+14	; 0x0e
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	91 05       	cpc	r25, r1
 364:	09 f4       	brne	.+2      	; 0x368 <DIO_u8SetPinValue+0x52>
 366:	4f c0       	rjmp	.+158    	; 0x406 <DIO_u8SetPinValue+0xf0>
 368:	2d 85       	ldd	r18, Y+13	; 0x0d
 36a:	3e 85       	ldd	r19, Y+14	; 0x0e
 36c:	22 30       	cpi	r18, 0x02	; 2
 36e:	31 05       	cpc	r19, r1
 370:	2c f4       	brge	.+10     	; 0x37c <DIO_u8SetPinValue+0x66>
 372:	8d 85       	ldd	r24, Y+13	; 0x0d
 374:	9e 85       	ldd	r25, Y+14	; 0x0e
 376:	00 97       	sbiw	r24, 0x00	; 0
 378:	71 f0       	breq	.+28     	; 0x396 <DIO_u8SetPinValue+0x80>
 37a:	ed c0       	rjmp	.+474    	; 0x556 <DIO_u8SetPinValue+0x240>
 37c:	2d 85       	ldd	r18, Y+13	; 0x0d
 37e:	3e 85       	ldd	r19, Y+14	; 0x0e
 380:	22 30       	cpi	r18, 0x02	; 2
 382:	31 05       	cpc	r19, r1
 384:	09 f4       	brne	.+2      	; 0x388 <DIO_u8SetPinValue+0x72>
 386:	77 c0       	rjmp	.+238    	; 0x476 <DIO_u8SetPinValue+0x160>
 388:	8d 85       	ldd	r24, Y+13	; 0x0d
 38a:	9e 85       	ldd	r25, Y+14	; 0x0e
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	91 05       	cpc	r25, r1
 390:	09 f4       	brne	.+2      	; 0x394 <DIO_u8SetPinValue+0x7e>
 392:	a9 c0       	rjmp	.+338    	; 0x4e6 <DIO_u8SetPinValue+0x1d0>
 394:	e0 c0       	rjmp	.+448    	; 0x556 <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
 396:	8c 81       	ldd	r24, Y+4	; 0x04
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	3c 87       	std	Y+12, r19	; 0x0c
 39e:	2b 87       	std	Y+11, r18	; 0x0b
 3a0:	8b 85       	ldd	r24, Y+11	; 0x0b
 3a2:	9c 85       	ldd	r25, Y+12	; 0x0c
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	d1 f0       	breq	.+52     	; 0x3dc <DIO_u8SetPinValue+0xc6>
 3a8:	2b 85       	ldd	r18, Y+11	; 0x0b
 3aa:	3c 85       	ldd	r19, Y+12	; 0x0c
 3ac:	21 30       	cpi	r18, 0x01	; 1
 3ae:	31 05       	cpc	r19, r1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_u8SetPinValue+0x9e>
 3b2:	d1 c0       	rjmp	.+418    	; 0x556 <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
 3b4:	ab e3       	ldi	r26, 0x3B	; 59
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	eb e3       	ldi	r30, 0x3B	; 59
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	48 2f       	mov	r20, r24
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 2e       	mov	r0, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_u8SetPinValue+0xbc>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_u8SetPinValue+0xb8>
 3d6:	84 2b       	or	r24, r20
 3d8:	8c 93       	st	X, r24
 3da:	bd c0       	rjmp	.+378    	; 0x556 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
 3dc:	ab e3       	ldi	r26, 0x3B	; 59
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	eb e3       	ldi	r30, 0x3B	; 59
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	48 2f       	mov	r20, r24
 3e8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 2e       	mov	r0, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_u8SetPinValue+0xe4>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_u8SetPinValue+0xe0>
 3fe:	80 95       	com	r24
 400:	84 23       	and	r24, r20
 402:	8c 93       	st	X, r24
 404:	a8 c0       	rjmp	.+336    	; 0x556 <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
 406:	8c 81       	ldd	r24, Y+4	; 0x04
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	3a 87       	std	Y+10, r19	; 0x0a
 40e:	29 87       	std	Y+9, r18	; 0x09
 410:	89 85       	ldd	r24, Y+9	; 0x09
 412:	9a 85       	ldd	r25, Y+10	; 0x0a
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	d1 f0       	breq	.+52     	; 0x44c <DIO_u8SetPinValue+0x136>
 418:	29 85       	ldd	r18, Y+9	; 0x09
 41a:	3a 85       	ldd	r19, Y+10	; 0x0a
 41c:	21 30       	cpi	r18, 0x01	; 1
 41e:	31 05       	cpc	r19, r1
 420:	09 f0       	breq	.+2      	; 0x424 <DIO_u8SetPinValue+0x10e>
 422:	99 c0       	rjmp	.+306    	; 0x556 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
 424:	a8 e3       	ldi	r26, 0x38	; 56
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e8 e3       	ldi	r30, 0x38	; 56
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	48 2f       	mov	r20, r24
 430:	8b 81       	ldd	r24, Y+3	; 0x03
 432:	28 2f       	mov	r18, r24
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 2e       	mov	r0, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8SetPinValue+0x12c>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8SetPinValue+0x128>
 446:	84 2b       	or	r24, r20
 448:	8c 93       	st	X, r24
 44a:	85 c0       	rjmp	.+266    	; 0x556 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
 44c:	a8 e3       	ldi	r26, 0x38	; 56
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	e8 e3       	ldi	r30, 0x38	; 56
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	48 2f       	mov	r20, r24
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 2e       	mov	r0, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_u8SetPinValue+0x154>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_u8SetPinValue+0x150>
 46e:	80 95       	com	r24
 470:	84 23       	and	r24, r20
 472:	8c 93       	st	X, r24
 474:	70 c0       	rjmp	.+224    	; 0x556 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
 476:	8c 81       	ldd	r24, Y+4	; 0x04
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	38 87       	std	Y+8, r19	; 0x08
 47e:	2f 83       	std	Y+7, r18	; 0x07
 480:	8f 81       	ldd	r24, Y+7	; 0x07
 482:	98 85       	ldd	r25, Y+8	; 0x08
 484:	00 97       	sbiw	r24, 0x00	; 0
 486:	d1 f0       	breq	.+52     	; 0x4bc <DIO_u8SetPinValue+0x1a6>
 488:	2f 81       	ldd	r18, Y+7	; 0x07
 48a:	38 85       	ldd	r19, Y+8	; 0x08
 48c:	21 30       	cpi	r18, 0x01	; 1
 48e:	31 05       	cpc	r19, r1
 490:	09 f0       	breq	.+2      	; 0x494 <DIO_u8SetPinValue+0x17e>
 492:	61 c0       	rjmp	.+194    	; 0x556 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
 494:	a5 e3       	ldi	r26, 0x35	; 53
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e5 e3       	ldi	r30, 0x35	; 53
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_u8SetPinValue+0x19c>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_u8SetPinValue+0x198>
 4b6:	84 2b       	or	r24, r20
 4b8:	8c 93       	st	X, r24
 4ba:	4d c0       	rjmp	.+154    	; 0x556 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
 4bc:	a5 e3       	ldi	r26, 0x35	; 53
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	e5 e3       	ldi	r30, 0x35	; 53
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	48 2f       	mov	r20, r24
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 2e       	mov	r0, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_u8SetPinValue+0x1c4>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_u8SetPinValue+0x1c0>
 4de:	80 95       	com	r24
 4e0:	84 23       	and	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	38 c0       	rjmp	.+112    	; 0x556 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
 4e6:	8c 81       	ldd	r24, Y+4	; 0x04
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	3e 83       	std	Y+6, r19	; 0x06
 4ee:	2d 83       	std	Y+5, r18	; 0x05
 4f0:	8d 81       	ldd	r24, Y+5	; 0x05
 4f2:	9e 81       	ldd	r25, Y+6	; 0x06
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	c9 f0       	breq	.+50     	; 0x52a <DIO_u8SetPinValue+0x214>
 4f8:	2d 81       	ldd	r18, Y+5	; 0x05
 4fa:	3e 81       	ldd	r19, Y+6	; 0x06
 4fc:	21 30       	cpi	r18, 0x01	; 1
 4fe:	31 05       	cpc	r19, r1
 500:	51 f5       	brne	.+84     	; 0x556 <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
 502:	a2 e3       	ldi	r26, 0x32	; 50
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	e2 e3       	ldi	r30, 0x32	; 50
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	48 2f       	mov	r20, r24
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 2e       	mov	r0, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_u8SetPinValue+0x20a>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_u8SetPinValue+0x206>
 524:	84 2b       	or	r24, r20
 526:	8c 93       	st	X, r24
 528:	16 c0       	rjmp	.+44     	; 0x556 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
 52a:	a2 e3       	ldi	r26, 0x32	; 50
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	e2 e3       	ldi	r30, 0x32	; 50
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	48 2f       	mov	r20, r24
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 2e       	mov	r0, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_u8SetPinValue+0x232>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_u8SetPinValue+0x22e>
 54c:	80 95       	com	r24
 54e:	84 23       	and	r24, r20
 550:	8c 93       	st	X, r24
 552:	01 c0       	rjmp	.+2      	; 0x556 <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
 554:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
 556:	89 81       	ldd	r24, Y+1	; 0x01
}
 558:	2e 96       	adiw	r28, 0x0e	; 14
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	cf 91       	pop	r28
 566:	df 91       	pop	r29
 568:	08 95       	ret

0000056a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
 56a:	df 93       	push	r29
 56c:	cf 93       	push	r28
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	27 97       	sbiw	r28, 0x07	; 7
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	f8 94       	cli
 578:	de bf       	out	0x3e, r29	; 62
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	cd bf       	out	0x3d, r28	; 61
 57e:	8a 83       	std	Y+2, r24	; 0x02
 580:	6b 83       	std	Y+3, r22	; 0x03
 582:	5d 83       	std	Y+5, r21	; 0x05
 584:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	84 30       	cpi	r24, 0x04	; 4
 58e:	08 f0       	brcs	.+2      	; 0x592 <DIO_u8GetPinValue+0x28>
 590:	ea c0       	rjmp	.+468    	; 0x766 <DIO_u8GetPinValue+0x1fc>
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	88 30       	cpi	r24, 0x08	; 8
 596:	08 f0       	brcs	.+2      	; 0x59a <DIO_u8GetPinValue+0x30>
 598:	e6 c0       	rjmp	.+460    	; 0x766 <DIO_u8GetPinValue+0x1fc>
 59a:	8c 81       	ldd	r24, Y+4	; 0x04
 59c:	9d 81       	ldd	r25, Y+5	; 0x05
 59e:	00 97       	sbiw	r24, 0x00	; 0
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <DIO_u8GetPinValue+0x3a>
 5a2:	e1 c0       	rjmp	.+450    	; 0x766 <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	3f 83       	std	Y+7, r19	; 0x07
 5ac:	2e 83       	std	Y+6, r18	; 0x06
 5ae:	4e 81       	ldd	r20, Y+6	; 0x06
 5b0:	5f 81       	ldd	r21, Y+7	; 0x07
 5b2:	41 30       	cpi	r20, 0x01	; 1
 5b4:	51 05       	cpc	r21, r1
 5b6:	09 f4       	brne	.+2      	; 0x5ba <DIO_u8GetPinValue+0x50>
 5b8:	48 c0       	rjmp	.+144    	; 0x64a <DIO_u8GetPinValue+0xe0>
 5ba:	8e 81       	ldd	r24, Y+6	; 0x06
 5bc:	9f 81       	ldd	r25, Y+7	; 0x07
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	91 05       	cpc	r25, r1
 5c2:	34 f4       	brge	.+12     	; 0x5d0 <DIO_u8GetPinValue+0x66>
 5c4:	2e 81       	ldd	r18, Y+6	; 0x06
 5c6:	3f 81       	ldd	r19, Y+7	; 0x07
 5c8:	21 15       	cp	r18, r1
 5ca:	31 05       	cpc	r19, r1
 5cc:	71 f0       	breq	.+28     	; 0x5ea <DIO_u8GetPinValue+0x80>
 5ce:	cc c0       	rjmp	.+408    	; 0x768 <DIO_u8GetPinValue+0x1fe>
 5d0:	4e 81       	ldd	r20, Y+6	; 0x06
 5d2:	5f 81       	ldd	r21, Y+7	; 0x07
 5d4:	42 30       	cpi	r20, 0x02	; 2
 5d6:	51 05       	cpc	r21, r1
 5d8:	09 f4       	brne	.+2      	; 0x5dc <DIO_u8GetPinValue+0x72>
 5da:	67 c0       	rjmp	.+206    	; 0x6aa <DIO_u8GetPinValue+0x140>
 5dc:	8e 81       	ldd	r24, Y+6	; 0x06
 5de:	9f 81       	ldd	r25, Y+7	; 0x07
 5e0:	83 30       	cpi	r24, 0x03	; 3
 5e2:	91 05       	cpc	r25, r1
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <DIO_u8GetPinValue+0x7e>
 5e6:	90 c0       	rjmp	.+288    	; 0x708 <DIO_u8GetPinValue+0x19e>
 5e8:	bf c0       	rjmp	.+382    	; 0x768 <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
 5ea:	e9 e3       	ldi	r30, 0x39	; 57
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	88 2f       	mov	r24, r24
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	a9 01       	movw	r20, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_u8GetPinValue+0x98>
 5fe:	55 95       	asr	r21
 600:	47 95       	ror	r20
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_u8GetPinValue+0x94>
 606:	ca 01       	movw	r24, r20
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	90 70       	andi	r25, 0x00	; 0
 60c:	00 97       	sbiw	r24, 0x00	; 0
 60e:	21 f4       	brne	.+8      	; 0x618 <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 610:	ec 81       	ldd	r30, Y+4	; 0x04
 612:	fd 81       	ldd	r31, Y+5	; 0x05
 614:	10 82       	st	Z, r1
 616:	a8 c0       	rjmp	.+336    	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
 618:	e9 e3       	ldi	r30, 0x39	; 57
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	28 2f       	mov	r18, r24
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	a9 01       	movw	r20, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_u8GetPinValue+0xc6>
 62c:	55 95       	asr	r21
 62e:	47 95       	ror	r20
 630:	8a 95       	dec	r24
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_u8GetPinValue+0xc2>
 634:	ca 01       	movw	r24, r20
 636:	81 70       	andi	r24, 0x01	; 1
 638:	90 70       	andi	r25, 0x00	; 0
 63a:	88 23       	and	r24, r24
 63c:	09 f4       	brne	.+2      	; 0x640 <DIO_u8GetPinValue+0xd6>
 63e:	94 c0       	rjmp	.+296    	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
 640:	ec 81       	ldd	r30, Y+4	; 0x04
 642:	fd 81       	ldd	r31, Y+5	; 0x05
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 83       	st	Z, r24
 648:	8f c0       	rjmp	.+286    	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
 64a:	e6 e3       	ldi	r30, 0x36	; 54
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	28 2f       	mov	r18, r24
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	88 2f       	mov	r24, r24
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	a9 01       	movw	r20, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_u8GetPinValue+0xf8>
 65e:	55 95       	asr	r21
 660:	47 95       	ror	r20
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_u8GetPinValue+0xf4>
 666:	ca 01       	movw	r24, r20
 668:	81 70       	andi	r24, 0x01	; 1
 66a:	90 70       	andi	r25, 0x00	; 0
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	21 f4       	brne	.+8      	; 0x678 <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 670:	ec 81       	ldd	r30, Y+4	; 0x04
 672:	fd 81       	ldd	r31, Y+5	; 0x05
 674:	10 82       	st	Z, r1
 676:	78 c0       	rjmp	.+240    	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
 678:	e6 e3       	ldi	r30, 0x36	; 54
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	88 2f       	mov	r24, r24
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	a9 01       	movw	r20, r18
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_u8GetPinValue+0x126>
 68c:	55 95       	asr	r21
 68e:	47 95       	ror	r20
 690:	8a 95       	dec	r24
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_u8GetPinValue+0x122>
 694:	ca 01       	movw	r24, r20
 696:	81 70       	andi	r24, 0x01	; 1
 698:	90 70       	andi	r25, 0x00	; 0
 69a:	88 23       	and	r24, r24
 69c:	09 f4       	brne	.+2      	; 0x6a0 <DIO_u8GetPinValue+0x136>
 69e:	64 c0       	rjmp	.+200    	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
 6a0:	ec 81       	ldd	r30, Y+4	; 0x04
 6a2:	fd 81       	ldd	r31, Y+5	; 0x05
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	80 83       	st	Z, r24
 6a8:	5f c0       	rjmp	.+190    	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
 6aa:	e3 e3       	ldi	r30, 0x33	; 51
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	28 2f       	mov	r18, r24
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	8b 81       	ldd	r24, Y+3	; 0x03
 6b6:	88 2f       	mov	r24, r24
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	a9 01       	movw	r20, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_u8GetPinValue+0x158>
 6be:	55 95       	asr	r21
 6c0:	47 95       	ror	r20
 6c2:	8a 95       	dec	r24
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_u8GetPinValue+0x154>
 6c6:	ca 01       	movw	r24, r20
 6c8:	81 70       	andi	r24, 0x01	; 1
 6ca:	90 70       	andi	r25, 0x00	; 0
 6cc:	00 97       	sbiw	r24, 0x00	; 0
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 6d0:	ec 81       	ldd	r30, Y+4	; 0x04
 6d2:	fd 81       	ldd	r31, Y+5	; 0x05
 6d4:	10 82       	st	Z, r1
 6d6:	48 c0       	rjmp	.+144    	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
 6d8:	e3 e3       	ldi	r30, 0x33	; 51
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	8b 81       	ldd	r24, Y+3	; 0x03
 6e4:	88 2f       	mov	r24, r24
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	a9 01       	movw	r20, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_u8GetPinValue+0x186>
 6ec:	55 95       	asr	r21
 6ee:	47 95       	ror	r20
 6f0:	8a 95       	dec	r24
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_u8GetPinValue+0x182>
 6f4:	ca 01       	movw	r24, r20
 6f6:	81 70       	andi	r24, 0x01	; 1
 6f8:	90 70       	andi	r25, 0x00	; 0
 6fa:	88 23       	and	r24, r24
 6fc:	a9 f1       	breq	.+106    	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
 6fe:	ec 81       	ldd	r30, Y+4	; 0x04
 700:	fd 81       	ldd	r31, Y+5	; 0x05
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	80 83       	st	Z, r24
 706:	30 c0       	rjmp	.+96     	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
 708:	e0 e3       	ldi	r30, 0x30	; 48
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	28 2f       	mov	r18, r24
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	8b 81       	ldd	r24, Y+3	; 0x03
 714:	88 2f       	mov	r24, r24
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	a9 01       	movw	r20, r18
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_u8GetPinValue+0x1b6>
 71c:	55 95       	asr	r21
 71e:	47 95       	ror	r20
 720:	8a 95       	dec	r24
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_u8GetPinValue+0x1b2>
 724:	ca 01       	movw	r24, r20
 726:	81 70       	andi	r24, 0x01	; 1
 728:	90 70       	andi	r25, 0x00	; 0
 72a:	00 97       	sbiw	r24, 0x00	; 0
 72c:	21 f4       	brne	.+8      	; 0x736 <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 72e:	ec 81       	ldd	r30, Y+4	; 0x04
 730:	fd 81       	ldd	r31, Y+5	; 0x05
 732:	10 82       	st	Z, r1
 734:	19 c0       	rjmp	.+50     	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
 736:	e0 e3       	ldi	r30, 0x30	; 48
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	8b 81       	ldd	r24, Y+3	; 0x03
 742:	88 2f       	mov	r24, r24
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	a9 01       	movw	r20, r18
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_u8GetPinValue+0x1e4>
 74a:	55 95       	asr	r21
 74c:	47 95       	ror	r20
 74e:	8a 95       	dec	r24
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_u8GetPinValue+0x1e0>
 752:	ca 01       	movw	r24, r20
 754:	81 70       	andi	r24, 0x01	; 1
 756:	90 70       	andi	r25, 0x00	; 0
 758:	88 23       	and	r24, r24
 75a:	31 f0       	breq	.+12     	; 0x768 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
 75c:	ec 81       	ldd	r30, Y+4	; 0x04
 75e:	fd 81       	ldd	r31, Y+5	; 0x05
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	80 83       	st	Z, r24
 764:	01 c0       	rjmp	.+2      	; 0x768 <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
 766:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 768:	89 81       	ldd	r24, Y+1	; 0x01
}
 76a:	27 96       	adiw	r28, 0x07	; 7
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
 776:	cf 91       	pop	r28
 778:	df 91       	pop	r29
 77a:	08 95       	ret

0000077c <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
 77c:	df 93       	push	r29
 77e:	cf 93       	push	r28
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
 784:	2d 97       	sbiw	r28, 0x0d	; 13
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	8a 83       	std	Y+2, r24	; 0x02
 792:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	84 30       	cpi	r24, 0x04	; 4
 79c:	08 f0       	brcs	.+2      	; 0x7a0 <DIO_u8SetPortDirection+0x24>
 79e:	87 c0       	rjmp	.+270    	; 0x8ae <__stack+0x4f>
 7a0:	8b 81       	ldd	r24, Y+3	; 0x03
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	21 f0       	breq	.+8      	; 0x7ae <DIO_u8SetPortDirection+0x32>
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	88 23       	and	r24, r24
 7aa:	09 f0       	breq	.+2      	; 0x7ae <DIO_u8SetPortDirection+0x32>
 7ac:	80 c0       	rjmp	.+256    	; 0x8ae <__stack+0x4f>
	{
		switch(Copy_u8PortID)
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	28 2f       	mov	r18, r24
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	3d 87       	std	Y+13, r19	; 0x0d
 7b6:	2c 87       	std	Y+12, r18	; 0x0c
 7b8:	8c 85       	ldd	r24, Y+12	; 0x0c
 7ba:	9d 85       	ldd	r25, Y+13	; 0x0d
 7bc:	81 30       	cpi	r24, 0x01	; 1
 7be:	91 05       	cpc	r25, r1
 7c0:	71 f1       	breq	.+92     	; 0x81e <DIO_u8SetPortDirection+0xa2>
 7c2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c4:	3d 85       	ldd	r19, Y+13	; 0x0d
 7c6:	22 30       	cpi	r18, 0x02	; 2
 7c8:	31 05       	cpc	r19, r1
 7ca:	2c f4       	brge	.+10     	; 0x7d6 <DIO_u8SetPortDirection+0x5a>
 7cc:	8c 85       	ldd	r24, Y+12	; 0x0c
 7ce:	9d 85       	ldd	r25, Y+13	; 0x0d
 7d0:	00 97       	sbiw	r24, 0x00	; 0
 7d2:	69 f0       	breq	.+26     	; 0x7ee <DIO_u8SetPortDirection+0x72>
 7d4:	6d c0       	rjmp	.+218    	; 0x8b0 <__stack+0x51>
 7d6:	2c 85       	ldd	r18, Y+12	; 0x0c
 7d8:	3d 85       	ldd	r19, Y+13	; 0x0d
 7da:	22 30       	cpi	r18, 0x02	; 2
 7dc:	31 05       	cpc	r19, r1
 7de:	b9 f1       	breq	.+110    	; 0x84e <DIO_u8SetPortDirection+0xd2>
 7e0:	8c 85       	ldd	r24, Y+12	; 0x0c
 7e2:	9d 85       	ldd	r25, Y+13	; 0x0d
 7e4:	83 30       	cpi	r24, 0x03	; 3
 7e6:	91 05       	cpc	r25, r1
 7e8:	09 f4       	brne	.+2      	; 0x7ec <DIO_u8SetPortDirection+0x70>
 7ea:	49 c0       	rjmp	.+146    	; 0x87e <__stack+0x1f>
 7ec:	61 c0       	rjmp	.+194    	; 0x8b0 <__stack+0x51>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
 7ee:	8b 81       	ldd	r24, Y+3	; 0x03
 7f0:	28 2f       	mov	r18, r24
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	3b 87       	std	Y+11, r19	; 0x0b
 7f6:	2a 87       	std	Y+10, r18	; 0x0a
 7f8:	8a 85       	ldd	r24, Y+10	; 0x0a
 7fa:	9b 85       	ldd	r25, Y+11	; 0x0b
 7fc:	00 97       	sbiw	r24, 0x00	; 0
 7fe:	31 f0       	breq	.+12     	; 0x80c <DIO_u8SetPortDirection+0x90>
 800:	2a 85       	ldd	r18, Y+10	; 0x0a
 802:	3b 85       	ldd	r19, Y+11	; 0x0b
 804:	21 30       	cpi	r18, 0x01	; 1
 806:	31 05       	cpc	r19, r1
 808:	29 f0       	breq	.+10     	; 0x814 <DIO_u8SetPortDirection+0x98>
 80a:	52 c0       	rjmp	.+164    	; 0x8b0 <__stack+0x51>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
 80c:	ea e3       	ldi	r30, 0x3A	; 58
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	10 82       	st	Z, r1
 812:	4e c0       	rjmp	.+156    	; 0x8b0 <__stack+0x51>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
 814:	ea e3       	ldi	r30, 0x3A	; 58
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	80 83       	st	Z, r24
 81c:	49 c0       	rjmp	.+146    	; 0x8b0 <__stack+0x51>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	39 87       	std	Y+9, r19	; 0x09
 826:	28 87       	std	Y+8, r18	; 0x08
 828:	88 85       	ldd	r24, Y+8	; 0x08
 82a:	99 85       	ldd	r25, Y+9	; 0x09
 82c:	00 97       	sbiw	r24, 0x00	; 0
 82e:	31 f0       	breq	.+12     	; 0x83c <DIO_u8SetPortDirection+0xc0>
 830:	28 85       	ldd	r18, Y+8	; 0x08
 832:	39 85       	ldd	r19, Y+9	; 0x09
 834:	21 30       	cpi	r18, 0x01	; 1
 836:	31 05       	cpc	r19, r1
 838:	29 f0       	breq	.+10     	; 0x844 <DIO_u8SetPortDirection+0xc8>
 83a:	3a c0       	rjmp	.+116    	; 0x8b0 <__stack+0x51>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
 83c:	e7 e3       	ldi	r30, 0x37	; 55
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	10 82       	st	Z, r1
 842:	36 c0       	rjmp	.+108    	; 0x8b0 <__stack+0x51>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
 844:	e7 e3       	ldi	r30, 0x37	; 55
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	8f ef       	ldi	r24, 0xFF	; 255
 84a:	80 83       	st	Z, r24
 84c:	31 c0       	rjmp	.+98     	; 0x8b0 <__stack+0x51>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
 84e:	8b 81       	ldd	r24, Y+3	; 0x03
 850:	28 2f       	mov	r18, r24
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	3f 83       	std	Y+7, r19	; 0x07
 856:	2e 83       	std	Y+6, r18	; 0x06
 858:	8e 81       	ldd	r24, Y+6	; 0x06
 85a:	9f 81       	ldd	r25, Y+7	; 0x07
 85c:	00 97       	sbiw	r24, 0x00	; 0
 85e:	31 f0       	breq	.+12     	; 0x86c <__stack+0xd>
 860:	2e 81       	ldd	r18, Y+6	; 0x06
 862:	3f 81       	ldd	r19, Y+7	; 0x07
 864:	21 30       	cpi	r18, 0x01	; 1
 866:	31 05       	cpc	r19, r1
 868:	29 f0       	breq	.+10     	; 0x874 <__stack+0x15>
 86a:	22 c0       	rjmp	.+68     	; 0x8b0 <__stack+0x51>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
 86c:	e4 e3       	ldi	r30, 0x34	; 52
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	10 82       	st	Z, r1
 872:	1e c0       	rjmp	.+60     	; 0x8b0 <__stack+0x51>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
 874:	e4 e3       	ldi	r30, 0x34	; 52
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	8f ef       	ldi	r24, 0xFF	; 255
 87a:	80 83       	st	Z, r24
 87c:	19 c0       	rjmp	.+50     	; 0x8b0 <__stack+0x51>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	28 2f       	mov	r18, r24
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	3d 83       	std	Y+5, r19	; 0x05
 886:	2c 83       	std	Y+4, r18	; 0x04
 888:	8c 81       	ldd	r24, Y+4	; 0x04
 88a:	9d 81       	ldd	r25, Y+5	; 0x05
 88c:	00 97       	sbiw	r24, 0x00	; 0
 88e:	31 f0       	breq	.+12     	; 0x89c <__stack+0x3d>
 890:	2c 81       	ldd	r18, Y+4	; 0x04
 892:	3d 81       	ldd	r19, Y+5	; 0x05
 894:	21 30       	cpi	r18, 0x01	; 1
 896:	31 05       	cpc	r19, r1
 898:	29 f0       	breq	.+10     	; 0x8a4 <__stack+0x45>
 89a:	0a c0       	rjmp	.+20     	; 0x8b0 <__stack+0x51>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
 89c:	e1 e3       	ldi	r30, 0x31	; 49
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	10 82       	st	Z, r1
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <__stack+0x51>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
 8a4:	e1 e3       	ldi	r30, 0x31	; 49
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	80 83       	st	Z, r24
 8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <__stack+0x51>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
 8ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 8b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 8b2:	2d 96       	adiw	r28, 0x0d	; 13
 8b4:	0f b6       	in	r0, 0x3f	; 63
 8b6:	f8 94       	cli
 8b8:	de bf       	out	0x3e, r29	; 62
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	cd bf       	out	0x3d, r28	; 61
 8be:	cf 91       	pop	r28
 8c0:	df 91       	pop	r29
 8c2:	08 95       	ret

000008c4 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
 8c4:	df 93       	push	r29
 8c6:	cf 93       	push	r28
 8c8:	00 d0       	rcall	.+0      	; 0x8ca <DIO_u8SetPortValue+0x6>
 8ca:	00 d0       	rcall	.+0      	; 0x8cc <DIO_u8SetPortValue+0x8>
 8cc:	0f 92       	push	r0
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	8a 83       	std	Y+2, r24	; 0x02
 8d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	28 2f       	mov	r18, r24
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	3d 83       	std	Y+5, r19	; 0x05
 8e2:	2c 83       	std	Y+4, r18	; 0x04
 8e4:	8c 81       	ldd	r24, Y+4	; 0x04
 8e6:	9d 81       	ldd	r25, Y+5	; 0x05
 8e8:	81 30       	cpi	r24, 0x01	; 1
 8ea:	91 05       	cpc	r25, r1
 8ec:	d1 f0       	breq	.+52     	; 0x922 <DIO_u8SetPortValue+0x5e>
 8ee:	2c 81       	ldd	r18, Y+4	; 0x04
 8f0:	3d 81       	ldd	r19, Y+5	; 0x05
 8f2:	22 30       	cpi	r18, 0x02	; 2
 8f4:	31 05       	cpc	r19, r1
 8f6:	2c f4       	brge	.+10     	; 0x902 <DIO_u8SetPortValue+0x3e>
 8f8:	8c 81       	ldd	r24, Y+4	; 0x04
 8fa:	9d 81       	ldd	r25, Y+5	; 0x05
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	61 f0       	breq	.+24     	; 0x918 <DIO_u8SetPortValue+0x54>
 900:	1f c0       	rjmp	.+62     	; 0x940 <DIO_u8SetPortValue+0x7c>
 902:	2c 81       	ldd	r18, Y+4	; 0x04
 904:	3d 81       	ldd	r19, Y+5	; 0x05
 906:	22 30       	cpi	r18, 0x02	; 2
 908:	31 05       	cpc	r19, r1
 90a:	81 f0       	breq	.+32     	; 0x92c <DIO_u8SetPortValue+0x68>
 90c:	8c 81       	ldd	r24, Y+4	; 0x04
 90e:	9d 81       	ldd	r25, Y+5	; 0x05
 910:	83 30       	cpi	r24, 0x03	; 3
 912:	91 05       	cpc	r25, r1
 914:	81 f0       	breq	.+32     	; 0x936 <DIO_u8SetPortValue+0x72>
 916:	14 c0       	rjmp	.+40     	; 0x940 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
 918:	eb e3       	ldi	r30, 0x3B	; 59
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	80 83       	st	Z, r24
 920:	10 c0       	rjmp	.+32     	; 0x942 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
 922:	e8 e3       	ldi	r30, 0x38	; 56
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	8b 81       	ldd	r24, Y+3	; 0x03
 928:	80 83       	st	Z, r24
 92a:	0b c0       	rjmp	.+22     	; 0x942 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
 92c:	e5 e3       	ldi	r30, 0x35	; 53
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	8b 81       	ldd	r24, Y+3	; 0x03
 932:	80 83       	st	Z, r24
 934:	06 c0       	rjmp	.+12     	; 0x942 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
 936:	e2 e3       	ldi	r30, 0x32	; 50
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	80 83       	st	Z, r24
 93e:	01 c0       	rjmp	.+2      	; 0x942 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
 940:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 942:	89 81       	ldd	r24, Y+1	; 0x01
}
 944:	0f 90       	pop	r0
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	0f 90       	pop	r0
 94e:	cf 91       	pop	r28
 950:	df 91       	pop	r29
 952:	08 95       	ret

00000954 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
 954:	df 93       	push	r29
 956:	cf 93       	push	r28
 958:	00 d0       	rcall	.+0      	; 0x95a <DIO_u8GetPortValue+0x6>
 95a:	00 d0       	rcall	.+0      	; 0x95c <DIO_u8GetPortValue+0x8>
 95c:	00 d0       	rcall	.+0      	; 0x95e <DIO_u8GetPortValue+0xa>
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	8a 83       	std	Y+2, r24	; 0x02
 964:	7c 83       	std	Y+4, r23	; 0x04
 966:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
 96c:	8b 81       	ldd	r24, Y+3	; 0x03
 96e:	9c 81       	ldd	r25, Y+4	; 0x04
 970:	00 97       	sbiw	r24, 0x00	; 0
 972:	e9 f1       	breq	.+122    	; 0x9ee <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
 974:	8a 81       	ldd	r24, Y+2	; 0x02
 976:	28 2f       	mov	r18, r24
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	3e 83       	std	Y+6, r19	; 0x06
 97c:	2d 83       	std	Y+5, r18	; 0x05
 97e:	8d 81       	ldd	r24, Y+5	; 0x05
 980:	9e 81       	ldd	r25, Y+6	; 0x06
 982:	81 30       	cpi	r24, 0x01	; 1
 984:	91 05       	cpc	r25, r1
 986:	e1 f0       	breq	.+56     	; 0x9c0 <DIO_u8GetPortValue+0x6c>
 988:	2d 81       	ldd	r18, Y+5	; 0x05
 98a:	3e 81       	ldd	r19, Y+6	; 0x06
 98c:	22 30       	cpi	r18, 0x02	; 2
 98e:	31 05       	cpc	r19, r1
 990:	2c f4       	brge	.+10     	; 0x99c <DIO_u8GetPortValue+0x48>
 992:	8d 81       	ldd	r24, Y+5	; 0x05
 994:	9e 81       	ldd	r25, Y+6	; 0x06
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	61 f0       	breq	.+24     	; 0x9b2 <DIO_u8GetPortValue+0x5e>
 99a:	27 c0       	rjmp	.+78     	; 0x9ea <DIO_u8GetPortValue+0x96>
 99c:	2d 81       	ldd	r18, Y+5	; 0x05
 99e:	3e 81       	ldd	r19, Y+6	; 0x06
 9a0:	22 30       	cpi	r18, 0x02	; 2
 9a2:	31 05       	cpc	r19, r1
 9a4:	a1 f0       	breq	.+40     	; 0x9ce <DIO_u8GetPortValue+0x7a>
 9a6:	8d 81       	ldd	r24, Y+5	; 0x05
 9a8:	9e 81       	ldd	r25, Y+6	; 0x06
 9aa:	83 30       	cpi	r24, 0x03	; 3
 9ac:	91 05       	cpc	r25, r1
 9ae:	b1 f0       	breq	.+44     	; 0x9dc <DIO_u8GetPortValue+0x88>
 9b0:	1c c0       	rjmp	.+56     	; 0x9ea <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
 9b2:	e9 e3       	ldi	r30, 0x39	; 57
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	80 81       	ld	r24, Z
 9b8:	eb 81       	ldd	r30, Y+3	; 0x03
 9ba:	fc 81       	ldd	r31, Y+4	; 0x04
 9bc:	80 83       	st	Z, r24
 9be:	18 c0       	rjmp	.+48     	; 0x9f0 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
 9c0:	e6 e3       	ldi	r30, 0x36	; 54
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	eb 81       	ldd	r30, Y+3	; 0x03
 9c8:	fc 81       	ldd	r31, Y+4	; 0x04
 9ca:	80 83       	st	Z, r24
 9cc:	11 c0       	rjmp	.+34     	; 0x9f0 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
 9ce:	e3 e3       	ldi	r30, 0x33	; 51
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	eb 81       	ldd	r30, Y+3	; 0x03
 9d6:	fc 81       	ldd	r31, Y+4	; 0x04
 9d8:	80 83       	st	Z, r24
 9da:	0a c0       	rjmp	.+20     	; 0x9f0 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
 9dc:	e0 e3       	ldi	r30, 0x30	; 48
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	eb 81       	ldd	r30, Y+3	; 0x03
 9e4:	fc 81       	ldd	r31, Y+4	; 0x04
 9e6:	80 83       	st	Z, r24
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
 9ea:	19 82       	std	Y+1, r1	; 0x01
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
 9ee:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 9f0:	89 81       	ldd	r24, Y+1	; 0x01
 9f2:	26 96       	adiw	r28, 0x06	; 6
 9f4:	0f b6       	in	r0, 0x3f	; 63
 9f6:	f8 94       	cli
 9f8:	de bf       	out	0x3e, r29	; 62
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	cd bf       	out	0x3d, r28	; 61
 9fe:	cf 91       	pop	r28
 a00:	df 91       	pop	r29
 a02:	08 95       	ret

00000a04 <UART_voidInit>:
static u8 Global_u8Size = 0;

static u8 Global_u8Counter = 0;

void UART_voidInit(void)
{
 a04:	df 93       	push	r29
 a06:	cf 93       	push	r28
 a08:	00 d0       	rcall	.+0      	; 0xa0a <UART_voidInit+0x6>
 a0a:	0f 92       	push	r0
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRCValue = 0x80;
 a10:	80 e8       	ldi	r24, 0x80	; 128
 a12:	8b 83       	std	Y+3, r24	; 0x03
	/* Select Baud Rate = 9600 */
	u16 Local_u16UBRRValue = UBRR_VALUE;
 a14:	83 e3       	ldi	r24, 0x33	; 51
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	9a 83       	std	Y+2, r25	; 0x02
 a1a:	89 83       	std	Y+1, r24	; 0x01
	
	UART_u8_UBRRL_REG = (u8)Local_u16UBRRValue;
 a1c:	e9 e2       	ldi	r30, 0x29	; 41
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG =(u8)(Local_u16UBRRValue>>8);
 a24:	e0 e4       	ldi	r30, 0x40	; 64
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	9a 81       	ldd	r25, Y+2	; 0x02
 a2c:	89 2f       	mov	r24, r25
 a2e:	99 27       	eor	r25, r25
 a30:	80 83       	st	Z, r24


	/* UART TX Enable \ Disable  */
#if(TX_MODE == TX_ENABLE)
	{
		SET_BIT(UART_u8_UCSRB_REG,3);
 a32:	aa e2       	ldi	r26, 0x2A	; 42
 a34:	b0 e0       	ldi	r27, 0x00	; 0
 a36:	ea e2       	ldi	r30, 0x2A	; 42
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	80 81       	ld	r24, Z
 a3c:	88 60       	ori	r24, 0x08	; 8
 a3e:	8c 93       	st	X, r24
#endif

	/* UART RX Enable \ Disable  */
#if(RX_MODE == RX_ENABLE)
	{
		SET_BIT(UART_u8_UCSRB_REG,4);
 a40:	aa e2       	ldi	r26, 0x2A	; 42
 a42:	b0 e0       	ldi	r27, 0x00	; 0
 a44:	ea e2       	ldi	r30, 0x2A	; 42
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	80 81       	ld	r24, Z
 a4a:	80 61       	ori	r24, 0x10	; 16
 a4c:	8c 93       	st	X, r24
		SET_BIT(Local_u8UCSRCValue,2);
		CLR_BIT(Local_u8UCSRCValue,1);
	}
#elif(CHARACTER_SIZE == CHARCTER_8_BIT)
	{
		CLR_BIT(UART_u8_UCSRB_REG,2);
 a4e:	aa e2       	ldi	r26, 0x2A	; 42
 a50:	b0 e0       	ldi	r27, 0x00	; 0
 a52:	ea e2       	ldi	r30, 0x2A	; 42
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	80 81       	ld	r24, Z
 a58:	8b 7f       	andi	r24, 0xFB	; 251
 a5a:	8c 93       	st	X, r24
		SET_BIT(Local_u8UCSRCValue,2);
 a5c:	8b 81       	ldd	r24, Y+3	; 0x03
 a5e:	84 60       	ori	r24, 0x04	; 4
 a60:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(Local_u8UCSRCValue,1);
 a62:	8b 81       	ldd	r24, Y+3	; 0x03
 a64:	82 60       	ori	r24, 0x02	; 2
 a66:	8b 83       	std	Y+3, r24	; 0x03
	{
		SET_BIT(Local_u8UCSRCValue,6);
	}
#elif(OPERATION_MODE == ASYNC_OPERATION)
	{
		CLR_BIT(Local_u8UCSRCValue,6);
 a68:	8b 81       	ldd	r24, Y+3	; 0x03
 a6a:	8f 7b       	andi	r24, 0xBF	; 191
 a6c:	8b 83       	std	Y+3, r24	; 0x03
#endif

	/* Parity Bit Mode */
#if(PARITY_MODE == DISABLED)
	{
		CLR_BIT(Local_u8UCSRCValue,5);
 a6e:	8b 81       	ldd	r24, Y+3	; 0x03
 a70:	8f 7d       	andi	r24, 0xDF	; 223
 a72:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(Local_u8UCSRCValue,4);
 a74:	8b 81       	ldd	r24, Y+3	; 0x03
 a76:	8f 7e       	andi	r24, 0xEF	; 239
 a78:	8b 83       	std	Y+3, r24	; 0x03
	{
		CLR_BIT(Local_u8UCSRCValue,3);
	}
#elif(STOP_BITS == STOP_2_BIT)
	{
		SET_BIT(Local_u8UCSRCValue,3);
 a7a:	8b 81       	ldd	r24, Y+3	; 0x03
 a7c:	88 60       	ori	r24, 0x08	; 8
 a7e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif

	/* Update the UCSRC REG */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
 a80:	e0 e4       	ldi	r30, 0x40	; 64
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	8b 81       	ldd	r24, Y+3	; 0x03
 a86:	80 83       	st	Z, r24
}
 a88:	0f 90       	pop	r0
 a8a:	0f 90       	pop	r0
 a8c:	0f 90       	pop	r0
 a8e:	cf 91       	pop	r28
 a90:	df 91       	pop	r29
 a92:	08 95       	ret

00000a94 <UART_voidSendDataByte>:

void UART_voidSendDataByte(u8 Copy_u8DataByte)
{
 a94:	df 93       	push	r29
 a96:	cf 93       	push	r28
 a98:	0f 92       	push	r0
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
 a9e:	89 83       	std	Y+1, r24	; 0x01
	/* Check if Tx Buffer is Empty */
	while((GET_BIT(UART_u8_UCSRA_REG,5)) == 0);
 aa0:	eb e2       	ldi	r30, 0x2B	; 43
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	80 81       	ld	r24, Z
 aa6:	82 95       	swap	r24
 aa8:	86 95       	lsr	r24
 aaa:	87 70       	andi	r24, 0x07	; 7
 aac:	88 2f       	mov	r24, r24
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	81 70       	andi	r24, 0x01	; 1
 ab2:	90 70       	andi	r25, 0x00	; 0
 ab4:	00 97       	sbiw	r24, 0x00	; 0
 ab6:	a1 f3       	breq	.-24     	; 0xaa0 <UART_voidSendDataByte+0xc>
	//while(!GET_BIT(UART_u8_UCSRA_REG,5));
	UART_u8_UDR_REG = Copy_u8DataByte;
 ab8:	ec e2       	ldi	r30, 0x2C	; 44
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	80 83       	st	Z, r24
}
 ac0:	0f 90       	pop	r0
 ac2:	cf 91       	pop	r28
 ac4:	df 91       	pop	r29
 ac6:	08 95       	ret

00000ac8 <UART_u8RecieveDataByte>:

u8   UART_u8RecieveDataByte( void)
{
 ac8:	df 93       	push	r29
 aca:	cf 93       	push	r28
 acc:	cd b7       	in	r28, 0x3d	; 61
 ace:	de b7       	in	r29, 0x3e	; 62

		/* Check the Reciece flag */
		while( (GET_BIT(UART_u8_UCSRA_REG,7)) == 0 );
 ad0:	eb e2       	ldi	r30, 0x2B	; 43
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	80 81       	ld	r24, Z
 ad6:	88 23       	and	r24, r24
 ad8:	dc f7       	brge	.-10     	; 0xad0 <UART_u8RecieveDataByte+0x8>
		/* Read Data */
		return UART_u8_UDR_REG;
 ada:	ec e2       	ldi	r30, 0x2C	; 44
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	80 81       	ld	r24, Z

}
 ae0:	cf 91       	pop	r28
 ae2:	df 91       	pop	r29
 ae4:	08 95       	ret

00000ae6 <UART_voidSendDataStringSynch>:
void UART_voidSendDataStringSynch(u8  *Copy_puSendDataString)
{
 ae6:	df 93       	push	r29
 ae8:	cf 93       	push	r28
 aea:	00 d0       	rcall	.+0      	; 0xaec <UART_voidSendDataStringSynch+0x6>
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
 af0:	9a 83       	std	Y+2, r25	; 0x02
 af2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_puSendDataString != NULL )
 af4:	89 81       	ldd	r24, Y+1	; 0x01
 af6:	9a 81       	ldd	r25, Y+2	; 0x02
 af8:	00 97       	sbiw	r24, 0x00	; 0
 afa:	81 f0       	breq	.+32     	; 0xb1c <UART_voidSendDataStringSynch+0x36>
 afc:	0a c0       	rjmp	.+20     	; 0xb12 <UART_voidSendDataStringSynch+0x2c>

		while(*Copy_puSendDataString != 0x00)
		{

		  /* Write String  */
			 UART_voidSendDataByte (*Copy_puSendDataString);
 afe:	e9 81       	ldd	r30, Y+1	; 0x01
 b00:	fa 81       	ldd	r31, Y+2	; 0x02
 b02:	80 81       	ld	r24, Z
 b04:	0e 94 4a 05 	call	0xa94	; 0xa94 <UART_voidSendDataByte>
			 Copy_puSendDataString++;
 b08:	89 81       	ldd	r24, Y+1	; 0x01
 b0a:	9a 81       	ldd	r25, Y+2	; 0x02
 b0c:	01 96       	adiw	r24, 0x01	; 1
 b0e:	9a 83       	std	Y+2, r25	; 0x02
 b10:	89 83       	std	Y+1, r24	; 0x01
void UART_voidSendDataStringSynch(u8  *Copy_puSendDataString)
{
	if(Copy_puSendDataString != NULL )
	{

		while(*Copy_puSendDataString != 0x00)
 b12:	e9 81       	ldd	r30, Y+1	; 0x01
 b14:	fa 81       	ldd	r31, Y+2	; 0x02
 b16:	80 81       	ld	r24, Z
 b18:	88 23       	and	r24, r24
 b1a:	89 f7       	brne	.-30     	; 0xafe <UART_voidSendDataStringSynch+0x18>
			 Copy_puSendDataString++;
		 }

	}

}
 b1c:	0f 90       	pop	r0
 b1e:	0f 90       	pop	r0
 b20:	cf 91       	pop	r28
 b22:	df 91       	pop	r29
 b24:	08 95       	ret

00000b26 <UART_u8RecieveDataStringSynch>:
u8*  UART_u8RecieveDataStringSynch(void)
{
 b26:	0f 93       	push	r16
 b28:	1f 93       	push	r17
 b2a:	df 93       	push	r29
 b2c:	cf 93       	push	r28
 b2e:	0f 92       	push	r0
 b30:	cd b7       	in	r28, 0x3d	; 61
 b32:	de b7       	in	r29, 0x3e	; 62

	u8 i;
	static u8  arr[30] ;

	for(i=0 ; i<29 ; i++ )
 b34:	19 82       	std	Y+1, r1	; 0x01
 b36:	25 c0       	rjmp	.+74     	; 0xb82 <UART_u8RecieveDataStringSynch+0x5c>
	{
		if(arr[i-1] == ' ')
 b38:	89 81       	ldd	r24, Y+1	; 0x01
 b3a:	88 2f       	mov	r24, r24
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	01 97       	sbiw	r24, 0x01	; 1
 b40:	fc 01       	movw	r30, r24
 b42:	e5 59       	subi	r30, 0x95	; 149
 b44:	ff 4f       	sbci	r31, 0xFF	; 255
 b46:	80 81       	ld	r24, Z
 b48:	80 32       	cpi	r24, 0x20	; 32
 b4a:	79 f4       	brne	.+30     	; 0xb6a <UART_u8RecieveDataStringSynch+0x44>
 b4c:	0a c0       	rjmp	.+20     	; 0xb62 <UART_u8RecieveDataStringSynch+0x3c>
		{
			for( ; i < 29 ; i++)
			{
			  arr[i] = NULL;
 b4e:	89 81       	ldd	r24, Y+1	; 0x01
 b50:	88 2f       	mov	r24, r24
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	fc 01       	movw	r30, r24
 b56:	e5 59       	subi	r30, 0x95	; 149
 b58:	ff 4f       	sbci	r31, 0xFF	; 255
 b5a:	10 82       	st	Z, r1

	for(i=0 ; i<29 ; i++ )
	{
		if(arr[i-1] == ' ')
		{
			for( ; i < 29 ; i++)
 b5c:	89 81       	ldd	r24, Y+1	; 0x01
 b5e:	8f 5f       	subi	r24, 0xFF	; 255
 b60:	89 83       	std	Y+1, r24	; 0x01
 b62:	89 81       	ldd	r24, Y+1	; 0x01
 b64:	8d 31       	cpi	r24, 0x1D	; 29
 b66:	98 f3       	brcs	.-26     	; 0xb4e <UART_u8RecieveDataStringSynch+0x28>
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <UART_u8RecieveDataStringSynch+0x56>
			  arr[i] = NULL;
			}
		}
		else
		{
			arr[i] = UART_u8RecieveDataByte();
 b6a:	89 81       	ldd	r24, Y+1	; 0x01
 b6c:	08 2f       	mov	r16, r24
 b6e:	10 e0       	ldi	r17, 0x00	; 0
 b70:	0e 94 64 05 	call	0xac8	; 0xac8 <UART_u8RecieveDataByte>
 b74:	f8 01       	movw	r30, r16
 b76:	e5 59       	subi	r30, 0x95	; 149
 b78:	ff 4f       	sbci	r31, 0xFF	; 255
 b7a:	80 83       	st	Z, r24
{

	u8 i;
	static u8  arr[30] ;

	for(i=0 ; i<29 ; i++ )
 b7c:	89 81       	ldd	r24, Y+1	; 0x01
 b7e:	8f 5f       	subi	r24, 0xFF	; 255
 b80:	89 83       	std	Y+1, r24	; 0x01
 b82:	89 81       	ldd	r24, Y+1	; 0x01
 b84:	8d 31       	cpi	r24, 0x1D	; 29
 b86:	c0 f2       	brcs	.-80     	; 0xb38 <UART_u8RecieveDataStringSynch+0x12>
		{
			arr[i] = UART_u8RecieveDataByte();

		}
	}
	arr[29] = NULL;
 b88:	10 92 88 00 	sts	0x0088, r1
	return arr;
 b8c:	8b e6       	ldi	r24, 0x6B	; 107
 b8e:	90 e0       	ldi	r25, 0x00	; 0
}
 b90:	0f 90       	pop	r0
 b92:	cf 91       	pop	r28
 b94:	df 91       	pop	r29
 b96:	1f 91       	pop	r17
 b98:	0f 91       	pop	r16
 b9a:	08 95       	ret

00000b9c <UART_voidSendDataStringASynch>:

u8   UART_voidSendDataStringASynch( u8 * Copy_pu8SendDataByte , void (*Copy_pfSendDataString)(void))
{
 b9c:	df 93       	push	r29
 b9e:	cf 93       	push	r28
 ba0:	00 d0       	rcall	.+0      	; 0xba2 <UART_voidSendDataStringASynch+0x6>
 ba2:	00 d0       	rcall	.+0      	; 0xba4 <UART_voidSendDataStringASynch+0x8>
 ba4:	0f 92       	push	r0
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
 baa:	9b 83       	std	Y+3, r25	; 0x03
 bac:	8a 83       	std	Y+2, r24	; 0x02
 bae:	7d 83       	std	Y+5, r23	; 0x05
 bb0:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_NOK;
 bb2:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pfSendDataString != NULL) && (Copy_pu8SendDataByte != NULL) && (UART_u8BusyFlag == 0))
 bb4:	8c 81       	ldd	r24, Y+4	; 0x04
 bb6:	9d 81       	ldd	r25, Y+5	; 0x05
 bb8:	00 97       	sbiw	r24, 0x00	; 0
 bba:	01 f1       	breq	.+64     	; 0xbfc <UART_voidSendDataStringASynch+0x60>
 bbc:	8a 81       	ldd	r24, Y+2	; 0x02
 bbe:	9b 81       	ldd	r25, Y+3	; 0x03
 bc0:	00 97       	sbiw	r24, 0x00	; 0
 bc2:	e1 f0       	breq	.+56     	; 0xbfc <UART_voidSendDataStringASynch+0x60>
 bc4:	80 91 68 00 	lds	r24, 0x0068
 bc8:	88 23       	and	r24, r24
 bca:	c1 f4       	brne	.+48     	; 0xbfc <UART_voidSendDataStringASynch+0x60>
	{
		/* UART is Busy */
		UART_u8BusyFlag = 1;
 bcc:	81 e0       	ldi	r24, 0x01	; 1
 bce:	80 93 68 00 	sts	0x0068, r24
		/* Updating Global Pointers with the input parameters */
		Copy_pu8SendDataByte = Global_pu8SendByte;
 bd2:	80 91 60 00 	lds	r24, 0x0060
 bd6:	90 91 61 00 	lds	r25, 0x0061
 bda:	9b 83       	std	Y+3, r25	; 0x03
 bdc:	8a 83       	std	Y+2, r24	; 0x02
		 UART_pfSendString = Copy_pfSendDataString;
 bde:	8c 81       	ldd	r24, Y+4	; 0x04
 be0:	9d 81       	ldd	r25, Y+5	; 0x05
 be2:	90 93 65 00 	sts	0x0065, r25
 be6:	80 93 64 00 	sts	0x0064, r24
		/* Enable Interrupt of UDR is Empty PIE */
		SET_BIT(UART_u8_UCSRB_REG,5);
 bea:	aa e2       	ldi	r26, 0x2A	; 42
 bec:	b0 e0       	ldi	r27, 0x00	; 0
 bee:	ea e2       	ldi	r30, 0x2A	; 42
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	80 81       	ld	r24, Z
 bf4:	80 62       	ori	r24, 0x20	; 32
 bf6:	8c 93       	st	X, r24

		Local_u8ErrorState = STD_TYPES_OK;
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 bfc:	89 81       	ldd	r24, Y+1	; 0x01

}
 bfe:	0f 90       	pop	r0
 c00:	0f 90       	pop	r0
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	0f 90       	pop	r0
 c08:	cf 91       	pop	r28
 c0a:	df 91       	pop	r29
 c0c:	08 95       	ret

00000c0e <UART_u8RecieveDataStringASynch>:

u8   UART_u8RecieveDataStringASynch( u8 * Copy_puReceiveDataString , u8 Copy_u8Size , void (*Copy_pfReceiveDataString)(void))
{
 c0e:	df 93       	push	r29
 c10:	cf 93       	push	r28
 c12:	00 d0       	rcall	.+0      	; 0xc14 <UART_u8RecieveDataStringASynch+0x6>
 c14:	00 d0       	rcall	.+0      	; 0xc16 <UART_u8RecieveDataStringASynch+0x8>
 c16:	00 d0       	rcall	.+0      	; 0xc18 <UART_u8RecieveDataStringASynch+0xa>
 c18:	cd b7       	in	r28, 0x3d	; 61
 c1a:	de b7       	in	r29, 0x3e	; 62
 c1c:	9b 83       	std	Y+3, r25	; 0x03
 c1e:	8a 83       	std	Y+2, r24	; 0x02
 c20:	6c 83       	std	Y+4, r22	; 0x04
 c22:	5e 83       	std	Y+6, r21	; 0x06
 c24:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_NOK;
 c26:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pfReceiveDataString != NULL) && (Copy_puReceiveDataString != NULL) && (UART_u8BusyFlag == 0))
 c28:	8d 81       	ldd	r24, Y+5	; 0x05
 c2a:	9e 81       	ldd	r25, Y+6	; 0x06
 c2c:	00 97       	sbiw	r24, 0x00	; 0
 c2e:	09 f4       	brne	.+2      	; 0xc32 <UART_u8RecieveDataStringASynch+0x24>
 c30:	3f c0       	rjmp	.+126    	; 0xcb0 <UART_u8RecieveDataStringASynch+0xa2>
 c32:	8a 81       	ldd	r24, Y+2	; 0x02
 c34:	9b 81       	ldd	r25, Y+3	; 0x03
 c36:	00 97       	sbiw	r24, 0x00	; 0
 c38:	d9 f1       	breq	.+118    	; 0xcb0 <UART_u8RecieveDataStringASynch+0xa2>
 c3a:	80 91 68 00 	lds	r24, 0x0068
 c3e:	88 23       	and	r24, r24
 c40:	b9 f5       	brne	.+110    	; 0xcb0 <UART_u8RecieveDataStringASynch+0xa2>
	{
		/* UART is Busy */
		UART_u8BusyFlag = 1;
 c42:	81 e0       	ldi	r24, 0x01	; 1
 c44:	80 93 68 00 	sts	0x0068, r24
		/* Updating Global Pointers with the input parameters */
		Copy_puReceiveDataString = Global_pu8ReceiveByte;
 c48:	80 91 62 00 	lds	r24, 0x0062
 c4c:	90 91 63 00 	lds	r25, 0x0063
 c50:	9b 83       	std	Y+3, r25	; 0x03
 c52:	8a 83       	std	Y+2, r24	; 0x02
		UART_pfRecieveString = Copy_pfReceiveDataString ;
 c54:	8d 81       	ldd	r24, Y+5	; 0x05
 c56:	9e 81       	ldd	r25, Y+6	; 0x06
 c58:	90 93 67 00 	sts	0x0067, r25
 c5c:	80 93 66 00 	sts	0x0066, r24
		/* Update Global size with the input parameter */
		Copy_u8Size = Global_u8Size;
 c60:	80 91 69 00 	lds	r24, 0x0069
 c64:	8c 83       	std	Y+4, r24	; 0x04
		if((GET_BIT(UART_u8_UCSRA_REG,7)) == 1)
 c66:	eb e2       	ldi	r30, 0x2B	; 43
 c68:	f0 e0       	ldi	r31, 0x00	; 0
 c6a:	80 81       	ld	r24, Z
 c6c:	88 1f       	adc	r24, r24
 c6e:	88 27       	eor	r24, r24
 c70:	88 1f       	adc	r24, r24
 c72:	81 30       	cpi	r24, 0x01	; 1
 c74:	a1 f4       	brne	.+40     	; 0xc9e <UART_u8RecieveDataStringASynch+0x90>
		{
			Global_pu8ReceiveByte[Global_u8Counter] = UART_u8_UDR_REG ;
 c76:	20 91 62 00 	lds	r18, 0x0062
 c7a:	30 91 63 00 	lds	r19, 0x0063
 c7e:	80 91 6a 00 	lds	r24, 0x006A
 c82:	88 2f       	mov	r24, r24
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	d9 01       	movw	r26, r18
 c88:	a8 0f       	add	r26, r24
 c8a:	b9 1f       	adc	r27, r25
 c8c:	ec e2       	ldi	r30, 0x2C	; 44
 c8e:	f0 e0       	ldi	r31, 0x00	; 0
 c90:	80 81       	ld	r24, Z
 c92:	8c 93       	st	X, r24
			Global_u8Counter ++ ;
 c94:	80 91 6a 00 	lds	r24, 0x006A
 c98:	8f 5f       	subi	r24, 0xFF	; 255
 c9a:	80 93 6a 00 	sts	0x006A, r24
		}
		/* Enable Rx Interrupt PIE */
		SET_BIT(UART_u8_UCSRB_REG,7);
 c9e:	aa e2       	ldi	r26, 0x2A	; 42
 ca0:	b0 e0       	ldi	r27, 0x00	; 0
 ca2:	ea e2       	ldi	r30, 0x2A	; 42
 ca4:	f0 e0       	ldi	r31, 0x00	; 0
 ca6:	80 81       	ld	r24, Z
 ca8:	80 68       	ori	r24, 0x80	; 128
 caa:	8c 93       	st	X, r24

		Local_u8ErrorState = STD_TYPES_OK;
 cac:	81 e0       	ldi	r24, 0x01	; 1
 cae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 cb0:	89 81       	ldd	r24, Y+1	; 0x01

}
 cb2:	26 96       	adiw	r28, 0x06	; 6
 cb4:	0f b6       	in	r0, 0x3f	; 63
 cb6:	f8 94       	cli
 cb8:	de bf       	out	0x3e, r29	; 62
 cba:	0f be       	out	0x3f, r0	; 63
 cbc:	cd bf       	out	0x3d, r28	; 61
 cbe:	cf 91       	pop	r28
 cc0:	df 91       	pop	r29
 cc2:	08 95       	ret

00000cc4 <__vector_13>:
/* Prototype of USART RX ISR */
void __vector_13(void)   __attribute__((signal));
void __vector_13(void)
{
 cc4:	1f 92       	push	r1
 cc6:	0f 92       	push	r0
 cc8:	0f b6       	in	r0, 0x3f	; 63
 cca:	0f 92       	push	r0
 ccc:	11 24       	eor	r1, r1
 cce:	2f 93       	push	r18
 cd0:	3f 93       	push	r19
 cd2:	4f 93       	push	r20
 cd4:	5f 93       	push	r21
 cd6:	6f 93       	push	r22
 cd8:	7f 93       	push	r23
 cda:	8f 93       	push	r24
 cdc:	9f 93       	push	r25
 cde:	af 93       	push	r26
 ce0:	bf 93       	push	r27
 ce2:	ef 93       	push	r30
 ce4:	ff 93       	push	r31
 ce6:	df 93       	push	r29
 ce8:	cf 93       	push	r28
 cea:	cd b7       	in	r28, 0x3d	; 61
 cec:	de b7       	in	r29, 0x3e	; 62
	if(Global_u8Counter != Global_u8Size)
 cee:	90 91 6a 00 	lds	r25, 0x006A
 cf2:	80 91 69 00 	lds	r24, 0x0069
 cf6:	98 17       	cp	r25, r24
 cf8:	a9 f0       	breq	.+42     	; 0xd24 <__vector_13+0x60>
	{
		Global_pu8ReceiveByte[Global_u8Counter] = UART_u8_UDR_REG;
 cfa:	20 91 62 00 	lds	r18, 0x0062
 cfe:	30 91 63 00 	lds	r19, 0x0063
 d02:	80 91 6a 00 	lds	r24, 0x006A
 d06:	88 2f       	mov	r24, r24
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	d9 01       	movw	r26, r18
 d0c:	a8 0f       	add	r26, r24
 d0e:	b9 1f       	adc	r27, r25
 d10:	ec e2       	ldi	r30, 0x2C	; 44
 d12:	f0 e0       	ldi	r31, 0x00	; 0
 d14:	80 81       	ld	r24, Z
 d16:	8c 93       	st	X, r24
		Global_u8Counter ++ ;
 d18:	80 91 6a 00 	lds	r24, 0x006A
 d1c:	8f 5f       	subi	r24, 0xFF	; 255
 d1e:	80 93 6a 00 	sts	0x006A, r24
 d22:	10 c0       	rjmp	.+32     	; 0xd44 <__vector_13+0x80>
	}
	else
	{
		/* Disable Rx Interrupt PIE */
		CLR_BIT(UART_u8_UCSRB_REG,7);
 d24:	aa e2       	ldi	r26, 0x2A	; 42
 d26:	b0 e0       	ldi	r27, 0x00	; 0
 d28:	ea e2       	ldi	r30, 0x2A	; 42
 d2a:	f0 e0       	ldi	r31, 0x00	; 0
 d2c:	80 81       	ld	r24, Z
 d2e:	8f 77       	andi	r24, 0x7F	; 127
 d30:	8c 93       	st	X, r24
		/* Clear busy Flag */
		UART_u8BusyFlag = 0 ;
 d32:	10 92 68 00 	sts	0x0068, r1
		/* Clear Counter */
		Global_u8Counter = 0;
 d36:	10 92 6a 00 	sts	0x006A, r1
		/* Call Notification Function */
		UART_pfRecieveString();
 d3a:	e0 91 66 00 	lds	r30, 0x0066
 d3e:	f0 91 67 00 	lds	r31, 0x0067
 d42:	09 95       	icall

	}

}
 d44:	cf 91       	pop	r28
 d46:	df 91       	pop	r29
 d48:	ff 91       	pop	r31
 d4a:	ef 91       	pop	r30
 d4c:	bf 91       	pop	r27
 d4e:	af 91       	pop	r26
 d50:	9f 91       	pop	r25
 d52:	8f 91       	pop	r24
 d54:	7f 91       	pop	r23
 d56:	6f 91       	pop	r22
 d58:	5f 91       	pop	r21
 d5a:	4f 91       	pop	r20
 d5c:	3f 91       	pop	r19
 d5e:	2f 91       	pop	r18
 d60:	0f 90       	pop	r0
 d62:	0f be       	out	0x3f, r0	; 63
 d64:	0f 90       	pop	r0
 d66:	1f 90       	pop	r1
 d68:	18 95       	reti

00000d6a <__vector_14>:
/* Prototype of USART Tx Reg Empty (UDRE) ISR */
void __vector_14(void)   __attribute__((signal));
void __vector_14(void)
{
 d6a:	1f 92       	push	r1
 d6c:	0f 92       	push	r0
 d6e:	0f b6       	in	r0, 0x3f	; 63
 d70:	0f 92       	push	r0
 d72:	11 24       	eor	r1, r1
 d74:	2f 93       	push	r18
 d76:	3f 93       	push	r19
 d78:	4f 93       	push	r20
 d7a:	5f 93       	push	r21
 d7c:	6f 93       	push	r22
 d7e:	7f 93       	push	r23
 d80:	8f 93       	push	r24
 d82:	9f 93       	push	r25
 d84:	af 93       	push	r26
 d86:	bf 93       	push	r27
 d88:	ef 93       	push	r30
 d8a:	ff 93       	push	r31
 d8c:	df 93       	push	r29
 d8e:	cf 93       	push	r28
 d90:	cd b7       	in	r28, 0x3d	; 61
 d92:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter = 0;
	if(Global_pu8SendByte[Local_u8Counter] != '\0')
 d94:	20 91 60 00 	lds	r18, 0x0060
 d98:	30 91 61 00 	lds	r19, 0x0061
 d9c:	80 91 89 00 	lds	r24, 0x0089
 da0:	88 2f       	mov	r24, r24
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	f9 01       	movw	r30, r18
 da6:	e8 0f       	add	r30, r24
 da8:	f9 1f       	adc	r31, r25
 daa:	80 81       	ld	r24, Z
 dac:	88 23       	and	r24, r24
 dae:	a9 f0       	breq	.+42     	; 0xdda <__vector_14+0x70>
	{
		UART_u8_UDR_REG = Global_pu8SendByte[Local_u8Counter];
 db0:	ac e2       	ldi	r26, 0x2C	; 44
 db2:	b0 e0       	ldi	r27, 0x00	; 0
 db4:	20 91 60 00 	lds	r18, 0x0060
 db8:	30 91 61 00 	lds	r19, 0x0061
 dbc:	80 91 89 00 	lds	r24, 0x0089
 dc0:	88 2f       	mov	r24, r24
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	f9 01       	movw	r30, r18
 dc6:	e8 0f       	add	r30, r24
 dc8:	f9 1f       	adc	r31, r25
 dca:	80 81       	ld	r24, Z
 dcc:	8c 93       	st	X, r24
		Local_u8Counter ++ ;
 dce:	80 91 89 00 	lds	r24, 0x0089
 dd2:	8f 5f       	subi	r24, 0xFF	; 255
 dd4:	80 93 89 00 	sts	0x0089, r24
 dd8:	10 c0       	rjmp	.+32     	; 0xdfa <__vector_14+0x90>
	}
	else
	{
		/* Disable Interrupt of UDR is Empty PIE */
		CLR_BIT(UART_u8_UCSRB_REG,5);
 dda:	aa e2       	ldi	r26, 0x2A	; 42
 ddc:	b0 e0       	ldi	r27, 0x00	; 0
 dde:	ea e2       	ldi	r30, 0x2A	; 42
 de0:	f0 e0       	ldi	r31, 0x00	; 0
 de2:	80 81       	ld	r24, Z
 de4:	8f 7d       	andi	r24, 0xDF	; 223
 de6:	8c 93       	st	X, r24
		/* Clear busy Flag */
		UART_u8BusyFlag = 0 ;
 de8:	10 92 68 00 	sts	0x0068, r1
		/* Clear Counter */
		Local_u8Counter = 0;
 dec:	10 92 89 00 	sts	0x0089, r1
		/* Call Notification Function */
		UART_pfSendString();
 df0:	e0 91 64 00 	lds	r30, 0x0064
 df4:	f0 91 65 00 	lds	r31, 0x0065
 df8:	09 95       	icall

	}

}
 dfa:	cf 91       	pop	r28
 dfc:	df 91       	pop	r29
 dfe:	ff 91       	pop	r31
 e00:	ef 91       	pop	r30
 e02:	bf 91       	pop	r27
 e04:	af 91       	pop	r26
 e06:	9f 91       	pop	r25
 e08:	8f 91       	pop	r24
 e0a:	7f 91       	pop	r23
 e0c:	6f 91       	pop	r22
 e0e:	5f 91       	pop	r21
 e10:	4f 91       	pop	r20
 e12:	3f 91       	pop	r19
 e14:	2f 91       	pop	r18
 e16:	0f 90       	pop	r0
 e18:	0f be       	out	0x3f, r0	; 63
 e1a:	0f 90       	pop	r0
 e1c:	1f 90       	pop	r1
 e1e:	18 95       	reti

00000e20 <main>:

#include "DIO_interface.h"
#include "UART_interface.h"

int main(void)
{
 e20:	df 93       	push	r29
 e22:	cf 93       	push	r28
 e24:	00 d0       	rcall	.+0      	; 0xe26 <main+0x6>
 e26:	0f 92       	push	r0
 e28:	cd b7       	in	r28, 0x3d	; 61
 e2a:	de b7       	in	r29, 0x3e	; 62
//	arr[4] = 'e'  ; //UART_u8RecieveDataByte();
//	arr[5] = 'f'  ; //UART_u8RecieveDataByte();
//	arr[6] = 'g'  ; //UART_u8RecieveDataByte();
//	arr[7] = 0x00 ;

	DIO_u8Init();
 e2c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8Init>

	UART_voidInit();
 e30:	0e 94 02 05 	call	0xa04	; 0xa04 <UART_voidInit>
//
//		UART_voidSendDataStringSynch(" TEST2 Receive String ");

	    //UART_voidSendDataStringSynch(Local_u8Data);

		Local_u8Data = UART_u8RecieveDataStringSynch();
 e34:	0e 94 93 05 	call	0xb26	; 0xb26 <UART_u8RecieveDataStringSynch>
 e38:	9b 83       	std	Y+3, r25	; 0x03
 e3a:	8a 83       	std	Y+2, r24	; 0x02
		UART_voidSendDataStringSynch(Local_u8Data);
 e3c:	8a 81       	ldd	r24, Y+2	; 0x02
 e3e:	9b 81       	ldd	r25, Y+3	; 0x03
 e40:	0e 94 73 05 	call	0xae6	; 0xae6 <UART_voidSendDataStringSynch>
 e44:	f7 cf       	rjmp	.-18     	; 0xe34 <main+0x14>

00000e46 <_exit>:
 e46:	f8 94       	cli

00000e48 <__stop_program>:
 e48:	ff cf       	rjmp	.-2      	; 0xe48 <__stop_program>
