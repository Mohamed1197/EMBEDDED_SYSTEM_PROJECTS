
Stepper_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00004d12  00004da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800142  00800142  00004e88  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  00004e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e36  00000000  00000000  00008608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000943e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000959e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000972d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b772  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c873  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d7f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000dc3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <main>
      8a:	0c 94 87 26 	jmp	0x4d0e	; 0x4d0e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e2       	ldi	r26, 0x21	; 33
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 26 	jmp	0x4cd8	; 0x4cd8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 26 	jmp	0x4cf0	; 0x4cf0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 26 	jmp	0x4cf0	; 0x4cf0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e2       	ldi	r24, 0x21	; 33
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 26 	jmp	0x4cd8	; 0x4cd8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 58 26 	jmp	0x4cb0	; 0x4cb0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e2       	ldi	r22, 0x21	; 33
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 74 26 	jmp	0x4ce8	; 0x4ce8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 78 26 	jmp	0x4cf0	; 0x4cf0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 78 26 	jmp	0x4cf0	; 0x4cf0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 78 26 	jmp	0x4cf0	; 0x4cf0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7c 26 	jmp	0x4cf8	; 0x4cf8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	80 83       	st	Z, r24
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     cb0:	e7 e3       	ldi	r30, 0x37	; 55
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	8f e0       	ldi	r24, 0x0F	; 15
     cb6:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     cb8:	e4 e3       	ldi	r30, 0x34	; 52
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	8f e7       	ldi	r24, 0x7F	; 127
     cbe:	80 83       	st	Z, r24
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     cc8:	eb e3       	ldi	r30, 0x3B	; 59
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     cce:	e8 e3       	ldi	r30, 0x38	; 56
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	80 83       	st	Z, r24
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     cd6:	e5 e3       	ldi	r30, 0x35	; 53
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     cdc:	e2 e3       	ldi	r30, 0x32	; 50
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	2e 97       	sbiw	r28, 0x0e	; 14
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	6b 83       	std	Y+3, r22	; 0x03
     d02:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	84 30       	cpi	r24, 0x04	; 4
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <DIO_u8SetPinDirection+0x26>
     d0e:	0c c1       	rjmp	.+536    	; 0xf28 <DIO_u8SetPinDirection+0x23e>
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	88 30       	cpi	r24, 0x08	; 8
     d14:	08 f0       	brcs	.+2      	; 0xd18 <DIO_u8SetPinDirection+0x2e>
     d16:	08 c1       	rjmp	.+528    	; 0xf28 <DIO_u8SetPinDirection+0x23e>
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	88 23       	and	r24, r24
     d1c:	21 f0       	breq	.+8      	; 0xd26 <DIO_u8SetPinDirection+0x3c>
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	09 f0       	breq	.+2      	; 0xd26 <DIO_u8SetPinDirection+0x3c>
     d24:	01 c1       	rjmp	.+514    	; 0xf28 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	3e 87       	std	Y+14, r19	; 0x0e
     d2e:	2d 87       	std	Y+13, r18	; 0x0d
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	91 05       	cpc	r25, r1
     d38:	09 f4       	brne	.+2      	; 0xd3c <DIO_u8SetPinDirection+0x52>
     d3a:	4f c0       	rjmp	.+158    	; 0xdda <DIO_u8SetPinDirection+0xf0>
     d3c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	2c f4       	brge	.+10     	; 0xd50 <DIO_u8SetPinDirection+0x66>
     d46:	8d 85       	ldd	r24, Y+13	; 0x0d
     d48:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	71 f0       	breq	.+28     	; 0xd6a <DIO_u8SetPinDirection+0x80>
     d4e:	ed c0       	rjmp	.+474    	; 0xf2a <DIO_u8SetPinDirection+0x240>
     d50:	2d 85       	ldd	r18, Y+13	; 0x0d
     d52:	3e 85       	ldd	r19, Y+14	; 0x0e
     d54:	22 30       	cpi	r18, 0x02	; 2
     d56:	31 05       	cpc	r19, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <DIO_u8SetPinDirection+0x72>
     d5a:	77 c0       	rjmp	.+238    	; 0xe4a <DIO_u8SetPinDirection+0x160>
     d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d60:	83 30       	cpi	r24, 0x03	; 3
     d62:	91 05       	cpc	r25, r1
     d64:	09 f4       	brne	.+2      	; 0xd68 <DIO_u8SetPinDirection+0x7e>
     d66:	a9 c0       	rjmp	.+338    	; 0xeba <DIO_u8SetPinDirection+0x1d0>
     d68:	e0 c0       	rjmp	.+448    	; 0xf2a <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3c 87       	std	Y+12, r19	; 0x0c
     d72:	2b 87       	std	Y+11, r18	; 0x0b
     d74:	8b 85       	ldd	r24, Y+11	; 0x0b
     d76:	9c 85       	ldd	r25, Y+12	; 0x0c
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	d1 f0       	breq	.+52     	; 0xdb0 <DIO_u8SetPinDirection+0xc6>
     d7c:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7e:	3c 85       	ldd	r19, Y+12	; 0x0c
     d80:	21 30       	cpi	r18, 0x01	; 1
     d82:	31 05       	cpc	r19, r1
     d84:	09 f0       	breq	.+2      	; 0xd88 <DIO_u8SetPinDirection+0x9e>
     d86:	d1 c0       	rjmp	.+418    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     d88:	aa e3       	ldi	r26, 0x3A	; 58
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ea e3       	ldi	r30, 0x3A	; 58
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_u8SetPinDirection+0xbc>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_u8SetPinDirection+0xb8>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	bd c0       	rjmp	.+378    	; 0xf2a <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     db0:	aa e3       	ldi	r26, 0x3A	; 58
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ea e3       	ldi	r30, 0x3A	; 58
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_u8SetPinDirection+0xe4>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_u8SetPinDirection+0xe0>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	a8 c0       	rjmp	.+336    	; 0xf2a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	3a 87       	std	Y+10, r19	; 0x0a
     de2:	29 87       	std	Y+9, r18	; 0x09
     de4:	89 85       	ldd	r24, Y+9	; 0x09
     de6:	9a 85       	ldd	r25, Y+10	; 0x0a
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	d1 f0       	breq	.+52     	; 0xe20 <DIO_u8SetPinDirection+0x136>
     dec:	29 85       	ldd	r18, Y+9	; 0x09
     dee:	3a 85       	ldd	r19, Y+10	; 0x0a
     df0:	21 30       	cpi	r18, 0x01	; 1
     df2:	31 05       	cpc	r19, r1
     df4:	09 f0       	breq	.+2      	; 0xdf8 <DIO_u8SetPinDirection+0x10e>
     df6:	99 c0       	rjmp	.+306    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     df8:	a7 e3       	ldi	r26, 0x37	; 55
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e7 e3       	ldi	r30, 0x37	; 55
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_u8SetPinDirection+0x12c>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_u8SetPinDirection+0x128>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	85 c0       	rjmp	.+266    	; 0xf2a <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     e20:	a7 e3       	ldi	r26, 0x37	; 55
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e7 e3       	ldi	r30, 0x37	; 55
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_u8SetPinDirection+0x154>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_u8SetPinDirection+0x150>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	70 c0       	rjmp	.+224    	; 0xf2a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	38 87       	std	Y+8, r19	; 0x08
     e52:	2f 83       	std	Y+7, r18	; 0x07
     e54:	8f 81       	ldd	r24, Y+7	; 0x07
     e56:	98 85       	ldd	r25, Y+8	; 0x08
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	d1 f0       	breq	.+52     	; 0xe90 <DIO_u8SetPinDirection+0x1a6>
     e5c:	2f 81       	ldd	r18, Y+7	; 0x07
     e5e:	38 85       	ldd	r19, Y+8	; 0x08
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	09 f0       	breq	.+2      	; 0xe68 <DIO_u8SetPinDirection+0x17e>
     e66:	61 c0       	rjmp	.+194    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_u8SetPinDirection+0x19c>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_u8SetPinDirection+0x198>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	4d c0       	rjmp	.+154    	; 0xf2a <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     e90:	a4 e3       	ldi	r26, 0x34	; 52
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e4 e3       	ldi	r30, 0x34	; 52
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_u8SetPinDirection+0x1c4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_u8SetPinDirection+0x1c0>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	38 c0       	rjmp	.+112    	; 0xf2a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3e 83       	std	Y+6, r19	; 0x06
     ec2:	2d 83       	std	Y+5, r18	; 0x05
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	c9 f0       	breq	.+50     	; 0xefe <DIO_u8SetPinDirection+0x214>
     ecc:	2d 81       	ldd	r18, Y+5	; 0x05
     ece:	3e 81       	ldd	r19, Y+6	; 0x06
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	31 05       	cpc	r19, r1
     ed4:	51 f5       	brne	.+84     	; 0xf2a <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
     ed6:	a1 e3       	ldi	r26, 0x31	; 49
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e1 e3       	ldi	r30, 0x31	; 49
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_u8SetPinDirection+0x20a>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_u8SetPinDirection+0x206>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
     efe:	a1 e3       	ldi	r26, 0x31	; 49
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e1 e3       	ldi	r30, 0x31	; 49
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_u8SetPinDirection+0x232>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_u8SetPinDirection+0x22e>
     f20:	80 95       	com	r24
     f22:	84 23       	and	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     f28:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2c:	2e 96       	adiw	r28, 0x0e	; 14
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	2e 97       	sbiw	r28, 0x0e	; 14
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	6b 83       	std	Y+3, r22	; 0x03
     f56:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	08 f0       	brcs	.+2      	; 0xf64 <DIO_u8SetPinValue+0x26>
     f62:	0c c1       	rjmp	.+536    	; 0x117c <DIO_u8SetPinValue+0x23e>
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	88 30       	cpi	r24, 0x08	; 8
     f68:	08 f0       	brcs	.+2      	; 0xf6c <DIO_u8SetPinValue+0x2e>
     f6a:	08 c1       	rjmp	.+528    	; 0x117c <DIO_u8SetPinValue+0x23e>
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	21 f0       	breq	.+8      	; 0xf7a <DIO_u8SetPinValue+0x3c>
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	88 23       	and	r24, r24
     f76:	09 f0       	breq	.+2      	; 0xf7a <DIO_u8SetPinValue+0x3c>
     f78:	01 c1       	rjmp	.+514    	; 0x117c <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3e 87       	std	Y+14, r19	; 0x0e
     f82:	2d 87       	std	Y+13, r18	; 0x0d
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <DIO_u8SetPinValue+0x52>
     f8e:	4f c0       	rjmp	.+158    	; 0x102e <DIO_u8SetPinValue+0xf0>
     f90:	2d 85       	ldd	r18, Y+13	; 0x0d
     f92:	3e 85       	ldd	r19, Y+14	; 0x0e
     f94:	22 30       	cpi	r18, 0x02	; 2
     f96:	31 05       	cpc	r19, r1
     f98:	2c f4       	brge	.+10     	; 0xfa4 <DIO_u8SetPinValue+0x66>
     f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	71 f0       	breq	.+28     	; 0xfbe <DIO_u8SetPinValue+0x80>
     fa2:	ed c0       	rjmp	.+474    	; 0x117e <DIO_u8SetPinValue+0x240>
     fa4:	2d 85       	ldd	r18, Y+13	; 0x0d
     fa6:	3e 85       	ldd	r19, Y+14	; 0x0e
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	31 05       	cpc	r19, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <DIO_u8SetPinValue+0x72>
     fae:	77 c0       	rjmp	.+238    	; 0x109e <DIO_u8SetPinValue+0x160>
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	91 05       	cpc	r25, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <DIO_u8SetPinValue+0x7e>
     fba:	a9 c0       	rjmp	.+338    	; 0x110e <DIO_u8SetPinValue+0x1d0>
     fbc:	e0 c0       	rjmp	.+448    	; 0x117e <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3c 87       	std	Y+12, r19	; 0x0c
     fc6:	2b 87       	std	Y+11, r18	; 0x0b
     fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fca:	9c 85       	ldd	r25, Y+12	; 0x0c
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	d1 f0       	breq	.+52     	; 0x1004 <DIO_u8SetPinValue+0xc6>
     fd0:	2b 85       	ldd	r18, Y+11	; 0x0b
     fd2:	3c 85       	ldd	r19, Y+12	; 0x0c
     fd4:	21 30       	cpi	r18, 0x01	; 1
     fd6:	31 05       	cpc	r19, r1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <DIO_u8SetPinValue+0x9e>
     fda:	d1 c0       	rjmp	.+418    	; 0x117e <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
     fdc:	ab e3       	ldi	r26, 0x3B	; 59
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8SetPinValue+0xbc>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_u8SetPinValue+0xb8>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	bd c0       	rjmp	.+378    	; 0x117e <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
    1004:	ab e3       	ldi	r26, 0x3B	; 59
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	eb e3       	ldi	r30, 0x3B	; 59
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_u8SetPinValue+0xe4>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_u8SetPinValue+0xe0>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	a8 c0       	rjmp	.+336    	; 0x117e <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3a 87       	std	Y+10, r19	; 0x0a
    1036:	29 87       	std	Y+9, r18	; 0x09
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	d1 f0       	breq	.+52     	; 0x1074 <DIO_u8SetPinValue+0x136>
    1040:	29 85       	ldd	r18, Y+9	; 0x09
    1042:	3a 85       	ldd	r19, Y+10	; 0x0a
    1044:	21 30       	cpi	r18, 0x01	; 1
    1046:	31 05       	cpc	r19, r1
    1048:	09 f0       	breq	.+2      	; 0x104c <DIO_u8SetPinValue+0x10e>
    104a:	99 c0       	rjmp	.+306    	; 0x117e <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    104c:	a8 e3       	ldi	r26, 0x38	; 56
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinValue+0x12c>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinValue+0x128>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	85 c0       	rjmp	.+266    	; 0x117e <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    1074:	a8 e3       	ldi	r26, 0x38	; 56
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 e3       	ldi	r30, 0x38	; 56
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_u8SetPinValue+0x154>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_u8SetPinValue+0x150>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	70 c0       	rjmp	.+224    	; 0x117e <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	38 87       	std	Y+8, r19	; 0x08
    10a6:	2f 83       	std	Y+7, r18	; 0x07
    10a8:	8f 81       	ldd	r24, Y+7	; 0x07
    10aa:	98 85       	ldd	r25, Y+8	; 0x08
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	d1 f0       	breq	.+52     	; 0x10e4 <DIO_u8SetPinValue+0x1a6>
    10b0:	2f 81       	ldd	r18, Y+7	; 0x07
    10b2:	38 85       	ldd	r19, Y+8	; 0x08
    10b4:	21 30       	cpi	r18, 0x01	; 1
    10b6:	31 05       	cpc	r19, r1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <DIO_u8SetPinValue+0x17e>
    10ba:	61 c0       	rjmp	.+194    	; 0x117e <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    10bc:	a5 e3       	ldi	r26, 0x35	; 53
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e3       	ldi	r30, 0x35	; 53
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_u8SetPinValue+0x19c>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_u8SetPinValue+0x198>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	4d c0       	rjmp	.+154    	; 0x117e <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinValue+0x1c4>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinValue+0x1c0>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	38 c0       	rjmp	.+112    	; 0x117e <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	3e 83       	std	Y+6, r19	; 0x06
    1116:	2d 83       	std	Y+5, r18	; 0x05
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	c9 f0       	breq	.+50     	; 0x1152 <DIO_u8SetPinValue+0x214>
    1120:	2d 81       	ldd	r18, Y+5	; 0x05
    1122:	3e 81       	ldd	r19, Y+6	; 0x06
    1124:	21 30       	cpi	r18, 0x01	; 1
    1126:	31 05       	cpc	r19, r1
    1128:	51 f5       	brne	.+84     	; 0x117e <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    112a:	a2 e3       	ldi	r26, 0x32	; 50
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e2 e3       	ldi	r30, 0x32	; 50
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_u8SetPinValue+0x20a>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_u8SetPinValue+0x206>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	16 c0       	rjmp	.+44     	; 0x117e <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    1152:	a2 e3       	ldi	r26, 0x32	; 50
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e2 e3       	ldi	r30, 0x32	; 50
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_u8SetPinValue+0x232>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_u8SetPinValue+0x22e>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	01 c0       	rjmp	.+2      	; 0x117e <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    117c:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    117e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1180:	2e 96       	adiw	r28, 0x0e	; 14
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	27 97       	sbiw	r28, 0x07	; 7
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
    11aa:	5d 83       	std	Y+5, r21	; 0x05
    11ac:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <DIO_u8GetPinValue+0x28>
    11b8:	ea c0       	rjmp	.+468    	; 0x138e <DIO_u8GetPinValue+0x1fc>
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 30       	cpi	r24, 0x08	; 8
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <DIO_u8GetPinValue+0x30>
    11c0:	e6 c0       	rjmp	.+460    	; 0x138e <DIO_u8GetPinValue+0x1fc>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	09 f4       	brne	.+2      	; 0x11cc <DIO_u8GetPinValue+0x3a>
    11ca:	e1 c0       	rjmp	.+450    	; 0x138e <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3f 83       	std	Y+7, r19	; 0x07
    11d4:	2e 83       	std	Y+6, r18	; 0x06
    11d6:	4e 81       	ldd	r20, Y+6	; 0x06
    11d8:	5f 81       	ldd	r21, Y+7	; 0x07
    11da:	41 30       	cpi	r20, 0x01	; 1
    11dc:	51 05       	cpc	r21, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <DIO_u8GetPinValue+0x50>
    11e0:	48 c0       	rjmp	.+144    	; 0x1272 <DIO_u8GetPinValue+0xe0>
    11e2:	8e 81       	ldd	r24, Y+6	; 0x06
    11e4:	9f 81       	ldd	r25, Y+7	; 0x07
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	91 05       	cpc	r25, r1
    11ea:	34 f4       	brge	.+12     	; 0x11f8 <DIO_u8GetPinValue+0x66>
    11ec:	2e 81       	ldd	r18, Y+6	; 0x06
    11ee:	3f 81       	ldd	r19, Y+7	; 0x07
    11f0:	21 15       	cp	r18, r1
    11f2:	31 05       	cpc	r19, r1
    11f4:	71 f0       	breq	.+28     	; 0x1212 <DIO_u8GetPinValue+0x80>
    11f6:	cc c0       	rjmp	.+408    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
    11f8:	4e 81       	ldd	r20, Y+6	; 0x06
    11fa:	5f 81       	ldd	r21, Y+7	; 0x07
    11fc:	42 30       	cpi	r20, 0x02	; 2
    11fe:	51 05       	cpc	r21, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <DIO_u8GetPinValue+0x72>
    1202:	67 c0       	rjmp	.+206    	; 0x12d2 <DIO_u8GetPinValue+0x140>
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <DIO_u8GetPinValue+0x7e>
    120e:	90 c0       	rjmp	.+288    	; 0x1330 <DIO_u8GetPinValue+0x19e>
    1210:	bf c0       	rjmp	.+382    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    1212:	e9 e3       	ldi	r30, 0x39	; 57
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8GetPinValue+0x98>
    1226:	55 95       	asr	r21
    1228:	47 95       	ror	r20
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_u8GetPinValue+0x94>
    122e:	ca 01       	movw	r24, r20
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	90 70       	andi	r25, 0x00	; 0
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	21 f4       	brne	.+8      	; 0x1240 <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1238:	ec 81       	ldd	r30, Y+4	; 0x04
    123a:	fd 81       	ldd	r31, Y+5	; 0x05
    123c:	10 82       	st	Z, r1
    123e:	a8 c0       	rjmp	.+336    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    1240:	e9 e3       	ldi	r30, 0x39	; 57
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_u8GetPinValue+0xc6>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_u8GetPinValue+0xc2>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	90 70       	andi	r25, 0x00	; 0
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <DIO_u8GetPinValue+0xd6>
    1266:	94 c0       	rjmp	.+296    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1268:	ec 81       	ldd	r30, Y+4	; 0x04
    126a:	fd 81       	ldd	r31, Y+5	; 0x05
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 83       	st	Z, r24
    1270:	8f c0       	rjmp	.+286    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    1272:	e6 e3       	ldi	r30, 0x36	; 54
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_u8GetPinValue+0xf8>
    1286:	55 95       	asr	r21
    1288:	47 95       	ror	r20
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_u8GetPinValue+0xf4>
    128e:	ca 01       	movw	r24, r20
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	90 70       	andi	r25, 0x00	; 0
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	21 f4       	brne	.+8      	; 0x12a0 <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1298:	ec 81       	ldd	r30, Y+4	; 0x04
    129a:	fd 81       	ldd	r31, Y+5	; 0x05
    129c:	10 82       	st	Z, r1
    129e:	78 c0       	rjmp	.+240    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    12a0:	e6 e3       	ldi	r30, 0x36	; 54
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_u8GetPinValue+0x126>
    12b4:	55 95       	asr	r21
    12b6:	47 95       	ror	r20
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_u8GetPinValue+0x122>
    12bc:	ca 01       	movw	r24, r20
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	88 23       	and	r24, r24
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <DIO_u8GetPinValue+0x136>
    12c6:	64 c0       	rjmp	.+200    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    12c8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ca:	fd 81       	ldd	r31, Y+5	; 0x05
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 83       	st	Z, r24
    12d0:	5f c0       	rjmp	.+190    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    12d2:	e3 e3       	ldi	r30, 0x33	; 51
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_u8GetPinValue+0x158>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_u8GetPinValue+0x154>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	90 70       	andi	r25, 0x00	; 0
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	21 f4       	brne	.+8      	; 0x1300 <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12f8:	ec 81       	ldd	r30, Y+4	; 0x04
    12fa:	fd 81       	ldd	r31, Y+5	; 0x05
    12fc:	10 82       	st	Z, r1
    12fe:	48 c0       	rjmp	.+144    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    1300:	e3 e3       	ldi	r30, 0x33	; 51
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a9 01       	movw	r20, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8GetPinValue+0x186>
    1314:	55 95       	asr	r21
    1316:	47 95       	ror	r20
    1318:	8a 95       	dec	r24
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_u8GetPinValue+0x182>
    131c:	ca 01       	movw	r24, r20
    131e:	81 70       	andi	r24, 0x01	; 1
    1320:	90 70       	andi	r25, 0x00	; 0
    1322:	88 23       	and	r24, r24
    1324:	a9 f1       	breq	.+106    	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1326:	ec 81       	ldd	r30, Y+4	; 0x04
    1328:	fd 81       	ldd	r31, Y+5	; 0x05
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 83       	st	Z, r24
    132e:	30 c0       	rjmp	.+96     	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    1330:	e0 e3       	ldi	r30, 0x30	; 48
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	88 2f       	mov	r24, r24
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a9 01       	movw	r20, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_u8GetPinValue+0x1b6>
    1344:	55 95       	asr	r21
    1346:	47 95       	ror	r20
    1348:	8a 95       	dec	r24
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_u8GetPinValue+0x1b2>
    134c:	ca 01       	movw	r24, r20
    134e:	81 70       	andi	r24, 0x01	; 1
    1350:	90 70       	andi	r25, 0x00	; 0
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	21 f4       	brne	.+8      	; 0x135e <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1356:	ec 81       	ldd	r30, Y+4	; 0x04
    1358:	fd 81       	ldd	r31, Y+5	; 0x05
    135a:	10 82       	st	Z, r1
    135c:	19 c0       	rjmp	.+50     	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    135e:	e0 e3       	ldi	r30, 0x30	; 48
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_u8GetPinValue+0x1e4>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_u8GetPinValue+0x1e0>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	90 70       	andi	r25, 0x00	; 0
    1380:	88 23       	and	r24, r24
    1382:	31 f0       	breq	.+12     	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1384:	ec 81       	ldd	r30, Y+4	; 0x04
    1386:	fd 81       	ldd	r31, Y+5	; 0x05
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	80 83       	st	Z, r24
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    138e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1390:	89 81       	ldd	r24, Y+1	; 0x01
}
    1392:	27 96       	adiw	r28, 0x07	; 7
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	2d 97       	sbiw	r28, 0x0d	; 13
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <DIO_u8SetPortDirection+0x24>
    13c6:	87 c0       	rjmp	.+270    	; 0x14d6 <DIO_u8SetPortDirection+0x132>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	21 f0       	breq	.+8      	; 0x13d6 <DIO_u8SetPortDirection+0x32>
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 23       	and	r24, r24
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <DIO_u8SetPortDirection+0x32>
    13d4:	80 c0       	rjmp	.+256    	; 0x14d6 <DIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3d 87       	std	Y+13, r19	; 0x0d
    13de:	2c 87       	std	Y+12, r18	; 0x0c
    13e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	71 f1       	breq	.+92     	; 0x1446 <DIO_u8SetPortDirection+0xa2>
    13ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <DIO_u8SetPortDirection+0x5a>
    13f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f0       	breq	.+26     	; 0x1416 <DIO_u8SetPortDirection+0x72>
    13fc:	6d c0       	rjmp	.+218    	; 0x14d8 <DIO_u8SetPortDirection+0x134>
    13fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1400:	3d 85       	ldd	r19, Y+13	; 0x0d
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	b9 f1       	breq	.+110    	; 0x1476 <DIO_u8SetPortDirection+0xd2>
    1408:	8c 85       	ldd	r24, Y+12	; 0x0c
    140a:	9d 85       	ldd	r25, Y+13	; 0x0d
    140c:	83 30       	cpi	r24, 0x03	; 3
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <DIO_u8SetPortDirection+0x70>
    1412:	49 c0       	rjmp	.+146    	; 0x14a6 <DIO_u8SetPortDirection+0x102>
    1414:	61 c0       	rjmp	.+194    	; 0x14d8 <DIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3b 87       	std	Y+11, r19	; 0x0b
    141e:	2a 87       	std	Y+10, r18	; 0x0a
    1420:	8a 85       	ldd	r24, Y+10	; 0x0a
    1422:	9b 85       	ldd	r25, Y+11	; 0x0b
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	31 f0       	breq	.+12     	; 0x1434 <DIO_u8SetPortDirection+0x90>
    1428:	2a 85       	ldd	r18, Y+10	; 0x0a
    142a:	3b 85       	ldd	r19, Y+11	; 0x0b
    142c:	21 30       	cpi	r18, 0x01	; 1
    142e:	31 05       	cpc	r19, r1
    1430:	29 f0       	breq	.+10     	; 0x143c <DIO_u8SetPortDirection+0x98>
    1432:	52 c0       	rjmp	.+164    	; 0x14d8 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    1434:	ea e3       	ldi	r30, 0x3A	; 58
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	10 82       	st	Z, r1
    143a:	4e c0       	rjmp	.+156    	; 0x14d8 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	80 83       	st	Z, r24
    1444:	49 c0       	rjmp	.+146    	; 0x14d8 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	39 87       	std	Y+9, r19	; 0x09
    144e:	28 87       	std	Y+8, r18	; 0x08
    1450:	88 85       	ldd	r24, Y+8	; 0x08
    1452:	99 85       	ldd	r25, Y+9	; 0x09
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	31 f0       	breq	.+12     	; 0x1464 <DIO_u8SetPortDirection+0xc0>
    1458:	28 85       	ldd	r18, Y+8	; 0x08
    145a:	39 85       	ldd	r19, Y+9	; 0x09
    145c:	21 30       	cpi	r18, 0x01	; 1
    145e:	31 05       	cpc	r19, r1
    1460:	29 f0       	breq	.+10     	; 0x146c <DIO_u8SetPortDirection+0xc8>
    1462:	3a c0       	rjmp	.+116    	; 0x14d8 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    1464:	e7 e3       	ldi	r30, 0x37	; 55
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	10 82       	st	Z, r1
    146a:	36 c0       	rjmp	.+108    	; 0x14d8 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    146c:	e7 e3       	ldi	r30, 0x37	; 55
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	80 83       	st	Z, r24
    1474:	31 c0       	rjmp	.+98     	; 0x14d8 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3f 83       	std	Y+7, r19	; 0x07
    147e:	2e 83       	std	Y+6, r18	; 0x06
    1480:	8e 81       	ldd	r24, Y+6	; 0x06
    1482:	9f 81       	ldd	r25, Y+7	; 0x07
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	31 f0       	breq	.+12     	; 0x1494 <DIO_u8SetPortDirection+0xf0>
    1488:	2e 81       	ldd	r18, Y+6	; 0x06
    148a:	3f 81       	ldd	r19, Y+7	; 0x07
    148c:	21 30       	cpi	r18, 0x01	; 1
    148e:	31 05       	cpc	r19, r1
    1490:	29 f0       	breq	.+10     	; 0x149c <DIO_u8SetPortDirection+0xf8>
    1492:	22 c0       	rjmp	.+68     	; 0x14d8 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    1494:	e4 e3       	ldi	r30, 0x34	; 52
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	10 82       	st	Z, r1
    149a:	1e c0       	rjmp	.+60     	; 0x14d8 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    149c:	e4 e3       	ldi	r30, 0x34	; 52
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	80 83       	st	Z, r24
    14a4:	19 c0       	rjmp	.+50     	; 0x14d8 <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3d 83       	std	Y+5, r19	; 0x05
    14ae:	2c 83       	std	Y+4, r18	; 0x04
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	31 f0       	breq	.+12     	; 0x14c4 <DIO_u8SetPortDirection+0x120>
    14b8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ba:	3d 81       	ldd	r19, Y+5	; 0x05
    14bc:	21 30       	cpi	r18, 0x01	; 1
    14be:	31 05       	cpc	r19, r1
    14c0:	29 f0       	breq	.+10     	; 0x14cc <DIO_u8SetPortDirection+0x128>
    14c2:	0a c0       	rjmp	.+20     	; 0x14d8 <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    14c4:	e1 e3       	ldi	r30, 0x31	; 49
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	10 82       	st	Z, r1
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    14cc:	e1 e3       	ldi	r30, 0x31	; 49
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	80 83       	st	Z, r24
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <DIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    14d6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14da:	2d 96       	adiw	r28, 0x0d	; 13
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_u8SetPortValue+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_u8SetPortValue+0x8>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3d 83       	std	Y+5, r19	; 0x05
    150a:	2c 83       	std	Y+4, r18	; 0x04
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	d1 f0       	breq	.+52     	; 0x154a <DIO_u8SetPortValue+0x5e>
    1516:	2c 81       	ldd	r18, Y+4	; 0x04
    1518:	3d 81       	ldd	r19, Y+5	; 0x05
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <DIO_u8SetPortValue+0x3e>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	61 f0       	breq	.+24     	; 0x1540 <DIO_u8SetPortValue+0x54>
    1528:	1f c0       	rjmp	.+62     	; 0x1568 <DIO_u8SetPortValue+0x7c>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	81 f0       	breq	.+32     	; 0x1554 <DIO_u8SetPortValue+0x68>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <DIO_u8SetPortValue+0x72>
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    1540:	eb e3       	ldi	r30, 0x3B	; 59
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	80 83       	st	Z, r24
    1548:	10 c0       	rjmp	.+32     	; 0x156a <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	80 83       	st	Z, r24
    1552:	0b c0       	rjmp	.+22     	; 0x156a <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    1554:	e5 e3       	ldi	r30, 0x35	; 53
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	80 83       	st	Z, r24
    155c:	06 c0       	rjmp	.+12     	; 0x156a <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    155e:	e2 e3       	ldi	r30, 0x32	; 50
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	80 83       	st	Z, r24
    1566:	01 c0       	rjmp	.+2      	; 0x156a <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    1568:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_u8GetPortValue+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_u8GetPortValue+0x8>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <DIO_u8GetPortValue+0xa>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	7c 83       	std	Y+4, r23	; 0x04
    158e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	e9 f1       	breq	.+122    	; 0x1616 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	3e 83       	std	Y+6, r19	; 0x06
    15a4:	2d 83       	std	Y+5, r18	; 0x05
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	91 05       	cpc	r25, r1
    15ae:	e1 f0       	breq	.+56     	; 0x15e8 <DIO_u8GetPortValue+0x6c>
    15b0:	2d 81       	ldd	r18, Y+5	; 0x05
    15b2:	3e 81       	ldd	r19, Y+6	; 0x06
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	2c f4       	brge	.+10     	; 0x15c4 <DIO_u8GetPortValue+0x48>
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	61 f0       	breq	.+24     	; 0x15da <DIO_u8GetPortValue+0x5e>
    15c2:	27 c0       	rjmp	.+78     	; 0x1612 <DIO_u8GetPortValue+0x96>
    15c4:	2d 81       	ldd	r18, Y+5	; 0x05
    15c6:	3e 81       	ldd	r19, Y+6	; 0x06
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	a1 f0       	breq	.+40     	; 0x15f6 <DIO_u8GetPortValue+0x7a>
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	91 05       	cpc	r25, r1
    15d6:	b1 f0       	breq	.+44     	; 0x1604 <DIO_u8GetPortValue+0x88>
    15d8:	1c c0       	rjmp	.+56     	; 0x1612 <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    15da:	e9 e3       	ldi	r30, 0x39	; 57
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	eb 81       	ldd	r30, Y+3	; 0x03
    15e2:	fc 81       	ldd	r31, Y+4	; 0x04
    15e4:	80 83       	st	Z, r24
    15e6:	18 c0       	rjmp	.+48     	; 0x1618 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    15e8:	e6 e3       	ldi	r30, 0x36	; 54
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	80 83       	st	Z, r24
    15f4:	11 c0       	rjmp	.+34     	; 0x1618 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    15f6:	e3 e3       	ldi	r30, 0x33	; 51
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	eb 81       	ldd	r30, Y+3	; 0x03
    15fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1600:	80 83       	st	Z, r24
    1602:	0a c0       	rjmp	.+20     	; 0x1618 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    1604:	e0 e3       	ldi	r30, 0x30	; 48
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	eb 81       	ldd	r30, Y+3	; 0x03
    160c:	fc 81       	ldd	r31, Y+4	; 0x04
    160e:	80 83       	st	Z, r24
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    1612:	19 82       	std	Y+1, r1	; 0x01
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1616:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	26 96       	adiw	r28, 0x06	; 6
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <KPD_u8GetKey>:
static u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN, KPD_u8_R2_PIN, KPD_u8_R3_PIN, KPD_u8_R4_PIN};
static u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN, KPD_u8_C2_PIN, KPD_u8_C3_PIN, KPD_u8_C4_PIN};

/* Rows output *//* Columns Input */
u8 KPD_u8GetKey(u8 * Copy_pu8ReturnedKey)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	a3 97       	sbiw	r28, 0x23	; 35
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	9b a3       	std	Y+35, r25	; 0x23
    1642:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
    1648:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
    164a:	8a a1       	ldd	r24, Y+34	; 0x22
    164c:	9b a1       	ldd	r25, Y+35	; 0x23
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	09 f4       	brne	.+2      	; 0x1654 <KPD_u8GetKey+0x28>
    1652:	53 c1       	rjmp	.+678    	; 0x18fa <KPD_u8GetKey+0x2ce>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1654:	ea a1       	ldd	r30, Y+34	; 0x22
    1656:	fb a1       	ldd	r31, Y+35	; 0x23
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	80 83       	st	Z, r24
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    165c:	1f 8e       	std	Y+31, r1	; 0x1f
    165e:	48 c1       	rjmp	.+656    	; 0x18f0 <KPD_u8GetKey+0x2c4>
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
    1660:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	fc 01       	movw	r30, r24
    1668:	e7 5c       	subi	r30, 0xC7	; 199
    166a:	fe 4f       	sbci	r31, 0xFE	; 254
    166c:	90 81       	ld	r25, Z
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	69 2f       	mov	r22, r25
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    1678:	1e 8e       	std	Y+30, r1	; 0x1e
    167a:	24 c1       	rjmp	.+584    	; 0x18c4 <KPD_u8GetKey+0x298>
		    {
			    DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    167c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	fc 01       	movw	r30, r24
    1684:	e3 5c       	subi	r30, 0xC3	; 195
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	90 81       	ld	r25, Z
    168a:	9e 01       	movw	r18, r28
    168c:	2f 5d       	subi	r18, 0xDF	; 223
    168e:	3f 4f       	sbci	r19, 0xFF	; 255
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	69 2f       	mov	r22, r25
    1694:	a9 01       	movw	r20, r18
    1696:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
    169a:	89 a1       	ldd	r24, Y+33	; 0x21
    169c:	88 23       	and	r24, r24
    169e:	09 f0       	breq	.+2      	; 0x16a2 <KPD_u8GetKey+0x76>
    16a0:	0e c1       	rjmp	.+540    	; 0x18be <KPD_u8GetKey+0x292>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a0 ea       	ldi	r26, 0xA0	; 160
    16a8:	b1 e4       	ldi	r27, 0x41	; 65
    16aa:	89 8f       	std	Y+25, r24	; 0x19
    16ac:	9a 8f       	std	Y+26, r25	; 0x1a
    16ae:	ab 8f       	std	Y+27, r26	; 0x1b
    16b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	69 8d       	ldd	r22, Y+25	; 0x19
    16b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a ef       	ldi	r20, 0xFA	; 250
    16c0:	54 e4       	ldi	r21, 0x44	; 68
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	8d 8b       	std	Y+21, r24	; 0x15
    16cc:	9e 8b       	std	Y+22, r25	; 0x16
    16ce:	af 8b       	std	Y+23, r26	; 0x17
    16d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16d2:	6d 89       	ldd	r22, Y+21	; 0x15
    16d4:	7e 89       	ldd	r23, Y+22	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <KPD_u8GetKey+0xc8>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 8b       	std	Y+20, r25	; 0x14
    16f0:	8b 8b       	std	Y+19, r24	; 0x13
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <KPD_u8GetKey+0x146>
	else if (__tmp > 65535)
    16f4:	6d 89       	ldd	r22, Y+21	; 0x15
    16f6:	7e 89       	ldd	r23, Y+22	; 0x16
    16f8:	8f 89       	ldd	r24, Y+23	; 0x17
    16fa:	98 8d       	ldd	r25, Y+24	; 0x18
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <KPD_u8GetKey+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	69 8d       	ldd	r22, Y+25	; 0x19
    170e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	9c 8b       	std	Y+20, r25	; 0x14
    1732:	8b 8b       	std	Y+19, r24	; 0x13
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <KPD_u8GetKey+0x128>
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9a 8b       	std	Y+18, r25	; 0x12
    173c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    173e:	89 89       	ldd	r24, Y+17	; 0x11
    1740:	9a 89       	ldd	r25, Y+18	; 0x12
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <KPD_u8GetKey+0x116>
    1746:	9a 8b       	std	Y+18, r25	; 0x12
    1748:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	8b 89       	ldd	r24, Y+19	; 0x13
    174c:	9c 89       	ldd	r25, Y+20	; 0x14
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	9c 8b       	std	Y+20, r25	; 0x14
    1752:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	8b 89       	ldd	r24, Y+19	; 0x13
    1756:	9c 89       	ldd	r25, Y+20	; 0x14
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <KPD_u8GetKey+0x10a>
    175c:	24 c0       	rjmp	.+72     	; 0x17a6 <KPD_u8GetKey+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	6d 89       	ldd	r22, Y+21	; 0x15
    1760:	7e 89       	ldd	r23, Y+22	; 0x16
    1762:	8f 89       	ldd	r24, Y+23	; 0x17
    1764:	98 8d       	ldd	r25, Y+24	; 0x18
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9c 8b       	std	Y+20, r25	; 0x14
    1770:	8b 8b       	std	Y+19, r24	; 0x13
    1772:	8b 89       	ldd	r24, Y+19	; 0x13
    1774:	9c 89       	ldd	r25, Y+20	; 0x14
    1776:	98 8b       	std	Y+16, r25	; 0x10
    1778:	8f 87       	std	Y+15, r24	; 0x0f
    177a:	8f 85       	ldd	r24, Y+15	; 0x0f
    177c:	98 89       	ldd	r25, Y+16	; 0x10
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <KPD_u8GetKey+0x152>
    1782:	98 8b       	std	Y+16, r25	; 0x10
    1784:	8f 87       	std	Y+15, r24	; 0x0f
    1786:	0f c0       	rjmp	.+30     	; 0x17a6 <KPD_u8GetKey+0x17a>
			    {
				    /* Debouncing */
				    _delay_ms(20);
				    while(Local_u8ReturnedPinValue == DIO_u8_LOW)
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    1788:	8e 8d       	ldd	r24, Y+30	; 0x1e
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	fc 01       	movw	r30, r24
    1790:	e3 5c       	subi	r30, 0xC3	; 195
    1792:	fe 4f       	sbci	r31, 0xFE	; 254
    1794:	90 81       	ld	r25, Z
    1796:	9e 01       	movw	r18, r28
    1798:	2f 5d       	subi	r18, 0xDF	; 223
    179a:	3f 4f       	sbci	r19, 0xFF	; 255
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	69 2f       	mov	r22, r25
    17a0:	a9 01       	movw	r20, r18
    17a2:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
			    {
				    /* Debouncing */
				    _delay_ms(20);
				    while(Local_u8ReturnedPinValue == DIO_u8_LOW)
    17a6:	89 a1       	ldd	r24, Y+33	; 0x21
    17a8:	88 23       	and	r24, r24
    17aa:	71 f3       	breq	.-36     	; 0x1788 <KPD_u8GetKey+0x15c>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a0 e2       	ldi	r26, 0x20	; 32
    17b2:	b1 e4       	ldi	r27, 0x41	; 65
    17b4:	8b 87       	std	Y+11, r24	; 0x0b
    17b6:	9c 87       	std	Y+12, r25	; 0x0c
    17b8:	ad 87       	std	Y+13, r26	; 0x0d
    17ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17be:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	4a ef       	ldi	r20, 0xFA	; 250
    17ca:	54 e4       	ldi	r21, 0x44	; 68
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	8f 83       	std	Y+7, r24	; 0x07
    17d6:	98 87       	std	Y+8, r25	; 0x08
    17d8:	a9 87       	std	Y+9, r26	; 0x09
    17da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17dc:	6f 81       	ldd	r22, Y+7	; 0x07
    17de:	78 85       	ldd	r23, Y+8	; 0x08
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	2c f4       	brge	.+10     	; 0x17fe <KPD_u8GetKey+0x1d2>
		__ticks = 1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	3f c0       	rjmp	.+126    	; 0x187c <KPD_u8GetKey+0x250>
	else if (__tmp > 65535)
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	3f ef       	ldi	r19, 0xFF	; 255
    180a:	4f e7       	ldi	r20, 0x7F	; 127
    180c:	57 e4       	ldi	r21, 0x47	; 71
    180e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1812:	18 16       	cp	r1, r24
    1814:	4c f5       	brge	.+82     	; 0x1868 <KPD_u8GetKey+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1816:	6b 85       	ldd	r22, Y+11	; 0x0b
    1818:	7c 85       	ldd	r23, Y+12	; 0x0c
    181a:	8d 85       	ldd	r24, Y+13	; 0x0d
    181c:	9e 85       	ldd	r25, Y+14	; 0x0e
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e2       	ldi	r20, 0x20	; 32
    1824:	51 e4       	ldi	r21, 0x41	; 65
    1826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	0f c0       	rjmp	.+30     	; 0x185e <KPD_u8GetKey+0x232>
    1840:	88 ec       	ldi	r24, 0xC8	; 200
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 83       	std	Y+4, r25	; 0x04
    1846:	8b 83       	std	Y+3, r24	; 0x03
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <KPD_u8GetKey+0x220>
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	69 f7       	brne	.-38     	; 0x1840 <KPD_u8GetKey+0x214>
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <KPD_u8GetKey+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1868:	6f 81       	ldd	r22, Y+7	; 0x07
    186a:	78 85       	ldd	r23, Y+8	; 0x08
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <KPD_u8GetKey+0x25c>
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
				    }
				     _delay_ms(10);
                     * Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8_RowsCounter][Local_u8_ColsCounter];	
    1890:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1892:	48 2f       	mov	r20, r24
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	ca 01       	movw	r24, r20
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	fc 01       	movw	r30, r24
    18ac:	e7 5d       	subi	r30, 0xD7	; 215
    18ae:	fe 4f       	sbci	r31, 0xFE	; 254
    18b0:	80 81       	ld	r24, Z
    18b2:	ea a1       	ldd	r30, Y+34	; 0x22
    18b4:	fb a1       	ldd	r31, Y+35	; 0x23
    18b6:	80 83       	st	Z, r24
                     Local_u8Flag = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	8d 8f       	std	Y+29, r24	; 0x1d
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <KPD_u8GetKey+0x2a0>
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    18be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	8e 8f       	std	Y+30, r24	; 0x1e
    18c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18c6:	84 30       	cpi	r24, 0x04	; 4
    18c8:	08 f4       	brcc	.+2      	; 0x18cc <KPD_u8GetKey+0x2a0>
    18ca:	d8 ce       	rjmp	.-592    	; 0x167c <KPD_u8GetKey+0x50>
					break;
					
			    }
		     }
			 /* Deactivate currently Row  */
		     DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_HIGH);
    18cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	fc 01       	movw	r30, r24
    18d4:	e7 5c       	subi	r30, 0xC7	; 199
    18d6:	fe 4f       	sbci	r31, 0xFE	; 254
    18d8:	90 81       	ld	r25, Z
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	69 2f       	mov	r22, r25
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		   	 if(Local_u8Flag == 1)
    18e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	49 f0       	breq	.+18     	; 0x18fc <KPD_u8GetKey+0x2d0>
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    18ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	8f 8f       	std	Y+31, r24	; 0x1f
    18f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <KPD_u8GetKey+0x2cc>
    18f6:	b4 ce       	rjmp	.-664    	; 0x1660 <KPD_u8GetKey+0x34>
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <KPD_u8GetKey+0x2d0>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    18fa:	18 a2       	std	Y+32, r1	; 0x20
	}
	return Local_u8ErrorState;
    18fc:	88 a1       	ldd	r24, Y+32	; 0x20
	
}
    18fe:	a3 96       	adiw	r28, 0x23	; 35
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit     (void)
{
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	cc 54       	subi	r28, 0x4C	; 76
    191e:	d0 40       	sbci	r29, 0x00	; 0
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	fe 01       	movw	r30, r28
    192c:	e7 5b       	subi	r30, 0xB7	; 183
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	ac e0       	ldi	r26, 0x0C	; 12
    1936:	b2 e4       	ldi	r27, 0x42	; 66
    1938:	80 83       	st	Z, r24
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	a2 83       	std	Z+2, r26	; 0x02
    193e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	8e 01       	movw	r16, r28
    1942:	0b 5b       	subi	r16, 0xBB	; 187
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	fe 01       	movw	r30, r28
    1948:	e7 5b       	subi	r30, 0xB7	; 183
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a ef       	ldi	r20, 0xFA	; 250
    195a:	54 e4       	ldi	r21, 0x44	; 68
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	f8 01       	movw	r30, r16
    1966:	80 83       	st	Z, r24
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	a2 83       	std	Z+2, r26	; 0x02
    196c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    196e:	fe 01       	movw	r30, r28
    1970:	eb 5b       	subi	r30, 0xBB	; 187
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	44 f4       	brge	.+16     	; 0x199c <LCD_voidInit+0x8c>
		__ticks = 1;
    198c:	fe 01       	movw	r30, r28
    198e:	ed 5b       	subi	r30, 0xBD	; 189
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
    199a:	64 c0       	rjmp	.+200    	; 0x1a64 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    199c:	fe 01       	movw	r30, r28
    199e:	eb 5b       	subi	r30, 0xBB	; 187
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	0c f0       	brlt	.+2      	; 0x19bc <LCD_voidInit+0xac>
    19ba:	43 c0       	rjmp	.+134    	; 0x1a42 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19bc:	fe 01       	movw	r30, r28
    19be:	e7 5b       	subi	r30, 0xB7	; 183
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8e 01       	movw	r16, r28
    19dc:	0d 5b       	subi	r16, 0xBD	; 189
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	1f c0       	rjmp	.+62     	; 0x1a32 <LCD_voidInit+0x122>
    19f4:	fe 01       	movw	r30, r28
    19f6:	ef 5b       	subi	r30, 0xBF	; 191
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
    1a02:	fe 01       	movw	r30, r28
    1a04:	ef 5b       	subi	r30, 0xBF	; 191
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_voidInit+0xfc>
    1a10:	fe 01       	movw	r30, r28
    1a12:	ef 5b       	subi	r30, 0xBF	; 191
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1a:	de 01       	movw	r26, r28
    1a1c:	ad 5b       	subi	r26, 0xBD	; 189
    1a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a20:	fe 01       	movw	r30, r28
    1a22:	ed 5b       	subi	r30, 0xBD	; 189
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	11 96       	adiw	r26, 0x01	; 1
    1a2e:	9c 93       	st	X, r25
    1a30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	fe 01       	movw	r30, r28
    1a34:	ed 5b       	subi	r30, 0xBD	; 189
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	d1 f6       	brne	.-76     	; 0x19f4 <LCD_voidInit+0xe4>
    1a40:	24 c0       	rjmp	.+72     	; 0x1a8a <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	8e 01       	movw	r16, r28
    1a44:	0d 5b       	subi	r16, 0xBD	; 189
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	fe 01       	movw	r30, r28
    1a4a:	eb 5b       	subi	r30, 0xBB	; 187
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	f8 01       	movw	r30, r16
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
    1a64:	fe 01       	movw	r30, r28
    1a66:	ed 5b       	subi	r30, 0xBD	; 189
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ff 96       	adiw	r30, 0x3f	; 63
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
    1a76:	fe 01       	movw	r30, r28
    1a78:	ff 96       	adiw	r30, 0x3f	; 63
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_voidInit+0x16e>
    1a82:	fe 01       	movw	r30, r28
    1a84:	ff 96       	adiw	r30, 0x3f	; 63
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd 0b00111000 */
	LCD_voidSendCmnd(0b00111000);
    1a8a:	88 e3       	ldi	r24, 0x38	; 56
    1a8c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e2       	ldi	r26, 0x20	; 32
    1a96:	b2 e4       	ldi	r27, 0x42	; 66
    1a98:	8b af       	std	Y+59, r24	; 0x3b
    1a9a:	9c af       	std	Y+60, r25	; 0x3c
    1a9c:	ad af       	std	Y+61, r26	; 0x3d
    1a9e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aa0:	6b ad       	ldd	r22, Y+59	; 0x3b
    1aa2:	7c ad       	ldd	r23, Y+60	; 0x3c
    1aa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa8:	2b ea       	ldi	r18, 0xAB	; 171
    1aaa:	3a ea       	ldi	r19, 0xAA	; 170
    1aac:	4a e2       	ldi	r20, 0x2A	; 42
    1aae:	50 e4       	ldi	r21, 0x40	; 64
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8f ab       	std	Y+55, r24	; 0x37
    1aba:	98 af       	std	Y+56, r25	; 0x38
    1abc:	a9 af       	std	Y+57, r26	; 0x39
    1abe:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1ac0:	6f a9       	ldd	r22, Y+55	; 0x37
    1ac2:	78 ad       	ldd	r23, Y+56	; 0x38
    1ac4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ac6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	1c f4       	brge	.+6      	; 0x1ade <LCD_voidInit+0x1ce>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	8e ab       	std	Y+54, r24	; 0x36
    1adc:	91 c0       	rjmp	.+290    	; 0x1c00 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1ade:	6f a9       	ldd	r22, Y+55	; 0x37
    1ae0:	78 ad       	ldd	r23, Y+56	; 0x38
    1ae2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ae4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	53 e4       	ldi	r21, 0x43	; 67
    1aee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	0c f0       	brlt	.+2      	; 0x1af8 <LCD_voidInit+0x1e8>
    1af6:	7b c0       	rjmp	.+246    	; 0x1bee <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1af8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1afa:	7c ad       	ldd	r23, Y+60	; 0x3c
    1afc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1afe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	54 e4       	ldi	r21, 0x44	; 68
    1b08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8a ab       	std	Y+50, r24	; 0x32
    1b12:	9b ab       	std	Y+51, r25	; 0x33
    1b14:	ac ab       	std	Y+52, r26	; 0x34
    1b16:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6a a9       	ldd	r22, Y+50	; 0x32
    1b1a:	7b a9       	ldd	r23, Y+51	; 0x33
    1b1c:	8c a9       	ldd	r24, Y+52	; 0x34
    1b1e:	9d a9       	ldd	r25, Y+53	; 0x35
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8e a7       	std	Y+46, r24	; 0x2e
    1b32:	9f a7       	std	Y+47, r25	; 0x2f
    1b34:	a8 ab       	std	Y+48, r26	; 0x30
    1b36:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1b38:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b3a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b3c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b3e:	99 a9       	ldd	r25, Y+49	; 0x31
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_voidInit+0x24a>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9d a7       	std	Y+45, r25	; 0x2d
    1b56:	8c a7       	std	Y+44, r24	; 0x2c
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1b5a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b5c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b5e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b60:	99 a9       	ldd	r25, Y+49	; 0x31
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6a a9       	ldd	r22, Y+50	; 0x32
    1b74:	7b a9       	ldd	r23, Y+51	; 0x33
    1b76:	8c a9       	ldd	r24, Y+52	; 0x34
    1b78:	9d a9       	ldd	r25, Y+53	; 0x35
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9d a7       	std	Y+45, r25	; 0x2d
    1b98:	8c a7       	std	Y+44, r24	; 0x2c
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_voidInit+0x2aa>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9b a7       	std	Y+43, r25	; 0x2b
    1ba2:	8a a7       	std	Y+42, r24	; 0x2a
    1ba4:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba6:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_voidInit+0x298>
    1bac:	9b a7       	std	Y+43, r25	; 0x2b
    1bae:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bb2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9d a7       	std	Y+45, r25	; 0x2d
    1bb8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bbc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_voidInit+0x28c>
    1bc2:	24 c0       	rjmp	.+72     	; 0x1c0c <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bc6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bc8:	88 a9       	ldd	r24, Y+48	; 0x30
    1bca:	99 a9       	ldd	r25, Y+49	; 0x31
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9d a7       	std	Y+45, r25	; 0x2d
    1bd6:	8c a7       	std	Y+44, r24	; 0x2c
    1bd8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bda:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bdc:	99 a7       	std	Y+41, r25	; 0x29
    1bde:	88 a7       	std	Y+40, r24	; 0x28
    1be0:	88 a5       	ldd	r24, Y+40	; 0x28
    1be2:	99 a5       	ldd	r25, Y+41	; 0x29
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_voidInit+0x2d4>
    1be8:	99 a7       	std	Y+41, r25	; 0x29
    1bea:	88 a7       	std	Y+40, r24	; 0x28
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bee:	6f a9       	ldd	r22, Y+55	; 0x37
    1bf0:	78 ad       	ldd	r23, Y+56	; 0x38
    1bf2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bf4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8e ab       	std	Y+54, r24	; 0x36
    1c00:	8e a9       	ldd	r24, Y+54	; 0x36
    1c02:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c04:	8f a1       	ldd	r24, Y+39	; 0x27
    1c06:	8a 95       	dec	r24
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_voidInit+0x2f6>
    1c0a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    1c0c:	8f e0       	ldi	r24, 0x0F	; 15
    1c0e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e2       	ldi	r26, 0x20	; 32
    1c18:	b2 e4       	ldi	r27, 0x42	; 66
    1c1a:	8b a3       	std	Y+35, r24	; 0x23
    1c1c:	9c a3       	std	Y+36, r25	; 0x24
    1c1e:	ad a3       	std	Y+37, r26	; 0x25
    1c20:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c22:	6b a1       	ldd	r22, Y+35	; 0x23
    1c24:	7c a1       	ldd	r23, Y+36	; 0x24
    1c26:	8d a1       	ldd	r24, Y+37	; 0x25
    1c28:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2a:	2b ea       	ldi	r18, 0xAB	; 171
    1c2c:	3a ea       	ldi	r19, 0xAA	; 170
    1c2e:	4a e2       	ldi	r20, 0x2A	; 42
    1c30:	50 e4       	ldi	r21, 0x40	; 64
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c3c:	98 a3       	std	Y+32, r25	; 0x20
    1c3e:	a9 a3       	std	Y+33, r26	; 0x21
    1c40:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c42:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c44:	78 a1       	ldd	r23, Y+32	; 0x20
    1c46:	89 a1       	ldd	r24, Y+33	; 0x21
    1c48:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	1c f4       	brge	.+6      	; 0x1c60 <LCD_voidInit+0x350>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c5e:	91 c0       	rjmp	.+290    	; 0x1d82 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1c60:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c62:	78 a1       	ldd	r23, Y+32	; 0x20
    1c64:	89 a1       	ldd	r24, Y+33	; 0x21
    1c66:	9a a1       	ldd	r25, Y+34	; 0x22
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	53 e4       	ldi	r21, 0x43	; 67
    1c70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	0c f0       	brlt	.+2      	; 0x1c7a <LCD_voidInit+0x36a>
    1c78:	7b c0       	rjmp	.+246    	; 0x1d70 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1c7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c80:	9e a1       	ldd	r25, Y+38	; 0x26
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	4a e7       	ldi	r20, 0x7A	; 122
    1c88:	54 e4       	ldi	r21, 0x44	; 68
    1c8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	8a 8f       	std	Y+26, r24	; 0x1a
    1c94:	9b 8f       	std	Y+27, r25	; 0x1b
    1c96:	ac 8f       	std	Y+28, r26	; 0x1c
    1c98:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c9c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ca0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a ef       	ldi	r20, 0xFA	; 250
    1ca8:	54 e4       	ldi	r21, 0x44	; 68
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8e 8b       	std	Y+22, r24	; 0x16
    1cb4:	9f 8b       	std	Y+23, r25	; 0x17
    1cb6:	a8 8f       	std	Y+24, r26	; 0x18
    1cb8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1cba:	6e 89       	ldd	r22, Y+22	; 0x16
    1cbc:	7f 89       	ldd	r23, Y+23	; 0x17
    1cbe:	88 8d       	ldd	r24, Y+24	; 0x18
    1cc0:	99 8d       	ldd	r25, Y+25	; 0x19
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <LCD_voidInit+0x3cc>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9d 8b       	std	Y+21, r25	; 0x15
    1cd8:	8c 8b       	std	Y+20, r24	; 0x14
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1cdc:	6e 89       	ldd	r22, Y+22	; 0x16
    1cde:	7f 89       	ldd	r23, Y+23	; 0x17
    1ce0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ce2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cf6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9d 8b       	std	Y+21, r25	; 0x15
    1d1a:	8c 8b       	std	Y+20, r24	; 0x14
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <LCD_voidInit+0x42c>
    1d1e:	88 ec       	ldi	r24, 0xC8	; 200
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9b 8b       	std	Y+19, r25	; 0x13
    1d24:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d26:	8a 89       	ldd	r24, Y+18	; 0x12
    1d28:	9b 89       	ldd	r25, Y+19	; 0x13
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_voidInit+0x41a>
    1d2e:	9b 8b       	std	Y+19, r25	; 0x13
    1d30:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	8c 89       	ldd	r24, Y+20	; 0x14
    1d34:	9d 89       	ldd	r25, Y+21	; 0x15
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	9d 8b       	std	Y+21, r25	; 0x15
    1d3a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d3e:	9d 89       	ldd	r25, Y+21	; 0x15
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <LCD_voidInit+0x40e>
    1d44:	24 c0       	rjmp	.+72     	; 0x1d8e <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6e 89       	ldd	r22, Y+22	; 0x16
    1d48:	7f 89       	ldd	r23, Y+23	; 0x17
    1d4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9d 8b       	std	Y+21, r25	; 0x15
    1d58:	8c 8b       	std	Y+20, r24	; 0x14
    1d5a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d5c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d5e:	99 8b       	std	Y+17, r25	; 0x11
    1d60:	88 8b       	std	Y+16, r24	; 0x10
    1d62:	88 89       	ldd	r24, Y+16	; 0x10
    1d64:	99 89       	ldd	r25, Y+17	; 0x11
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_voidInit+0x456>
    1d6a:	99 8b       	std	Y+17, r25	; 0x11
    1d6c:	88 8b       	std	Y+16, r24	; 0x10
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d70:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d72:	78 a1       	ldd	r23, Y+32	; 0x20
    1d74:	89 a1       	ldd	r24, Y+33	; 0x21
    1d76:	9a a1       	ldd	r25, Y+34	; 0x22
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8e 8f       	std	Y+30, r24	; 0x1e
    1d82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	8a 95       	dec	r24
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_voidInit+0x478>
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a0 e0       	ldi	r26, 0x00	; 0
    1d9a:	b0 e4       	ldi	r27, 0x40	; 64
    1d9c:	8b 87       	std	Y+11, r24	; 0x0b
    1d9e:	9c 87       	std	Y+12, r25	; 0x0c
    1da0:	ad 87       	std	Y+13, r26	; 0x0d
    1da2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	4a ef       	ldi	r20, 0xFA	; 250
    1db2:	54 e4       	ldi	r21, 0x44	; 68
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8f 83       	std	Y+7, r24	; 0x07
    1dbe:	98 87       	std	Y+8, r25	; 0x08
    1dc0:	a9 87       	std	Y+9, r26	; 0x09
    1dc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc6:	78 85       	ldd	r23, Y+8	; 0x08
    1dc8:	89 85       	ldd	r24, Y+9	; 0x09
    1dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e8       	ldi	r20, 0x80	; 128
    1dd2:	5f e3       	ldi	r21, 0x3F	; 63
    1dd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd8:	88 23       	and	r24, r24
    1dda:	2c f4       	brge	.+10     	; 0x1de6 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	3f c0       	rjmp	.+126    	; 0x1e64 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1de6:	6f 81       	ldd	r22, Y+7	; 0x07
    1de8:	78 85       	ldd	r23, Y+8	; 0x08
    1dea:	89 85       	ldd	r24, Y+9	; 0x09
    1dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	4c f5       	brge	.+82     	; 0x1e50 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e2       	ldi	r20, 0x20	; 32
    1e0c:	51 e4       	ldi	r21, 0x41	; 65
    1e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <LCD_voidInit+0x536>
    1e28:	88 ec       	ldi	r24, 0xC8	; 200
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9c 83       	std	Y+4, r25	; 0x04
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_voidInit+0x524>
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e46:	8d 81       	ldd	r24, Y+5	; 0x05
    1e48:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	69 f7       	brne	.-38     	; 0x1e28 <LCD_voidInit+0x518>
    1e4e:	14 c0       	rjmp	.+40     	; 0x1e78 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e50:	6f 81       	ldd	r22, Y+7	; 0x07
    1e52:	78 85       	ldd	r23, Y+8	; 0x08
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_voidInit+0x560>
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    1e78:	86 e0       	ldi	r24, 0x06	; 6
    1e7a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
	
}
    1e7e:	c4 5b       	subi	r28, 0xB4	; 180
    1e80:	df 4f       	sbci	r29, 0xFF	; 255
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <LCD_voidClear>:

void LCD_voidClear       (void)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	2e 97       	sbiw	r28, 0x0e	; 14
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00000001);
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 ea       	ldi	r26, 0xA0	; 160
    1eb6:	b1 e4       	ldi	r27, 0x41	; 65
    1eb8:	8b 87       	std	Y+11, r24	; 0x0b
    1eba:	9c 87       	std	Y+12, r25	; 0x0c
    1ebc:	ad 87       	std	Y+13, r26	; 0x0d
    1ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a ef       	ldi	r20, 0xFA	; 250
    1ece:	54 e4       	ldi	r21, 0x44	; 68
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8f 83       	std	Y+7, r24	; 0x07
    1eda:	98 87       	std	Y+8, r25	; 0x08
    1edc:	a9 87       	std	Y+9, r26	; 0x09
    1ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee2:	78 85       	ldd	r23, Y+8	; 0x08
    1ee4:	89 85       	ldd	r24, Y+9	; 0x09
    1ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <LCD_voidClear+0x6c>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <LCD_voidClear+0xcc>
    1f44:	88 ec       	ldi	r24, 0xC8	; 200
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_voidClear+0xba>
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <LCD_voidClear+0xae>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_voidClear+0xf6>
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    1f94:	2e 96       	adiw	r28, 0x0e	; 14
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <LCD_voidCursorBlinkerOff>:

void LCD_voidCursorBlinkerOff(void)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	2e 97       	sbiw	r28, 0x0e	; 14
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00001100);
    1fba:	8c e0       	ldi	r24, 0x0C	; 12
    1fbc:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc6:	b1 e4       	ldi	r27, 0x41	; 65
    1fc8:	8b 87       	std	Y+11, r24	; 0x0b
    1fca:	9c 87       	std	Y+12, r25	; 0x0c
    1fcc:	ad 87       	std	Y+13, r26	; 0x0d
    1fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a ef       	ldi	r20, 0xFA	; 250
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8f 83       	std	Y+7, r24	; 0x07
    1fea:	98 87       	std	Y+8, r25	; 0x08
    1fec:	a9 87       	std	Y+9, r26	; 0x09
    1fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_voidCursorBlinkerOff+0x6c>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_voidCursorBlinkerOff+0xea>
	else if (__tmp > 65535)
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_voidCursorBlinkerOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	6b 85       	ldd	r22, Y+11	; 0x0b
    202c:	7c 85       	ldd	r23, Y+12	; 0x0c
    202e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2030:	9e 85       	ldd	r25, Y+14	; 0x0e
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_voidCursorBlinkerOff+0xcc>
    2054:	88 ec       	ldi	r24, 0xC8	; 200
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 83       	std	Y+4, r25	; 0x04
    205a:	8b 83       	std	Y+3, r24	; 0x03
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_voidCursorBlinkerOff+0xba>
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_voidCursorBlinkerOff+0xae>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_voidCursorBlinkerOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_voidCursorBlinkerOff+0xf6>
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    20a4:	2e 96       	adiw	r28, 0x0e	; 14
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd (u8 Copy_u8Cmnd)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	e1 97       	sbiw	r28, 0x31	; 49
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	/* Send Cmnd byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	69 a9       	ldd	r22, Y+49	; 0x31
    20e4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	62 e0       	ldi	r22, 0x02	; 2
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e8       	ldi	r26, 0x80	; 128
    20f8:	bf e3       	ldi	r27, 0x3F	; 63
    20fa:	8d a7       	std	Y+45, r24	; 0x2d
    20fc:	9e a7       	std	Y+46, r25	; 0x2e
    20fe:	af a7       	std	Y+47, r26	; 0x2f
    2100:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2102:	6d a5       	ldd	r22, Y+45	; 0x2d
    2104:	7e a5       	ldd	r23, Y+46	; 0x2e
    2106:	8f a5       	ldd	r24, Y+47	; 0x2f
    2108:	98 a9       	ldd	r25, Y+48	; 0x30
    210a:	2b ea       	ldi	r18, 0xAB	; 171
    210c:	3a ea       	ldi	r19, 0xAA	; 170
    210e:	4a e2       	ldi	r20, 0x2A	; 42
    2110:	50 e4       	ldi	r21, 0x40	; 64
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	89 a7       	std	Y+41, r24	; 0x29
    211c:	9a a7       	std	Y+42, r25	; 0x2a
    211e:	ab a7       	std	Y+43, r26	; 0x2b
    2120:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2122:	69 a5       	ldd	r22, Y+41	; 0x29
    2124:	7a a5       	ldd	r23, Y+42	; 0x2a
    2126:	8b a5       	ldd	r24, Y+43	; 0x2b
    2128:	9c a5       	ldd	r25, Y+44	; 0x2c
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	1c f4       	brge	.+6      	; 0x2140 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	88 a7       	std	Y+40, r24	; 0x28
    213e:	91 c0       	rjmp	.+290    	; 0x2262 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2140:	69 a5       	ldd	r22, Y+41	; 0x29
    2142:	7a a5       	ldd	r23, Y+42	; 0x2a
    2144:	8b a5       	ldd	r24, Y+43	; 0x2b
    2146:	9c a5       	ldd	r25, Y+44	; 0x2c
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	53 e4       	ldi	r21, 0x43	; 67
    2150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	0c f0       	brlt	.+2      	; 0x215a <LCD_voidSendCmnd+0xa4>
    2158:	7b c0       	rjmp	.+246    	; 0x2250 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    215a:	6d a5       	ldd	r22, Y+45	; 0x2d
    215c:	7e a5       	ldd	r23, Y+46	; 0x2e
    215e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2160:	98 a9       	ldd	r25, Y+48	; 0x30
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	54 e4       	ldi	r21, 0x44	; 68
    216a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8c a3       	std	Y+36, r24	; 0x24
    2174:	9d a3       	std	Y+37, r25	; 0x25
    2176:	ae a3       	std	Y+38, r26	; 0x26
    2178:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	6c a1       	ldd	r22, Y+36	; 0x24
    217c:	7d a1       	ldd	r23, Y+37	; 0x25
    217e:	8e a1       	ldd	r24, Y+38	; 0x26
    2180:	9f a1       	ldd	r25, Y+39	; 0x27
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a ef       	ldi	r20, 0xFA	; 250
    2188:	54 e4       	ldi	r21, 0x44	; 68
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	88 a3       	std	Y+32, r24	; 0x20
    2194:	99 a3       	std	Y+33, r25	; 0x21
    2196:	aa a3       	std	Y+34, r26	; 0x22
    2198:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    219a:	68 a1       	ldd	r22, Y+32	; 0x20
    219c:	79 a1       	ldd	r23, Y+33	; 0x21
    219e:	8a a1       	ldd	r24, Y+34	; 0x22
    21a0:	9b a1       	ldd	r25, Y+35	; 0x23
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	2c f4       	brge	.+10     	; 0x21bc <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9f 8f       	std	Y+31, r25	; 0x1f
    21b8:	8e 8f       	std	Y+30, r24	; 0x1e
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    21bc:	68 a1       	ldd	r22, Y+32	; 0x20
    21be:	79 a1       	ldd	r23, Y+33	; 0x21
    21c0:	8a a1       	ldd	r24, Y+34	; 0x22
    21c2:	9b a1       	ldd	r25, Y+35	; 0x23
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	4f e7       	ldi	r20, 0x7F	; 127
    21ca:	57 e4       	ldi	r21, 0x47	; 71
    21cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	4c f5       	brge	.+82     	; 0x2226 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d4:	6c a1       	ldd	r22, Y+36	; 0x24
    21d6:	7d a1       	ldd	r23, Y+37	; 0x25
    21d8:	8e a1       	ldd	r24, Y+38	; 0x26
    21da:	9f a1       	ldd	r25, Y+39	; 0x27
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9f 8f       	std	Y+31, r25	; 0x1f
    21fa:	8e 8f       	std	Y+30, r24	; 0x1e
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <LCD_voidSendCmnd+0x166>
    21fe:	88 ec       	ldi	r24, 0xC8	; 200
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9d 8f       	std	Y+29, r25	; 0x1d
    2204:	8c 8f       	std	Y+28, r24	; 0x1c
    2206:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2208:	9d 8d       	ldd	r25, Y+29	; 0x1d
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_voidSendCmnd+0x154>
    220e:	9d 8f       	std	Y+29, r25	; 0x1d
    2210:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2214:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9f 8f       	std	Y+31, r25	; 0x1f
    221a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    221e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <LCD_voidSendCmnd+0x148>
    2224:	24 c0       	rjmp	.+72     	; 0x226e <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	68 a1       	ldd	r22, Y+32	; 0x20
    2228:	79 a1       	ldd	r23, Y+33	; 0x21
    222a:	8a a1       	ldd	r24, Y+34	; 0x22
    222c:	9b a1       	ldd	r25, Y+35	; 0x23
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9f 8f       	std	Y+31, r25	; 0x1f
    2238:	8e 8f       	std	Y+30, r24	; 0x1e
    223a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    223c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    223e:	9b 8f       	std	Y+27, r25	; 0x1b
    2240:	8a 8f       	std	Y+26, r24	; 0x1a
    2242:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2244:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <LCD_voidSendCmnd+0x190>
    224a:	9b 8f       	std	Y+27, r25	; 0x1b
    224c:	8a 8f       	std	Y+26, r24	; 0x1a
    224e:	0f c0       	rjmp	.+30     	; 0x226e <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2250:	69 a5       	ldd	r22, Y+41	; 0x29
    2252:	7a a5       	ldd	r23, Y+42	; 0x2a
    2254:	8b a5       	ldd	r24, Y+43	; 0x2b
    2256:	9c a5       	ldd	r25, Y+44	; 0x2c
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	88 a7       	std	Y+40, r24	; 0x28
    2262:	88 a5       	ldd	r24, Y+40	; 0x28
    2264:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2266:	89 8d       	ldd	r24, Y+25	; 0x19
    2268:	8a 95       	dec	r24
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_voidSendCmnd+0x1b2>
    226c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	a0 e8       	ldi	r26, 0x80	; 128
    227e:	bf e3       	ldi	r27, 0x3F	; 63
    2280:	8d 8b       	std	Y+21, r24	; 0x15
    2282:	9e 8b       	std	Y+22, r25	; 0x16
    2284:	af 8b       	std	Y+23, r26	; 0x17
    2286:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2288:	6d 89       	ldd	r22, Y+21	; 0x15
    228a:	7e 89       	ldd	r23, Y+22	; 0x16
    228c:	8f 89       	ldd	r24, Y+23	; 0x17
    228e:	98 8d       	ldd	r25, Y+24	; 0x18
    2290:	2b ea       	ldi	r18, 0xAB	; 171
    2292:	3a ea       	ldi	r19, 0xAA	; 170
    2294:	4a e2       	ldi	r20, 0x2A	; 42
    2296:	50 e4       	ldi	r21, 0x40	; 64
    2298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	89 8b       	std	Y+17, r24	; 0x11
    22a2:	9a 8b       	std	Y+18, r25	; 0x12
    22a4:	ab 8b       	std	Y+19, r26	; 0x13
    22a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22a8:	69 89       	ldd	r22, Y+17	; 0x11
    22aa:	7a 89       	ldd	r23, Y+18	; 0x12
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	1c f4       	brge	.+6      	; 0x22c6 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	88 8b       	std	Y+16, r24	; 0x10
    22c4:	91 c0       	rjmp	.+290    	; 0x23e8 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    22c6:	69 89       	ldd	r22, Y+17	; 0x11
    22c8:	7a 89       	ldd	r23, Y+18	; 0x12
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	53 e4       	ldi	r21, 0x43	; 67
    22d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	0c f0       	brlt	.+2      	; 0x22e0 <LCD_voidSendCmnd+0x22a>
    22de:	7b c0       	rjmp	.+246    	; 0x23d6 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    22e0:	6d 89       	ldd	r22, Y+21	; 0x15
    22e2:	7e 89       	ldd	r23, Y+22	; 0x16
    22e4:	8f 89       	ldd	r24, Y+23	; 0x17
    22e6:	98 8d       	ldd	r25, Y+24	; 0x18
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4a e7       	ldi	r20, 0x7A	; 122
    22ee:	54 e4       	ldi	r21, 0x44	; 68
    22f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	8c 87       	std	Y+12, r24	; 0x0c
    22fa:	9d 87       	std	Y+13, r25	; 0x0d
    22fc:	ae 87       	std	Y+14, r26	; 0x0e
    22fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	6c 85       	ldd	r22, Y+12	; 0x0c
    2302:	7d 85       	ldd	r23, Y+13	; 0x0d
    2304:	8e 85       	ldd	r24, Y+14	; 0x0e
    2306:	9f 85       	ldd	r25, Y+15	; 0x0f
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a ef       	ldi	r20, 0xFA	; 250
    230e:	54 e4       	ldi	r21, 0x44	; 68
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	88 87       	std	Y+8, r24	; 0x08
    231a:	99 87       	std	Y+9, r25	; 0x09
    231c:	aa 87       	std	Y+10, r26	; 0x0a
    231e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2320:	68 85       	ldd	r22, Y+8	; 0x08
    2322:	79 85       	ldd	r23, Y+9	; 0x09
    2324:	8a 85       	ldd	r24, Y+10	; 0x0a
    2326:	9b 85       	ldd	r25, Y+11	; 0x0b
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2334:	88 23       	and	r24, r24
    2336:	2c f4       	brge	.+10     	; 0x2342 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9f 83       	std	Y+7, r25	; 0x07
    233e:	8e 83       	std	Y+6, r24	; 0x06
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2342:	68 85       	ldd	r22, Y+8	; 0x08
    2344:	79 85       	ldd	r23, Y+9	; 0x09
    2346:	8a 85       	ldd	r24, Y+10	; 0x0a
    2348:	9b 85       	ldd	r25, Y+11	; 0x0b
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	4c f5       	brge	.+82     	; 0x23ac <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235a:	6c 85       	ldd	r22, Y+12	; 0x0c
    235c:	7d 85       	ldd	r23, Y+13	; 0x0d
    235e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2360:	9f 85       	ldd	r25, Y+15	; 0x0f
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9f 83       	std	Y+7, r25	; 0x07
    2380:	8e 83       	std	Y+6, r24	; 0x06
    2382:	0f c0       	rjmp	.+30     	; 0x23a2 <LCD_voidSendCmnd+0x2ec>
    2384:	88 ec       	ldi	r24, 0xC8	; 200
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9d 83       	std	Y+5, r25	; 0x05
    238a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <LCD_voidSendCmnd+0x2da>
    2394:	9d 83       	std	Y+5, r25	; 0x05
    2396:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	8e 81       	ldd	r24, Y+6	; 0x06
    239a:	9f 81       	ldd	r25, Y+7	; 0x07
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	9f 83       	std	Y+7, r25	; 0x07
    23a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a2:	8e 81       	ldd	r24, Y+6	; 0x06
    23a4:	9f 81       	ldd	r25, Y+7	; 0x07
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	69 f7       	brne	.-38     	; 0x2384 <LCD_voidSendCmnd+0x2ce>
    23aa:	24 c0       	rjmp	.+72     	; 0x23f4 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	68 85       	ldd	r22, Y+8	; 0x08
    23ae:	79 85       	ldd	r23, Y+9	; 0x09
    23b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9f 83       	std	Y+7, r25	; 0x07
    23be:	8e 83       	std	Y+6, r24	; 0x06
    23c0:	8e 81       	ldd	r24, Y+6	; 0x06
    23c2:	9f 81       	ldd	r25, Y+7	; 0x07
    23c4:	9b 83       	std	Y+3, r25	; 0x03
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	9b 81       	ldd	r25, Y+3	; 0x03
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <LCD_voidSendCmnd+0x316>
    23d0:	9b 83       	std	Y+3, r25	; 0x03
    23d2:	8a 83       	std	Y+2, r24	; 0x02
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23d6:	69 89       	ldd	r22, Y+17	; 0x11
    23d8:	7a 89       	ldd	r23, Y+18	; 0x12
    23da:	8b 89       	ldd	r24, Y+19	; 0x13
    23dc:	9c 89       	ldd	r25, Y+20	; 0x14
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	88 8b       	std	Y+16, r24	; 0x10
    23e8:	88 89       	ldd	r24, Y+16	; 0x10
    23ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	8a 95       	dec	r24
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_voidSendCmnd+0x338>
    23f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    23f4:	e1 96       	adiw	r28, 0x31	; 49
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_voidSendChar>:
void LCD_voidSendChar (u8 Copy_u8Char)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	e1 97       	sbiw	r28, 0x31	; 49
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 1 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	/* Send Char byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	69 a9       	ldd	r22, Y+49	; 0x31
    2434:	0e 94 76 0a 	call	0x14ec	; 0x14ec <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	62 e0       	ldi	r22, 0x02	; 2
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e8       	ldi	r26, 0x80	; 128
    2448:	bf e3       	ldi	r27, 0x3F	; 63
    244a:	8d a7       	std	Y+45, r24	; 0x2d
    244c:	9e a7       	std	Y+46, r25	; 0x2e
    244e:	af a7       	std	Y+47, r26	; 0x2f
    2450:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2452:	6d a5       	ldd	r22, Y+45	; 0x2d
    2454:	7e a5       	ldd	r23, Y+46	; 0x2e
    2456:	8f a5       	ldd	r24, Y+47	; 0x2f
    2458:	98 a9       	ldd	r25, Y+48	; 0x30
    245a:	2b ea       	ldi	r18, 0xAB	; 171
    245c:	3a ea       	ldi	r19, 0xAA	; 170
    245e:	4a e2       	ldi	r20, 0x2A	; 42
    2460:	50 e4       	ldi	r21, 0x40	; 64
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	89 a7       	std	Y+41, r24	; 0x29
    246c:	9a a7       	std	Y+42, r25	; 0x2a
    246e:	ab a7       	std	Y+43, r26	; 0x2b
    2470:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2472:	69 a5       	ldd	r22, Y+41	; 0x29
    2474:	7a a5       	ldd	r23, Y+42	; 0x2a
    2476:	8b a5       	ldd	r24, Y+43	; 0x2b
    2478:	9c a5       	ldd	r25, Y+44	; 0x2c
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	1c f4       	brge	.+6      	; 0x2490 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	88 a7       	std	Y+40, r24	; 0x28
    248e:	91 c0       	rjmp	.+290    	; 0x25b2 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2490:	69 a5       	ldd	r22, Y+41	; 0x29
    2492:	7a a5       	ldd	r23, Y+42	; 0x2a
    2494:	8b a5       	ldd	r24, Y+43	; 0x2b
    2496:	9c a5       	ldd	r25, Y+44	; 0x2c
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	53 e4       	ldi	r21, 0x43	; 67
    24a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	0c f0       	brlt	.+2      	; 0x24aa <LCD_voidSendChar+0xa4>
    24a8:	7b c0       	rjmp	.+246    	; 0x25a0 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    24aa:	6d a5       	ldd	r22, Y+45	; 0x2d
    24ac:	7e a5       	ldd	r23, Y+46	; 0x2e
    24ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b0:	98 a9       	ldd	r25, Y+48	; 0x30
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a e7       	ldi	r20, 0x7A	; 122
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	8c a3       	std	Y+36, r24	; 0x24
    24c4:	9d a3       	std	Y+37, r25	; 0x25
    24c6:	ae a3       	std	Y+38, r26	; 0x26
    24c8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ca:	6c a1       	ldd	r22, Y+36	; 0x24
    24cc:	7d a1       	ldd	r23, Y+37	; 0x25
    24ce:	8e a1       	ldd	r24, Y+38	; 0x26
    24d0:	9f a1       	ldd	r25, Y+39	; 0x27
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a ef       	ldi	r20, 0xFA	; 250
    24d8:	54 e4       	ldi	r21, 0x44	; 68
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	88 a3       	std	Y+32, r24	; 0x20
    24e4:	99 a3       	std	Y+33, r25	; 0x21
    24e6:	aa a3       	std	Y+34, r26	; 0x22
    24e8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24ea:	68 a1       	ldd	r22, Y+32	; 0x20
    24ec:	79 a1       	ldd	r23, Y+33	; 0x21
    24ee:	8a a1       	ldd	r24, Y+34	; 0x22
    24f0:	9b a1       	ldd	r25, Y+35	; 0x23
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	2c f4       	brge	.+10     	; 0x250c <LCD_voidSendChar+0x106>
		__ticks = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	9f 8f       	std	Y+31, r25	; 0x1f
    2508:	8e 8f       	std	Y+30, r24	; 0x1e
    250a:	3f c0       	rjmp	.+126    	; 0x258a <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    250c:	68 a1       	ldd	r22, Y+32	; 0x20
    250e:	79 a1       	ldd	r23, Y+33	; 0x21
    2510:	8a a1       	ldd	r24, Y+34	; 0x22
    2512:	9b a1       	ldd	r25, Y+35	; 0x23
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	3f ef       	ldi	r19, 0xFF	; 255
    2518:	4f e7       	ldi	r20, 0x7F	; 127
    251a:	57 e4       	ldi	r21, 0x47	; 71
    251c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2520:	18 16       	cp	r1, r24
    2522:	4c f5       	brge	.+82     	; 0x2576 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2524:	6c a1       	ldd	r22, Y+36	; 0x24
    2526:	7d a1       	ldd	r23, Y+37	; 0x25
    2528:	8e a1       	ldd	r24, Y+38	; 0x26
    252a:	9f a1       	ldd	r25, Y+39	; 0x27
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e2       	ldi	r20, 0x20	; 32
    2532:	51 e4       	ldi	r21, 0x41	; 65
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9f 8f       	std	Y+31, r25	; 0x1f
    254a:	8e 8f       	std	Y+30, r24	; 0x1e
    254c:	0f c0       	rjmp	.+30     	; 0x256c <LCD_voidSendChar+0x166>
    254e:	88 ec       	ldi	r24, 0xC8	; 200
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9d 8f       	std	Y+29, r25	; 0x1d
    2554:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2556:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2558:	9d 8d       	ldd	r25, Y+29	; 0x1d
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <LCD_voidSendChar+0x154>
    255e:	9d 8f       	std	Y+29, r25	; 0x1d
    2560:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2562:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2564:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	9f 8f       	std	Y+31, r25	; 0x1f
    256a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    256e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	69 f7       	brne	.-38     	; 0x254e <LCD_voidSendChar+0x148>
    2574:	24 c0       	rjmp	.+72     	; 0x25be <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2576:	68 a1       	ldd	r22, Y+32	; 0x20
    2578:	79 a1       	ldd	r23, Y+33	; 0x21
    257a:	8a a1       	ldd	r24, Y+34	; 0x22
    257c:	9b a1       	ldd	r25, Y+35	; 0x23
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9f 8f       	std	Y+31, r25	; 0x1f
    2588:	8e 8f       	std	Y+30, r24	; 0x1e
    258a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    258c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    258e:	9b 8f       	std	Y+27, r25	; 0x1b
    2590:	8a 8f       	std	Y+26, r24	; 0x1a
    2592:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2594:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_voidSendChar+0x190>
    259a:	9b 8f       	std	Y+27, r25	; 0x1b
    259c:	8a 8f       	std	Y+26, r24	; 0x1a
    259e:	0f c0       	rjmp	.+30     	; 0x25be <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25a0:	69 a5       	ldd	r22, Y+41	; 0x29
    25a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    25a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	88 a7       	std	Y+40, r24	; 0x28
    25b2:	88 a5       	ldd	r24, Y+40	; 0x28
    25b4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25b6:	89 8d       	ldd	r24, Y+25	; 0x19
    25b8:	8a 95       	dec	r24
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_voidSendChar+0x1b2>
    25bc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	62 e0       	ldi	r22, 0x02	; 2
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e8       	ldi	r26, 0x80	; 128
    25ce:	bf e3       	ldi	r27, 0x3F	; 63
    25d0:	8d 8b       	std	Y+21, r24	; 0x15
    25d2:	9e 8b       	std	Y+22, r25	; 0x16
    25d4:	af 8b       	std	Y+23, r26	; 0x17
    25d6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25d8:	6d 89       	ldd	r22, Y+21	; 0x15
    25da:	7e 89       	ldd	r23, Y+22	; 0x16
    25dc:	8f 89       	ldd	r24, Y+23	; 0x17
    25de:	98 8d       	ldd	r25, Y+24	; 0x18
    25e0:	2b ea       	ldi	r18, 0xAB	; 171
    25e2:	3a ea       	ldi	r19, 0xAA	; 170
    25e4:	4a e2       	ldi	r20, 0x2A	; 42
    25e6:	50 e4       	ldi	r21, 0x40	; 64
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	89 8b       	std	Y+17, r24	; 0x11
    25f2:	9a 8b       	std	Y+18, r25	; 0x12
    25f4:	ab 8b       	std	Y+19, r26	; 0x13
    25f6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25f8:	69 89       	ldd	r22, Y+17	; 0x11
    25fa:	7a 89       	ldd	r23, Y+18	; 0x12
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	1c f4       	brge	.+6      	; 0x2616 <LCD_voidSendChar+0x210>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	88 8b       	std	Y+16, r24	; 0x10
    2614:	91 c0       	rjmp	.+290    	; 0x2738 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    2616:	69 89       	ldd	r22, Y+17	; 0x11
    2618:	7a 89       	ldd	r23, Y+18	; 0x12
    261a:	8b 89       	ldd	r24, Y+19	; 0x13
    261c:	9c 89       	ldd	r25, Y+20	; 0x14
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	53 e4       	ldi	r21, 0x43	; 67
    2626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	0c f0       	brlt	.+2      	; 0x2630 <LCD_voidSendChar+0x22a>
    262e:	7b c0       	rjmp	.+246    	; 0x2726 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2630:	6d 89       	ldd	r22, Y+21	; 0x15
    2632:	7e 89       	ldd	r23, Y+22	; 0x16
    2634:	8f 89       	ldd	r24, Y+23	; 0x17
    2636:	98 8d       	ldd	r25, Y+24	; 0x18
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a e7       	ldi	r20, 0x7A	; 122
    263e:	54 e4       	ldi	r21, 0x44	; 68
    2640:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8c 87       	std	Y+12, r24	; 0x0c
    264a:	9d 87       	std	Y+13, r25	; 0x0d
    264c:	ae 87       	std	Y+14, r26	; 0x0e
    264e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	6c 85       	ldd	r22, Y+12	; 0x0c
    2652:	7d 85       	ldd	r23, Y+13	; 0x0d
    2654:	8e 85       	ldd	r24, Y+14	; 0x0e
    2656:	9f 85       	ldd	r25, Y+15	; 0x0f
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a ef       	ldi	r20, 0xFA	; 250
    265e:	54 e4       	ldi	r21, 0x44	; 68
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	88 87       	std	Y+8, r24	; 0x08
    266a:	99 87       	std	Y+9, r25	; 0x09
    266c:	aa 87       	std	Y+10, r26	; 0x0a
    266e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2670:	68 85       	ldd	r22, Y+8	; 0x08
    2672:	79 85       	ldd	r23, Y+9	; 0x09
    2674:	8a 85       	ldd	r24, Y+10	; 0x0a
    2676:	9b 85       	ldd	r25, Y+11	; 0x0b
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	2c f4       	brge	.+10     	; 0x2692 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9f 83       	std	Y+7, r25	; 0x07
    268e:	8e 83       	std	Y+6, r24	; 0x06
    2690:	3f c0       	rjmp	.+126    	; 0x2710 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2692:	68 85       	ldd	r22, Y+8	; 0x08
    2694:	79 85       	ldd	r23, Y+9	; 0x09
    2696:	8a 85       	ldd	r24, Y+10	; 0x0a
    2698:	9b 85       	ldd	r25, Y+11	; 0x0b
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	3f ef       	ldi	r19, 0xFF	; 255
    269e:	4f e7       	ldi	r20, 0x7F	; 127
    26a0:	57 e4       	ldi	r21, 0x47	; 71
    26a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a6:	18 16       	cp	r1, r24
    26a8:	4c f5       	brge	.+82     	; 0x26fc <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    26ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    26ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e2       	ldi	r20, 0x20	; 32
    26b8:	51 e4       	ldi	r21, 0x41	; 65
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9f 83       	std	Y+7, r25	; 0x07
    26d0:	8e 83       	std	Y+6, r24	; 0x06
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <LCD_voidSendChar+0x2ec>
    26d4:	88 ec       	ldi	r24, 0xC8	; 200
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9d 83       	std	Y+5, r25	; 0x05
    26da:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26dc:	8c 81       	ldd	r24, Y+4	; 0x04
    26de:	9d 81       	ldd	r25, Y+5	; 0x05
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_voidSendChar+0x2da>
    26e4:	9d 83       	std	Y+5, r25	; 0x05
    26e6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e8:	8e 81       	ldd	r24, Y+6	; 0x06
    26ea:	9f 81       	ldd	r25, Y+7	; 0x07
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	9f 83       	std	Y+7, r25	; 0x07
    26f0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f2:	8e 81       	ldd	r24, Y+6	; 0x06
    26f4:	9f 81       	ldd	r25, Y+7	; 0x07
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	69 f7       	brne	.-38     	; 0x26d4 <LCD_voidSendChar+0x2ce>
    26fa:	24 c0       	rjmp	.+72     	; 0x2744 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	68 85       	ldd	r22, Y+8	; 0x08
    26fe:	79 85       	ldd	r23, Y+9	; 0x09
    2700:	8a 85       	ldd	r24, Y+10	; 0x0a
    2702:	9b 85       	ldd	r25, Y+11	; 0x0b
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9f 83       	std	Y+7, r25	; 0x07
    270e:	8e 83       	std	Y+6, r24	; 0x06
    2710:	8e 81       	ldd	r24, Y+6	; 0x06
    2712:	9f 81       	ldd	r25, Y+7	; 0x07
    2714:	9b 83       	std	Y+3, r25	; 0x03
    2716:	8a 83       	std	Y+2, r24	; 0x02
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	9b 81       	ldd	r25, Y+3	; 0x03
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_voidSendChar+0x316>
    2720:	9b 83       	std	Y+3, r25	; 0x03
    2722:	8a 83       	std	Y+2, r24	; 0x02
    2724:	0f c0       	rjmp	.+30     	; 0x2744 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2726:	69 89       	ldd	r22, Y+17	; 0x11
    2728:	7a 89       	ldd	r23, Y+18	; 0x12
    272a:	8b 89       	ldd	r24, Y+19	; 0x13
    272c:	9c 89       	ldd	r25, Y+20	; 0x14
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	88 8b       	std	Y+16, r24	; 0x10
    2738:	88 89       	ldd	r24, Y+16	; 0x10
    273a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	8a 95       	dec	r24
    2740:	f1 f7       	brne	.-4      	; 0x273e <LCD_voidSendChar+0x338>
    2742:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    2744:	e1 96       	adiw	r28, 0x31	; 49
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <LCD_voidWriteString>:
void LCD_voidWriteString (u8 * Copy_pu8String)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <LCD_voidWriteString+0x6>
    275c:	00 d0       	rcall	.+0      	; 0x275e <LCD_voidWriteString+0x8>
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8String != NULL )
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	21 f1       	breq	.+72     	; 0x27b6 <LCD_voidWriteString+0x60>
	{
	    u8 x = 0;
    276e:	1a 82       	std	Y+2, r1	; 0x02
	    u8 i = 0;
    2770:	19 82       	std	Y+1, r1	; 0x01
    2772:	16 c0       	rjmp	.+44     	; 0x27a0 <LCD_voidWriteString+0x4a>
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	8f 5f       	subi	r24, 0xFF	; 255
    2778:	8a 83       	std	Y+2, r24	; 0x02
    277a:	0e c0       	rjmp	.+28     	; 0x2798 <LCD_voidWriteString+0x42>
		 for(  ; i < x; i++)
		 {
		  /* Write Character on LCD */
		  LCD_voidSendChar (Copy_pu8String[i]);
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	fc 01       	movw	r30, r24
    2788:	e2 0f       	add	r30, r18
    278a:	f3 1f       	adc	r31, r19
    278c:	80 81       	ld	r24, Z
    278e:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
		 for(  ; i < x; i++)
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	8f 5f       	subi	r24, 0xFF	; 255
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	99 81       	ldd	r25, Y+1	; 0x01
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	98 17       	cp	r25, r24
    279e:	70 f3       	brcs	.-36     	; 0x277c <LCD_voidWriteString+0x26>
{
	if(Copy_pu8String != NULL )
	{
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	fc 01       	movw	r30, r24
    27ac:	e2 0f       	add	r30, r18
    27ae:	f3 1f       	adc	r31, r19
    27b0:	80 81       	ld	r24, Z
    27b2:	88 23       	and	r24, r24
    27b4:	f9 f6       	brne	.-66     	; 0x2774 <LCD_voidWriteString+0x1e>
		 }
		 
		}
	}
	
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <LCD_u8_GoTo_XY>:
u8 LCD_u8_GoTo_XY     (u8 Copy_u8X,u8 Copy_u8Y)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <LCD_u8_GoTo_XY+0x6>
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <LCD_u8_GoTo_XY+0x8>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <LCD_u8_GoTo_XY+0xa>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8X <=1)&&(Copy_u8Y <= 39))
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	82 30       	cpi	r24, 0x02	; 2
    27de:	e0 f4       	brcc	.+56     	; 0x2818 <LCD_u8_GoTo_XY+0x54>
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	88 32       	cpi	r24, 0x28	; 40
    27e4:	c8 f4       	brcc	.+50     	; 0x2818 <LCD_u8_GoTo_XY+0x54>
	{
		switch(Copy_u8X)
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	3d 83       	std	Y+5, r19	; 0x05
    27ee:	2c 83       	std	Y+4, r18	; 0x04
    27f0:	8c 81       	ldd	r24, Y+4	; 0x04
    27f2:	9d 81       	ldd	r25, Y+5	; 0x05
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	31 f0       	breq	.+12     	; 0x2804 <LCD_u8_GoTo_XY+0x40>
    27f8:	2c 81       	ldd	r18, Y+4	; 0x04
    27fa:	3d 81       	ldd	r19, Y+5	; 0x05
    27fc:	21 30       	cpi	r18, 0x01	; 1
    27fe:	31 05       	cpc	r19, r1
    2800:	31 f0       	breq	.+12     	; 0x280e <LCD_u8_GoTo_XY+0x4a>
    2802:	0b c0       	rjmp	.+22     	; 0x281a <LCD_u8_GoTo_XY+0x56>
		{
		case LCD_u8_LINE0 : LCD_voidSendCmnd(0x80 + Copy_u8Y);break;
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	80 58       	subi	r24, 0x80	; 128
    2808:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    280c:	06 c0       	rjmp	.+12     	; 0x281a <LCD_u8_GoTo_XY+0x56>

		case LCD_u8_LINE1 : LCD_voidSendCmnd(0xC0 + Copy_u8Y);break;
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	80 54       	subi	r24, 0x40	; 64
    2812:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    2816:	01 c0       	rjmp	.+2      	; 0x281a <LCD_u8_GoTo_XY+0x56>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    2818:	19 82       	std	Y+1, r1	; 0x01
	}


}
    281a:	26 96       	adiw	r28, 0x06	; 6
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <LCD_voidWriteNumber>:
void LCD_voidWriteNumber (u32  Copy_u32Num)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	66 97       	sbiw	r28, 0x16	; 22
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	6b 8b       	std	Y+19, r22	; 0x13
    2842:	7c 8b       	std	Y+20, r23	; 0x14
    2844:	8d 8b       	std	Y+21, r24	; 0x15
    2846:	9e 8b       	std	Y+22, r25	; 0x16

	u8 Arr[10];
	u8 Local_Remainder = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	88 87       	std	Y+8, r24	; 0x08
	u32 Local_Number = Copy_u32Num;
    284c:	8b 89       	ldd	r24, Y+19	; 0x13
    284e:	9c 89       	ldd	r25, Y+20	; 0x14
    2850:	ad 89       	ldd	r26, Y+21	; 0x15
    2852:	be 89       	ldd	r27, Y+22	; 0x16
    2854:	8c 83       	std	Y+4, r24	; 0x04
    2856:	9d 83       	std	Y+5, r25	; 0x05
    2858:	ae 83       	std	Y+6, r26	; 0x06
    285a:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_Counter = 0;
    285c:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    285e:	8a e0       	ldi	r24, 0x0A	; 10
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	42 c0       	rjmp	.+132    	; 0x28e8 <LCD_voidWriteNumber+0xbc>
	{
		Local_Remainder = Local_Number % 10 ;
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	9d 81       	ldd	r25, Y+5	; 0x05
    2868:	ae 81       	ldd	r26, Y+6	; 0x06
    286a:	bf 81       	ldd	r27, Y+7	; 0x07
    286c:	2a e0       	ldi	r18, 0x0A	; 10
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__udivmodsi4>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	88 87       	std	Y+8, r24	; 0x08
		Local_Number    = Local_Number /10 ;
    2882:	8c 81       	ldd	r24, Y+4	; 0x04
    2884:	9d 81       	ldd	r25, Y+5	; 0x05
    2886:	ae 81       	ldd	r26, Y+6	; 0x06
    2888:	bf 81       	ldd	r27, Y+7	; 0x07
    288a:	2a e0       	ldi	r18, 0x0A	; 10
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__udivmodsi4>
    289a:	da 01       	movw	r26, r20
    289c:	c9 01       	movw	r24, r18
    289e:	8c 83       	std	Y+4, r24	; 0x04
    28a0:	9d 83       	std	Y+5, r25	; 0x05
    28a2:	ae 83       	std	Y+6, r26	; 0x06
    28a4:	bf 83       	std	Y+7, r27	; 0x07

		if((Local_Remainder ==0) && (Local_Number<1) && (Local_Counter>0) )
    28a6:	88 85       	ldd	r24, Y+8	; 0x08
    28a8:	88 23       	and	r24, r24
    28aa:	59 f4       	brne	.+22     	; 0x28c2 <LCD_voidWriteNumber+0x96>
    28ac:	8c 81       	ldd	r24, Y+4	; 0x04
    28ae:	9d 81       	ldd	r25, Y+5	; 0x05
    28b0:	ae 81       	ldd	r26, Y+6	; 0x06
    28b2:	bf 81       	ldd	r27, Y+7	; 0x07
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	a1 05       	cpc	r26, r1
    28b8:	b1 05       	cpc	r27, r1
    28ba:	19 f4       	brne	.+6      	; 0x28c2 <LCD_voidWriteNumber+0x96>
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	88 23       	and	r24, r24
    28c0:	b9 f4       	brne	.+46     	; 0x28f0 <LCD_voidWriteNumber+0xc4>
		{
			break;
		}
		Local_Counter ++;
    28c2:	8b 81       	ldd	r24, Y+3	; 0x03
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	8b 83       	std	Y+3, r24	; 0x03
		Arr[initial-1] = Local_Remainder ;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9c 01       	movw	r18, r24
    28d0:	21 50       	subi	r18, 0x01	; 1
    28d2:	30 40       	sbci	r19, 0x00	; 0
    28d4:	ce 01       	movw	r24, r28
    28d6:	09 96       	adiw	r24, 0x09	; 9
    28d8:	fc 01       	movw	r30, r24
    28da:	e2 0f       	add	r30, r18
    28dc:	f3 1f       	adc	r31, r19
    28de:	88 85       	ldd	r24, Y+8	; 0x08
    28e0:	80 83       	st	Z, r24
	u32 Local_Number = Copy_u32Num;
	u8 Local_Counter = 0;
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	81 50       	subi	r24, 0x01	; 1
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	88 23       	and	r24, r24
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <LCD_voidWriteNumber+0xc4>
    28ee:	ba cf       	rjmp	.-140    	; 0x2864 <LCD_voidWriteNumber+0x38>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    28f0:	8a e0       	ldi	r24, 0x0A	; 10
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	89 1b       	sub	r24, r25
    28f6:	8a 83       	std	Y+2, r24	; 0x02
    28f8:	0f c0       	rjmp	.+30     	; 0x2918 <LCD_voidWriteNumber+0xec>
	{
		LCD_voidSendChar(Arr[Local_Counter2]+48);
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	ce 01       	movw	r24, r28
    2902:	09 96       	adiw	r24, 0x09	; 9
    2904:	fc 01       	movw	r30, r24
    2906:	e2 0f       	add	r30, r18
    2908:	f3 1f       	adc	r31, r19
    290a:	80 81       	ld	r24, Z
    290c:	80 5d       	subi	r24, 0xD0	; 208
    290e:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	8f 5f       	subi	r24, 0xFF	; 255
    2916:	8a 83       	std	Y+2, r24	; 0x02
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	8a 30       	cpi	r24, 0x0A	; 10
    291c:	70 f3       	brcs	.-36     	; 0x28fa <LCD_voidWriteNumber+0xce>
		LCD_voidSendChar(Arr[Local_Counter2]+48);
	}



}
    291e:	66 96       	adiw	r28, 0x16	; 22
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharNo,u8 Copy_u8X,u8 Copy_u8Y,u8 * Copy_PSpecialChar)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	28 97       	sbiw	r28, 0x08	; 8
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	8a 83       	std	Y+2, r24	; 0x02
    2946:	6b 83       	std	Y+3, r22	; 0x03
    2948:	4c 83       	std	Y+4, r20	; 0x04
    294a:	3e 83       	std	Y+6, r19	; 0x06
    294c:	2d 83       	std	Y+5, r18	; 0x05

	switch(Copy_u8CharNo)
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	38 87       	std	Y+8, r19	; 0x08
    2956:	2f 83       	std	Y+7, r18	; 0x07
    2958:	8f 81       	ldd	r24, Y+7	; 0x07
    295a:	98 85       	ldd	r25, Y+8	; 0x08
    295c:	83 30       	cpi	r24, 0x03	; 3
    295e:	91 05       	cpc	r25, r1
    2960:	a9 f1       	breq	.+106    	; 0x29cc <LCD_voidSendSpecialChar+0x9c>
    2962:	2f 81       	ldd	r18, Y+7	; 0x07
    2964:	38 85       	ldd	r19, Y+8	; 0x08
    2966:	24 30       	cpi	r18, 0x04	; 4
    2968:	31 05       	cpc	r19, r1
    296a:	7c f4       	brge	.+30     	; 0x298a <LCD_voidSendSpecialChar+0x5a>
    296c:	8f 81       	ldd	r24, Y+7	; 0x07
    296e:	98 85       	ldd	r25, Y+8	; 0x08
    2970:	81 30       	cpi	r24, 0x01	; 1
    2972:	91 05       	cpc	r25, r1
    2974:	19 f1       	breq	.+70     	; 0x29bc <LCD_voidSendSpecialChar+0x8c>
    2976:	2f 81       	ldd	r18, Y+7	; 0x07
    2978:	38 85       	ldd	r19, Y+8	; 0x08
    297a:	22 30       	cpi	r18, 0x02	; 2
    297c:	31 05       	cpc	r19, r1
    297e:	14 f5       	brge	.+68     	; 0x29c4 <LCD_voidSendSpecialChar+0x94>
    2980:	8f 81       	ldd	r24, Y+7	; 0x07
    2982:	98 85       	ldd	r25, Y+8	; 0x08
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	b1 f0       	breq	.+44     	; 0x29b4 <LCD_voidSendSpecialChar+0x84>
    2988:	34 c0       	rjmp	.+104    	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>
    298a:	2f 81       	ldd	r18, Y+7	; 0x07
    298c:	38 85       	ldd	r19, Y+8	; 0x08
    298e:	25 30       	cpi	r18, 0x05	; 5
    2990:	31 05       	cpc	r19, r1
    2992:	21 f1       	breq	.+72     	; 0x29dc <LCD_voidSendSpecialChar+0xac>
    2994:	8f 81       	ldd	r24, Y+7	; 0x07
    2996:	98 85       	ldd	r25, Y+8	; 0x08
    2998:	85 30       	cpi	r24, 0x05	; 5
    299a:	91 05       	cpc	r25, r1
    299c:	dc f0       	brlt	.+54     	; 0x29d4 <LCD_voidSendSpecialChar+0xa4>
    299e:	2f 81       	ldd	r18, Y+7	; 0x07
    29a0:	38 85       	ldd	r19, Y+8	; 0x08
    29a2:	26 30       	cpi	r18, 0x06	; 6
    29a4:	31 05       	cpc	r19, r1
    29a6:	f1 f0       	breq	.+60     	; 0x29e4 <LCD_voidSendSpecialChar+0xb4>
    29a8:	8f 81       	ldd	r24, Y+7	; 0x07
    29aa:	98 85       	ldd	r25, Y+8	; 0x08
    29ac:	87 30       	cpi	r24, 0x07	; 7
    29ae:	91 05       	cpc	r25, r1
    29b0:	e9 f0       	breq	.+58     	; 0x29ec <LCD_voidSendSpecialChar+0xbc>
    29b2:	1f c0       	rjmp	.+62     	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>
	{
	case 0:
		LCD_voidSendCmnd(0b01000000);
    29b4:	80 e4       	ldi	r24, 0x40	; 64
    29b6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    29ba:	1b c0       	rjmp	.+54     	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>

		break;
	case 1:
	    LCD_voidSendCmnd(0b01001000);
    29bc:	88 e4       	ldi	r24, 0x48	; 72
    29be:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    29c2:	17 c0       	rjmp	.+46     	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 2:
	    LCD_voidSendCmnd(0b01010000);
    29c4:	80 e5       	ldi	r24, 0x50	; 80
    29c6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    29ca:	13 c0       	rjmp	.+38     	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 3:
	    LCD_voidSendCmnd(0b01011000);
    29cc:	88 e5       	ldi	r24, 0x58	; 88
    29ce:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    29d2:	0f c0       	rjmp	.+30     	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 4:
	    LCD_voidSendCmnd(0b01100000);
    29d4:	80 e6       	ldi	r24, 0x60	; 96
    29d6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    29da:	0b c0       	rjmp	.+22     	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 5:
	    LCD_voidSendCmnd(0b01101000);
    29dc:	88 e6       	ldi	r24, 0x68	; 104
    29de:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    29e2:	07 c0       	rjmp	.+14     	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 6:
	    LCD_voidSendCmnd(0b01110000);
    29e4:	80 e7       	ldi	r24, 0x70	; 112
    29e6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
    29ea:	03 c0       	rjmp	.+6      	; 0x29f2 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 7:
	    LCD_voidSendCmnd(0b01111000);
    29ec:	88 e7       	ldi	r24, 0x78	; 120
    29ee:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    29f2:	19 82       	std	Y+1, r1	; 0x01
    29f4:	0e c0       	rjmp	.+28     	; 0x2a12 <LCD_voidSendSpecialChar+0xe2>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	fc 01       	movw	r30, r24
    2a02:	e2 0f       	add	r30, r18
    2a04:	f3 1f       	adc	r31, r19
    2a06:	80 81       	ld	r24, Z
    2a08:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
	    LCD_voidSendCmnd(0b01111000);
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	8f 5f       	subi	r24, 0xFF	; 255
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	88 30       	cpi	r24, 0x08	; 8
    2a16:	78 f3       	brcs	.-34     	; 0x29f6 <LCD_voidSendSpecialChar+0xc6>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
	 }

	 LCD_u8_GoTo_XY( Copy_u8X, Copy_u8Y);
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	6c 81       	ldd	r22, Y+4	; 0x04
    2a1c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>
	 LCD_voidSendChar(Copy_u8CharNo);
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>


}
    2a26:	28 96       	adiw	r28, 0x08	; 8
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <LCD_voidShiftDispRight>:

void LCD_voidShiftDispRight(void)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011100);
    2a40:	8c e1       	ldi	r24, 0x1C	; 28
    2a42:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
}
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <LCD_voidShiftDispLeft>:
void LCD_voidShiftDispLeft(void)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011000);
    2a54:	88 e1       	ldi	r24, 0x18	; 24
    2a56:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_voidSendCmnd>
}
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <Stepper_u8Rotation>:
#include "STP_private.h"

u16 i;
u8 Local_u8ErrorState;
u8 Stepper_u8Rotation(u16 Copy_u16Angle , u8 Copy_u8Direction)
{
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	c7 57       	subi	r28, 0x77	; 119
    2a6e:	d0 40       	sbci	r29, 0x00	; 0
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	eb 58       	subi	r30, 0x8B	; 139
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	80 83       	st	Z, r24
    2a84:	fe 01       	movw	r30, r28
    2a86:	e9 58       	subi	r30, 0x89	; 137
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	60 83       	st	Z, r22
	if((Copy_u16Angle <=360))
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	eb 58       	subi	r30, 0x8B	; 139
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	21 e0       	ldi	r18, 0x01	; 1
    2a98:	89 36       	cpi	r24, 0x69	; 105
    2a9a:	92 07       	cpc	r25, r18
    2a9c:	08 f0       	brcs	.+2      	; 0x2aa0 <Stepper_u8Rotation+0x40>
    2a9e:	ab c5       	rjmp	.+2902   	; 0x35f6 <Stepper_u8Rotation+0xb96>
	{
	    Local_u8ErrorState = STD_TYPES_OK;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	80 93 44 01 	sts	0x0144, r24
	    u32 NumberofSteps = (u32)((Copy_u16Angle * 2048UL)/360);
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	eb 58       	subi	r30, 0x8B	; 139
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 81       	ld	r24, Z
    2aae:	91 81       	ldd	r25, Z+1	; 0x01
    2ab0:	cc 01       	movw	r24, r24
    2ab2:	a0 e0       	ldi	r26, 0x00	; 0
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	07 2e       	mov	r0, r23
    2ab8:	7b e0       	ldi	r23, 0x0B	; 11
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	aa 1f       	adc	r26, r26
    2ac0:	bb 1f       	adc	r27, r27
    2ac2:	7a 95       	dec	r23
    2ac4:	d1 f7       	brne	.-12     	; 0x2aba <Stepper_u8Rotation+0x5a>
    2ac6:	70 2d       	mov	r23, r0
    2ac8:	8e 01       	movw	r16, r28
    2aca:	0f 58       	subi	r16, 0x8F	; 143
    2acc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ace:	28 e6       	ldi	r18, 0x68	; 104
    2ad0:	31 e0       	ldi	r19, 0x01	; 1
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__udivmodsi4>
    2ade:	da 01       	movw	r26, r20
    2ae0:	c9 01       	movw	r24, r18
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	80 83       	st	Z, r24
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	a2 83       	std	Z+2, r26	; 0x02
    2aea:	b3 83       	std	Z+3, r27	; 0x03
		NumberofSteps = NumberofSteps / 4 ;
    2aec:	9e 01       	movw	r18, r28
    2aee:	2f 58       	subi	r18, 0x8F	; 143
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	ef 58       	subi	r30, 0x8F	; 143
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	a2 81       	ldd	r26, Z+2	; 0x02
    2afe:	b3 81       	ldd	r27, Z+3	; 0x03
    2b00:	b6 95       	lsr	r27
    2b02:	a7 95       	ror	r26
    2b04:	97 95       	ror	r25
    2b06:	87 95       	ror	r24
    2b08:	b6 95       	lsr	r27
    2b0a:	a7 95       	ror	r26
    2b0c:	97 95       	ror	r25
    2b0e:	87 95       	ror	r24
    2b10:	f9 01       	movw	r30, r18
    2b12:	80 83       	st	Z, r24
    2b14:	91 83       	std	Z+1, r25	; 0x01
    2b16:	a2 83       	std	Z+2, r26	; 0x02
    2b18:	b3 83       	std	Z+3, r27	; 0x03
		
		if(Copy_u8Direction == AntiClockwise)
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e9 58       	subi	r30, 0x89	; 137
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 81       	ld	r24, Z
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <Stepper_u8Rotation+0xc8>
    2b26:	11 c3       	rjmp	.+1570   	; 0x314a <Stepper_u8Rotation+0x6ea>
		{
		for(i=0; i < NumberofSteps ; i++)
    2b28:	10 92 43 01 	sts	0x0143, r1
    2b2c:	10 92 42 01 	sts	0x0142, r1
    2b30:	f7 c2       	rjmp	.+1518   	; 0x3120 <Stepper_u8Rotation+0x6c0>
		{
			
		//STEP 1
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	63 e0       	ldi	r22, 0x03	; 3
    2b36:	41 e0       	ldi	r20, 0x01	; 1
    2b38:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	64 e0       	ldi	r22, 0x04	; 4
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	65 e0       	ldi	r22, 0x05	; 5
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	66 e0       	ldi	r22, 0x06	; 6
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e3 59       	subi	r30, 0x93	; 147
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 ea       	ldi	r26, 0xA0	; 160
    2b66:	b0 e4       	ldi	r27, 0x40	; 64
    2b68:	80 83       	st	Z, r24
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	a2 83       	std	Z+2, r26	; 0x02
    2b6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b70:	8e 01       	movw	r16, r28
    2b72:	07 59       	subi	r16, 0x97	; 151
    2b74:	1f 4f       	sbci	r17, 0xFF	; 255
    2b76:	fe 01       	movw	r30, r28
    2b78:	e3 59       	subi	r30, 0x93	; 147
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4a ef       	ldi	r20, 0xFA	; 250
    2b8a:	54 e4       	ldi	r21, 0x44	; 68
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	f8 01       	movw	r30, r16
    2b96:	80 83       	st	Z, r24
    2b98:	91 83       	std	Z+1, r25	; 0x01
    2b9a:	a2 83       	std	Z+2, r26	; 0x02
    2b9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e7 59       	subi	r30, 0x97	; 151
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	44 f4       	brge	.+16     	; 0x2bcc <Stepper_u8Rotation+0x16c>
		__ticks = 1;
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e9 59       	subi	r30, 0x99	; 153
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
    2bca:	64 c0       	rjmp	.+200    	; 0x2c94 <Stepper_u8Rotation+0x234>
	else if (__tmp > 65535)
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e7 59       	subi	r30, 0x97	; 151
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	93 81       	ldd	r25, Z+3	; 0x03
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	0c f0       	brlt	.+2      	; 0x2bec <Stepper_u8Rotation+0x18c>
    2bea:	43 c0       	rjmp	.+134    	; 0x2c72 <Stepper_u8Rotation+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bec:	fe 01       	movw	r30, r28
    2bee:	e3 59       	subi	r30, 0x93	; 147
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	60 81       	ld	r22, Z
    2bf4:	71 81       	ldd	r23, Z+1	; 0x01
    2bf6:	82 81       	ldd	r24, Z+2	; 0x02
    2bf8:	93 81       	ldd	r25, Z+3	; 0x03
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e2       	ldi	r20, 0x20	; 32
    2c00:	51 e4       	ldi	r21, 0x41	; 65
    2c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	8e 01       	movw	r16, r28
    2c0c:	09 59       	subi	r16, 0x99	; 153
    2c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c10:	bc 01       	movw	r22, r24
    2c12:	cd 01       	movw	r24, r26
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	80 83       	st	Z, r24
    2c22:	1f c0       	rjmp	.+62     	; 0x2c62 <Stepper_u8Rotation+0x202>
    2c24:	fe 01       	movw	r30, r28
    2c26:	eb 59       	subi	r30, 0x9B	; 155
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	88 ec       	ldi	r24, 0xC8	; 200
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c32:	fe 01       	movw	r30, r28
    2c34:	eb 59       	subi	r30, 0x9B	; 155
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <Stepper_u8Rotation+0x1dc>
    2c40:	fe 01       	movw	r30, r28
    2c42:	eb 59       	subi	r30, 0x9B	; 155
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	91 83       	std	Z+1, r25	; 0x01
    2c48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	de 01       	movw	r26, r28
    2c4c:	a9 59       	subi	r26, 0x99	; 153
    2c4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c50:	fe 01       	movw	r30, r28
    2c52:	e9 59       	subi	r30, 0x99	; 153
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	11 96       	adiw	r26, 0x01	; 1
    2c5e:	9c 93       	st	X, r25
    2c60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c62:	fe 01       	movw	r30, r28
    2c64:	e9 59       	subi	r30, 0x99	; 153
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	80 81       	ld	r24, Z
    2c6a:	91 81       	ldd	r25, Z+1	; 0x01
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	d1 f6       	brne	.-76     	; 0x2c24 <Stepper_u8Rotation+0x1c4>
    2c70:	27 c0       	rjmp	.+78     	; 0x2cc0 <Stepper_u8Rotation+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	8e 01       	movw	r16, r28
    2c74:	09 59       	subi	r16, 0x99	; 153
    2c76:	1f 4f       	sbci	r17, 0xFF	; 255
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e7 59       	subi	r30, 0x97	; 151
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	f8 01       	movw	r30, r16
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24
    2c94:	de 01       	movw	r26, r28
    2c96:	ad 59       	subi	r26, 0x9D	; 157
    2c98:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e9 59       	subi	r30, 0x99	; 153
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	8d 93       	st	X+, r24
    2ca6:	9c 93       	st	X, r25
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ed 59       	subi	r30, 0x9D	; 157
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <Stepper_u8Rotation+0x252>
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	ed 59       	subi	r30, 0x9D	; 157
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
		_delay_ms(5);

        //STEP 2
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	63 e0       	ldi	r22, 0x03	; 3
    2cc4:	40 e0       	ldi	r20, 0x00	; 0
    2cc6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    2cca:	82 e0       	ldi	r24, 0x02	; 2
    2ccc:	64 e0       	ldi	r22, 0x04	; 4
    2cce:	41 e0       	ldi	r20, 0x01	; 1
    2cd0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	65 e0       	ldi	r22, 0x05	; 5
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    2cde:	82 e0       	ldi	r24, 0x02	; 2
    2ce0:	66 e0       	ldi	r22, 0x06	; 6
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e1 5a       	subi	r30, 0xA1	; 161
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a0 ea       	ldi	r26, 0xA0	; 160
    2cf4:	b0 e4       	ldi	r27, 0x40	; 64
    2cf6:	80 83       	st	Z, r24
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	a2 83       	std	Z+2, r26	; 0x02
    2cfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfe:	8e 01       	movw	r16, r28
    2d00:	05 5a       	subi	r16, 0xA5	; 165
    2d02:	1f 4f       	sbci	r17, 0xFF	; 255
    2d04:	fe 01       	movw	r30, r28
    2d06:	e1 5a       	subi	r30, 0xA1	; 161
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	4a ef       	ldi	r20, 0xFA	; 250
    2d18:	54 e4       	ldi	r21, 0x44	; 68
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	f8 01       	movw	r30, r16
    2d24:	80 83       	st	Z, r24
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	a2 83       	std	Z+2, r26	; 0x02
    2d2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e5 5a       	subi	r30, 0xA5	; 165
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	93 81       	ldd	r25, Z+3	; 0x03
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e8       	ldi	r20, 0x80	; 128
    2d40:	5f e3       	ldi	r21, 0x3F	; 63
    2d42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	44 f4       	brge	.+16     	; 0x2d5a <Stepper_u8Rotation+0x2fa>
		__ticks = 1;
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e7 5a       	subi	r30, 0xA7	; 167
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	80 83       	st	Z, r24
    2d58:	64 c0       	rjmp	.+200    	; 0x2e22 <Stepper_u8Rotation+0x3c2>
	else if (__tmp > 65535)
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e5 5a       	subi	r30, 0xA5	; 165
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	3f ef       	ldi	r19, 0xFF	; 255
    2d6c:	4f e7       	ldi	r20, 0x7F	; 127
    2d6e:	57 e4       	ldi	r21, 0x47	; 71
    2d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d74:	18 16       	cp	r1, r24
    2d76:	0c f0       	brlt	.+2      	; 0x2d7a <Stepper_u8Rotation+0x31a>
    2d78:	43 c0       	rjmp	.+134    	; 0x2e00 <Stepper_u8Rotation+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e1 5a       	subi	r30, 0xA1	; 161
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e2       	ldi	r20, 0x20	; 32
    2d8e:	51 e4       	ldi	r21, 0x41	; 65
    2d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	8e 01       	movw	r16, r28
    2d9a:	07 5a       	subi	r16, 0xA7	; 167
    2d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	f8 01       	movw	r30, r16
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	80 83       	st	Z, r24
    2db0:	1f c0       	rjmp	.+62     	; 0x2df0 <Stepper_u8Rotation+0x390>
    2db2:	fe 01       	movw	r30, r28
    2db4:	e9 5a       	subi	r30, 0xA9	; 169
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	88 ec       	ldi	r24, 0xC8	; 200
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	80 83       	st	Z, r24
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e9 5a       	subi	r30, 0xA9	; 169
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 81       	ld	r24, Z
    2dc8:	91 81       	ldd	r25, Z+1	; 0x01
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <Stepper_u8Rotation+0x36a>
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e9 5a       	subi	r30, 0xA9	; 169
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	de 01       	movw	r26, r28
    2dda:	a7 5a       	subi	r26, 0xA7	; 167
    2ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dde:	fe 01       	movw	r30, r28
    2de0:	e7 5a       	subi	r30, 0xA7	; 167
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	11 96       	adiw	r26, 0x01	; 1
    2dec:	9c 93       	st	X, r25
    2dee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df0:	fe 01       	movw	r30, r28
    2df2:	e7 5a       	subi	r30, 0xA7	; 167
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	d1 f6       	brne	.-76     	; 0x2db2 <Stepper_u8Rotation+0x352>
    2dfe:	27 c0       	rjmp	.+78     	; 0x2e4e <Stepper_u8Rotation+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e00:	8e 01       	movw	r16, r28
    2e02:	07 5a       	subi	r16, 0xA7	; 167
    2e04:	1f 4f       	sbci	r17, 0xFF	; 255
    2e06:	fe 01       	movw	r30, r28
    2e08:	e5 5a       	subi	r30, 0xA5	; 165
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24
    2e22:	de 01       	movw	r26, r28
    2e24:	ab 5a       	subi	r26, 0xAB	; 171
    2e26:	bf 4f       	sbci	r27, 0xFF	; 255
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e7 5a       	subi	r30, 0xA7	; 167
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	8d 93       	st	X+, r24
    2e34:	9c 93       	st	X, r25
    2e36:	fe 01       	movw	r30, r28
    2e38:	eb 5a       	subi	r30, 0xAB	; 171
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 81       	ld	r24, Z
    2e3e:	91 81       	ldd	r25, Z+1	; 0x01
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <Stepper_u8Rotation+0x3e0>
    2e44:	fe 01       	movw	r30, r28
    2e46:	eb 5a       	subi	r30, 0xAB	; 171
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	80 83       	st	Z, r24
		_delay_ms(5);

        //STEP 3
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	63 e0       	ldi	r22, 0x03	; 3
    2e52:	40 e0       	ldi	r20, 0x00	; 0
    2e54:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2e58:	82 e0       	ldi	r24, 0x02	; 2
    2e5a:	64 e0       	ldi	r22, 0x04	; 4
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    2e62:	82 e0       	ldi	r24, 0x02	; 2
    2e64:	65 e0       	ldi	r22, 0x05	; 5
    2e66:	41 e0       	ldi	r20, 0x01	; 1
    2e68:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	66 e0       	ldi	r22, 0x06	; 6
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    2e76:	fe 01       	movw	r30, r28
    2e78:	ef 5a       	subi	r30, 0xAF	; 175
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	a0 ea       	ldi	r26, 0xA0	; 160
    2e82:	b0 e4       	ldi	r27, 0x40	; 64
    2e84:	80 83       	st	Z, r24
    2e86:	91 83       	std	Z+1, r25	; 0x01
    2e88:	a2 83       	std	Z+2, r26	; 0x02
    2e8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8c:	8e 01       	movw	r16, r28
    2e8e:	03 5b       	subi	r16, 0xB3	; 179
    2e90:	1f 4f       	sbci	r17, 0xFF	; 255
    2e92:	fe 01       	movw	r30, r28
    2e94:	ef 5a       	subi	r30, 0xAF	; 175
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4a ef       	ldi	r20, 0xFA	; 250
    2ea6:	54 e4       	ldi	r21, 0x44	; 68
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	f8 01       	movw	r30, r16
    2eb2:	80 83       	st	Z, r24
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	a2 83       	std	Z+2, r26	; 0x02
    2eb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eba:	fe 01       	movw	r30, r28
    2ebc:	e3 5b       	subi	r30, 0xB3	; 179
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	44 f4       	brge	.+16     	; 0x2ee8 <Stepper_u8Rotation+0x488>
		__ticks = 1;
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e5 5b       	subi	r30, 0xB5	; 181
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
    2ee6:	64 c0       	rjmp	.+200    	; 0x2fb0 <Stepper_u8Rotation+0x550>
	else if (__tmp > 65535)
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e3 5b       	subi	r30, 0xB3	; 179
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	60 81       	ld	r22, Z
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	82 81       	ldd	r24, Z+2	; 0x02
    2ef4:	93 81       	ldd	r25, Z+3	; 0x03
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	3f ef       	ldi	r19, 0xFF	; 255
    2efa:	4f e7       	ldi	r20, 0x7F	; 127
    2efc:	57 e4       	ldi	r21, 0x47	; 71
    2efe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f02:	18 16       	cp	r1, r24
    2f04:	0c f0       	brlt	.+2      	; 0x2f08 <Stepper_u8Rotation+0x4a8>
    2f06:	43 c0       	rjmp	.+134    	; 0x2f8e <Stepper_u8Rotation+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ef 5a       	subi	r30, 0xAF	; 175
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	40 e2       	ldi	r20, 0x20	; 32
    2f1c:	51 e4       	ldi	r21, 0x41	; 65
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	8e 01       	movw	r16, r28
    2f28:	05 5b       	subi	r16, 0xB5	; 181
    2f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2c:	bc 01       	movw	r22, r24
    2f2e:	cd 01       	movw	r24, r26
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	f8 01       	movw	r30, r16
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
    2f3e:	1f c0       	rjmp	.+62     	; 0x2f7e <Stepper_u8Rotation+0x51e>
    2f40:	fe 01       	movw	r30, r28
    2f42:	e7 5b       	subi	r30, 0xB7	; 183
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	88 ec       	ldi	r24, 0xC8	; 200
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	91 83       	std	Z+1, r25	; 0x01
    2f4c:	80 83       	st	Z, r24
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e7 5b       	subi	r30, 0xB7	; 183
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 81       	ld	r24, Z
    2f56:	91 81       	ldd	r25, Z+1	; 0x01
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <Stepper_u8Rotation+0x4f8>
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e7 5b       	subi	r30, 0xB7	; 183
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f66:	de 01       	movw	r26, r28
    2f68:	a5 5b       	subi	r26, 0xB5	; 181
    2f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e5 5b       	subi	r30, 0xB5	; 181
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	11 96       	adiw	r26, 0x01	; 1
    2f7a:	9c 93       	st	X, r25
    2f7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e5 5b       	subi	r30, 0xB5	; 181
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	d1 f6       	brne	.-76     	; 0x2f40 <Stepper_u8Rotation+0x4e0>
    2f8c:	27 c0       	rjmp	.+78     	; 0x2fdc <Stepper_u8Rotation+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8e:	8e 01       	movw	r16, r28
    2f90:	05 5b       	subi	r16, 0xB5	; 181
    2f92:	1f 4f       	sbci	r17, 0xFF	; 255
    2f94:	fe 01       	movw	r30, r28
    2f96:	e3 5b       	subi	r30, 0xB3	; 179
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	60 81       	ld	r22, Z
    2f9c:	71 81       	ldd	r23, Z+1	; 0x01
    2f9e:	82 81       	ldd	r24, Z+2	; 0x02
    2fa0:	93 81       	ldd	r25, Z+3	; 0x03
    2fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	f8 01       	movw	r30, r16
    2fac:	91 83       	std	Z+1, r25	; 0x01
    2fae:	80 83       	st	Z, r24
    2fb0:	de 01       	movw	r26, r28
    2fb2:	a9 5b       	subi	r26, 0xB9	; 185
    2fb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e5 5b       	subi	r30, 0xB5	; 181
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	8d 93       	st	X+, r24
    2fc2:	9c 93       	st	X, r25
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e9 5b       	subi	r30, 0xB9	; 185
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	80 81       	ld	r24, Z
    2fcc:	91 81       	ldd	r25, Z+1	; 0x01
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <Stepper_u8Rotation+0x56e>
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e9 5b       	subi	r30, 0xB9	; 185
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
		_delay_ms(5);

        //STEP 4
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	63 e0       	ldi	r22, 0x03	; 3
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	64 e0       	ldi	r22, 0x04	; 4
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	65 e0       	ldi	r22, 0x05	; 5
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    2ffa:	82 e0       	ldi	r24, 0x02	; 2
    2ffc:	66 e0       	ldi	r22, 0x06	; 6
    2ffe:	41 e0       	ldi	r20, 0x01	; 1
    3000:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    3004:	fe 01       	movw	r30, r28
    3006:	ed 5b       	subi	r30, 0xBD	; 189
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	a0 ea       	ldi	r26, 0xA0	; 160
    3010:	b0 e4       	ldi	r27, 0x40	; 64
    3012:	80 83       	st	Z, r24
    3014:	91 83       	std	Z+1, r25	; 0x01
    3016:	a2 83       	std	Z+2, r26	; 0x02
    3018:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301a:	8e 01       	movw	r16, r28
    301c:	01 5c       	subi	r16, 0xC1	; 193
    301e:	1f 4f       	sbci	r17, 0xFF	; 255
    3020:	fe 01       	movw	r30, r28
    3022:	ed 5b       	subi	r30, 0xBD	; 189
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	60 81       	ld	r22, Z
    3028:	71 81       	ldd	r23, Z+1	; 0x01
    302a:	82 81       	ldd	r24, Z+2	; 0x02
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	4a ef       	ldi	r20, 0xFA	; 250
    3034:	54 e4       	ldi	r21, 0x44	; 68
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	f8 01       	movw	r30, r16
    3040:	80 83       	st	Z, r24
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	a2 83       	std	Z+2, r26	; 0x02
    3046:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3048:	fe 01       	movw	r30, r28
    304a:	ff 96       	adiw	r30, 0x3f	; 63
    304c:	60 81       	ld	r22, Z
    304e:	71 81       	ldd	r23, Z+1	; 0x01
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	93 81       	ldd	r25, Z+3	; 0x03
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e8       	ldi	r20, 0x80	; 128
    305a:	5f e3       	ldi	r21, 0x3F	; 63
    305c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3060:	88 23       	and	r24, r24
    3062:	2c f4       	brge	.+10     	; 0x306e <Stepper_u8Rotation+0x60e>
		__ticks = 1;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	9e af       	std	Y+62, r25	; 0x3e
    306a:	8d af       	std	Y+61, r24	; 0x3d
    306c:	46 c0       	rjmp	.+140    	; 0x30fa <Stepper_u8Rotation+0x69a>
	else if (__tmp > 65535)
    306e:	fe 01       	movw	r30, r28
    3070:	ff 96       	adiw	r30, 0x3f	; 63
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	3f ef       	ldi	r19, 0xFF	; 255
    307e:	4f e7       	ldi	r20, 0x7F	; 127
    3080:	57 e4       	ldi	r21, 0x47	; 71
    3082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3086:	18 16       	cp	r1, r24
    3088:	64 f5       	brge	.+88     	; 0x30e2 <Stepper_u8Rotation+0x682>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308a:	fe 01       	movw	r30, r28
    308c:	ed 5b       	subi	r30, 0xBD	; 189
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e af       	std	Y+62, r25	; 0x3e
    30b6:	8d af       	std	Y+61, r24	; 0x3d
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <Stepper_u8Rotation+0x678>
    30ba:	88 ec       	ldi	r24, 0xC8	; 200
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	9c af       	std	Y+60, r25	; 0x3c
    30c0:	8b af       	std	Y+59, r24	; 0x3b
    30c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    30c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <Stepper_u8Rotation+0x666>
    30ca:	9c af       	std	Y+60, r25	; 0x3c
    30cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    30d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	9e af       	std	Y+62, r25	; 0x3e
    30d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    30da:	9e ad       	ldd	r25, Y+62	; 0x3e
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <Stepper_u8Rotation+0x65a>
    30e0:	16 c0       	rjmp	.+44     	; 0x310e <Stepper_u8Rotation+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	fe 01       	movw	r30, r28
    30e4:	ff 96       	adiw	r30, 0x3f	; 63
    30e6:	60 81       	ld	r22, Z
    30e8:	71 81       	ldd	r23, Z+1	; 0x01
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9e af       	std	Y+62, r25	; 0x3e
    30f8:	8d af       	std	Y+61, r24	; 0x3d
    30fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    30fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fe:	9a af       	std	Y+58, r25	; 0x3a
    3100:	89 af       	std	Y+57, r24	; 0x39
    3102:	89 ad       	ldd	r24, Y+57	; 0x39
    3104:	9a ad       	ldd	r25, Y+58	; 0x3a
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	f1 f7       	brne	.-4      	; 0x3106 <Stepper_u8Rotation+0x6a6>
    310a:	9a af       	std	Y+58, r25	; 0x3a
    310c:	89 af       	std	Y+57, r24	; 0x39
	    u32 NumberofSteps = (u32)((Copy_u16Angle * 2048UL)/360);
		NumberofSteps = NumberofSteps / 4 ;
		
		if(Copy_u8Direction == AntiClockwise)
		{
		for(i=0; i < NumberofSteps ; i++)
    310e:	80 91 42 01 	lds	r24, 0x0142
    3112:	90 91 43 01 	lds	r25, 0x0143
    3116:	01 96       	adiw	r24, 0x01	; 1
    3118:	90 93 43 01 	sts	0x0143, r25
    311c:	80 93 42 01 	sts	0x0142, r24
    3120:	80 91 42 01 	lds	r24, 0x0142
    3124:	90 91 43 01 	lds	r25, 0x0143
    3128:	9c 01       	movw	r18, r24
    312a:	40 e0       	ldi	r20, 0x00	; 0
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	fe 01       	movw	r30, r28
    3130:	ef 58       	subi	r30, 0x8F	; 143
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	a2 81       	ldd	r26, Z+2	; 0x02
    313a:	b3 81       	ldd	r27, Z+3	; 0x03
    313c:	28 17       	cp	r18, r24
    313e:	39 07       	cpc	r19, r25
    3140:	4a 07       	cpc	r20, r26
    3142:	5b 07       	cpc	r21, r27
    3144:	08 f4       	brcc	.+2      	; 0x3148 <Stepper_u8Rotation+0x6e8>
    3146:	f5 cc       	rjmp	.-1558   	; 0x2b32 <Stepper_u8Rotation+0xd2>
    3148:	41 c2       	rjmp	.+1154   	; 0x35cc <Stepper_u8Rotation+0xb6c>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
		_delay_ms(5);

		}
		}
		else if(Copy_u8Direction == Clockwise)
    314a:	fe 01       	movw	r30, r28
    314c:	e9 58       	subi	r30, 0x89	; 137
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	80 81       	ld	r24, Z
    3152:	88 23       	and	r24, r24
    3154:	09 f0       	breq	.+2      	; 0x3158 <Stepper_u8Rotation+0x6f8>
    3156:	3a c2       	rjmp	.+1140   	; 0x35cc <Stepper_u8Rotation+0xb6c>
		{
		for(i=0; i < NumberofSteps ; i++)
    3158:	10 92 43 01 	sts	0x0143, r1
    315c:	10 92 42 01 	sts	0x0142, r1
    3160:	21 c2       	rjmp	.+1090   	; 0x35a4 <Stepper_u8Rotation+0xb44>
		{

		//STEP 1
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    3162:	82 e0       	ldi	r24, 0x02	; 2
    3164:	63 e0       	ldi	r22, 0x03	; 3
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    316c:	82 e0       	ldi	r24, 0x02	; 2
    316e:	64 e0       	ldi	r22, 0x04	; 4
    3170:	40 e0       	ldi	r20, 0x00	; 0
    3172:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    3176:	82 e0       	ldi	r24, 0x02	; 2
    3178:	65 e0       	ldi	r22, 0x05	; 5
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    3180:	82 e0       	ldi	r24, 0x02	; 2
    3182:	66 e0       	ldi	r22, 0x06	; 6
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	a0 ea       	ldi	r26, 0xA0	; 160
    3190:	b0 e4       	ldi	r27, 0x40	; 64
    3192:	8d ab       	std	Y+53, r24	; 0x35
    3194:	9e ab       	std	Y+54, r25	; 0x36
    3196:	af ab       	std	Y+55, r26	; 0x37
    3198:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    319a:	6d a9       	ldd	r22, Y+53	; 0x35
    319c:	7e a9       	ldd	r23, Y+54	; 0x36
    319e:	8f a9       	ldd	r24, Y+55	; 0x37
    31a0:	98 ad       	ldd	r25, Y+56	; 0x38
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	4a ef       	ldi	r20, 0xFA	; 250
    31a8:	54 e4       	ldi	r21, 0x44	; 68
    31aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	89 ab       	std	Y+49, r24	; 0x31
    31b4:	9a ab       	std	Y+50, r25	; 0x32
    31b6:	ab ab       	std	Y+51, r26	; 0x33
    31b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31ba:	69 a9       	ldd	r22, Y+49	; 0x31
    31bc:	7a a9       	ldd	r23, Y+50	; 0x32
    31be:	8b a9       	ldd	r24, Y+51	; 0x33
    31c0:	9c a9       	ldd	r25, Y+52	; 0x34
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e8       	ldi	r20, 0x80	; 128
    31c8:	5f e3       	ldi	r21, 0x3F	; 63
    31ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ce:	88 23       	and	r24, r24
    31d0:	2c f4       	brge	.+10     	; 0x31dc <Stepper_u8Rotation+0x77c>
		__ticks = 1;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	98 ab       	std	Y+48, r25	; 0x30
    31d8:	8f a7       	std	Y+47, r24	; 0x2f
    31da:	3f c0       	rjmp	.+126    	; 0x325a <Stepper_u8Rotation+0x7fa>
	else if (__tmp > 65535)
    31dc:	69 a9       	ldd	r22, Y+49	; 0x31
    31de:	7a a9       	ldd	r23, Y+50	; 0x32
    31e0:	8b a9       	ldd	r24, Y+51	; 0x33
    31e2:	9c a9       	ldd	r25, Y+52	; 0x34
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	3f ef       	ldi	r19, 0xFF	; 255
    31e8:	4f e7       	ldi	r20, 0x7F	; 127
    31ea:	57 e4       	ldi	r21, 0x47	; 71
    31ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31f0:	18 16       	cp	r1, r24
    31f2:	4c f5       	brge	.+82     	; 0x3246 <Stepper_u8Rotation+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f4:	6d a9       	ldd	r22, Y+53	; 0x35
    31f6:	7e a9       	ldd	r23, Y+54	; 0x36
    31f8:	8f a9       	ldd	r24, Y+55	; 0x37
    31fa:	98 ad       	ldd	r25, Y+56	; 0x38
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e2       	ldi	r20, 0x20	; 32
    3202:	51 e4       	ldi	r21, 0x41	; 65
    3204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	bc 01       	movw	r22, r24
    320e:	cd 01       	movw	r24, r26
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	98 ab       	std	Y+48, r25	; 0x30
    321a:	8f a7       	std	Y+47, r24	; 0x2f
    321c:	0f c0       	rjmp	.+30     	; 0x323c <Stepper_u8Rotation+0x7dc>
    321e:	88 ec       	ldi	r24, 0xC8	; 200
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	9e a7       	std	Y+46, r25	; 0x2e
    3224:	8d a7       	std	Y+45, r24	; 0x2d
    3226:	8d a5       	ldd	r24, Y+45	; 0x2d
    3228:	9e a5       	ldd	r25, Y+46	; 0x2e
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	f1 f7       	brne	.-4      	; 0x322a <Stepper_u8Rotation+0x7ca>
    322e:	9e a7       	std	Y+46, r25	; 0x2e
    3230:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3232:	8f a5       	ldd	r24, Y+47	; 0x2f
    3234:	98 a9       	ldd	r25, Y+48	; 0x30
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	98 ab       	std	Y+48, r25	; 0x30
    323a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323c:	8f a5       	ldd	r24, Y+47	; 0x2f
    323e:	98 a9       	ldd	r25, Y+48	; 0x30
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	69 f7       	brne	.-38     	; 0x321e <Stepper_u8Rotation+0x7be>
    3244:	14 c0       	rjmp	.+40     	; 0x326e <Stepper_u8Rotation+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3246:	69 a9       	ldd	r22, Y+49	; 0x31
    3248:	7a a9       	ldd	r23, Y+50	; 0x32
    324a:	8b a9       	ldd	r24, Y+51	; 0x33
    324c:	9c a9       	ldd	r25, Y+52	; 0x34
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	98 ab       	std	Y+48, r25	; 0x30
    3258:	8f a7       	std	Y+47, r24	; 0x2f
    325a:	8f a5       	ldd	r24, Y+47	; 0x2f
    325c:	98 a9       	ldd	r25, Y+48	; 0x30
    325e:	9c a7       	std	Y+44, r25	; 0x2c
    3260:	8b a7       	std	Y+43, r24	; 0x2b
    3262:	8b a5       	ldd	r24, Y+43	; 0x2b
    3264:	9c a5       	ldd	r25, Y+44	; 0x2c
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <Stepper_u8Rotation+0x806>
    326a:	9c a7       	std	Y+44, r25	; 0x2c
    326c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);

        //STEP 2
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    326e:	82 e0       	ldi	r24, 0x02	; 2
    3270:	63 e0       	ldi	r22, 0x03	; 3
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    3278:	82 e0       	ldi	r24, 0x02	; 2
    327a:	64 e0       	ldi	r22, 0x04	; 4
    327c:	40 e0       	ldi	r20, 0x00	; 0
    327e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    3282:	82 e0       	ldi	r24, 0x02	; 2
    3284:	65 e0       	ldi	r22, 0x05	; 5
    3286:	41 e0       	ldi	r20, 0x01	; 1
    3288:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    328c:	82 e0       	ldi	r24, 0x02	; 2
    328e:	66 e0       	ldi	r22, 0x06	; 6
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	a0 ea       	ldi	r26, 0xA0	; 160
    329c:	b0 e4       	ldi	r27, 0x40	; 64
    329e:	8f a3       	std	Y+39, r24	; 0x27
    32a0:	98 a7       	std	Y+40, r25	; 0x28
    32a2:	a9 a7       	std	Y+41, r26	; 0x29
    32a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a6:	6f a1       	ldd	r22, Y+39	; 0x27
    32a8:	78 a5       	ldd	r23, Y+40	; 0x28
    32aa:	89 a5       	ldd	r24, Y+41	; 0x29
    32ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	4a ef       	ldi	r20, 0xFA	; 250
    32b4:	54 e4       	ldi	r21, 0x44	; 68
    32b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	8b a3       	std	Y+35, r24	; 0x23
    32c0:	9c a3       	std	Y+36, r25	; 0x24
    32c2:	ad a3       	std	Y+37, r26	; 0x25
    32c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32c6:	6b a1       	ldd	r22, Y+35	; 0x23
    32c8:	7c a1       	ldd	r23, Y+36	; 0x24
    32ca:	8d a1       	ldd	r24, Y+37	; 0x25
    32cc:	9e a1       	ldd	r25, Y+38	; 0x26
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e8       	ldi	r20, 0x80	; 128
    32d4:	5f e3       	ldi	r21, 0x3F	; 63
    32d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32da:	88 23       	and	r24, r24
    32dc:	2c f4       	brge	.+10     	; 0x32e8 <Stepper_u8Rotation+0x888>
		__ticks = 1;
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	9a a3       	std	Y+34, r25	; 0x22
    32e4:	89 a3       	std	Y+33, r24	; 0x21
    32e6:	3f c0       	rjmp	.+126    	; 0x3366 <Stepper_u8Rotation+0x906>
	else if (__tmp > 65535)
    32e8:	6b a1       	ldd	r22, Y+35	; 0x23
    32ea:	7c a1       	ldd	r23, Y+36	; 0x24
    32ec:	8d a1       	ldd	r24, Y+37	; 0x25
    32ee:	9e a1       	ldd	r25, Y+38	; 0x26
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	3f ef       	ldi	r19, 0xFF	; 255
    32f4:	4f e7       	ldi	r20, 0x7F	; 127
    32f6:	57 e4       	ldi	r21, 0x47	; 71
    32f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32fc:	18 16       	cp	r1, r24
    32fe:	4c f5       	brge	.+82     	; 0x3352 <Stepper_u8Rotation+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3300:	6f a1       	ldd	r22, Y+39	; 0x27
    3302:	78 a5       	ldd	r23, Y+40	; 0x28
    3304:	89 a5       	ldd	r24, Y+41	; 0x29
    3306:	9a a5       	ldd	r25, Y+42	; 0x2a
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e2       	ldi	r20, 0x20	; 32
    330e:	51 e4       	ldi	r21, 0x41	; 65
    3310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	bc 01       	movw	r22, r24
    331a:	cd 01       	movw	r24, r26
    331c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	9a a3       	std	Y+34, r25	; 0x22
    3326:	89 a3       	std	Y+33, r24	; 0x21
    3328:	0f c0       	rjmp	.+30     	; 0x3348 <Stepper_u8Rotation+0x8e8>
    332a:	88 ec       	ldi	r24, 0xC8	; 200
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	98 a3       	std	Y+32, r25	; 0x20
    3330:	8f 8f       	std	Y+31, r24	; 0x1f
    3332:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3334:	98 a1       	ldd	r25, Y+32	; 0x20
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <Stepper_u8Rotation+0x8d6>
    333a:	98 a3       	std	Y+32, r25	; 0x20
    333c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333e:	89 a1       	ldd	r24, Y+33	; 0x21
    3340:	9a a1       	ldd	r25, Y+34	; 0x22
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	9a a3       	std	Y+34, r25	; 0x22
    3346:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3348:	89 a1       	ldd	r24, Y+33	; 0x21
    334a:	9a a1       	ldd	r25, Y+34	; 0x22
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	69 f7       	brne	.-38     	; 0x332a <Stepper_u8Rotation+0x8ca>
    3350:	14 c0       	rjmp	.+40     	; 0x337a <Stepper_u8Rotation+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3352:	6b a1       	ldd	r22, Y+35	; 0x23
    3354:	7c a1       	ldd	r23, Y+36	; 0x24
    3356:	8d a1       	ldd	r24, Y+37	; 0x25
    3358:	9e a1       	ldd	r25, Y+38	; 0x26
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	9a a3       	std	Y+34, r25	; 0x22
    3364:	89 a3       	std	Y+33, r24	; 0x21
    3366:	89 a1       	ldd	r24, Y+33	; 0x21
    3368:	9a a1       	ldd	r25, Y+34	; 0x22
    336a:	9e 8f       	std	Y+30, r25	; 0x1e
    336c:	8d 8f       	std	Y+29, r24	; 0x1d
    336e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3370:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <Stepper_u8Rotation+0x912>
    3376:	9e 8f       	std	Y+30, r25	; 0x1e
    3378:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);

        //STEP 3
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    337a:	82 e0       	ldi	r24, 0x02	; 2
    337c:	63 e0       	ldi	r22, 0x03	; 3
    337e:	40 e0       	ldi	r20, 0x00	; 0
    3380:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	64 e0       	ldi	r22, 0x04	; 4
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    338e:	82 e0       	ldi	r24, 0x02	; 2
    3390:	65 e0       	ldi	r22, 0x05	; 5
    3392:	40 e0       	ldi	r20, 0x00	; 0
    3394:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	66 e0       	ldi	r22, 0x06	; 6
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a0 ea       	ldi	r26, 0xA0	; 160
    33a8:	b0 e4       	ldi	r27, 0x40	; 64
    33aa:	89 8f       	std	Y+25, r24	; 0x19
    33ac:	9a 8f       	std	Y+26, r25	; 0x1a
    33ae:	ab 8f       	std	Y+27, r26	; 0x1b
    33b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b2:	69 8d       	ldd	r22, Y+25	; 0x19
    33b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4a ef       	ldi	r20, 0xFA	; 250
    33c0:	54 e4       	ldi	r21, 0x44	; 68
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	8d 8b       	std	Y+21, r24	; 0x15
    33cc:	9e 8b       	std	Y+22, r25	; 0x16
    33ce:	af 8b       	std	Y+23, r26	; 0x17
    33d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33d2:	6d 89       	ldd	r22, Y+21	; 0x15
    33d4:	7e 89       	ldd	r23, Y+22	; 0x16
    33d6:	8f 89       	ldd	r24, Y+23	; 0x17
    33d8:	98 8d       	ldd	r25, Y+24	; 0x18
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <Stepper_u8Rotation+0x994>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9c 8b       	std	Y+20, r25	; 0x14
    33f0:	8b 8b       	std	Y+19, r24	; 0x13
    33f2:	3f c0       	rjmp	.+126    	; 0x3472 <Stepper_u8Rotation+0xa12>
	else if (__tmp > 65535)
    33f4:	6d 89       	ldd	r22, Y+21	; 0x15
    33f6:	7e 89       	ldd	r23, Y+22	; 0x16
    33f8:	8f 89       	ldd	r24, Y+23	; 0x17
    33fa:	98 8d       	ldd	r25, Y+24	; 0x18
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	4c f5       	brge	.+82     	; 0x345e <Stepper_u8Rotation+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	69 8d       	ldd	r22, Y+25	; 0x19
    340e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9c 8b       	std	Y+20, r25	; 0x14
    3432:	8b 8b       	std	Y+19, r24	; 0x13
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <Stepper_u8Rotation+0x9f4>
    3436:	88 ec       	ldi	r24, 0xC8	; 200
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9a 8b       	std	Y+18, r25	; 0x12
    343c:	89 8b       	std	Y+17, r24	; 0x11
    343e:	89 89       	ldd	r24, Y+17	; 0x11
    3440:	9a 89       	ldd	r25, Y+18	; 0x12
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <Stepper_u8Rotation+0x9e2>
    3446:	9a 8b       	std	Y+18, r25	; 0x12
    3448:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344a:	8b 89       	ldd	r24, Y+19	; 0x13
    344c:	9c 89       	ldd	r25, Y+20	; 0x14
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	9c 8b       	std	Y+20, r25	; 0x14
    3452:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	8b 89       	ldd	r24, Y+19	; 0x13
    3456:	9c 89       	ldd	r25, Y+20	; 0x14
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	69 f7       	brne	.-38     	; 0x3436 <Stepper_u8Rotation+0x9d6>
    345c:	14 c0       	rjmp	.+40     	; 0x3486 <Stepper_u8Rotation+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	6d 89       	ldd	r22, Y+21	; 0x15
    3460:	7e 89       	ldd	r23, Y+22	; 0x16
    3462:	8f 89       	ldd	r24, Y+23	; 0x17
    3464:	98 8d       	ldd	r25, Y+24	; 0x18
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9c 8b       	std	Y+20, r25	; 0x14
    3470:	8b 8b       	std	Y+19, r24	; 0x13
    3472:	8b 89       	ldd	r24, Y+19	; 0x13
    3474:	9c 89       	ldd	r25, Y+20	; 0x14
    3476:	98 8b       	std	Y+16, r25	; 0x10
    3478:	8f 87       	std	Y+15, r24	; 0x0f
    347a:	8f 85       	ldd	r24, Y+15	; 0x0f
    347c:	98 89       	ldd	r25, Y+16	; 0x10
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <Stepper_u8Rotation+0xa1e>
    3482:	98 8b       	std	Y+16, r25	; 0x10
    3484:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

        //STEP 4
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    3486:	82 e0       	ldi	r24, 0x02	; 2
    3488:	63 e0       	ldi	r22, 0x03	; 3
    348a:	41 e0       	ldi	r20, 0x01	; 1
    348c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    3490:	82 e0       	ldi	r24, 0x02	; 2
    3492:	64 e0       	ldi	r22, 0x04	; 4
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    349a:	82 e0       	ldi	r24, 0x02	; 2
    349c:	65 e0       	ldi	r22, 0x05	; 5
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    34a4:	82 e0       	ldi	r24, 0x02	; 2
    34a6:	66 e0       	ldi	r22, 0x06	; 6
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	a0 ea       	ldi	r26, 0xA0	; 160
    34b4:	b0 e4       	ldi	r27, 0x40	; 64
    34b6:	8b 87       	std	Y+11, r24	; 0x0b
    34b8:	9c 87       	std	Y+12, r25	; 0x0c
    34ba:	ad 87       	std	Y+13, r26	; 0x0d
    34bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34be:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	4a ef       	ldi	r20, 0xFA	; 250
    34cc:	54 e4       	ldi	r21, 0x44	; 68
    34ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	8f 83       	std	Y+7, r24	; 0x07
    34d8:	98 87       	std	Y+8, r25	; 0x08
    34da:	a9 87       	std	Y+9, r26	; 0x09
    34dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34de:	6f 81       	ldd	r22, Y+7	; 0x07
    34e0:	78 85       	ldd	r23, Y+8	; 0x08
    34e2:	89 85       	ldd	r24, Y+9	; 0x09
    34e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	40 e8       	ldi	r20, 0x80	; 128
    34ec:	5f e3       	ldi	r21, 0x3F	; 63
    34ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34f2:	88 23       	and	r24, r24
    34f4:	2c f4       	brge	.+10     	; 0x3500 <Stepper_u8Rotation+0xaa0>
		__ticks = 1;
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	3f c0       	rjmp	.+126    	; 0x357e <Stepper_u8Rotation+0xb1e>
	else if (__tmp > 65535)
    3500:	6f 81       	ldd	r22, Y+7	; 0x07
    3502:	78 85       	ldd	r23, Y+8	; 0x08
    3504:	89 85       	ldd	r24, Y+9	; 0x09
    3506:	9a 85       	ldd	r25, Y+10	; 0x0a
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	3f ef       	ldi	r19, 0xFF	; 255
    350c:	4f e7       	ldi	r20, 0x7F	; 127
    350e:	57 e4       	ldi	r21, 0x47	; 71
    3510:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3514:	18 16       	cp	r1, r24
    3516:	4c f5       	brge	.+82     	; 0x356a <Stepper_u8Rotation+0xb0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3518:	6b 85       	ldd	r22, Y+11	; 0x0b
    351a:	7c 85       	ldd	r23, Y+12	; 0x0c
    351c:	8d 85       	ldd	r24, Y+13	; 0x0d
    351e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e2       	ldi	r20, 0x20	; 32
    3526:	51 e4       	ldi	r21, 0x41	; 65
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	0f c0       	rjmp	.+30     	; 0x3560 <Stepper_u8Rotation+0xb00>
    3542:	88 ec       	ldi	r24, 0xC8	; 200
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	9c 83       	std	Y+4, r25	; 0x04
    3548:	8b 83       	std	Y+3, r24	; 0x03
    354a:	8b 81       	ldd	r24, Y+3	; 0x03
    354c:	9c 81       	ldd	r25, Y+4	; 0x04
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	f1 f7       	brne	.-4      	; 0x354e <Stepper_u8Rotation+0xaee>
    3552:	9c 83       	std	Y+4, r25	; 0x04
    3554:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3556:	8d 81       	ldd	r24, Y+5	; 0x05
    3558:	9e 81       	ldd	r25, Y+6	; 0x06
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	9e 83       	std	Y+6, r25	; 0x06
    355e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3560:	8d 81       	ldd	r24, Y+5	; 0x05
    3562:	9e 81       	ldd	r25, Y+6	; 0x06
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	69 f7       	brne	.-38     	; 0x3542 <Stepper_u8Rotation+0xae2>
    3568:	14 c0       	rjmp	.+40     	; 0x3592 <Stepper_u8Rotation+0xb32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356a:	6f 81       	ldd	r22, Y+7	; 0x07
    356c:	78 85       	ldd	r23, Y+8	; 0x08
    356e:	89 85       	ldd	r24, Y+9	; 0x09
    3570:	9a 85       	ldd	r25, Y+10	; 0x0a
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	9a 83       	std	Y+2, r25	; 0x02
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	9a 81       	ldd	r25, Y+2	; 0x02
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <Stepper_u8Rotation+0xb2a>
    358e:	9a 83       	std	Y+2, r25	; 0x02
    3590:	89 83       	std	Y+1, r24	; 0x01

		}
		}
		else if(Copy_u8Direction == Clockwise)
		{
		for(i=0; i < NumberofSteps ; i++)
    3592:	80 91 42 01 	lds	r24, 0x0142
    3596:	90 91 43 01 	lds	r25, 0x0143
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	90 93 43 01 	sts	0x0143, r25
    35a0:	80 93 42 01 	sts	0x0142, r24
    35a4:	80 91 42 01 	lds	r24, 0x0142
    35a8:	90 91 43 01 	lds	r25, 0x0143
    35ac:	9c 01       	movw	r18, r24
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	fe 01       	movw	r30, r28
    35b4:	ef 58       	subi	r30, 0x8F	; 143
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 81       	ld	r24, Z
    35ba:	91 81       	ldd	r25, Z+1	; 0x01
    35bc:	a2 81       	ldd	r26, Z+2	; 0x02
    35be:	b3 81       	ldd	r27, Z+3	; 0x03
    35c0:	28 17       	cp	r18, r24
    35c2:	39 07       	cpc	r19, r25
    35c4:	4a 07       	cpc	r20, r26
    35c6:	5b 07       	cpc	r21, r27
    35c8:	08 f4       	brcc	.+2      	; 0x35cc <Stepper_u8Rotation+0xb6c>
    35ca:	cb cd       	rjmp	.-1130   	; 0x3162 <Stepper_u8Rotation+0x702>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
		_delay_ms(5);
		}
		}
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    35cc:	82 e0       	ldi	r24, 0x02	; 2
    35ce:	63 e0       	ldi	r22, 0x03	; 3
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	64 e0       	ldi	r22, 0x04	; 4
    35da:	40 e0       	ldi	r20, 0x00	; 0
    35dc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	65 e0       	ldi	r22, 0x05	; 5
    35e4:	40 e0       	ldi	r20, 0x00	; 0
    35e6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    35ea:	82 e0       	ldi	r24, 0x02	; 2
    35ec:	66 e0       	ldi	r22, 0x06	; 6
    35ee:	40 e0       	ldi	r20, 0x00	; 0
    35f0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    35f4:	02 c0       	rjmp	.+4      	; 0x35fa <Stepper_u8Rotation+0xb9a>
		
		
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    35f6:	10 92 44 01 	sts	0x0144, r1
	}
	return Local_u8ErrorState;
    35fa:	80 91 44 01 	lds	r24, 0x0144
}
    35fe:	c9 58       	subi	r28, 0x89	; 137
    3600:	df 4f       	sbci	r29, 0xFF	; 255
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	08 95       	ret

00003616 <Stepper_voidStop>:

void Stepper_voidStop(void)
{
    3616:	df 93       	push	r29
    3618:	cf 93       	push	r28
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	63 e0       	ldi	r22, 0x03	; 3
    3622:	40 e0       	ldi	r20, 0x00	; 0
    3624:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    3628:	82 e0       	ldi	r24, 0x02	; 2
    362a:	64 e0       	ldi	r22, 0x04	; 4
    362c:	40 e0       	ldi	r20, 0x00	; 0
    362e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    3632:	82 e0       	ldi	r24, 0x02	; 2
    3634:	65 e0       	ldi	r22, 0x05	; 5
    3636:	40 e0       	ldi	r20, 0x00	; 0
    3638:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	66 e0       	ldi	r22, 0x06	; 6
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>

}
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <DC_voidRotation>:

void DC_voidRotation(u8 Copy_u8Direction)
{
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	0f 92       	push	r0
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == Clockwise)
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	88 23       	and	r24, r24
    365c:	59 f4       	brne	.+22     	; 0x3674 <DC_voidRotation+0x28>
	{
		DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_LOW);
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	61 e0       	ldi	r22, 0x01	; 1
    3662:	40 e0       	ldi	r20, 0x00	; 0
    3664:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_HIGH);
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	41 e0       	ldi	r20, 0x01	; 1
    366e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    3672:	0d c0       	rjmp	.+26     	; 0x368e <DC_voidRotation+0x42>
	}
	else if(Copy_u8Direction == AntiClockwise)
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	51 f4       	brne	.+20     	; 0x368e <DC_voidRotation+0x42>
	{
		DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_LOW);
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	40 e0       	ldi	r20, 0x00	; 0
    3680:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_HIGH);
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	61 e0       	ldi	r22, 0x01	; 1
    3688:	41 e0       	ldi	r20, 0x01	; 1
    368a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	}


}
    368e:	0f 90       	pop	r0
    3690:	cf 91       	pop	r28
    3692:	df 91       	pop	r29
    3694:	08 95       	ret

00003696 <DC_voidStop>:

void DC_voidStop(void)
{
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_LOW);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	60 e0       	ldi	r22, 0x00	; 0
    36a2:	40 e0       	ldi	r20, 0x00	; 0
    36a4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_LOW);
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	61 e0       	ldi	r22, 0x01	; 1
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
}
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <main>:
#include "LCD_interface.h"
#include "KPD_interface.h"
#include "STP_interface.h"

int main(void)
{
    36b8:	0f 93       	push	r16
    36ba:	1f 93       	push	r17
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	cb 58       	subi	r28, 0x8B	; 139
    36c6:	d0 40       	sbci	r29, 0x00	; 0
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Key,Operator = 0,counter=0 , counter2=0,flag =0,flag2=0,flag3=0 ,Dir=0;
    36d2:	fe 01       	movw	r30, r28
    36d4:	e0 58       	subi	r30, 0x80	; 128
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	10 82       	st	Z, r1
    36da:	fe 01       	movw	r30, r28
    36dc:	e1 58       	subi	r30, 0x81	; 129
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	10 82       	st	Z, r1
    36e2:	fe 01       	movw	r30, r28
    36e4:	e2 58       	subi	r30, 0x82	; 130
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	10 82       	st	Z, r1
    36ea:	fe 01       	movw	r30, r28
    36ec:	e3 58       	subi	r30, 0x83	; 131
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	10 82       	st	Z, r1
    36f2:	fe 01       	movw	r30, r28
    36f4:	e4 58       	subi	r30, 0x84	; 132
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	10 82       	st	Z, r1
    36fa:	fe 01       	movw	r30, r28
    36fc:	e5 58       	subi	r30, 0x85	; 133
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	10 82       	st	Z, r1
    3702:	fe 01       	movw	r30, r28
    3704:	e6 58       	subi	r30, 0x86	; 134
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	10 82       	st	Z, r1
    u16 password = 2580 ,value , Num1=0,Num2=0;
    370a:	fe 01       	movw	r30, r28
    370c:	e8 58       	subi	r30, 0x88	; 136
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	84 e1       	ldi	r24, 0x14	; 20
    3712:	9a e0       	ldi	r25, 0x0A	; 10
    3714:	91 83       	std	Z+1, r25	; 0x01
    3716:	80 83       	st	Z, r24
    3718:	fe 01       	movw	r30, r28
    371a:	ec 58       	subi	r30, 0x8C	; 140
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	11 82       	std	Z+1, r1	; 0x01
    3720:	10 82       	st	Z, r1
    3722:	fe 01       	movw	r30, r28
    3724:	ee 58       	subi	r30, 0x8E	; 142
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	11 82       	std	Z+1, r1	; 0x01
    372a:	10 82       	st	Z, r1
	DIO_u8Init();
    372c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8Init>
	 Start:
	LCD_voidInit();
    3730:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_voidInit>
	LCD_voidWriteString("Enter Passcode :");
    3734:	80 e6       	ldi	r24, 0x60	; 96
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
	LCD_u8_GoTo_XY(1,4);
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	64 e0       	ldi	r22, 0x04	; 4
    3740:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>


	    while(1)
	    {

          KPD_u8GetKey(&Local_u8Key);
    3744:	ce 01       	movw	r24, r28
    3746:	8f 57       	subi	r24, 0x7F	; 127
    3748:	9f 4f       	sbci	r25, 0xFF	; 255
    374a:	0e 94 16 0b 	call	0x162c	; 0x162c <KPD_u8GetKey>
	       if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    374e:	fe 01       	movw	r30, r28
    3750:	ef 57       	subi	r30, 0x7F	; 127
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	8f 3f       	cpi	r24, 0xFF	; 255
    3758:	a9 f3       	breq	.-22     	; 0x3744 <main+0x8c>
	       {
	    	   if(counter<4)
    375a:	fe 01       	movw	r30, r28
    375c:	e1 58       	subi	r30, 0x81	; 129
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 81       	ld	r24, Z
    3762:	84 30       	cpi	r24, 0x04	; 4
    3764:	08 f0       	brcs	.+2      	; 0x3768 <main+0xb0>
    3766:	11 c2       	rjmp	.+1058   	; 0x3b8a <main+0x4d2>
	    	   {
	    		   counter++;
    3768:	de 01       	movw	r26, r28
    376a:	a1 58       	subi	r26, 0x81	; 129
    376c:	bf 4f       	sbci	r27, 0xFF	; 255
    376e:	fe 01       	movw	r30, r28
    3770:	e1 58       	subi	r30, 0x81	; 129
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	80 81       	ld	r24, Z
    3776:	8f 5f       	subi	r24, 0xFF	; 255
    3778:	8c 93       	st	X, r24

	    	   switch(Local_u8Key)
    377a:	fe 01       	movw	r30, r28
    377c:	ef 57       	subi	r30, 0x7F	; 127
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 81       	ld	r24, Z
    3782:	28 2f       	mov	r18, r24
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	c6 57       	subi	r28, 0x76	; 118
    3788:	df 4f       	sbci	r29, 0xFF	; 255
    378a:	39 83       	std	Y+1, r19	; 0x01
    378c:	28 83       	st	Y, r18
    378e:	ca 58       	subi	r28, 0x8A	; 138
    3790:	d0 40       	sbci	r29, 0x00	; 0
    3792:	c6 57       	subi	r28, 0x76	; 118
    3794:	df 4f       	sbci	r29, 0xFF	; 255
    3796:	88 81       	ld	r24, Y
    3798:	99 81       	ldd	r25, Y+1	; 0x01
    379a:	ca 58       	subi	r28, 0x8A	; 138
    379c:	d0 40       	sbci	r29, 0x00	; 0
    379e:	84 33       	cpi	r24, 0x34	; 52
    37a0:	91 05       	cpc	r25, r1
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <main+0xee>
    37a4:	0f c1       	rjmp	.+542    	; 0x39c4 <main+0x30c>
    37a6:	c6 57       	subi	r28, 0x76	; 118
    37a8:	df 4f       	sbci	r29, 0xFF	; 255
    37aa:	e8 81       	ld	r30, Y
    37ac:	f9 81       	ldd	r31, Y+1	; 0x01
    37ae:	ca 58       	subi	r28, 0x8A	; 138
    37b0:	d0 40       	sbci	r29, 0x00	; 0
    37b2:	e5 33       	cpi	r30, 0x35	; 53
    37b4:	f1 05       	cpc	r31, r1
    37b6:	9c f5       	brge	.+102    	; 0x381e <main+0x166>
    37b8:	c6 57       	subi	r28, 0x76	; 118
    37ba:	df 4f       	sbci	r29, 0xFF	; 255
    37bc:	28 81       	ld	r18, Y
    37be:	39 81       	ldd	r19, Y+1	; 0x01
    37c0:	ca 58       	subi	r28, 0x8A	; 138
    37c2:	d0 40       	sbci	r29, 0x00	; 0
    37c4:	21 33       	cpi	r18, 0x31	; 49
    37c6:	31 05       	cpc	r19, r1
    37c8:	09 f4       	brne	.+2      	; 0x37cc <main+0x114>
    37ca:	8a c0       	rjmp	.+276    	; 0x38e0 <main+0x228>
    37cc:	c6 57       	subi	r28, 0x76	; 118
    37ce:	df 4f       	sbci	r29, 0xFF	; 255
    37d0:	88 81       	ld	r24, Y
    37d2:	99 81       	ldd	r25, Y+1	; 0x01
    37d4:	ca 58       	subi	r28, 0x8A	; 138
    37d6:	d0 40       	sbci	r29, 0x00	; 0
    37d8:	82 33       	cpi	r24, 0x32	; 50
    37da:	91 05       	cpc	r25, r1
    37dc:	5c f4       	brge	.+22     	; 0x37f4 <main+0x13c>
    37de:	c6 57       	subi	r28, 0x76	; 118
    37e0:	df 4f       	sbci	r29, 0xFF	; 255
    37e2:	e8 81       	ld	r30, Y
    37e4:	f9 81       	ldd	r31, Y+1	; 0x01
    37e6:	ca 58       	subi	r28, 0x8A	; 138
    37e8:	d0 40       	sbci	r29, 0x00	; 0
    37ea:	e0 33       	cpi	r30, 0x30	; 48
    37ec:	f1 05       	cpc	r31, r1
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <main+0x13a>
    37f0:	53 c0       	rjmp	.+166    	; 0x3898 <main+0x1e0>
    37f2:	cb c1       	rjmp	.+918    	; 0x3b8a <main+0x4d2>
    37f4:	c6 57       	subi	r28, 0x76	; 118
    37f6:	df 4f       	sbci	r29, 0xFF	; 255
    37f8:	28 81       	ld	r18, Y
    37fa:	39 81       	ldd	r19, Y+1	; 0x01
    37fc:	ca 58       	subi	r28, 0x8A	; 138
    37fe:	d0 40       	sbci	r29, 0x00	; 0
    3800:	22 33       	cpi	r18, 0x32	; 50
    3802:	31 05       	cpc	r19, r1
    3804:	09 f4       	brne	.+2      	; 0x3808 <main+0x150>
    3806:	92 c0       	rjmp	.+292    	; 0x392c <main+0x274>
    3808:	c6 57       	subi	r28, 0x76	; 118
    380a:	df 4f       	sbci	r29, 0xFF	; 255
    380c:	88 81       	ld	r24, Y
    380e:	99 81       	ldd	r25, Y+1	; 0x01
    3810:	ca 58       	subi	r28, 0x8A	; 138
    3812:	d0 40       	sbci	r29, 0x00	; 0
    3814:	83 33       	cpi	r24, 0x33	; 51
    3816:	91 05       	cpc	r25, r1
    3818:	09 f4       	brne	.+2      	; 0x381c <main+0x164>
    381a:	ae c0       	rjmp	.+348    	; 0x3978 <main+0x2c0>
    381c:	b6 c1       	rjmp	.+876    	; 0x3b8a <main+0x4d2>
    381e:	c6 57       	subi	r28, 0x76	; 118
    3820:	df 4f       	sbci	r29, 0xFF	; 255
    3822:	e8 81       	ld	r30, Y
    3824:	f9 81       	ldd	r31, Y+1	; 0x01
    3826:	ca 58       	subi	r28, 0x8A	; 138
    3828:	d0 40       	sbci	r29, 0x00	; 0
    382a:	e7 33       	cpi	r30, 0x37	; 55
    382c:	f1 05       	cpc	r31, r1
    382e:	09 f4       	brne	.+2      	; 0x3832 <main+0x17a>
    3830:	3b c1       	rjmp	.+630    	; 0x3aa8 <main+0x3f0>
    3832:	c6 57       	subi	r28, 0x76	; 118
    3834:	df 4f       	sbci	r29, 0xFF	; 255
    3836:	28 81       	ld	r18, Y
    3838:	39 81       	ldd	r19, Y+1	; 0x01
    383a:	ca 58       	subi	r28, 0x8A	; 138
    383c:	d0 40       	sbci	r29, 0x00	; 0
    383e:	28 33       	cpi	r18, 0x38	; 56
    3840:	31 05       	cpc	r19, r1
    3842:	ac f4       	brge	.+42     	; 0x386e <main+0x1b6>
    3844:	c6 57       	subi	r28, 0x76	; 118
    3846:	df 4f       	sbci	r29, 0xFF	; 255
    3848:	88 81       	ld	r24, Y
    384a:	99 81       	ldd	r25, Y+1	; 0x01
    384c:	ca 58       	subi	r28, 0x8A	; 138
    384e:	d0 40       	sbci	r29, 0x00	; 0
    3850:	85 33       	cpi	r24, 0x35	; 53
    3852:	91 05       	cpc	r25, r1
    3854:	09 f4       	brne	.+2      	; 0x3858 <main+0x1a0>
    3856:	dc c0       	rjmp	.+440    	; 0x3a10 <main+0x358>
    3858:	c6 57       	subi	r28, 0x76	; 118
    385a:	df 4f       	sbci	r29, 0xFF	; 255
    385c:	e8 81       	ld	r30, Y
    385e:	f9 81       	ldd	r31, Y+1	; 0x01
    3860:	ca 58       	subi	r28, 0x8A	; 138
    3862:	d0 40       	sbci	r29, 0x00	; 0
    3864:	e6 33       	cpi	r30, 0x36	; 54
    3866:	f1 05       	cpc	r31, r1
    3868:	09 f4       	brne	.+2      	; 0x386c <main+0x1b4>
    386a:	f8 c0       	rjmp	.+496    	; 0x3a5c <main+0x3a4>
    386c:	8e c1       	rjmp	.+796    	; 0x3b8a <main+0x4d2>
    386e:	c6 57       	subi	r28, 0x76	; 118
    3870:	df 4f       	sbci	r29, 0xFF	; 255
    3872:	28 81       	ld	r18, Y
    3874:	39 81       	ldd	r19, Y+1	; 0x01
    3876:	ca 58       	subi	r28, 0x8A	; 138
    3878:	d0 40       	sbci	r29, 0x00	; 0
    387a:	28 33       	cpi	r18, 0x38	; 56
    387c:	31 05       	cpc	r19, r1
    387e:	09 f4       	brne	.+2      	; 0x3882 <main+0x1ca>
    3880:	39 c1       	rjmp	.+626    	; 0x3af4 <main+0x43c>
    3882:	c6 57       	subi	r28, 0x76	; 118
    3884:	df 4f       	sbci	r29, 0xFF	; 255
    3886:	88 81       	ld	r24, Y
    3888:	99 81       	ldd	r25, Y+1	; 0x01
    388a:	ca 58       	subi	r28, 0x8A	; 138
    388c:	d0 40       	sbci	r29, 0x00	; 0
    388e:	89 33       	cpi	r24, 0x39	; 57
    3890:	91 05       	cpc	r25, r1
    3892:	09 f4       	brne	.+2      	; 0x3896 <main+0x1de>
    3894:	55 c1       	rjmp	.+682    	; 0x3b40 <main+0x488>
    3896:	79 c1       	rjmp	.+754    	; 0x3b8a <main+0x4d2>
	    	   {
	    	   case '0':
	    		   value =0;
    3898:	fe 01       	movw	r30, r28
    389a:	ea 58       	subi	r30, 0x8A	; 138
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	11 82       	std	Z+1, r1	; 0x01
    38a0:	10 82       	st	Z, r1
	    		   Num1 = (Num1*10) +value ;
    38a2:	fe 01       	movw	r30, r28
    38a4:	ec 58       	subi	r30, 0x8C	; 140
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	80 81       	ld	r24, Z
    38aa:	91 81       	ldd	r25, Z+1	; 0x01
    38ac:	9c 01       	movw	r18, r24
    38ae:	22 0f       	add	r18, r18
    38b0:	33 1f       	adc	r19, r19
    38b2:	c9 01       	movw	r24, r18
    38b4:	88 0f       	add	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	88 0f       	add	r24, r24
    38ba:	99 1f       	adc	r25, r25
    38bc:	28 0f       	add	r18, r24
    38be:	39 1f       	adc	r19, r25
    38c0:	de 01       	movw	r26, r28
    38c2:	ac 58       	subi	r26, 0x8C	; 140
    38c4:	bf 4f       	sbci	r27, 0xFF	; 255
    38c6:	fe 01       	movw	r30, r28
    38c8:	ea 58       	subi	r30, 0x8A	; 138
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	80 81       	ld	r24, Z
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	82 0f       	add	r24, r18
    38d2:	93 1f       	adc	r25, r19
    38d4:	8d 93       	st	X+, r24
    38d6:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    38d8:	8a e2       	ldi	r24, 0x2A	; 42
    38da:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    38de:	55 c1       	rjmp	.+682    	; 0x3b8a <main+0x4d2>
	    		   break;
	    	   case '1':
	    		   value =1;
    38e0:	fe 01       	movw	r30, r28
    38e2:	ea 58       	subi	r30, 0x8A	; 138
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	80 83       	st	Z, r24
	    		   Num1 = (Num1*10) +value ;
    38ee:	fe 01       	movw	r30, r28
    38f0:	ec 58       	subi	r30, 0x8C	; 140
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 81       	ld	r24, Z
    38f6:	91 81       	ldd	r25, Z+1	; 0x01
    38f8:	9c 01       	movw	r18, r24
    38fa:	22 0f       	add	r18, r18
    38fc:	33 1f       	adc	r19, r19
    38fe:	c9 01       	movw	r24, r18
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	28 0f       	add	r18, r24
    390a:	39 1f       	adc	r19, r25
    390c:	de 01       	movw	r26, r28
    390e:	ac 58       	subi	r26, 0x8C	; 140
    3910:	bf 4f       	sbci	r27, 0xFF	; 255
    3912:	fe 01       	movw	r30, r28
    3914:	ea 58       	subi	r30, 0x8A	; 138
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	80 81       	ld	r24, Z
    391a:	91 81       	ldd	r25, Z+1	; 0x01
    391c:	82 0f       	add	r24, r18
    391e:	93 1f       	adc	r25, r19
    3920:	8d 93       	st	X+, r24
    3922:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    3924:	8a e2       	ldi	r24, 0x2A	; 42
    3926:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    392a:	2f c1       	rjmp	.+606    	; 0x3b8a <main+0x4d2>
	    		   break;
	    	   case '2':
	    	       value =2;
    392c:	fe 01       	movw	r30, r28
    392e:	ea 58       	subi	r30, 0x8A	; 138
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	82 e0       	ldi	r24, 0x02	; 2
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	91 83       	std	Z+1, r25	; 0x01
    3938:	80 83       	st	Z, r24
	    	       Num1 = (Num1*10) +value ;
    393a:	fe 01       	movw	r30, r28
    393c:	ec 58       	subi	r30, 0x8C	; 140
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	9c 01       	movw	r18, r24
    3946:	22 0f       	add	r18, r18
    3948:	33 1f       	adc	r19, r19
    394a:	c9 01       	movw	r24, r18
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	28 0f       	add	r18, r24
    3956:	39 1f       	adc	r19, r25
    3958:	de 01       	movw	r26, r28
    395a:	ac 58       	subi	r26, 0x8C	; 140
    395c:	bf 4f       	sbci	r27, 0xFF	; 255
    395e:	fe 01       	movw	r30, r28
    3960:	ea 58       	subi	r30, 0x8A	; 138
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	80 81       	ld	r24, Z
    3966:	91 81       	ldd	r25, Z+1	; 0x01
    3968:	82 0f       	add	r24, r18
    396a:	93 1f       	adc	r25, r19
    396c:	8d 93       	st	X+, r24
    396e:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    3970:	8a e2       	ldi	r24, 0x2A	; 42
    3972:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    3976:	09 c1       	rjmp	.+530    	; 0x3b8a <main+0x4d2>
	    	       break;
	    	   case '3':
	    	       value =3;
    3978:	fe 01       	movw	r30, r28
    397a:	ea 58       	subi	r30, 0x8A	; 138
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	83 e0       	ldi	r24, 0x03	; 3
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	91 83       	std	Z+1, r25	; 0x01
    3984:	80 83       	st	Z, r24
	    	       Num1 = (Num1*10) +value ;
    3986:	fe 01       	movw	r30, r28
    3988:	ec 58       	subi	r30, 0x8C	; 140
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	9c 01       	movw	r18, r24
    3992:	22 0f       	add	r18, r18
    3994:	33 1f       	adc	r19, r19
    3996:	c9 01       	movw	r24, r18
    3998:	88 0f       	add	r24, r24
    399a:	99 1f       	adc	r25, r25
    399c:	88 0f       	add	r24, r24
    399e:	99 1f       	adc	r25, r25
    39a0:	28 0f       	add	r18, r24
    39a2:	39 1f       	adc	r19, r25
    39a4:	de 01       	movw	r26, r28
    39a6:	ac 58       	subi	r26, 0x8C	; 140
    39a8:	bf 4f       	sbci	r27, 0xFF	; 255
    39aa:	fe 01       	movw	r30, r28
    39ac:	ea 58       	subi	r30, 0x8A	; 138
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 81       	ld	r24, Z
    39b2:	91 81       	ldd	r25, Z+1	; 0x01
    39b4:	82 0f       	add	r24, r18
    39b6:	93 1f       	adc	r25, r19
    39b8:	8d 93       	st	X+, r24
    39ba:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    39bc:	8a e2       	ldi	r24, 0x2A	; 42
    39be:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    39c2:	e3 c0       	rjmp	.+454    	; 0x3b8a <main+0x4d2>
	    	       break;
	    	   case '4':
	    	       value =4;
    39c4:	fe 01       	movw	r30, r28
    39c6:	ea 58       	subi	r30, 0x8A	; 138
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	84 e0       	ldi	r24, 0x04	; 4
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	91 83       	std	Z+1, r25	; 0x01
    39d0:	80 83       	st	Z, r24
	    	       Num1 = (Num1*10) +value ;
    39d2:	fe 01       	movw	r30, r28
    39d4:	ec 58       	subi	r30, 0x8C	; 140
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	9c 01       	movw	r18, r24
    39de:	22 0f       	add	r18, r18
    39e0:	33 1f       	adc	r19, r19
    39e2:	c9 01       	movw	r24, r18
    39e4:	88 0f       	add	r24, r24
    39e6:	99 1f       	adc	r25, r25
    39e8:	88 0f       	add	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	28 0f       	add	r18, r24
    39ee:	39 1f       	adc	r19, r25
    39f0:	de 01       	movw	r26, r28
    39f2:	ac 58       	subi	r26, 0x8C	; 140
    39f4:	bf 4f       	sbci	r27, 0xFF	; 255
    39f6:	fe 01       	movw	r30, r28
    39f8:	ea 58       	subi	r30, 0x8A	; 138
    39fa:	ff 4f       	sbci	r31, 0xFF	; 255
    39fc:	80 81       	ld	r24, Z
    39fe:	91 81       	ldd	r25, Z+1	; 0x01
    3a00:	82 0f       	add	r24, r18
    3a02:	93 1f       	adc	r25, r19
    3a04:	8d 93       	st	X+, r24
    3a06:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    3a08:	8a e2       	ldi	r24, 0x2A	; 42
    3a0a:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    3a0e:	bd c0       	rjmp	.+378    	; 0x3b8a <main+0x4d2>
	    	       break;
	    	   case '5':
	    	       value =5;
    3a10:	fe 01       	movw	r30, r28
    3a12:	ea 58       	subi	r30, 0x8A	; 138
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	85 e0       	ldi	r24, 0x05	; 5
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	80 83       	st	Z, r24
	    	       Num1 = (Num1*10) +value ;
    3a1e:	fe 01       	movw	r30, r28
    3a20:	ec 58       	subi	r30, 0x8C	; 140
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	80 81       	ld	r24, Z
    3a26:	91 81       	ldd	r25, Z+1	; 0x01
    3a28:	9c 01       	movw	r18, r24
    3a2a:	22 0f       	add	r18, r18
    3a2c:	33 1f       	adc	r19, r19
    3a2e:	c9 01       	movw	r24, r18
    3a30:	88 0f       	add	r24, r24
    3a32:	99 1f       	adc	r25, r25
    3a34:	88 0f       	add	r24, r24
    3a36:	99 1f       	adc	r25, r25
    3a38:	28 0f       	add	r18, r24
    3a3a:	39 1f       	adc	r19, r25
    3a3c:	de 01       	movw	r26, r28
    3a3e:	ac 58       	subi	r26, 0x8C	; 140
    3a40:	bf 4f       	sbci	r27, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	ea 58       	subi	r30, 0x8A	; 138
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	80 81       	ld	r24, Z
    3a4a:	91 81       	ldd	r25, Z+1	; 0x01
    3a4c:	82 0f       	add	r24, r18
    3a4e:	93 1f       	adc	r25, r19
    3a50:	8d 93       	st	X+, r24
    3a52:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    3a54:	8a e2       	ldi	r24, 0x2A	; 42
    3a56:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    3a5a:	97 c0       	rjmp	.+302    	; 0x3b8a <main+0x4d2>
	    	       break;
	    	   case '6':
	    	       value =6;
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	ea 58       	subi	r30, 0x8A	; 138
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	86 e0       	ldi	r24, 0x06	; 6
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	91 83       	std	Z+1, r25	; 0x01
    3a68:	80 83       	st	Z, r24
	    	       Num1 = (Num1*10) +value ;
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	ec 58       	subi	r30, 0x8C	; 140
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	80 81       	ld	r24, Z
    3a72:	91 81       	ldd	r25, Z+1	; 0x01
    3a74:	9c 01       	movw	r18, r24
    3a76:	22 0f       	add	r18, r18
    3a78:	33 1f       	adc	r19, r19
    3a7a:	c9 01       	movw	r24, r18
    3a7c:	88 0f       	add	r24, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	88 0f       	add	r24, r24
    3a82:	99 1f       	adc	r25, r25
    3a84:	28 0f       	add	r18, r24
    3a86:	39 1f       	adc	r19, r25
    3a88:	de 01       	movw	r26, r28
    3a8a:	ac 58       	subi	r26, 0x8C	; 140
    3a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a8e:	fe 01       	movw	r30, r28
    3a90:	ea 58       	subi	r30, 0x8A	; 138
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	80 81       	ld	r24, Z
    3a96:	91 81       	ldd	r25, Z+1	; 0x01
    3a98:	82 0f       	add	r24, r18
    3a9a:	93 1f       	adc	r25, r19
    3a9c:	8d 93       	st	X+, r24
    3a9e:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    3aa0:	8a e2       	ldi	r24, 0x2A	; 42
    3aa2:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    3aa6:	71 c0       	rjmp	.+226    	; 0x3b8a <main+0x4d2>
	    	       break;
	    	   case '7':
	    	       value =7;
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ea 58       	subi	r30, 0x8A	; 138
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	87 e0       	ldi	r24, 0x07	; 7
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	91 83       	std	Z+1, r25	; 0x01
    3ab4:	80 83       	st	Z, r24
	    	       Num1 = (Num1*10) +value ;
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	ec 58       	subi	r30, 0x8C	; 140
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 81       	ld	r24, Z
    3abe:	91 81       	ldd	r25, Z+1	; 0x01
    3ac0:	9c 01       	movw	r18, r24
    3ac2:	22 0f       	add	r18, r18
    3ac4:	33 1f       	adc	r19, r19
    3ac6:	c9 01       	movw	r24, r18
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	88 0f       	add	r24, r24
    3ace:	99 1f       	adc	r25, r25
    3ad0:	28 0f       	add	r18, r24
    3ad2:	39 1f       	adc	r19, r25
    3ad4:	de 01       	movw	r26, r28
    3ad6:	ac 58       	subi	r26, 0x8C	; 140
    3ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    3ada:	fe 01       	movw	r30, r28
    3adc:	ea 58       	subi	r30, 0x8A	; 138
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	80 81       	ld	r24, Z
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	82 0f       	add	r24, r18
    3ae6:	93 1f       	adc	r25, r19
    3ae8:	8d 93       	st	X+, r24
    3aea:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    3aec:	8a e2       	ldi	r24, 0x2A	; 42
    3aee:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    3af2:	4b c0       	rjmp	.+150    	; 0x3b8a <main+0x4d2>
	    	        break;
	       	   case '8':
	        	   value =8;
    3af4:	fe 01       	movw	r30, r28
    3af6:	ea 58       	subi	r30, 0x8A	; 138
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	88 e0       	ldi	r24, 0x08	; 8
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	91 83       	std	Z+1, r25	; 0x01
    3b00:	80 83       	st	Z, r24
	        	   Num1 = (Num1*10) +value ;
    3b02:	fe 01       	movw	r30, r28
    3b04:	ec 58       	subi	r30, 0x8C	; 140
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	80 81       	ld	r24, Z
    3b0a:	91 81       	ldd	r25, Z+1	; 0x01
    3b0c:	9c 01       	movw	r18, r24
    3b0e:	22 0f       	add	r18, r18
    3b10:	33 1f       	adc	r19, r19
    3b12:	c9 01       	movw	r24, r18
    3b14:	88 0f       	add	r24, r24
    3b16:	99 1f       	adc	r25, r25
    3b18:	88 0f       	add	r24, r24
    3b1a:	99 1f       	adc	r25, r25
    3b1c:	28 0f       	add	r18, r24
    3b1e:	39 1f       	adc	r19, r25
    3b20:	de 01       	movw	r26, r28
    3b22:	ac 58       	subi	r26, 0x8C	; 140
    3b24:	bf 4f       	sbci	r27, 0xFF	; 255
    3b26:	fe 01       	movw	r30, r28
    3b28:	ea 58       	subi	r30, 0x8A	; 138
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	80 81       	ld	r24, Z
    3b2e:	91 81       	ldd	r25, Z+1	; 0x01
    3b30:	82 0f       	add	r24, r18
    3b32:	93 1f       	adc	r25, r19
    3b34:	8d 93       	st	X+, r24
    3b36:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    3b38:	8a e2       	ldi	r24, 0x2A	; 42
    3b3a:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    3b3e:	25 c0       	rjmp	.+74     	; 0x3b8a <main+0x4d2>
	        	    break;
	           case '9':
	        	   value =9;
    3b40:	fe 01       	movw	r30, r28
    3b42:	ea 58       	subi	r30, 0x8A	; 138
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	89 e0       	ldi	r24, 0x09	; 9
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	80 83       	st	Z, r24
	        	   Num1 = (Num1*10) +value ;
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ec 58       	subi	r30, 0x8C	; 140
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	9c 01       	movw	r18, r24
    3b5a:	22 0f       	add	r18, r18
    3b5c:	33 1f       	adc	r19, r19
    3b5e:	c9 01       	movw	r24, r18
    3b60:	88 0f       	add	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	88 0f       	add	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	28 0f       	add	r18, r24
    3b6a:	39 1f       	adc	r19, r25
    3b6c:	de 01       	movw	r26, r28
    3b6e:	ac 58       	subi	r26, 0x8C	; 140
    3b70:	bf 4f       	sbci	r27, 0xFF	; 255
    3b72:	fe 01       	movw	r30, r28
    3b74:	ea 58       	subi	r30, 0x8A	; 138
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	80 81       	ld	r24, Z
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	82 0f       	add	r24, r18
    3b7e:	93 1f       	adc	r25, r19
    3b80:	8d 93       	st	X+, r24
    3b82:	9c 93       	st	X, r25
	    		   LCD_voidSendChar('*');
    3b84:	8a e2       	ldi	r24, 0x2A	; 42
    3b86:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
	        	    break;
	    	   }

	    	   }
	    	   if(counter>3)
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	e1 58       	subi	r30, 0x81	; 129
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	80 81       	ld	r24, Z
    3b92:	84 30       	cpi	r24, 0x04	; 4
    3b94:	08 f4       	brcc	.+2      	; 0x3b98 <main+0x4e0>
    3b96:	d6 cd       	rjmp	.-1108   	; 0x3744 <main+0x8c>
	    	   {
	    		   if(Num1 == password)
    3b98:	fe 01       	movw	r30, r28
    3b9a:	ec 58       	subi	r30, 0x8C	; 140
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	de 01       	movw	r26, r28
    3ba0:	a8 58       	subi	r26, 0x88	; 136
    3ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba4:	20 81       	ld	r18, Z
    3ba6:	31 81       	ldd	r19, Z+1	; 0x01
    3ba8:	8d 91       	ld	r24, X+
    3baa:	9c 91       	ld	r25, X
    3bac:	11 97       	sbiw	r26, 0x01	; 1
    3bae:	28 17       	cp	r18, r24
    3bb0:	39 07       	cpc	r19, r25
    3bb2:	09 f0       	breq	.+2      	; 0x3bb6 <main+0x4fe>
    3bb4:	46 c6       	rjmp	.+3212   	; 0x4842 <main+0x118a>
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e3 59       	subi	r30, 0x93	; 147
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	aa e7       	ldi	r26, 0x7A	; 122
    3bc2:	b4 e4       	ldi	r27, 0x44	; 68
    3bc4:	80 83       	st	Z, r24
    3bc6:	91 83       	std	Z+1, r25	; 0x01
    3bc8:	a2 83       	std	Z+2, r26	; 0x02
    3bca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bcc:	8e 01       	movw	r16, r28
    3bce:	07 59       	subi	r16, 0x97	; 151
    3bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	e3 59       	subi	r30, 0x93	; 147
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	60 81       	ld	r22, Z
    3bda:	71 81       	ldd	r23, Z+1	; 0x01
    3bdc:	82 81       	ldd	r24, Z+2	; 0x02
    3bde:	93 81       	ldd	r25, Z+3	; 0x03
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	4a ef       	ldi	r20, 0xFA	; 250
    3be6:	54 e4       	ldi	r21, 0x44	; 68
    3be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	f8 01       	movw	r30, r16
    3bf2:	80 83       	st	Z, r24
    3bf4:	91 83       	std	Z+1, r25	; 0x01
    3bf6:	a2 83       	std	Z+2, r26	; 0x02
    3bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	e7 59       	subi	r30, 0x97	; 151
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	60 81       	ld	r22, Z
    3c02:	71 81       	ldd	r23, Z+1	; 0x01
    3c04:	82 81       	ldd	r24, Z+2	; 0x02
    3c06:	93 81       	ldd	r25, Z+3	; 0x03
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e8       	ldi	r20, 0x80	; 128
    3c0e:	5f e3       	ldi	r21, 0x3F	; 63
    3c10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c14:	88 23       	and	r24, r24
    3c16:	44 f4       	brge	.+16     	; 0x3c28 <main+0x570>
		__ticks = 1;
    3c18:	fe 01       	movw	r30, r28
    3c1a:	e9 59       	subi	r30, 0x99	; 153
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	91 83       	std	Z+1, r25	; 0x01
    3c24:	80 83       	st	Z, r24
    3c26:	64 c0       	rjmp	.+200    	; 0x3cf0 <main+0x638>
	else if (__tmp > 65535)
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e7 59       	subi	r30, 0x97	; 151
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	82 81       	ldd	r24, Z+2	; 0x02
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	3f ef       	ldi	r19, 0xFF	; 255
    3c3a:	4f e7       	ldi	r20, 0x7F	; 127
    3c3c:	57 e4       	ldi	r21, 0x47	; 71
    3c3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c42:	18 16       	cp	r1, r24
    3c44:	0c f0       	brlt	.+2      	; 0x3c48 <main+0x590>
    3c46:	43 c0       	rjmp	.+134    	; 0x3cce <main+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c48:	fe 01       	movw	r30, r28
    3c4a:	e3 59       	subi	r30, 0x93	; 147
    3c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4e:	60 81       	ld	r22, Z
    3c50:	71 81       	ldd	r23, Z+1	; 0x01
    3c52:	82 81       	ldd	r24, Z+2	; 0x02
    3c54:	93 81       	ldd	r25, Z+3	; 0x03
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e2       	ldi	r20, 0x20	; 32
    3c5c:	51 e4       	ldi	r21, 0x41	; 65
    3c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	8e 01       	movw	r16, r28
    3c68:	09 59       	subi	r16, 0x99	; 153
    3c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6c:	bc 01       	movw	r22, r24
    3c6e:	cd 01       	movw	r24, r26
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	f8 01       	movw	r30, r16
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	80 83       	st	Z, r24
    3c7e:	1f c0       	rjmp	.+62     	; 0x3cbe <main+0x606>
    3c80:	fe 01       	movw	r30, r28
    3c82:	eb 59       	subi	r30, 0x9B	; 155
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	88 ec       	ldi	r24, 0xC8	; 200
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	91 83       	std	Z+1, r25	; 0x01
    3c8c:	80 83       	st	Z, r24
    3c8e:	fe 01       	movw	r30, r28
    3c90:	eb 59       	subi	r30, 0x9B	; 155
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	f1 f7       	brne	.-4      	; 0x3c98 <main+0x5e0>
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	eb 59       	subi	r30, 0x9B	; 155
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	91 83       	std	Z+1, r25	; 0x01
    3ca4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca6:	de 01       	movw	r26, r28
    3ca8:	a9 59       	subi	r26, 0x99	; 153
    3caa:	bf 4f       	sbci	r27, 0xFF	; 255
    3cac:	fe 01       	movw	r30, r28
    3cae:	e9 59       	subi	r30, 0x99	; 153
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	80 81       	ld	r24, Z
    3cb4:	91 81       	ldd	r25, Z+1	; 0x01
    3cb6:	01 97       	sbiw	r24, 0x01	; 1
    3cb8:	11 96       	adiw	r26, 0x01	; 1
    3cba:	9c 93       	st	X, r25
    3cbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	e9 59       	subi	r30, 0x99	; 153
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 81       	ld	r24, Z
    3cc6:	91 81       	ldd	r25, Z+1	; 0x01
    3cc8:	00 97       	sbiw	r24, 0x00	; 0
    3cca:	d1 f6       	brne	.-76     	; 0x3c80 <main+0x5c8>
    3ccc:	27 c0       	rjmp	.+78     	; 0x3d1c <main+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cce:	8e 01       	movw	r16, r28
    3cd0:	09 59       	subi	r16, 0x99	; 153
    3cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e7 59       	subi	r30, 0x97	; 151
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	f8 01       	movw	r30, r16
    3cec:	91 83       	std	Z+1, r25	; 0x01
    3cee:	80 83       	st	Z, r24
    3cf0:	de 01       	movw	r26, r28
    3cf2:	ad 59       	subi	r26, 0x9D	; 157
    3cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e9 59       	subi	r30, 0x99	; 153
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	80 81       	ld	r24, Z
    3cfe:	91 81       	ldd	r25, Z+1	; 0x01
    3d00:	8d 93       	st	X+, r24
    3d02:	9c 93       	st	X, r25
    3d04:	fe 01       	movw	r30, r28
    3d06:	ed 59       	subi	r30, 0x9D	; 157
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	f1 f7       	brne	.-4      	; 0x3d0e <main+0x656>
    3d12:	fe 01       	movw	r30, r28
    3d14:	ed 59       	subi	r30, 0x9D	; 157
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	91 83       	std	Z+1, r25	; 0x01
    3d1a:	80 83       	st	Z, r24
	    		   {

	    		     _delay_ms(1000);
	    		    LCD_voidClear();
    3d1c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClear>
	    		    LCD_voidCursorBlinkerOff();
    3d20:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_voidCursorBlinkerOff>
	    		    LCD_voidWriteString("Welcome to Motor");
    3d24:	81 e7       	ldi	r24, 0x71	; 113
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
	    		    LCD_u8_GoTo_XY(1,3);
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	63 e0       	ldi	r22, 0x03	; 3
    3d30:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>
	    		    LCD_voidWriteString("Dash Board");
    3d34:	82 e8       	ldi	r24, 0x82	; 130
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	e1 5a       	subi	r30, 0xA1	; 161
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	aa ef       	ldi	r26, 0xFA	; 250
    3d48:	b4 e4       	ldi	r27, 0x44	; 68
    3d4a:	80 83       	st	Z, r24
    3d4c:	91 83       	std	Z+1, r25	; 0x01
    3d4e:	a2 83       	std	Z+2, r26	; 0x02
    3d50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d52:	8e 01       	movw	r16, r28
    3d54:	05 5a       	subi	r16, 0xA5	; 165
    3d56:	1f 4f       	sbci	r17, 0xFF	; 255
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e1 5a       	subi	r30, 0xA1	; 161
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	60 81       	ld	r22, Z
    3d60:	71 81       	ldd	r23, Z+1	; 0x01
    3d62:	82 81       	ldd	r24, Z+2	; 0x02
    3d64:	93 81       	ldd	r25, Z+3	; 0x03
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	4a ef       	ldi	r20, 0xFA	; 250
    3d6c:	54 e4       	ldi	r21, 0x44	; 68
    3d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d72:	dc 01       	movw	r26, r24
    3d74:	cb 01       	movw	r24, r22
    3d76:	f8 01       	movw	r30, r16
    3d78:	80 83       	st	Z, r24
    3d7a:	91 83       	std	Z+1, r25	; 0x01
    3d7c:	a2 83       	std	Z+2, r26	; 0x02
    3d7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d80:	fe 01       	movw	r30, r28
    3d82:	e5 5a       	subi	r30, 0xA5	; 165
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	60 81       	ld	r22, Z
    3d88:	71 81       	ldd	r23, Z+1	; 0x01
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	93 81       	ldd	r25, Z+3	; 0x03
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e8       	ldi	r20, 0x80	; 128
    3d94:	5f e3       	ldi	r21, 0x3F	; 63
    3d96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d9a:	88 23       	and	r24, r24
    3d9c:	44 f4       	brge	.+16     	; 0x3dae <main+0x6f6>
		__ticks = 1;
    3d9e:	fe 01       	movw	r30, r28
    3da0:	e7 5a       	subi	r30, 0xA7	; 167
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	91 83       	std	Z+1, r25	; 0x01
    3daa:	80 83       	st	Z, r24
    3dac:	64 c0       	rjmp	.+200    	; 0x3e76 <main+0x7be>
	else if (__tmp > 65535)
    3dae:	fe 01       	movw	r30, r28
    3db0:	e5 5a       	subi	r30, 0xA5	; 165
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	3f ef       	ldi	r19, 0xFF	; 255
    3dc0:	4f e7       	ldi	r20, 0x7F	; 127
    3dc2:	57 e4       	ldi	r21, 0x47	; 71
    3dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dc8:	18 16       	cp	r1, r24
    3dca:	0c f0       	brlt	.+2      	; 0x3dce <main+0x716>
    3dcc:	43 c0       	rjmp	.+134    	; 0x3e54 <main+0x79c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dce:	fe 01       	movw	r30, r28
    3dd0:	e1 5a       	subi	r30, 0xA1	; 161
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	60 81       	ld	r22, Z
    3dd6:	71 81       	ldd	r23, Z+1	; 0x01
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	93 81       	ldd	r25, Z+3	; 0x03
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 e2       	ldi	r20, 0x20	; 32
    3de2:	51 e4       	ldi	r21, 0x41	; 65
    3de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	8e 01       	movw	r16, r28
    3dee:	07 5a       	subi	r16, 0xA7	; 167
    3df0:	1f 4f       	sbci	r17, 0xFF	; 255
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	f8 01       	movw	r30, r16
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	80 83       	st	Z, r24
    3e04:	1f c0       	rjmp	.+62     	; 0x3e44 <main+0x78c>
    3e06:	fe 01       	movw	r30, r28
    3e08:	e9 5a       	subi	r30, 0xA9	; 169
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	88 ec       	ldi	r24, 0xC8	; 200
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	91 83       	std	Z+1, r25	; 0x01
    3e12:	80 83       	st	Z, r24
    3e14:	fe 01       	movw	r30, r28
    3e16:	e9 5a       	subi	r30, 0xA9	; 169
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	80 81       	ld	r24, Z
    3e1c:	91 81       	ldd	r25, Z+1	; 0x01
    3e1e:	01 97       	sbiw	r24, 0x01	; 1
    3e20:	f1 f7       	brne	.-4      	; 0x3e1e <main+0x766>
    3e22:	fe 01       	movw	r30, r28
    3e24:	e9 5a       	subi	r30, 0xA9	; 169
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2c:	de 01       	movw	r26, r28
    3e2e:	a7 5a       	subi	r26, 0xA7	; 167
    3e30:	bf 4f       	sbci	r27, 0xFF	; 255
    3e32:	fe 01       	movw	r30, r28
    3e34:	e7 5a       	subi	r30, 0xA7	; 167
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	80 81       	ld	r24, Z
    3e3a:	91 81       	ldd	r25, Z+1	; 0x01
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	11 96       	adiw	r26, 0x01	; 1
    3e40:	9c 93       	st	X, r25
    3e42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e44:	fe 01       	movw	r30, r28
    3e46:	e7 5a       	subi	r30, 0xA7	; 167
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	00 97       	sbiw	r24, 0x00	; 0
    3e50:	d1 f6       	brne	.-76     	; 0x3e06 <main+0x74e>
    3e52:	27 c0       	rjmp	.+78     	; 0x3ea2 <main+0x7ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e54:	8e 01       	movw	r16, r28
    3e56:	07 5a       	subi	r16, 0xA7	; 167
    3e58:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e5 5a       	subi	r30, 0xA5	; 165
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	82 81       	ldd	r24, Z+2	; 0x02
    3e66:	93 81       	ldd	r25, Z+3	; 0x03
    3e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	f8 01       	movw	r30, r16
    3e72:	91 83       	std	Z+1, r25	; 0x01
    3e74:	80 83       	st	Z, r24
    3e76:	de 01       	movw	r26, r28
    3e78:	ab 5a       	subi	r26, 0xAB	; 171
    3e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e7 5a       	subi	r30, 0xA7	; 167
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 81       	ld	r24, Z
    3e84:	91 81       	ldd	r25, Z+1	; 0x01
    3e86:	8d 93       	st	X+, r24
    3e88:	9c 93       	st	X, r25
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	eb 5a       	subi	r30, 0xAB	; 171
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	80 81       	ld	r24, Z
    3e92:	91 81       	ldd	r25, Z+1	; 0x01
    3e94:	01 97       	sbiw	r24, 0x01	; 1
    3e96:	f1 f7       	brne	.-4      	; 0x3e94 <main+0x7dc>
    3e98:	fe 01       	movw	r30, r28
    3e9a:	eb 5a       	subi	r30, 0xAB	; 171
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	91 83       	std	Z+1, r25	; 0x01
    3ea0:	80 83       	st	Z, r24
	    		   _delay_ms(2000);
	    		   repeat:
	    		   LCD_voidClear();
    3ea2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClear>
	    		   LCD_voidWriteString("1-DCMotor 3-Exit");
    3ea6:	8d e8       	ldi	r24, 0x8D	; 141
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
	    		   LCD_u8_GoTo_XY(1,0);
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	60 e0       	ldi	r22, 0x00	; 0
    3eb2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>
	    		   LCD_voidWriteString("2-StepperMotor");
    3eb6:	8e e9       	ldi	r24, 0x9E	; 158
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>


		    	       while(1)
		    		   {
		    	    	KPD_u8GetKey(&Local_u8Key);
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	8f 57       	subi	r24, 0x7F	; 127
    3ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec4:	0e 94 16 0b 	call	0x162c	; 0x162c <KPD_u8GetKey>
	    	          if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    3ec8:	fe 01       	movw	r30, r28
    3eca:	ef 57       	subi	r30, 0x7F	; 127
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	80 81       	ld	r24, Z
    3ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <main+0x81e>
    3ed4:	9b c4       	rjmp	.+2358   	; 0x480c <main+0x1154>
  	    	           {
	    	        	  LCD_voidClear();
    3ed6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClear>
	    		    	   switch(Local_u8Key)
    3eda:	fe 01       	movw	r30, r28
    3edc:	ef 57       	subi	r30, 0x7F	; 127
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	80 81       	ld	r24, Z
    3ee2:	28 2f       	mov	r18, r24
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	c8 57       	subi	r28, 0x78	; 120
    3ee8:	df 4f       	sbci	r29, 0xFF	; 255
    3eea:	39 83       	std	Y+1, r19	; 0x01
    3eec:	28 83       	st	Y, r18
    3eee:	c8 58       	subi	r28, 0x88	; 136
    3ef0:	d0 40       	sbci	r29, 0x00	; 0
    3ef2:	c8 57       	subi	r28, 0x78	; 120
    3ef4:	df 4f       	sbci	r29, 0xFF	; 255
    3ef6:	88 81       	ld	r24, Y
    3ef8:	99 81       	ldd	r25, Y+1	; 0x01
    3efa:	c8 58       	subi	r28, 0x88	; 136
    3efc:	d0 40       	sbci	r29, 0x00	; 0
    3efe:	82 33       	cpi	r24, 0x32	; 50
    3f00:	91 05       	cpc	r25, r1
    3f02:	09 f4       	brne	.+2      	; 0x3f06 <main+0x84e>
    3f04:	92 c0       	rjmp	.+292    	; 0x402a <main+0x972>
    3f06:	c8 57       	subi	r28, 0x78	; 120
    3f08:	df 4f       	sbci	r29, 0xFF	; 255
    3f0a:	e8 81       	ld	r30, Y
    3f0c:	f9 81       	ldd	r31, Y+1	; 0x01
    3f0e:	c8 58       	subi	r28, 0x88	; 136
    3f10:	d0 40       	sbci	r29, 0x00	; 0
    3f12:	e3 33       	cpi	r30, 0x33	; 51
    3f14:	f1 05       	cpc	r31, r1
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <main+0x862>
    3f18:	6e c4       	rjmp	.+2268   	; 0x47f6 <main+0x113e>
    3f1a:	c8 57       	subi	r28, 0x78	; 120
    3f1c:	df 4f       	sbci	r29, 0xFF	; 255
    3f1e:	28 81       	ld	r18, Y
    3f20:	39 81       	ldd	r19, Y+1	; 0x01
    3f22:	c8 58       	subi	r28, 0x88	; 136
    3f24:	d0 40       	sbci	r29, 0x00	; 0
    3f26:	21 33       	cpi	r18, 0x31	; 49
    3f28:	31 05       	cpc	r19, r1
    3f2a:	09 f0       	breq	.+2      	; 0x3f2e <main+0x876>
    3f2c:	6f c4       	rjmp	.+2270   	; 0x480c <main+0x1154>
	    		    	   {

                           case '1':
                           	   value =1;
    3f2e:	fe 01       	movw	r30, r28
    3f30:	ea 58       	subi	r30, 0x8A	; 138
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	80 83       	st	Z, r24
                               LCD_voidWriteString("Direction: ");
    3f3c:	8d ea       	ldi	r24, 0xAD	; 173
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
                               LCD_u8_GoTo_XY(1,0);
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	60 e0       	ldi	r22, 0x00	; 0
    3f48:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>
                               LCD_voidWriteString("1-CW    2-CCW");
    3f4c:	89 eb       	ldi	r24, 0xB9	; 185
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
                               while(1)
                               {
                               KPD_u8GetKey(&Local_u8Key);
    3f54:	ce 01       	movw	r24, r28
    3f56:	8f 57       	subi	r24, 0x7F	; 127
    3f58:	9f 4f       	sbci	r25, 0xFF	; 255
    3f5a:	0e 94 16 0b 	call	0x162c	; 0x162c <KPD_u8GetKey>
                        	   if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    3f5e:	fe 01       	movw	r30, r28
    3f60:	ef 57       	subi	r30, 0x7F	; 127
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	80 81       	ld	r24, Z
    3f66:	8f 3f       	cpi	r24, 0xFF	; 255
    3f68:	99 f1       	breq	.+102    	; 0x3fd0 <main+0x918>
                        	       {

                 	    	   switch(Local_u8Key)
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	ef 57       	subi	r30, 0x7F	; 127
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 81       	ld	r24, Z
    3f72:	e8 2f       	mov	r30, r24
    3f74:	f0 e0       	ldi	r31, 0x00	; 0
    3f76:	ca 57       	subi	r28, 0x7A	; 122
    3f78:	df 4f       	sbci	r29, 0xFF	; 255
    3f7a:	f9 83       	std	Y+1, r31	; 0x01
    3f7c:	e8 83       	st	Y, r30
    3f7e:	c6 58       	subi	r28, 0x86	; 134
    3f80:	d0 40       	sbci	r29, 0x00	; 0
    3f82:	ca 57       	subi	r28, 0x7A	; 122
    3f84:	df 4f       	sbci	r29, 0xFF	; 255
    3f86:	28 81       	ld	r18, Y
    3f88:	39 81       	ldd	r19, Y+1	; 0x01
    3f8a:	c6 58       	subi	r28, 0x86	; 134
    3f8c:	d0 40       	sbci	r29, 0x00	; 0
    3f8e:	21 33       	cpi	r18, 0x31	; 49
    3f90:	31 05       	cpc	r19, r1
    3f92:	51 f0       	breq	.+20     	; 0x3fa8 <main+0x8f0>
    3f94:	ca 57       	subi	r28, 0x7A	; 122
    3f96:	df 4f       	sbci	r29, 0xFF	; 255
    3f98:	88 81       	ld	r24, Y
    3f9a:	99 81       	ldd	r25, Y+1	; 0x01
    3f9c:	c6 58       	subi	r28, 0x86	; 134
    3f9e:	d0 40       	sbci	r29, 0x00	; 0
    3fa0:	82 33       	cpi	r24, 0x32	; 50
    3fa2:	91 05       	cpc	r25, r1
    3fa4:	59 f0       	breq	.+22     	; 0x3fbc <main+0x904>
    3fa6:	14 c0       	rjmp	.+40     	; 0x3fd0 <main+0x918>
                 	    	   {

                 	    	   case '1':
                 	    		   Dir =Clockwise;
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e6 58       	subi	r30, 0x86	; 134
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	10 82       	st	Z, r1
                 	    		   flag3 =1;
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e5 58       	subi	r30, 0x85	; 133
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	80 83       	st	Z, r24
    3fba:	0a c0       	rjmp	.+20     	; 0x3fd0 <main+0x918>
                 	    		   break;
                 	    	   case '2':
                 	    		   Dir =AntiClockwise;
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e6 58       	subi	r30, 0x86	; 134
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	80 83       	st	Z, r24
                 	    		   flag3 =1;
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	e5 58       	subi	r30, 0x85	; 133
    3fca:	ff 4f       	sbci	r31, 0xFF	; 255
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	80 83       	st	Z, r24
                 	    		   break;
                 	    	   }

                    	       }
                	    	   if (flag3 ==1 )
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e5 58       	subi	r30, 0x85	; 133
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 81       	ld	r24, Z
    3fd8:	81 30       	cpi	r24, 0x01	; 1
    3fda:	09 f0       	breq	.+2      	; 0x3fde <main+0x926>
    3fdc:	bb cf       	rjmp	.-138    	; 0x3f54 <main+0x89c>
                	    	   {
                	               flag3 = 0;
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e5 58       	subi	r30, 0x85	; 133
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	10 82       	st	Z, r1
                	    		   DC_voidRotation(Dir);
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e6 58       	subi	r30, 0x86	; 134
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	80 81       	ld	r24, Z
    3fee:	0e 94 26 1b 	call	0x364c	; 0x364c <DC_voidRotation>
                  	               LCD_voidClear();
    3ff2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClear>
                      	    	   LCD_voidWriteString("   Press any");
    3ff6:	87 ec       	ldi	r24, 0xC7	; 199
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
                                   LCD_u8_GoTo_XY(1,0);
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	60 e0       	ldi	r22, 0x00	; 0
    4002:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>
                                   LCD_voidWriteString("  Key to Stop");
    4006:	84 ed       	ldi	r24, 0xD4	; 212
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>

                                   while(1)
                                   {
                                   KPD_u8GetKey(&Local_u8Key);
    400e:	ce 01       	movw	r24, r28
    4010:	8f 57       	subi	r24, 0x7F	; 127
    4012:	9f 4f       	sbci	r25, 0xFF	; 255
    4014:	0e 94 16 0b 	call	0x162c	; 0x162c <KPD_u8GetKey>
                            	   if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    4018:	fe 01       	movw	r30, r28
    401a:	ef 57       	subi	r30, 0x7F	; 127
    401c:	ff 4f       	sbci	r31, 0xFF	; 255
    401e:	80 81       	ld	r24, Z
    4020:	8f 3f       	cpi	r24, 0xFF	; 255
    4022:	a9 f3       	breq	.-22     	; 0x400e <main+0x956>
                            	       {
                                       DC_voidStop();
    4024:	0e 94 4b 1b 	call	0x3696	; 0x3696 <DC_voidStop>
    4028:	3c cf       	rjmp	.-392    	; 0x3ea2 <main+0x7ea>

            	    	   }
                           	   break;
                           case '2':
                        	  reenter:
                              value =2;
    402a:	fe 01       	movw	r30, r28
    402c:	ea 58       	subi	r30, 0x8A	; 138
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
                              Num2=0;
    4038:	fe 01       	movw	r30, r28
    403a:	ee 58       	subi	r30, 0x8E	; 142
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	11 82       	std	Z+1, r1	; 0x01
    4040:	10 82       	st	Z, r1
                              LCD_voidClear();
    4042:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClear>
                              LCD_voidWriteString("Angle : ");
    4046:	82 ee       	ldi	r24, 0xE2	; 226
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
                              while(1)
                               {
                          	   KPD_u8GetKey(&Local_u8Key);
    404e:	ce 01       	movw	r24, r28
    4050:	8f 57       	subi	r24, 0x7F	; 127
    4052:	9f 4f       	sbci	r25, 0xFF	; 255
    4054:	0e 94 16 0b 	call	0x162c	; 0x162c <KPD_u8GetKey>
         	    	          if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    4058:	fe 01       	movw	r30, r28
    405a:	ef 57       	subi	r30, 0x7F	; 127
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	80 81       	ld	r24, Z
    4060:	8f 3f       	cpi	r24, 0xFF	; 255
    4062:	09 f4       	brne	.+2      	; 0x4066 <main+0x9ae>
    4064:	c1 c3       	rjmp	.+1922   	; 0x47e8 <main+0x1130>
           	    	           {
                	    	   switch(Local_u8Key)
    4066:	fe 01       	movw	r30, r28
    4068:	ef 57       	subi	r30, 0x7F	; 127
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	80 81       	ld	r24, Z
    406e:	e8 2f       	mov	r30, r24
    4070:	f0 e0       	ldi	r31, 0x00	; 0
    4072:	cc 57       	subi	r28, 0x7C	; 124
    4074:	df 4f       	sbci	r29, 0xFF	; 255
    4076:	f9 83       	std	Y+1, r31	; 0x01
    4078:	e8 83       	st	Y, r30
    407a:	c4 58       	subi	r28, 0x84	; 132
    407c:	d0 40       	sbci	r29, 0x00	; 0
    407e:	cc 57       	subi	r28, 0x7C	; 124
    4080:	df 4f       	sbci	r29, 0xFF	; 255
    4082:	28 81       	ld	r18, Y
    4084:	39 81       	ldd	r19, Y+1	; 0x01
    4086:	c4 58       	subi	r28, 0x84	; 132
    4088:	d0 40       	sbci	r29, 0x00	; 0
    408a:	25 33       	cpi	r18, 0x35	; 53
    408c:	31 05       	cpc	r19, r1
    408e:	09 f4       	brne	.+2      	; 0x4092 <main+0x9da>
    4090:	3f c1       	rjmp	.+638    	; 0x4310 <main+0xc58>
    4092:	cc 57       	subi	r28, 0x7C	; 124
    4094:	df 4f       	sbci	r29, 0xFF	; 255
    4096:	88 81       	ld	r24, Y
    4098:	99 81       	ldd	r25, Y+1	; 0x01
    409a:	c4 58       	subi	r28, 0x84	; 132
    409c:	d0 40       	sbci	r29, 0x00	; 0
    409e:	86 33       	cpi	r24, 0x36	; 54
    40a0:	91 05       	cpc	r25, r1
    40a2:	ec f5       	brge	.+122    	; 0x411e <main+0xa66>
    40a4:	cc 57       	subi	r28, 0x7C	; 124
    40a6:	df 4f       	sbci	r29, 0xFF	; 255
    40a8:	e8 81       	ld	r30, Y
    40aa:	f9 81       	ldd	r31, Y+1	; 0x01
    40ac:	c4 58       	subi	r28, 0x84	; 132
    40ae:	d0 40       	sbci	r29, 0x00	; 0
    40b0:	e2 33       	cpi	r30, 0x32	; 50
    40b2:	f1 05       	cpc	r31, r1
    40b4:	09 f4       	brne	.+2      	; 0x40b8 <main+0xa00>
    40b6:	ba c0       	rjmp	.+372    	; 0x422c <main+0xb74>
    40b8:	cc 57       	subi	r28, 0x7C	; 124
    40ba:	df 4f       	sbci	r29, 0xFF	; 255
    40bc:	28 81       	ld	r18, Y
    40be:	39 81       	ldd	r19, Y+1	; 0x01
    40c0:	c4 58       	subi	r28, 0x84	; 132
    40c2:	d0 40       	sbci	r29, 0x00	; 0
    40c4:	23 33       	cpi	r18, 0x33	; 51
    40c6:	31 05       	cpc	r19, r1
    40c8:	ac f4       	brge	.+42     	; 0x40f4 <main+0xa3c>
    40ca:	cc 57       	subi	r28, 0x7C	; 124
    40cc:	df 4f       	sbci	r29, 0xFF	; 255
    40ce:	88 81       	ld	r24, Y
    40d0:	99 81       	ldd	r25, Y+1	; 0x01
    40d2:	c4 58       	subi	r28, 0x84	; 132
    40d4:	d0 40       	sbci	r29, 0x00	; 0
    40d6:	80 33       	cpi	r24, 0x30	; 48
    40d8:	91 05       	cpc	r25, r1
    40da:	09 f4       	brne	.+2      	; 0x40de <main+0xa26>
    40dc:	5d c0       	rjmp	.+186    	; 0x4198 <main+0xae0>
    40de:	cc 57       	subi	r28, 0x7C	; 124
    40e0:	df 4f       	sbci	r29, 0xFF	; 255
    40e2:	e8 81       	ld	r30, Y
    40e4:	f9 81       	ldd	r31, Y+1	; 0x01
    40e6:	c4 58       	subi	r28, 0x84	; 132
    40e8:	d0 40       	sbci	r29, 0x00	; 0
    40ea:	e1 33       	cpi	r30, 0x31	; 49
    40ec:	f1 05       	cpc	r31, r1
    40ee:	09 f4       	brne	.+2      	; 0x40f2 <main+0xa3a>
    40f0:	77 c0       	rjmp	.+238    	; 0x41e0 <main+0xb28>
    40f2:	7a c3       	rjmp	.+1780   	; 0x47e8 <main+0x1130>
    40f4:	cc 57       	subi	r28, 0x7C	; 124
    40f6:	df 4f       	sbci	r29, 0xFF	; 255
    40f8:	28 81       	ld	r18, Y
    40fa:	39 81       	ldd	r19, Y+1	; 0x01
    40fc:	c4 58       	subi	r28, 0x84	; 132
    40fe:	d0 40       	sbci	r29, 0x00	; 0
    4100:	23 33       	cpi	r18, 0x33	; 51
    4102:	31 05       	cpc	r19, r1
    4104:	09 f4       	brne	.+2      	; 0x4108 <main+0xa50>
    4106:	b8 c0       	rjmp	.+368    	; 0x4278 <main+0xbc0>
    4108:	cc 57       	subi	r28, 0x7C	; 124
    410a:	df 4f       	sbci	r29, 0xFF	; 255
    410c:	88 81       	ld	r24, Y
    410e:	99 81       	ldd	r25, Y+1	; 0x01
    4110:	c4 58       	subi	r28, 0x84	; 132
    4112:	d0 40       	sbci	r29, 0x00	; 0
    4114:	84 33       	cpi	r24, 0x34	; 52
    4116:	91 05       	cpc	r25, r1
    4118:	09 f4       	brne	.+2      	; 0x411c <main+0xa64>
    411a:	d4 c0       	rjmp	.+424    	; 0x42c4 <main+0xc0c>
    411c:	65 c3       	rjmp	.+1738   	; 0x47e8 <main+0x1130>
    411e:	cc 57       	subi	r28, 0x7C	; 124
    4120:	df 4f       	sbci	r29, 0xFF	; 255
    4122:	e8 81       	ld	r30, Y
    4124:	f9 81       	ldd	r31, Y+1	; 0x01
    4126:	c4 58       	subi	r28, 0x84	; 132
    4128:	d0 40       	sbci	r29, 0x00	; 0
    412a:	e8 33       	cpi	r30, 0x38	; 56
    412c:	f1 05       	cpc	r31, r1
    412e:	09 f4       	brne	.+2      	; 0x4132 <main+0xa7a>
    4130:	61 c1       	rjmp	.+706    	; 0x43f4 <main+0xd3c>
    4132:	cc 57       	subi	r28, 0x7C	; 124
    4134:	df 4f       	sbci	r29, 0xFF	; 255
    4136:	28 81       	ld	r18, Y
    4138:	39 81       	ldd	r19, Y+1	; 0x01
    413a:	c4 58       	subi	r28, 0x84	; 132
    413c:	d0 40       	sbci	r29, 0x00	; 0
    413e:	29 33       	cpi	r18, 0x39	; 57
    4140:	31 05       	cpc	r19, r1
    4142:	ac f4       	brge	.+42     	; 0x416e <main+0xab6>
    4144:	cc 57       	subi	r28, 0x7C	; 124
    4146:	df 4f       	sbci	r29, 0xFF	; 255
    4148:	88 81       	ld	r24, Y
    414a:	99 81       	ldd	r25, Y+1	; 0x01
    414c:	c4 58       	subi	r28, 0x84	; 132
    414e:	d0 40       	sbci	r29, 0x00	; 0
    4150:	86 33       	cpi	r24, 0x36	; 54
    4152:	91 05       	cpc	r25, r1
    4154:	09 f4       	brne	.+2      	; 0x4158 <main+0xaa0>
    4156:	02 c1       	rjmp	.+516    	; 0x435c <main+0xca4>
    4158:	cc 57       	subi	r28, 0x7C	; 124
    415a:	df 4f       	sbci	r29, 0xFF	; 255
    415c:	e8 81       	ld	r30, Y
    415e:	f9 81       	ldd	r31, Y+1	; 0x01
    4160:	c4 58       	subi	r28, 0x84	; 132
    4162:	d0 40       	sbci	r29, 0x00	; 0
    4164:	e7 33       	cpi	r30, 0x37	; 55
    4166:	f1 05       	cpc	r31, r1
    4168:	09 f4       	brne	.+2      	; 0x416c <main+0xab4>
    416a:	1e c1       	rjmp	.+572    	; 0x43a8 <main+0xcf0>
    416c:	3d c3       	rjmp	.+1658   	; 0x47e8 <main+0x1130>
    416e:	cc 57       	subi	r28, 0x7C	; 124
    4170:	df 4f       	sbci	r29, 0xFF	; 255
    4172:	28 81       	ld	r18, Y
    4174:	39 81       	ldd	r19, Y+1	; 0x01
    4176:	c4 58       	subi	r28, 0x84	; 132
    4178:	d0 40       	sbci	r29, 0x00	; 0
    417a:	29 33       	cpi	r18, 0x39	; 57
    417c:	31 05       	cpc	r19, r1
    417e:	09 f4       	brne	.+2      	; 0x4182 <main+0xaca>
    4180:	5f c1       	rjmp	.+702    	; 0x4440 <main+0xd88>
    4182:	cc 57       	subi	r28, 0x7C	; 124
    4184:	df 4f       	sbci	r29, 0xFF	; 255
    4186:	88 81       	ld	r24, Y
    4188:	99 81       	ldd	r25, Y+1	; 0x01
    418a:	c4 58       	subi	r28, 0x84	; 132
    418c:	d0 40       	sbci	r29, 0x00	; 0
    418e:	8d 33       	cpi	r24, 0x3D	; 61
    4190:	91 05       	cpc	r25, r1
    4192:	09 f4       	brne	.+2      	; 0x4196 <main+0xade>
    4194:	7b c1       	rjmp	.+758    	; 0x448c <main+0xdd4>
    4196:	28 c3       	rjmp	.+1616   	; 0x47e8 <main+0x1130>
                	    	   {
                	    	   case '0':
                	    		   value =0;
    4198:	fe 01       	movw	r30, r28
    419a:	ea 58       	subi	r30, 0x8A	; 138
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	11 82       	std	Z+1, r1	; 0x01
    41a0:	10 82       	st	Z, r1
                	    		   Num2 = (Num2*10) +value ;
    41a2:	fe 01       	movw	r30, r28
    41a4:	ee 58       	subi	r30, 0x8E	; 142
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	80 81       	ld	r24, Z
    41aa:	91 81       	ldd	r25, Z+1	; 0x01
    41ac:	9c 01       	movw	r18, r24
    41ae:	22 0f       	add	r18, r18
    41b0:	33 1f       	adc	r19, r19
    41b2:	c9 01       	movw	r24, r18
    41b4:	88 0f       	add	r24, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	88 0f       	add	r24, r24
    41ba:	99 1f       	adc	r25, r25
    41bc:	28 0f       	add	r18, r24
    41be:	39 1f       	adc	r19, r25
    41c0:	de 01       	movw	r26, r28
    41c2:	ae 58       	subi	r26, 0x8E	; 142
    41c4:	bf 4f       	sbci	r27, 0xFF	; 255
    41c6:	fe 01       	movw	r30, r28
    41c8:	ea 58       	subi	r30, 0x8A	; 138
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	80 81       	ld	r24, Z
    41ce:	91 81       	ldd	r25, Z+1	; 0x01
    41d0:	82 0f       	add	r24, r18
    41d2:	93 1f       	adc	r25, r19
    41d4:	8d 93       	st	X+, r24
    41d6:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('0');
    41d8:	80 e3       	ldi	r24, 0x30	; 48
    41da:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    41de:	04 c3       	rjmp	.+1544   	; 0x47e8 <main+0x1130>
                	    		   break;
                	    	   case '1':
                	    		   value =1;
    41e0:	fe 01       	movw	r30, r28
    41e2:	ea 58       	subi	r30, 0x8A	; 138
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	91 83       	std	Z+1, r25	; 0x01
    41ec:	80 83       	st	Z, r24
                	    		   Num2 = (Num2*10) +value ;
    41ee:	fe 01       	movw	r30, r28
    41f0:	ee 58       	subi	r30, 0x8E	; 142
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	80 81       	ld	r24, Z
    41f6:	91 81       	ldd	r25, Z+1	; 0x01
    41f8:	9c 01       	movw	r18, r24
    41fa:	22 0f       	add	r18, r18
    41fc:	33 1f       	adc	r19, r19
    41fe:	c9 01       	movw	r24, r18
    4200:	88 0f       	add	r24, r24
    4202:	99 1f       	adc	r25, r25
    4204:	88 0f       	add	r24, r24
    4206:	99 1f       	adc	r25, r25
    4208:	28 0f       	add	r18, r24
    420a:	39 1f       	adc	r19, r25
    420c:	de 01       	movw	r26, r28
    420e:	ae 58       	subi	r26, 0x8E	; 142
    4210:	bf 4f       	sbci	r27, 0xFF	; 255
    4212:	fe 01       	movw	r30, r28
    4214:	ea 58       	subi	r30, 0x8A	; 138
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	80 81       	ld	r24, Z
    421a:	91 81       	ldd	r25, Z+1	; 0x01
    421c:	82 0f       	add	r24, r18
    421e:	93 1f       	adc	r25, r19
    4220:	8d 93       	st	X+, r24
    4222:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('1');
    4224:	81 e3       	ldi	r24, 0x31	; 49
    4226:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    422a:	de c2       	rjmp	.+1468   	; 0x47e8 <main+0x1130>
                	    		   break;
                	    	   case '2':
                	    	       value =2;
    422c:	fe 01       	movw	r30, r28
    422e:	ea 58       	subi	r30, 0x8A	; 138
    4230:	ff 4f       	sbci	r31, 0xFF	; 255
    4232:	82 e0       	ldi	r24, 0x02	; 2
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	91 83       	std	Z+1, r25	; 0x01
    4238:	80 83       	st	Z, r24
                	    	       Num2 = (Num2*10) +value ;
    423a:	fe 01       	movw	r30, r28
    423c:	ee 58       	subi	r30, 0x8E	; 142
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	9c 01       	movw	r18, r24
    4246:	22 0f       	add	r18, r18
    4248:	33 1f       	adc	r19, r19
    424a:	c9 01       	movw	r24, r18
    424c:	88 0f       	add	r24, r24
    424e:	99 1f       	adc	r25, r25
    4250:	88 0f       	add	r24, r24
    4252:	99 1f       	adc	r25, r25
    4254:	28 0f       	add	r18, r24
    4256:	39 1f       	adc	r19, r25
    4258:	de 01       	movw	r26, r28
    425a:	ae 58       	subi	r26, 0x8E	; 142
    425c:	bf 4f       	sbci	r27, 0xFF	; 255
    425e:	fe 01       	movw	r30, r28
    4260:	ea 58       	subi	r30, 0x8A	; 138
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	80 81       	ld	r24, Z
    4266:	91 81       	ldd	r25, Z+1	; 0x01
    4268:	82 0f       	add	r24, r18
    426a:	93 1f       	adc	r25, r19
    426c:	8d 93       	st	X+, r24
    426e:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('2');
    4270:	82 e3       	ldi	r24, 0x32	; 50
    4272:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    4276:	b8 c2       	rjmp	.+1392   	; 0x47e8 <main+0x1130>
                	    	       break;
                	    	   case '3':
                	    	       value =3;
    4278:	fe 01       	movw	r30, r28
    427a:	ea 58       	subi	r30, 0x8A	; 138
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	83 e0       	ldi	r24, 0x03	; 3
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	80 83       	st	Z, r24
                	    	       Num2 = (Num2*10) +value ;
    4286:	fe 01       	movw	r30, r28
    4288:	ee 58       	subi	r30, 0x8E	; 142
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	80 81       	ld	r24, Z
    428e:	91 81       	ldd	r25, Z+1	; 0x01
    4290:	9c 01       	movw	r18, r24
    4292:	22 0f       	add	r18, r18
    4294:	33 1f       	adc	r19, r19
    4296:	c9 01       	movw	r24, r18
    4298:	88 0f       	add	r24, r24
    429a:	99 1f       	adc	r25, r25
    429c:	88 0f       	add	r24, r24
    429e:	99 1f       	adc	r25, r25
    42a0:	28 0f       	add	r18, r24
    42a2:	39 1f       	adc	r19, r25
    42a4:	de 01       	movw	r26, r28
    42a6:	ae 58       	subi	r26, 0x8E	; 142
    42a8:	bf 4f       	sbci	r27, 0xFF	; 255
    42aa:	fe 01       	movw	r30, r28
    42ac:	ea 58       	subi	r30, 0x8A	; 138
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	82 0f       	add	r24, r18
    42b6:	93 1f       	adc	r25, r19
    42b8:	8d 93       	st	X+, r24
    42ba:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('3');
    42bc:	83 e3       	ldi	r24, 0x33	; 51
    42be:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    42c2:	92 c2       	rjmp	.+1316   	; 0x47e8 <main+0x1130>
                	    	       break;
                	    	   case '4':
                	    	       value =4;
    42c4:	fe 01       	movw	r30, r28
    42c6:	ea 58       	subi	r30, 0x8A	; 138
    42c8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ca:	84 e0       	ldi	r24, 0x04	; 4
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	91 83       	std	Z+1, r25	; 0x01
    42d0:	80 83       	st	Z, r24
                	    	       Num2 = (Num2*10) +value ;
    42d2:	fe 01       	movw	r30, r28
    42d4:	ee 58       	subi	r30, 0x8E	; 142
    42d6:	ff 4f       	sbci	r31, 0xFF	; 255
    42d8:	80 81       	ld	r24, Z
    42da:	91 81       	ldd	r25, Z+1	; 0x01
    42dc:	9c 01       	movw	r18, r24
    42de:	22 0f       	add	r18, r18
    42e0:	33 1f       	adc	r19, r19
    42e2:	c9 01       	movw	r24, r18
    42e4:	88 0f       	add	r24, r24
    42e6:	99 1f       	adc	r25, r25
    42e8:	88 0f       	add	r24, r24
    42ea:	99 1f       	adc	r25, r25
    42ec:	28 0f       	add	r18, r24
    42ee:	39 1f       	adc	r19, r25
    42f0:	de 01       	movw	r26, r28
    42f2:	ae 58       	subi	r26, 0x8E	; 142
    42f4:	bf 4f       	sbci	r27, 0xFF	; 255
    42f6:	fe 01       	movw	r30, r28
    42f8:	ea 58       	subi	r30, 0x8A	; 138
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	80 81       	ld	r24, Z
    42fe:	91 81       	ldd	r25, Z+1	; 0x01
    4300:	82 0f       	add	r24, r18
    4302:	93 1f       	adc	r25, r19
    4304:	8d 93       	st	X+, r24
    4306:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('4');
    4308:	84 e3       	ldi	r24, 0x34	; 52
    430a:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    430e:	6c c2       	rjmp	.+1240   	; 0x47e8 <main+0x1130>
                	    	       break;
                	    	   case '5':
                	    	       value =5;
    4310:	fe 01       	movw	r30, r28
    4312:	ea 58       	subi	r30, 0x8A	; 138
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	85 e0       	ldi	r24, 0x05	; 5
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	91 83       	std	Z+1, r25	; 0x01
    431c:	80 83       	st	Z, r24
                	    	       Num2 = (Num2*10) +value ;
    431e:	fe 01       	movw	r30, r28
    4320:	ee 58       	subi	r30, 0x8E	; 142
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	80 81       	ld	r24, Z
    4326:	91 81       	ldd	r25, Z+1	; 0x01
    4328:	9c 01       	movw	r18, r24
    432a:	22 0f       	add	r18, r18
    432c:	33 1f       	adc	r19, r19
    432e:	c9 01       	movw	r24, r18
    4330:	88 0f       	add	r24, r24
    4332:	99 1f       	adc	r25, r25
    4334:	88 0f       	add	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	28 0f       	add	r18, r24
    433a:	39 1f       	adc	r19, r25
    433c:	de 01       	movw	r26, r28
    433e:	ae 58       	subi	r26, 0x8E	; 142
    4340:	bf 4f       	sbci	r27, 0xFF	; 255
    4342:	fe 01       	movw	r30, r28
    4344:	ea 58       	subi	r30, 0x8A	; 138
    4346:	ff 4f       	sbci	r31, 0xFF	; 255
    4348:	80 81       	ld	r24, Z
    434a:	91 81       	ldd	r25, Z+1	; 0x01
    434c:	82 0f       	add	r24, r18
    434e:	93 1f       	adc	r25, r19
    4350:	8d 93       	st	X+, r24
    4352:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('5');
    4354:	85 e3       	ldi	r24, 0x35	; 53
    4356:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    435a:	46 c2       	rjmp	.+1164   	; 0x47e8 <main+0x1130>
                	    	       break;
                	    	   case '6':
                	    	       value =6;
    435c:	fe 01       	movw	r30, r28
    435e:	ea 58       	subi	r30, 0x8A	; 138
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	86 e0       	ldi	r24, 0x06	; 6
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	91 83       	std	Z+1, r25	; 0x01
    4368:	80 83       	st	Z, r24
                	    	       Num2 = (Num2*10) +value ;
    436a:	fe 01       	movw	r30, r28
    436c:	ee 58       	subi	r30, 0x8E	; 142
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	80 81       	ld	r24, Z
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	9c 01       	movw	r18, r24
    4376:	22 0f       	add	r18, r18
    4378:	33 1f       	adc	r19, r19
    437a:	c9 01       	movw	r24, r18
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	88 0f       	add	r24, r24
    4382:	99 1f       	adc	r25, r25
    4384:	28 0f       	add	r18, r24
    4386:	39 1f       	adc	r19, r25
    4388:	de 01       	movw	r26, r28
    438a:	ae 58       	subi	r26, 0x8E	; 142
    438c:	bf 4f       	sbci	r27, 0xFF	; 255
    438e:	fe 01       	movw	r30, r28
    4390:	ea 58       	subi	r30, 0x8A	; 138
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	80 81       	ld	r24, Z
    4396:	91 81       	ldd	r25, Z+1	; 0x01
    4398:	82 0f       	add	r24, r18
    439a:	93 1f       	adc	r25, r19
    439c:	8d 93       	st	X+, r24
    439e:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('6');
    43a0:	86 e3       	ldi	r24, 0x36	; 54
    43a2:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    43a6:	20 c2       	rjmp	.+1088   	; 0x47e8 <main+0x1130>
                	    	       break;
                	    	   case '7':
                	    	       value =7;
    43a8:	fe 01       	movw	r30, r28
    43aa:	ea 58       	subi	r30, 0x8A	; 138
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	87 e0       	ldi	r24, 0x07	; 7
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	91 83       	std	Z+1, r25	; 0x01
    43b4:	80 83       	st	Z, r24
                	    	       Num2 = (Num2*10) +value ;
    43b6:	fe 01       	movw	r30, r28
    43b8:	ee 58       	subi	r30, 0x8E	; 142
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	80 81       	ld	r24, Z
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	9c 01       	movw	r18, r24
    43c2:	22 0f       	add	r18, r18
    43c4:	33 1f       	adc	r19, r19
    43c6:	c9 01       	movw	r24, r18
    43c8:	88 0f       	add	r24, r24
    43ca:	99 1f       	adc	r25, r25
    43cc:	88 0f       	add	r24, r24
    43ce:	99 1f       	adc	r25, r25
    43d0:	28 0f       	add	r18, r24
    43d2:	39 1f       	adc	r19, r25
    43d4:	de 01       	movw	r26, r28
    43d6:	ae 58       	subi	r26, 0x8E	; 142
    43d8:	bf 4f       	sbci	r27, 0xFF	; 255
    43da:	fe 01       	movw	r30, r28
    43dc:	ea 58       	subi	r30, 0x8A	; 138
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	80 81       	ld	r24, Z
    43e2:	91 81       	ldd	r25, Z+1	; 0x01
    43e4:	82 0f       	add	r24, r18
    43e6:	93 1f       	adc	r25, r19
    43e8:	8d 93       	st	X+, r24
    43ea:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('7');
    43ec:	87 e3       	ldi	r24, 0x37	; 55
    43ee:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    43f2:	fa c1       	rjmp	.+1012   	; 0x47e8 <main+0x1130>
                	    	        break;
                	       	   case '8':
                	        	   value =8;
    43f4:	fe 01       	movw	r30, r28
    43f6:	ea 58       	subi	r30, 0x8A	; 138
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	88 e0       	ldi	r24, 0x08	; 8
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	91 83       	std	Z+1, r25	; 0x01
    4400:	80 83       	st	Z, r24
                	        	   Num2 = (Num2*10) +value ;
    4402:	fe 01       	movw	r30, r28
    4404:	ee 58       	subi	r30, 0x8E	; 142
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	80 81       	ld	r24, Z
    440a:	91 81       	ldd	r25, Z+1	; 0x01
    440c:	9c 01       	movw	r18, r24
    440e:	22 0f       	add	r18, r18
    4410:	33 1f       	adc	r19, r19
    4412:	c9 01       	movw	r24, r18
    4414:	88 0f       	add	r24, r24
    4416:	99 1f       	adc	r25, r25
    4418:	88 0f       	add	r24, r24
    441a:	99 1f       	adc	r25, r25
    441c:	28 0f       	add	r18, r24
    441e:	39 1f       	adc	r19, r25
    4420:	de 01       	movw	r26, r28
    4422:	ae 58       	subi	r26, 0x8E	; 142
    4424:	bf 4f       	sbci	r27, 0xFF	; 255
    4426:	fe 01       	movw	r30, r28
    4428:	ea 58       	subi	r30, 0x8A	; 138
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	80 81       	ld	r24, Z
    442e:	91 81       	ldd	r25, Z+1	; 0x01
    4430:	82 0f       	add	r24, r18
    4432:	93 1f       	adc	r25, r19
    4434:	8d 93       	st	X+, r24
    4436:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('8');
    4438:	88 e3       	ldi	r24, 0x38	; 56
    443a:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    443e:	d4 c1       	rjmp	.+936    	; 0x47e8 <main+0x1130>
                	        	    break;
                	           case '9':
                	        	   value =9;
    4440:	fe 01       	movw	r30, r28
    4442:	ea 58       	subi	r30, 0x8A	; 138
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	89 e0       	ldi	r24, 0x09	; 9
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	91 83       	std	Z+1, r25	; 0x01
    444c:	80 83       	st	Z, r24
                	        	   Num2 = (Num2*10) +value ;
    444e:	fe 01       	movw	r30, r28
    4450:	ee 58       	subi	r30, 0x8E	; 142
    4452:	ff 4f       	sbci	r31, 0xFF	; 255
    4454:	80 81       	ld	r24, Z
    4456:	91 81       	ldd	r25, Z+1	; 0x01
    4458:	9c 01       	movw	r18, r24
    445a:	22 0f       	add	r18, r18
    445c:	33 1f       	adc	r19, r19
    445e:	c9 01       	movw	r24, r18
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	88 0f       	add	r24, r24
    4466:	99 1f       	adc	r25, r25
    4468:	28 0f       	add	r18, r24
    446a:	39 1f       	adc	r19, r25
    446c:	de 01       	movw	r26, r28
    446e:	ae 58       	subi	r26, 0x8E	; 142
    4470:	bf 4f       	sbci	r27, 0xFF	; 255
    4472:	fe 01       	movw	r30, r28
    4474:	ea 58       	subi	r30, 0x8A	; 138
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	80 81       	ld	r24, Z
    447a:	91 81       	ldd	r25, Z+1	; 0x01
    447c:	82 0f       	add	r24, r18
    447e:	93 1f       	adc	r25, r19
    4480:	8d 93       	st	X+, r24
    4482:	9c 93       	st	X, r25
                	    		   LCD_voidSendChar('9');
    4484:	89 e3       	ldi	r24, 0x39	; 57
    4486:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    448a:	ae c1       	rjmp	.+860    	; 0x47e8 <main+0x1130>
                	        	    break;
                	           case '=':
                	               flag = 1;
    448c:	fe 01       	movw	r30, r28
    448e:	e3 58       	subi	r30, 0x83	; 131
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	80 83       	st	Z, r24
                	        	   LCD_voidSendChar(223);
    4496:	8f ed       	ldi	r24, 0xDF	; 223
    4498:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_voidSendChar>
    449c:	fe 01       	movw	r30, r28
    449e:	ef 5a       	subi	r30, 0xAF	; 175
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	aa e7       	ldi	r26, 0x7A	; 122
    44a8:	b4 e4       	ldi	r27, 0x44	; 68
    44aa:	80 83       	st	Z, r24
    44ac:	91 83       	std	Z+1, r25	; 0x01
    44ae:	a2 83       	std	Z+2, r26	; 0x02
    44b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44b2:	8e 01       	movw	r16, r28
    44b4:	03 5b       	subi	r16, 0xB3	; 179
    44b6:	1f 4f       	sbci	r17, 0xFF	; 255
    44b8:	fe 01       	movw	r30, r28
    44ba:	ef 5a       	subi	r30, 0xAF	; 175
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	60 81       	ld	r22, Z
    44c0:	71 81       	ldd	r23, Z+1	; 0x01
    44c2:	82 81       	ldd	r24, Z+2	; 0x02
    44c4:	93 81       	ldd	r25, Z+3	; 0x03
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4a ef       	ldi	r20, 0xFA	; 250
    44cc:	54 e4       	ldi	r21, 0x44	; 68
    44ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	f8 01       	movw	r30, r16
    44d8:	80 83       	st	Z, r24
    44da:	91 83       	std	Z+1, r25	; 0x01
    44dc:	a2 83       	std	Z+2, r26	; 0x02
    44de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44e0:	fe 01       	movw	r30, r28
    44e2:	e3 5b       	subi	r30, 0xB3	; 179
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	60 81       	ld	r22, Z
    44e8:	71 81       	ldd	r23, Z+1	; 0x01
    44ea:	82 81       	ldd	r24, Z+2	; 0x02
    44ec:	93 81       	ldd	r25, Z+3	; 0x03
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	40 e8       	ldi	r20, 0x80	; 128
    44f4:	5f e3       	ldi	r21, 0x3F	; 63
    44f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44fa:	88 23       	and	r24, r24
    44fc:	44 f4       	brge	.+16     	; 0x450e <main+0xe56>
		__ticks = 1;
    44fe:	fe 01       	movw	r30, r28
    4500:	e5 5b       	subi	r30, 0xB5	; 181
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	91 83       	std	Z+1, r25	; 0x01
    450a:	80 83       	st	Z, r24
    450c:	64 c0       	rjmp	.+200    	; 0x45d6 <main+0xf1e>
	else if (__tmp > 65535)
    450e:	fe 01       	movw	r30, r28
    4510:	e3 5b       	subi	r30, 0xB3	; 179
    4512:	ff 4f       	sbci	r31, 0xFF	; 255
    4514:	60 81       	ld	r22, Z
    4516:	71 81       	ldd	r23, Z+1	; 0x01
    4518:	82 81       	ldd	r24, Z+2	; 0x02
    451a:	93 81       	ldd	r25, Z+3	; 0x03
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	3f ef       	ldi	r19, 0xFF	; 255
    4520:	4f e7       	ldi	r20, 0x7F	; 127
    4522:	57 e4       	ldi	r21, 0x47	; 71
    4524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4528:	18 16       	cp	r1, r24
    452a:	0c f0       	brlt	.+2      	; 0x452e <main+0xe76>
    452c:	43 c0       	rjmp	.+134    	; 0x45b4 <main+0xefc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    452e:	fe 01       	movw	r30, r28
    4530:	ef 5a       	subi	r30, 0xAF	; 175
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	60 81       	ld	r22, Z
    4536:	71 81       	ldd	r23, Z+1	; 0x01
    4538:	82 81       	ldd	r24, Z+2	; 0x02
    453a:	93 81       	ldd	r25, Z+3	; 0x03
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	40 e2       	ldi	r20, 0x20	; 32
    4542:	51 e4       	ldi	r21, 0x41	; 65
    4544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	8e 01       	movw	r16, r28
    454e:	05 5b       	subi	r16, 0xB5	; 181
    4550:	1f 4f       	sbci	r17, 0xFF	; 255
    4552:	bc 01       	movw	r22, r24
    4554:	cd 01       	movw	r24, r26
    4556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	f8 01       	movw	r30, r16
    4560:	91 83       	std	Z+1, r25	; 0x01
    4562:	80 83       	st	Z, r24
    4564:	1f c0       	rjmp	.+62     	; 0x45a4 <main+0xeec>
    4566:	fe 01       	movw	r30, r28
    4568:	e7 5b       	subi	r30, 0xB7	; 183
    456a:	ff 4f       	sbci	r31, 0xFF	; 255
    456c:	88 ec       	ldi	r24, 0xC8	; 200
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	91 83       	std	Z+1, r25	; 0x01
    4572:	80 83       	st	Z, r24
    4574:	fe 01       	movw	r30, r28
    4576:	e7 5b       	subi	r30, 0xB7	; 183
    4578:	ff 4f       	sbci	r31, 0xFF	; 255
    457a:	80 81       	ld	r24, Z
    457c:	91 81       	ldd	r25, Z+1	; 0x01
    457e:	01 97       	sbiw	r24, 0x01	; 1
    4580:	f1 f7       	brne	.-4      	; 0x457e <main+0xec6>
    4582:	fe 01       	movw	r30, r28
    4584:	e7 5b       	subi	r30, 0xB7	; 183
    4586:	ff 4f       	sbci	r31, 0xFF	; 255
    4588:	91 83       	std	Z+1, r25	; 0x01
    458a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458c:	de 01       	movw	r26, r28
    458e:	a5 5b       	subi	r26, 0xB5	; 181
    4590:	bf 4f       	sbci	r27, 0xFF	; 255
    4592:	fe 01       	movw	r30, r28
    4594:	e5 5b       	subi	r30, 0xB5	; 181
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	80 81       	ld	r24, Z
    459a:	91 81       	ldd	r25, Z+1	; 0x01
    459c:	01 97       	sbiw	r24, 0x01	; 1
    459e:	11 96       	adiw	r26, 0x01	; 1
    45a0:	9c 93       	st	X, r25
    45a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45a4:	fe 01       	movw	r30, r28
    45a6:	e5 5b       	subi	r30, 0xB5	; 181
    45a8:	ff 4f       	sbci	r31, 0xFF	; 255
    45aa:	80 81       	ld	r24, Z
    45ac:	91 81       	ldd	r25, Z+1	; 0x01
    45ae:	00 97       	sbiw	r24, 0x00	; 0
    45b0:	d1 f6       	brne	.-76     	; 0x4566 <main+0xeae>
    45b2:	27 c0       	rjmp	.+78     	; 0x4602 <main+0xf4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b4:	8e 01       	movw	r16, r28
    45b6:	05 5b       	subi	r16, 0xB5	; 181
    45b8:	1f 4f       	sbci	r17, 0xFF	; 255
    45ba:	fe 01       	movw	r30, r28
    45bc:	e3 5b       	subi	r30, 0xB3	; 179
    45be:	ff 4f       	sbci	r31, 0xFF	; 255
    45c0:	60 81       	ld	r22, Z
    45c2:	71 81       	ldd	r23, Z+1	; 0x01
    45c4:	82 81       	ldd	r24, Z+2	; 0x02
    45c6:	93 81       	ldd	r25, Z+3	; 0x03
    45c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45cc:	dc 01       	movw	r26, r24
    45ce:	cb 01       	movw	r24, r22
    45d0:	f8 01       	movw	r30, r16
    45d2:	91 83       	std	Z+1, r25	; 0x01
    45d4:	80 83       	st	Z, r24
    45d6:	de 01       	movw	r26, r28
    45d8:	a9 5b       	subi	r26, 0xB9	; 185
    45da:	bf 4f       	sbci	r27, 0xFF	; 255
    45dc:	fe 01       	movw	r30, r28
    45de:	e5 5b       	subi	r30, 0xB5	; 181
    45e0:	ff 4f       	sbci	r31, 0xFF	; 255
    45e2:	80 81       	ld	r24, Z
    45e4:	91 81       	ldd	r25, Z+1	; 0x01
    45e6:	8d 93       	st	X+, r24
    45e8:	9c 93       	st	X, r25
    45ea:	fe 01       	movw	r30, r28
    45ec:	e9 5b       	subi	r30, 0xB9	; 185
    45ee:	ff 4f       	sbci	r31, 0xFF	; 255
    45f0:	80 81       	ld	r24, Z
    45f2:	91 81       	ldd	r25, Z+1	; 0x01
    45f4:	01 97       	sbiw	r24, 0x01	; 1
    45f6:	f1 f7       	brne	.-4      	; 0x45f4 <main+0xf3c>
    45f8:	fe 01       	movw	r30, r28
    45fa:	e9 5b       	subi	r30, 0xB9	; 185
    45fc:	ff 4f       	sbci	r31, 0xFF	; 255
    45fe:	91 83       	std	Z+1, r25	; 0x01
    4600:	80 83       	st	Z, r24
                	        	   _delay_ms(1000);
              	              	   LCD_voidClear();
    4602:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClear>
              	              	   if(Num2 > 360)
    4606:	fe 01       	movw	r30, r28
    4608:	ee 58       	subi	r30, 0x8E	; 142
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	f1 e0       	ldi	r31, 0x01	; 1
    4612:	89 36       	cpi	r24, 0x69	; 105
    4614:	9f 07       	cpc	r25, r31
    4616:	08 f4       	brcc	.+2      	; 0x461a <main+0xf62>
    4618:	96 c0       	rjmp	.+300    	; 0x4746 <main+0x108e>
              	              	   {
              	              		   LCD_voidWriteString("Re-enter a");
    461a:	8b ee       	ldi	r24, 0xEB	; 235
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
              	              		   LCD_u8_GoTo_XY(1,0);
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	60 e0       	ldi	r22, 0x00	; 0
    4626:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>
              	              		   LCD_voidWriteString("Correct Angle");
    462a:	86 ef       	ldi	r24, 0xF6	; 246
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
    4632:	fe 01       	movw	r30, r28
    4634:	ed 5b       	subi	r30, 0xBD	; 189
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e8       	ldi	r25, 0x80	; 128
    463c:	ab eb       	ldi	r26, 0xBB	; 187
    463e:	b4 e4       	ldi	r27, 0x44	; 68
    4640:	80 83       	st	Z, r24
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	a2 83       	std	Z+2, r26	; 0x02
    4646:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4648:	8e 01       	movw	r16, r28
    464a:	01 5c       	subi	r16, 0xC1	; 193
    464c:	1f 4f       	sbci	r17, 0xFF	; 255
    464e:	fe 01       	movw	r30, r28
    4650:	ed 5b       	subi	r30, 0xBD	; 189
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	60 81       	ld	r22, Z
    4656:	71 81       	ldd	r23, Z+1	; 0x01
    4658:	82 81       	ldd	r24, Z+2	; 0x02
    465a:	93 81       	ldd	r25, Z+3	; 0x03
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	4a ef       	ldi	r20, 0xFA	; 250
    4662:	54 e4       	ldi	r21, 0x44	; 68
    4664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	f8 01       	movw	r30, r16
    466e:	80 83       	st	Z, r24
    4670:	91 83       	std	Z+1, r25	; 0x01
    4672:	a2 83       	std	Z+2, r26	; 0x02
    4674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4676:	fe 01       	movw	r30, r28
    4678:	ff 96       	adiw	r30, 0x3f	; 63
    467a:	60 81       	ld	r22, Z
    467c:	71 81       	ldd	r23, Z+1	; 0x01
    467e:	82 81       	ldd	r24, Z+2	; 0x02
    4680:	93 81       	ldd	r25, Z+3	; 0x03
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	40 e8       	ldi	r20, 0x80	; 128
    4688:	5f e3       	ldi	r21, 0x3F	; 63
    468a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    468e:	88 23       	and	r24, r24
    4690:	2c f4       	brge	.+10     	; 0x469c <main+0xfe4>
		__ticks = 1;
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	9e af       	std	Y+62, r25	; 0x3e
    4698:	8d af       	std	Y+61, r24	; 0x3d
    469a:	46 c0       	rjmp	.+140    	; 0x4728 <main+0x1070>
	else if (__tmp > 65535)
    469c:	fe 01       	movw	r30, r28
    469e:	ff 96       	adiw	r30, 0x3f	; 63
    46a0:	60 81       	ld	r22, Z
    46a2:	71 81       	ldd	r23, Z+1	; 0x01
    46a4:	82 81       	ldd	r24, Z+2	; 0x02
    46a6:	93 81       	ldd	r25, Z+3	; 0x03
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	3f ef       	ldi	r19, 0xFF	; 255
    46ac:	4f e7       	ldi	r20, 0x7F	; 127
    46ae:	57 e4       	ldi	r21, 0x47	; 71
    46b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46b4:	18 16       	cp	r1, r24
    46b6:	64 f5       	brge	.+88     	; 0x4710 <main+0x1058>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b8:	fe 01       	movw	r30, r28
    46ba:	ed 5b       	subi	r30, 0xBD	; 189
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	60 81       	ld	r22, Z
    46c0:	71 81       	ldd	r23, Z+1	; 0x01
    46c2:	82 81       	ldd	r24, Z+2	; 0x02
    46c4:	93 81       	ldd	r25, Z+3	; 0x03
    46c6:	20 e0       	ldi	r18, 0x00	; 0
    46c8:	30 e0       	ldi	r19, 0x00	; 0
    46ca:	40 e2       	ldi	r20, 0x20	; 32
    46cc:	51 e4       	ldi	r21, 0x41	; 65
    46ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	bc 01       	movw	r22, r24
    46d8:	cd 01       	movw	r24, r26
    46da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	9e af       	std	Y+62, r25	; 0x3e
    46e4:	8d af       	std	Y+61, r24	; 0x3d
    46e6:	0f c0       	rjmp	.+30     	; 0x4706 <main+0x104e>
    46e8:	88 ec       	ldi	r24, 0xC8	; 200
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	9c af       	std	Y+60, r25	; 0x3c
    46ee:	8b af       	std	Y+59, r24	; 0x3b
    46f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    46f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <main+0x103c>
    46f8:	9c af       	std	Y+60, r25	; 0x3c
    46fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    46fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4700:	01 97       	sbiw	r24, 0x01	; 1
    4702:	9e af       	std	Y+62, r25	; 0x3e
    4704:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4706:	8d ad       	ldd	r24, Y+61	; 0x3d
    4708:	9e ad       	ldd	r25, Y+62	; 0x3e
    470a:	00 97       	sbiw	r24, 0x00	; 0
    470c:	69 f7       	brne	.-38     	; 0x46e8 <main+0x1030>
    470e:	16 c0       	rjmp	.+44     	; 0x473c <main+0x1084>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4710:	fe 01       	movw	r30, r28
    4712:	ff 96       	adiw	r30, 0x3f	; 63
    4714:	60 81       	ld	r22, Z
    4716:	71 81       	ldd	r23, Z+1	; 0x01
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	93 81       	ldd	r25, Z+3	; 0x03
    471c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	9e af       	std	Y+62, r25	; 0x3e
    4726:	8d af       	std	Y+61, r24	; 0x3d
    4728:	8d ad       	ldd	r24, Y+61	; 0x3d
    472a:	9e ad       	ldd	r25, Y+62	; 0x3e
    472c:	9a af       	std	Y+58, r25	; 0x3a
    472e:	89 af       	std	Y+57, r24	; 0x39
    4730:	89 ad       	ldd	r24, Y+57	; 0x39
    4732:	9a ad       	ldd	r25, Y+58	; 0x3a
    4734:	01 97       	sbiw	r24, 0x01	; 1
    4736:	f1 f7       	brne	.-4      	; 0x4734 <main+0x107c>
    4738:	9a af       	std	Y+58, r25	; 0x3a
    473a:	89 af       	std	Y+57, r24	; 0x39
              	              		  _delay_ms(1500);
              	              		  flag =0 ;
    473c:	fe 01       	movw	r30, r28
    473e:	e3 58       	subi	r30, 0x83	; 131
    4740:	ff 4f       	sbci	r31, 0xFF	; 255
    4742:	10 82       	st	Z, r1
    4744:	72 cc       	rjmp	.-1820   	; 0x402a <main+0x972>
              	              		  goto reenter;
              	              	   }
                                   LCD_voidWriteString("Direction: ");
    4746:	8d ea       	ldi	r24, 0xAD	; 173
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
                                   LCD_u8_GoTo_XY(1,0);
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	60 e0       	ldi	r22, 0x00	; 0
    4752:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>
                                   LCD_voidWriteString("1-CW    2-CCW");
    4756:	89 eb       	ldi	r24, 0xB9	; 185
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>

                                   while(1)
                                   {
                                   KPD_u8GetKey(&Local_u8Key);
    475e:	ce 01       	movw	r24, r28
    4760:	8f 57       	subi	r24, 0x7F	; 127
    4762:	9f 4f       	sbci	r25, 0xFF	; 255
    4764:	0e 94 16 0b 	call	0x162c	; 0x162c <KPD_u8GetKey>
                            	   if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    4768:	fe 01       	movw	r30, r28
    476a:	ef 57       	subi	r30, 0x7F	; 127
    476c:	ff 4f       	sbci	r31, 0xFF	; 255
    476e:	80 81       	ld	r24, Z
    4770:	8f 3f       	cpi	r24, 0xFF	; 255
    4772:	99 f1       	breq	.+102    	; 0x47da <main+0x1122>
                            	       {
                     	    	   switch(Local_u8Key)
    4774:	fe 01       	movw	r30, r28
    4776:	ef 57       	subi	r30, 0x7F	; 127
    4778:	ff 4f       	sbci	r31, 0xFF	; 255
    477a:	80 81       	ld	r24, Z
    477c:	28 2f       	mov	r18, r24
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	ce 57       	subi	r28, 0x7E	; 126
    4782:	df 4f       	sbci	r29, 0xFF	; 255
    4784:	39 83       	std	Y+1, r19	; 0x01
    4786:	28 83       	st	Y, r18
    4788:	c2 58       	subi	r28, 0x82	; 130
    478a:	d0 40       	sbci	r29, 0x00	; 0
    478c:	ce 57       	subi	r28, 0x7E	; 126
    478e:	df 4f       	sbci	r29, 0xFF	; 255
    4790:	88 81       	ld	r24, Y
    4792:	99 81       	ldd	r25, Y+1	; 0x01
    4794:	c2 58       	subi	r28, 0x82	; 130
    4796:	d0 40       	sbci	r29, 0x00	; 0
    4798:	81 33       	cpi	r24, 0x31	; 49
    479a:	91 05       	cpc	r25, r1
    479c:	51 f0       	breq	.+20     	; 0x47b2 <main+0x10fa>
    479e:	ce 57       	subi	r28, 0x7E	; 126
    47a0:	df 4f       	sbci	r29, 0xFF	; 255
    47a2:	e8 81       	ld	r30, Y
    47a4:	f9 81       	ldd	r31, Y+1	; 0x01
    47a6:	c2 58       	subi	r28, 0x82	; 130
    47a8:	d0 40       	sbci	r29, 0x00	; 0
    47aa:	e2 33       	cpi	r30, 0x32	; 50
    47ac:	f1 05       	cpc	r31, r1
    47ae:	59 f0       	breq	.+22     	; 0x47c6 <main+0x110e>
    47b0:	14 c0       	rjmp	.+40     	; 0x47da <main+0x1122>
                     	    	   {
                     	    	   case '1':
                     	    		   Dir =Clockwise;
    47b2:	fe 01       	movw	r30, r28
    47b4:	e6 58       	subi	r30, 0x86	; 134
    47b6:	ff 4f       	sbci	r31, 0xFF	; 255
    47b8:	10 82       	st	Z, r1
                     	    		   flag2 =1;
    47ba:	fe 01       	movw	r30, r28
    47bc:	e4 58       	subi	r30, 0x84	; 132
    47be:	ff 4f       	sbci	r31, 0xFF	; 255
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	80 83       	st	Z, r24
    47c4:	0a c0       	rjmp	.+20     	; 0x47da <main+0x1122>
                     	    		   break;
                     	    	   case '2':
                     	    		   Dir =AntiClockwise;
    47c6:	fe 01       	movw	r30, r28
    47c8:	e6 58       	subi	r30, 0x86	; 134
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	80 83       	st	Z, r24
                     	    		   flag2 =1;
    47d0:	fe 01       	movw	r30, r28
    47d2:	e4 58       	subi	r30, 0x84	; 132
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	80 83       	st	Z, r24
                     	    		   break;
                     	    	   }

                        	       }
                    	    	   if (flag2 ==1 )
    47da:	fe 01       	movw	r30, r28
    47dc:	e4 58       	subi	r30, 0x84	; 132
    47de:	ff 4f       	sbci	r31, 0xFF	; 255
    47e0:	80 81       	ld	r24, Z
    47e2:	81 30       	cpi	r24, 0x01	; 1
    47e4:	09 f0       	breq	.+2      	; 0x47e8 <main+0x1130>
    47e6:	bb cf       	rjmp	.-138    	; 0x475e <main+0x10a6>
                	    	   }

                	    	   }
           	    	           }

                	    	   if (flag ==1 )
    47e8:	fe 01       	movw	r30, r28
    47ea:	e3 58       	subi	r30, 0x83	; 131
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	80 81       	ld	r24, Z
    47f0:	81 30       	cpi	r24, 0x01	; 1
    47f2:	61 f0       	breq	.+24     	; 0x480c <main+0x1154>
    47f4:	2c cc       	rjmp	.-1960   	; 0x404e <main+0x996>
         		    		   }
                               }

                               break;
                           case '3':
                               counter =0;
    47f6:	fe 01       	movw	r30, r28
    47f8:	e1 58       	subi	r30, 0x81	; 129
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	10 82       	st	Z, r1
                               Num1=0;
    47fe:	fe 01       	movw	r30, r28
    4800:	ec 58       	subi	r30, 0x8C	; 140
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	11 82       	std	Z+1, r1	; 0x01
    4806:	10 82       	st	Z, r1
    4808:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <main+0x78>
                               break;
  	    	                  }
	    		    	   }


	       	    	     if (flag ==1 )
    480c:	fe 01       	movw	r30, r28
    480e:	e3 58       	subi	r30, 0x83	; 131
    4810:	ff 4f       	sbci	r31, 0xFF	; 255
    4812:	80 81       	ld	r24, Z
    4814:	81 30       	cpi	r24, 0x01	; 1
    4816:	09 f0       	breq	.+2      	; 0x481a <main+0x1162>
    4818:	52 cb       	rjmp	.-2396   	; 0x3ebe <main+0x806>
	       	    	       {
	       	    	    	 Stepper_u8Rotation(Num2,Dir);
    481a:	fe 01       	movw	r30, r28
    481c:	ee 58       	subi	r30, 0x8E	; 142
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	80 81       	ld	r24, Z
    4822:	91 81       	ldd	r25, Z+1	; 0x01
    4824:	fe 01       	movw	r30, r28
    4826:	e6 58       	subi	r30, 0x86	; 134
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	60 81       	ld	r22, Z
    482c:	0e 94 30 15 	call	0x2a60	; 0x2a60 <Stepper_u8Rotation>
	       	    	    	 flag =0;
    4830:	fe 01       	movw	r30, r28
    4832:	e3 58       	subi	r30, 0x83	; 131
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	10 82       	st	Z, r1
	       	    	    	 flag2 =0;
    4838:	fe 01       	movw	r30, r28
    483a:	e4 58       	subi	r30, 0x84	; 132
    483c:	ff 4f       	sbci	r31, 0xFF	; 255
    483e:	10 82       	st	Z, r1
    4840:	30 cb       	rjmp	.-2464   	; 0x3ea2 <main+0x7ea>

	    		   }
	    		   else
	    		   {

	    			   if(counter2 < 2)
    4842:	fe 01       	movw	r30, r28
    4844:	e2 58       	subi	r30, 0x82	; 130
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	80 81       	ld	r24, Z
    484a:	82 30       	cpi	r24, 0x02	; 2
    484c:	08 f0       	brcs	.+2      	; 0x4850 <main+0x1198>
    484e:	90 c0       	rjmp	.+288    	; 0x4970 <main+0x12b8>
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	aa e7       	ldi	r26, 0x7A	; 122
    4856:	b4 e4       	ldi	r27, 0x44	; 68
    4858:	8d ab       	std	Y+53, r24	; 0x35
    485a:	9e ab       	std	Y+54, r25	; 0x36
    485c:	af ab       	std	Y+55, r26	; 0x37
    485e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4860:	6d a9       	ldd	r22, Y+53	; 0x35
    4862:	7e a9       	ldd	r23, Y+54	; 0x36
    4864:	8f a9       	ldd	r24, Y+55	; 0x37
    4866:	98 ad       	ldd	r25, Y+56	; 0x38
    4868:	20 e0       	ldi	r18, 0x00	; 0
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	4a ef       	ldi	r20, 0xFA	; 250
    486e:	54 e4       	ldi	r21, 0x44	; 68
    4870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4874:	dc 01       	movw	r26, r24
    4876:	cb 01       	movw	r24, r22
    4878:	89 ab       	std	Y+49, r24	; 0x31
    487a:	9a ab       	std	Y+50, r25	; 0x32
    487c:	ab ab       	std	Y+51, r26	; 0x33
    487e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4880:	69 a9       	ldd	r22, Y+49	; 0x31
    4882:	7a a9       	ldd	r23, Y+50	; 0x32
    4884:	8b a9       	ldd	r24, Y+51	; 0x33
    4886:	9c a9       	ldd	r25, Y+52	; 0x34
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	40 e8       	ldi	r20, 0x80	; 128
    488e:	5f e3       	ldi	r21, 0x3F	; 63
    4890:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4894:	88 23       	and	r24, r24
    4896:	2c f4       	brge	.+10     	; 0x48a2 <main+0x11ea>
		__ticks = 1;
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	98 ab       	std	Y+48, r25	; 0x30
    489e:	8f a7       	std	Y+47, r24	; 0x2f
    48a0:	3f c0       	rjmp	.+126    	; 0x4920 <main+0x1268>
	else if (__tmp > 65535)
    48a2:	69 a9       	ldd	r22, Y+49	; 0x31
    48a4:	7a a9       	ldd	r23, Y+50	; 0x32
    48a6:	8b a9       	ldd	r24, Y+51	; 0x33
    48a8:	9c a9       	ldd	r25, Y+52	; 0x34
    48aa:	20 e0       	ldi	r18, 0x00	; 0
    48ac:	3f ef       	ldi	r19, 0xFF	; 255
    48ae:	4f e7       	ldi	r20, 0x7F	; 127
    48b0:	57 e4       	ldi	r21, 0x47	; 71
    48b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48b6:	18 16       	cp	r1, r24
    48b8:	4c f5       	brge	.+82     	; 0x490c <main+0x1254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ba:	6d a9       	ldd	r22, Y+53	; 0x35
    48bc:	7e a9       	ldd	r23, Y+54	; 0x36
    48be:	8f a9       	ldd	r24, Y+55	; 0x37
    48c0:	98 ad       	ldd	r25, Y+56	; 0x38
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	40 e2       	ldi	r20, 0x20	; 32
    48c8:	51 e4       	ldi	r21, 0x41	; 65
    48ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ce:	dc 01       	movw	r26, r24
    48d0:	cb 01       	movw	r24, r22
    48d2:	bc 01       	movw	r22, r24
    48d4:	cd 01       	movw	r24, r26
    48d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48da:	dc 01       	movw	r26, r24
    48dc:	cb 01       	movw	r24, r22
    48de:	98 ab       	std	Y+48, r25	; 0x30
    48e0:	8f a7       	std	Y+47, r24	; 0x2f
    48e2:	0f c0       	rjmp	.+30     	; 0x4902 <main+0x124a>
    48e4:	88 ec       	ldi	r24, 0xC8	; 200
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	9e a7       	std	Y+46, r25	; 0x2e
    48ea:	8d a7       	std	Y+45, r24	; 0x2d
    48ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    48ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    48f0:	01 97       	sbiw	r24, 0x01	; 1
    48f2:	f1 f7       	brne	.-4      	; 0x48f0 <main+0x1238>
    48f4:	9e a7       	std	Y+46, r25	; 0x2e
    48f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    48fa:	98 a9       	ldd	r25, Y+48	; 0x30
    48fc:	01 97       	sbiw	r24, 0x01	; 1
    48fe:	98 ab       	std	Y+48, r25	; 0x30
    4900:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4902:	8f a5       	ldd	r24, Y+47	; 0x2f
    4904:	98 a9       	ldd	r25, Y+48	; 0x30
    4906:	00 97       	sbiw	r24, 0x00	; 0
    4908:	69 f7       	brne	.-38     	; 0x48e4 <main+0x122c>
    490a:	14 c0       	rjmp	.+40     	; 0x4934 <main+0x127c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    490c:	69 a9       	ldd	r22, Y+49	; 0x31
    490e:	7a a9       	ldd	r23, Y+50	; 0x32
    4910:	8b a9       	ldd	r24, Y+51	; 0x33
    4912:	9c a9       	ldd	r25, Y+52	; 0x34
    4914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4918:	dc 01       	movw	r26, r24
    491a:	cb 01       	movw	r24, r22
    491c:	98 ab       	std	Y+48, r25	; 0x30
    491e:	8f a7       	std	Y+47, r24	; 0x2f
    4920:	8f a5       	ldd	r24, Y+47	; 0x2f
    4922:	98 a9       	ldd	r25, Y+48	; 0x30
    4924:	9c a7       	std	Y+44, r25	; 0x2c
    4926:	8b a7       	std	Y+43, r24	; 0x2b
    4928:	8b a5       	ldd	r24, Y+43	; 0x2b
    492a:	9c a5       	ldd	r25, Y+44	; 0x2c
    492c:	01 97       	sbiw	r24, 0x01	; 1
    492e:	f1 f7       	brne	.-4      	; 0x492c <main+0x1274>
    4930:	9c a7       	std	Y+44, r25	; 0x2c
    4932:	8b a7       	std	Y+43, r24	; 0x2b
	    			   {
	    	    		 _delay_ms(1000);
	    	    		 LCD_voidInit();
    4934:	0e 94 88 0c 	call	0x1910	; 0x1910 <LCD_voidInit>
	    			     LCD_voidWriteString("  Try Again ");
    4938:	84 e0       	ldi	r24, 0x04	; 4
    493a:	91 e0       	ldi	r25, 0x01	; 1
    493c:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
	    			     counter = 0 ;
    4940:	fe 01       	movw	r30, r28
    4942:	e1 58       	subi	r30, 0x81	; 129
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	10 82       	st	Z, r1
	    			     Num1=0;
    4948:	fe 01       	movw	r30, r28
    494a:	ec 58       	subi	r30, 0x8C	; 140
    494c:	ff 4f       	sbci	r31, 0xFF	; 255
    494e:	11 82       	std	Z+1, r1	; 0x01
    4950:	10 82       	st	Z, r1
	    			     counter2++;
    4952:	de 01       	movw	r26, r28
    4954:	a2 58       	subi	r26, 0x82	; 130
    4956:	bf 4f       	sbci	r27, 0xFF	; 255
    4958:	fe 01       	movw	r30, r28
    495a:	e2 58       	subi	r30, 0x82	; 130
    495c:	ff 4f       	sbci	r31, 0xFF	; 255
    495e:	80 81       	ld	r24, Z
    4960:	8f 5f       	subi	r24, 0xFF	; 255
    4962:	8c 93       	st	X, r24
	    			     LCD_u8_GoTo_XY(1,4);
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	64 e0       	ldi	r22, 0x04	; 4
    4968:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_u8_GoTo_XY>
    496c:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <main+0x8c>
    4970:	80 e0       	ldi	r24, 0x00	; 0
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	aa e7       	ldi	r26, 0x7A	; 122
    4976:	b4 e4       	ldi	r27, 0x44	; 68
    4978:	8f a3       	std	Y+39, r24	; 0x27
    497a:	98 a7       	std	Y+40, r25	; 0x28
    497c:	a9 a7       	std	Y+41, r26	; 0x29
    497e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4980:	6f a1       	ldd	r22, Y+39	; 0x27
    4982:	78 a5       	ldd	r23, Y+40	; 0x28
    4984:	89 a5       	ldd	r24, Y+41	; 0x29
    4986:	9a a5       	ldd	r25, Y+42	; 0x2a
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	4a ef       	ldi	r20, 0xFA	; 250
    498e:	54 e4       	ldi	r21, 0x44	; 68
    4990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4994:	dc 01       	movw	r26, r24
    4996:	cb 01       	movw	r24, r22
    4998:	8b a3       	std	Y+35, r24	; 0x23
    499a:	9c a3       	std	Y+36, r25	; 0x24
    499c:	ad a3       	std	Y+37, r26	; 0x25
    499e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    49a0:	6b a1       	ldd	r22, Y+35	; 0x23
    49a2:	7c a1       	ldd	r23, Y+36	; 0x24
    49a4:	8d a1       	ldd	r24, Y+37	; 0x25
    49a6:	9e a1       	ldd	r25, Y+38	; 0x26
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	40 e8       	ldi	r20, 0x80	; 128
    49ae:	5f e3       	ldi	r21, 0x3F	; 63
    49b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49b4:	88 23       	and	r24, r24
    49b6:	2c f4       	brge	.+10     	; 0x49c2 <main+0x130a>
		__ticks = 1;
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	9a a3       	std	Y+34, r25	; 0x22
    49be:	89 a3       	std	Y+33, r24	; 0x21
    49c0:	3f c0       	rjmp	.+126    	; 0x4a40 <main+0x1388>
	else if (__tmp > 65535)
    49c2:	6b a1       	ldd	r22, Y+35	; 0x23
    49c4:	7c a1       	ldd	r23, Y+36	; 0x24
    49c6:	8d a1       	ldd	r24, Y+37	; 0x25
    49c8:	9e a1       	ldd	r25, Y+38	; 0x26
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	3f ef       	ldi	r19, 0xFF	; 255
    49ce:	4f e7       	ldi	r20, 0x7F	; 127
    49d0:	57 e4       	ldi	r21, 0x47	; 71
    49d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49d6:	18 16       	cp	r1, r24
    49d8:	4c f5       	brge	.+82     	; 0x4a2c <main+0x1374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49da:	6f a1       	ldd	r22, Y+39	; 0x27
    49dc:	78 a5       	ldd	r23, Y+40	; 0x28
    49de:	89 a5       	ldd	r24, Y+41	; 0x29
    49e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    49e2:	20 e0       	ldi	r18, 0x00	; 0
    49e4:	30 e0       	ldi	r19, 0x00	; 0
    49e6:	40 e2       	ldi	r20, 0x20	; 32
    49e8:	51 e4       	ldi	r21, 0x41	; 65
    49ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ee:	dc 01       	movw	r26, r24
    49f0:	cb 01       	movw	r24, r22
    49f2:	bc 01       	movw	r22, r24
    49f4:	cd 01       	movw	r24, r26
    49f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fa:	dc 01       	movw	r26, r24
    49fc:	cb 01       	movw	r24, r22
    49fe:	9a a3       	std	Y+34, r25	; 0x22
    4a00:	89 a3       	std	Y+33, r24	; 0x21
    4a02:	0f c0       	rjmp	.+30     	; 0x4a22 <main+0x136a>
    4a04:	88 ec       	ldi	r24, 0xC8	; 200
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	98 a3       	std	Y+32, r25	; 0x20
    4a0a:	8f 8f       	std	Y+31, r24	; 0x1f
    4a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    4a10:	01 97       	sbiw	r24, 0x01	; 1
    4a12:	f1 f7       	brne	.-4      	; 0x4a10 <main+0x1358>
    4a14:	98 a3       	std	Y+32, r25	; 0x20
    4a16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a18:	89 a1       	ldd	r24, Y+33	; 0x21
    4a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    4a1c:	01 97       	sbiw	r24, 0x01	; 1
    4a1e:	9a a3       	std	Y+34, r25	; 0x22
    4a20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a22:	89 a1       	ldd	r24, Y+33	; 0x21
    4a24:	9a a1       	ldd	r25, Y+34	; 0x22
    4a26:	00 97       	sbiw	r24, 0x00	; 0
    4a28:	69 f7       	brne	.-38     	; 0x4a04 <main+0x134c>
    4a2a:	14 c0       	rjmp	.+40     	; 0x4a54 <main+0x139c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    4a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    4a30:	8d a1       	ldd	r24, Y+37	; 0x25
    4a32:	9e a1       	ldd	r25, Y+38	; 0x26
    4a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	9a a3       	std	Y+34, r25	; 0x22
    4a3e:	89 a3       	std	Y+33, r24	; 0x21
    4a40:	89 a1       	ldd	r24, Y+33	; 0x21
    4a42:	9a a1       	ldd	r25, Y+34	; 0x22
    4a44:	9e 8f       	std	Y+30, r25	; 0x1e
    4a46:	8d 8f       	std	Y+29, r24	; 0x1d
    4a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a4c:	01 97       	sbiw	r24, 0x01	; 1
    4a4e:	f1 f7       	brne	.-4      	; 0x4a4c <main+0x1394>
    4a50:	9e 8f       	std	Y+30, r25	; 0x1e
    4a52:	8d 8f       	std	Y+29, r24	; 0x1d
	    			   }

	    			   else
	    			   {
	    				   _delay_ms(1000);
	    				   LCD_voidClear();
    4a54:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClear>
	    				   LCD_voidCursorBlinkerOff();
    4a58:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_voidCursorBlinkerOff>
	    				   LCD_voidWriteString(" Out of tries !");
    4a5c:	81 e1       	ldi	r24, 0x11	; 17
    4a5e:	91 e0       	ldi	r25, 0x01	; 1
    4a60:	0e 94 ab 13 	call	0x2756	; 0x2756 <LCD_voidWriteString>
	    				   for(u8 x =0; ; x++)
    4a64:	fe 01       	movw	r30, r28
    4a66:	ef 58       	subi	r30, 0x8F	; 143
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	10 82       	st	Z, r1
	    				   {
	        			   DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_LOW);
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	66 e0       	ldi	r22, 0x06	; 6
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	aa ef       	ldi	r26, 0xFA	; 250
    4a7c:	b3 e4       	ldi	r27, 0x43	; 67
    4a7e:	89 8f       	std	Y+25, r24	; 0x19
    4a80:	9a 8f       	std	Y+26, r25	; 0x1a
    4a82:	ab 8f       	std	Y+27, r26	; 0x1b
    4a84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a86:	69 8d       	ldd	r22, Y+25	; 0x19
    4a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	4a ef       	ldi	r20, 0xFA	; 250
    4a94:	54 e4       	ldi	r21, 0x44	; 68
    4a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	8d 8b       	std	Y+21, r24	; 0x15
    4aa0:	9e 8b       	std	Y+22, r25	; 0x16
    4aa2:	af 8b       	std	Y+23, r26	; 0x17
    4aa4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    4aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    4aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    4aac:	98 8d       	ldd	r25, Y+24	; 0x18
    4aae:	20 e0       	ldi	r18, 0x00	; 0
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	40 e8       	ldi	r20, 0x80	; 128
    4ab4:	5f e3       	ldi	r21, 0x3F	; 63
    4ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aba:	88 23       	and	r24, r24
    4abc:	2c f4       	brge	.+10     	; 0x4ac8 <main+0x1410>
		__ticks = 1;
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	9c 8b       	std	Y+20, r25	; 0x14
    4ac4:	8b 8b       	std	Y+19, r24	; 0x13
    4ac6:	3f c0       	rjmp	.+126    	; 0x4b46 <main+0x148e>
	else if (__tmp > 65535)
    4ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    4aca:	7e 89       	ldd	r23, Y+22	; 0x16
    4acc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ace:	98 8d       	ldd	r25, Y+24	; 0x18
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	3f ef       	ldi	r19, 0xFF	; 255
    4ad4:	4f e7       	ldi	r20, 0x7F	; 127
    4ad6:	57 e4       	ldi	r21, 0x47	; 71
    4ad8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4adc:	18 16       	cp	r1, r24
    4ade:	4c f5       	brge	.+82     	; 0x4b32 <main+0x147a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    4ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ae8:	20 e0       	ldi	r18, 0x00	; 0
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	40 e2       	ldi	r20, 0x20	; 32
    4aee:	51 e4       	ldi	r21, 0x41	; 65
    4af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af4:	dc 01       	movw	r26, r24
    4af6:	cb 01       	movw	r24, r22
    4af8:	bc 01       	movw	r22, r24
    4afa:	cd 01       	movw	r24, r26
    4afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	9c 8b       	std	Y+20, r25	; 0x14
    4b06:	8b 8b       	std	Y+19, r24	; 0x13
    4b08:	0f c0       	rjmp	.+30     	; 0x4b28 <main+0x1470>
    4b0a:	88 ec       	ldi	r24, 0xC8	; 200
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	9a 8b       	std	Y+18, r25	; 0x12
    4b10:	89 8b       	std	Y+17, r24	; 0x11
    4b12:	89 89       	ldd	r24, Y+17	; 0x11
    4b14:	9a 89       	ldd	r25, Y+18	; 0x12
    4b16:	01 97       	sbiw	r24, 0x01	; 1
    4b18:	f1 f7       	brne	.-4      	; 0x4b16 <main+0x145e>
    4b1a:	9a 8b       	std	Y+18, r25	; 0x12
    4b1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b20:	9c 89       	ldd	r25, Y+20	; 0x14
    4b22:	01 97       	sbiw	r24, 0x01	; 1
    4b24:	9c 8b       	std	Y+20, r25	; 0x14
    4b26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b28:	8b 89       	ldd	r24, Y+19	; 0x13
    4b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b2c:	00 97       	sbiw	r24, 0x00	; 0
    4b2e:	69 f7       	brne	.-38     	; 0x4b0a <main+0x1452>
    4b30:	14 c0       	rjmp	.+40     	; 0x4b5a <main+0x14a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b32:	6d 89       	ldd	r22, Y+21	; 0x15
    4b34:	7e 89       	ldd	r23, Y+22	; 0x16
    4b36:	8f 89       	ldd	r24, Y+23	; 0x17
    4b38:	98 8d       	ldd	r25, Y+24	; 0x18
    4b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	9c 8b       	std	Y+20, r25	; 0x14
    4b44:	8b 8b       	std	Y+19, r24	; 0x13
    4b46:	8b 89       	ldd	r24, Y+19	; 0x13
    4b48:	9c 89       	ldd	r25, Y+20	; 0x14
    4b4a:	98 8b       	std	Y+16, r25	; 0x10
    4b4c:	8f 87       	std	Y+15, r24	; 0x0f
    4b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b50:	98 89       	ldd	r25, Y+16	; 0x10
    4b52:	01 97       	sbiw	r24, 0x01	; 1
    4b54:	f1 f7       	brne	.-4      	; 0x4b52 <main+0x149a>
    4b56:	98 8b       	std	Y+16, r25	; 0x10
    4b58:	8f 87       	std	Y+15, r24	; 0x0f
	        			   _delay_ms(500);
	        			   DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN6,DIO_u8_HIGH);
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	66 e0       	ldi	r22, 0x06	; 6
    4b5e:	41 e0       	ldi	r20, 0x01	; 1
    4b60:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	aa ef       	ldi	r26, 0xFA	; 250
    4b6a:	b3 e4       	ldi	r27, 0x43	; 67
    4b6c:	8b 87       	std	Y+11, r24	; 0x0b
    4b6e:	9c 87       	std	Y+12, r25	; 0x0c
    4b70:	ad 87       	std	Y+13, r26	; 0x0d
    4b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	4a ef       	ldi	r20, 0xFA	; 250
    4b82:	54 e4       	ldi	r21, 0x44	; 68
    4b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b88:	dc 01       	movw	r26, r24
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	8f 83       	std	Y+7, r24	; 0x07
    4b8e:	98 87       	std	Y+8, r25	; 0x08
    4b90:	a9 87       	std	Y+9, r26	; 0x09
    4b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b94:	6f 81       	ldd	r22, Y+7	; 0x07
    4b96:	78 85       	ldd	r23, Y+8	; 0x08
    4b98:	89 85       	ldd	r24, Y+9	; 0x09
    4b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	40 e8       	ldi	r20, 0x80	; 128
    4ba2:	5f e3       	ldi	r21, 0x3F	; 63
    4ba4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ba8:	88 23       	and	r24, r24
    4baa:	2c f4       	brge	.+10     	; 0x4bb6 <main+0x14fe>
		__ticks = 1;
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	9e 83       	std	Y+6, r25	; 0x06
    4bb2:	8d 83       	std	Y+5, r24	; 0x05
    4bb4:	3f c0       	rjmp	.+126    	; 0x4c34 <main+0x157c>
	else if (__tmp > 65535)
    4bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    4bb8:	78 85       	ldd	r23, Y+8	; 0x08
    4bba:	89 85       	ldd	r24, Y+9	; 0x09
    4bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	3f ef       	ldi	r19, 0xFF	; 255
    4bc2:	4f e7       	ldi	r20, 0x7F	; 127
    4bc4:	57 e4       	ldi	r21, 0x47	; 71
    4bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bca:	18 16       	cp	r1, r24
    4bcc:	4c f5       	brge	.+82     	; 0x4c20 <main+0x1568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	40 e2       	ldi	r20, 0x20	; 32
    4bdc:	51 e4       	ldi	r21, 0x41	; 65
    4bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be2:	dc 01       	movw	r26, r24
    4be4:	cb 01       	movw	r24, r22
    4be6:	bc 01       	movw	r22, r24
    4be8:	cd 01       	movw	r24, r26
    4bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bee:	dc 01       	movw	r26, r24
    4bf0:	cb 01       	movw	r24, r22
    4bf2:	9e 83       	std	Y+6, r25	; 0x06
    4bf4:	8d 83       	std	Y+5, r24	; 0x05
    4bf6:	0f c0       	rjmp	.+30     	; 0x4c16 <main+0x155e>
    4bf8:	88 ec       	ldi	r24, 0xC8	; 200
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	9c 83       	std	Y+4, r25	; 0x04
    4bfe:	8b 83       	std	Y+3, r24	; 0x03
    4c00:	8b 81       	ldd	r24, Y+3	; 0x03
    4c02:	9c 81       	ldd	r25, Y+4	; 0x04
    4c04:	01 97       	sbiw	r24, 0x01	; 1
    4c06:	f1 f7       	brne	.-4      	; 0x4c04 <main+0x154c>
    4c08:	9c 83       	std	Y+4, r25	; 0x04
    4c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	9e 83       	std	Y+6, r25	; 0x06
    4c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c16:	8d 81       	ldd	r24, Y+5	; 0x05
    4c18:	9e 81       	ldd	r25, Y+6	; 0x06
    4c1a:	00 97       	sbiw	r24, 0x00	; 0
    4c1c:	69 f7       	brne	.-38     	; 0x4bf8 <main+0x1540>
    4c1e:	14 c0       	rjmp	.+40     	; 0x4c48 <main+0x1590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c20:	6f 81       	ldd	r22, Y+7	; 0x07
    4c22:	78 85       	ldd	r23, Y+8	; 0x08
    4c24:	89 85       	ldd	r24, Y+9	; 0x09
    4c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2c:	dc 01       	movw	r26, r24
    4c2e:	cb 01       	movw	r24, r22
    4c30:	9e 83       	std	Y+6, r25	; 0x06
    4c32:	8d 83       	std	Y+5, r24	; 0x05
    4c34:	8d 81       	ldd	r24, Y+5	; 0x05
    4c36:	9e 81       	ldd	r25, Y+6	; 0x06
    4c38:	9a 83       	std	Y+2, r25	; 0x02
    4c3a:	89 83       	std	Y+1, r24	; 0x01
    4c3c:	89 81       	ldd	r24, Y+1	; 0x01
    4c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c40:	01 97       	sbiw	r24, 0x01	; 1
    4c42:	f1 f7       	brne	.-4      	; 0x4c40 <main+0x1588>
    4c44:	9a 83       	std	Y+2, r25	; 0x02
    4c46:	89 83       	std	Y+1, r24	; 0x01
	    			   {
	    				   _delay_ms(1000);
	    				   LCD_voidClear();
	    				   LCD_voidCursorBlinkerOff();
	    				   LCD_voidWriteString(" Out of tries !");
	    				   for(u8 x =0; ; x++)
    4c48:	de 01       	movw	r26, r28
    4c4a:	af 58       	subi	r26, 0x8F	; 143
    4c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c4e:	fe 01       	movw	r30, r28
    4c50:	ef 58       	subi	r30, 0x8F	; 143
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	80 81       	ld	r24, Z
    4c56:	8f 5f       	subi	r24, 0xFF	; 255
    4c58:	8c 93       	st	X, r24
    4c5a:	08 cf       	rjmp	.-496    	; 0x4a6c <main+0x13b4>

00004c5c <__udivmodsi4>:
    4c5c:	a1 e2       	ldi	r26, 0x21	; 33
    4c5e:	1a 2e       	mov	r1, r26
    4c60:	aa 1b       	sub	r26, r26
    4c62:	bb 1b       	sub	r27, r27
    4c64:	fd 01       	movw	r30, r26
    4c66:	0d c0       	rjmp	.+26     	; 0x4c82 <__udivmodsi4_ep>

00004c68 <__udivmodsi4_loop>:
    4c68:	aa 1f       	adc	r26, r26
    4c6a:	bb 1f       	adc	r27, r27
    4c6c:	ee 1f       	adc	r30, r30
    4c6e:	ff 1f       	adc	r31, r31
    4c70:	a2 17       	cp	r26, r18
    4c72:	b3 07       	cpc	r27, r19
    4c74:	e4 07       	cpc	r30, r20
    4c76:	f5 07       	cpc	r31, r21
    4c78:	20 f0       	brcs	.+8      	; 0x4c82 <__udivmodsi4_ep>
    4c7a:	a2 1b       	sub	r26, r18
    4c7c:	b3 0b       	sbc	r27, r19
    4c7e:	e4 0b       	sbc	r30, r20
    4c80:	f5 0b       	sbc	r31, r21

00004c82 <__udivmodsi4_ep>:
    4c82:	66 1f       	adc	r22, r22
    4c84:	77 1f       	adc	r23, r23
    4c86:	88 1f       	adc	r24, r24
    4c88:	99 1f       	adc	r25, r25
    4c8a:	1a 94       	dec	r1
    4c8c:	69 f7       	brne	.-38     	; 0x4c68 <__udivmodsi4_loop>
    4c8e:	60 95       	com	r22
    4c90:	70 95       	com	r23
    4c92:	80 95       	com	r24
    4c94:	90 95       	com	r25
    4c96:	9b 01       	movw	r18, r22
    4c98:	ac 01       	movw	r20, r24
    4c9a:	bd 01       	movw	r22, r26
    4c9c:	cf 01       	movw	r24, r30
    4c9e:	08 95       	ret

00004ca0 <__prologue_saves__>:
    4ca0:	2f 92       	push	r2
    4ca2:	3f 92       	push	r3
    4ca4:	4f 92       	push	r4
    4ca6:	5f 92       	push	r5
    4ca8:	6f 92       	push	r6
    4caa:	7f 92       	push	r7
    4cac:	8f 92       	push	r8
    4cae:	9f 92       	push	r9
    4cb0:	af 92       	push	r10
    4cb2:	bf 92       	push	r11
    4cb4:	cf 92       	push	r12
    4cb6:	df 92       	push	r13
    4cb8:	ef 92       	push	r14
    4cba:	ff 92       	push	r15
    4cbc:	0f 93       	push	r16
    4cbe:	1f 93       	push	r17
    4cc0:	cf 93       	push	r28
    4cc2:	df 93       	push	r29
    4cc4:	cd b7       	in	r28, 0x3d	; 61
    4cc6:	de b7       	in	r29, 0x3e	; 62
    4cc8:	ca 1b       	sub	r28, r26
    4cca:	db 0b       	sbc	r29, r27
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	f8 94       	cli
    4cd0:	de bf       	out	0x3e, r29	; 62
    4cd2:	0f be       	out	0x3f, r0	; 63
    4cd4:	cd bf       	out	0x3d, r28	; 61
    4cd6:	09 94       	ijmp

00004cd8 <__epilogue_restores__>:
    4cd8:	2a 88       	ldd	r2, Y+18	; 0x12
    4cda:	39 88       	ldd	r3, Y+17	; 0x11
    4cdc:	48 88       	ldd	r4, Y+16	; 0x10
    4cde:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ce0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ce2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ce4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ce6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ce8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cea:	b9 84       	ldd	r11, Y+9	; 0x09
    4cec:	c8 84       	ldd	r12, Y+8	; 0x08
    4cee:	df 80       	ldd	r13, Y+7	; 0x07
    4cf0:	ee 80       	ldd	r14, Y+6	; 0x06
    4cf2:	fd 80       	ldd	r15, Y+5	; 0x05
    4cf4:	0c 81       	ldd	r16, Y+4	; 0x04
    4cf6:	1b 81       	ldd	r17, Y+3	; 0x03
    4cf8:	aa 81       	ldd	r26, Y+2	; 0x02
    4cfa:	b9 81       	ldd	r27, Y+1	; 0x01
    4cfc:	ce 0f       	add	r28, r30
    4cfe:	d1 1d       	adc	r29, r1
    4d00:	0f b6       	in	r0, 0x3f	; 63
    4d02:	f8 94       	cli
    4d04:	de bf       	out	0x3e, r29	; 62
    4d06:	0f be       	out	0x3f, r0	; 63
    4d08:	cd bf       	out	0x3d, r28	; 61
    4d0a:	ed 01       	movw	r28, r26
    4d0c:	08 95       	ret

00004d0e <_exit>:
    4d0e:	f8 94       	cli

00004d10 <__stop_program>:
    4d10:	ff cf       	rjmp	.-2      	; 0x4d10 <__stop_program>
