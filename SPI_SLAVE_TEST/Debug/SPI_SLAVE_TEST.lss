
SPI_SLAVE_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b74  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000ed0  00000000  00000000  00000bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000009ed  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 92 05 	call	0xb24	; 0xb24 <main>
  64:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
  76:	ea e3       	ldi	r30, 0x3A	; 58
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	80 83       	st	Z, r24
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
  7e:	e7 e3       	ldi	r30, 0x37	; 55
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
  8c:	e1 e3       	ldi	r30, 0x31	; 49
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
  92:	eb e3       	ldi	r30, 0x3B	; 59
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
  98:	e8 e3       	ldi	r30, 0x38	; 56
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	80 83       	st	Z, r24
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
  a0:	e5 e3       	ldi	r30, 0x35	; 53
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
  a6:	e2 e3       	ldi	r30, 0x32	; 50
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
  ac:	0f 90       	pop	r0
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	2e 97       	sbiw	r28, 0x0e	; 14
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	8a 83       	std	Y+2, r24	; 0x02
  ca:	6b 83       	std	Y+3, r22	; 0x03
  cc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	08 f0       	brcs	.+2      	; 0xda <DIO_u8SetPinDirection+0x26>
  d8:	0c c1       	rjmp	.+536    	; 0x2f2 <DIO_u8SetPinDirection+0x23e>
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	08 f0       	brcs	.+2      	; 0xe2 <DIO_u8SetPinDirection+0x2e>
  e0:	08 c1       	rjmp	.+528    	; 0x2f2 <DIO_u8SetPinDirection+0x23e>
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	88 23       	and	r24, r24
  e6:	21 f0       	breq	.+8      	; 0xf0 <DIO_u8SetPinDirection+0x3c>
  e8:	8c 81       	ldd	r24, Y+4	; 0x04
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	09 f0       	breq	.+2      	; 0xf0 <DIO_u8SetPinDirection+0x3c>
  ee:	01 c1       	rjmp	.+514    	; 0x2f2 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	3e 87       	std	Y+14, r19	; 0x0e
  f8:	2d 87       	std	Y+13, r18	; 0x0d
  fa:	8d 85       	ldd	r24, Y+13	; 0x0d
  fc:	9e 85       	ldd	r25, Y+14	; 0x0e
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	91 05       	cpc	r25, r1
 102:	09 f4       	brne	.+2      	; 0x106 <DIO_u8SetPinDirection+0x52>
 104:	4f c0       	rjmp	.+158    	; 0x1a4 <DIO_u8SetPinDirection+0xf0>
 106:	2d 85       	ldd	r18, Y+13	; 0x0d
 108:	3e 85       	ldd	r19, Y+14	; 0x0e
 10a:	22 30       	cpi	r18, 0x02	; 2
 10c:	31 05       	cpc	r19, r1
 10e:	2c f4       	brge	.+10     	; 0x11a <DIO_u8SetPinDirection+0x66>
 110:	8d 85       	ldd	r24, Y+13	; 0x0d
 112:	9e 85       	ldd	r25, Y+14	; 0x0e
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	71 f0       	breq	.+28     	; 0x134 <DIO_u8SetPinDirection+0x80>
 118:	ed c0       	rjmp	.+474    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
 11a:	2d 85       	ldd	r18, Y+13	; 0x0d
 11c:	3e 85       	ldd	r19, Y+14	; 0x0e
 11e:	22 30       	cpi	r18, 0x02	; 2
 120:	31 05       	cpc	r19, r1
 122:	09 f4       	brne	.+2      	; 0x126 <DIO_u8SetPinDirection+0x72>
 124:	77 c0       	rjmp	.+238    	; 0x214 <DIO_u8SetPinDirection+0x160>
 126:	8d 85       	ldd	r24, Y+13	; 0x0d
 128:	9e 85       	ldd	r25, Y+14	; 0x0e
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	91 05       	cpc	r25, r1
 12e:	09 f4       	brne	.+2      	; 0x132 <DIO_u8SetPinDirection+0x7e>
 130:	a9 c0       	rjmp	.+338    	; 0x284 <DIO_u8SetPinDirection+0x1d0>
 132:	e0 c0       	rjmp	.+448    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	3c 87       	std	Y+12, r19	; 0x0c
 13c:	2b 87       	std	Y+11, r18	; 0x0b
 13e:	8b 85       	ldd	r24, Y+11	; 0x0b
 140:	9c 85       	ldd	r25, Y+12	; 0x0c
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	d1 f0       	breq	.+52     	; 0x17a <DIO_u8SetPinDirection+0xc6>
 146:	2b 85       	ldd	r18, Y+11	; 0x0b
 148:	3c 85       	ldd	r19, Y+12	; 0x0c
 14a:	21 30       	cpi	r18, 0x01	; 1
 14c:	31 05       	cpc	r19, r1
 14e:	09 f0       	breq	.+2      	; 0x152 <DIO_u8SetPinDirection+0x9e>
 150:	d1 c0       	rjmp	.+418    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
 152:	aa e3       	ldi	r26, 0x3A	; 58
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	ea e3       	ldi	r30, 0x3A	; 58
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8SetPinDirection+0xbc>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8SetPinDirection+0xb8>
 174:	84 2b       	or	r24, r20
 176:	8c 93       	st	X, r24
 178:	bd c0       	rjmp	.+378    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
 17a:	aa e3       	ldi	r26, 0x3A	; 58
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	ea e3       	ldi	r30, 0x3A	; 58
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_u8SetPinDirection+0xe4>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_u8SetPinDirection+0xe0>
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	a8 c0       	rjmp	.+336    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	3a 87       	std	Y+10, r19	; 0x0a
 1ac:	29 87       	std	Y+9, r18	; 0x09
 1ae:	89 85       	ldd	r24, Y+9	; 0x09
 1b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	d1 f0       	breq	.+52     	; 0x1ea <DIO_u8SetPinDirection+0x136>
 1b6:	29 85       	ldd	r18, Y+9	; 0x09
 1b8:	3a 85       	ldd	r19, Y+10	; 0x0a
 1ba:	21 30       	cpi	r18, 0x01	; 1
 1bc:	31 05       	cpc	r19, r1
 1be:	09 f0       	breq	.+2      	; 0x1c2 <DIO_u8SetPinDirection+0x10e>
 1c0:	99 c0       	rjmp	.+306    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
 1c2:	a7 e3       	ldi	r26, 0x37	; 55
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e7 e3       	ldi	r30, 0x37	; 55
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	48 2f       	mov	r20, r24
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 2e       	mov	r0, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_u8SetPinDirection+0x12c>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_u8SetPinDirection+0x128>
 1e4:	84 2b       	or	r24, r20
 1e6:	8c 93       	st	X, r24
 1e8:	85 c0       	rjmp	.+266    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
 1ea:	a7 e3       	ldi	r26, 0x37	; 55
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	e7 e3       	ldi	r30, 0x37	; 55
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	48 2f       	mov	r20, r24
 1f6:	8b 81       	ldd	r24, Y+3	; 0x03
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 2e       	mov	r0, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_u8SetPinDirection+0x154>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_u8SetPinDirection+0x150>
 20c:	80 95       	com	r24
 20e:	84 23       	and	r24, r20
 210:	8c 93       	st	X, r24
 212:	70 c0       	rjmp	.+224    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
 214:	8c 81       	ldd	r24, Y+4	; 0x04
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	38 87       	std	Y+8, r19	; 0x08
 21c:	2f 83       	std	Y+7, r18	; 0x07
 21e:	8f 81       	ldd	r24, Y+7	; 0x07
 220:	98 85       	ldd	r25, Y+8	; 0x08
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	d1 f0       	breq	.+52     	; 0x25a <DIO_u8SetPinDirection+0x1a6>
 226:	2f 81       	ldd	r18, Y+7	; 0x07
 228:	38 85       	ldd	r19, Y+8	; 0x08
 22a:	21 30       	cpi	r18, 0x01	; 1
 22c:	31 05       	cpc	r19, r1
 22e:	09 f0       	breq	.+2      	; 0x232 <DIO_u8SetPinDirection+0x17e>
 230:	61 c0       	rjmp	.+194    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
 232:	a4 e3       	ldi	r26, 0x34	; 52
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	e4 e3       	ldi	r30, 0x34	; 52
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 2e       	mov	r0, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_u8SetPinDirection+0x19c>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_u8SetPinDirection+0x198>
 254:	84 2b       	or	r24, r20
 256:	8c 93       	st	X, r24
 258:	4d c0       	rjmp	.+154    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
 25a:	a4 e3       	ldi	r26, 0x34	; 52
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	e4 e3       	ldi	r30, 0x34	; 52
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	48 2f       	mov	r20, r24
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	28 2f       	mov	r18, r24
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 2e       	mov	r0, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_u8SetPinDirection+0x1c4>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_u8SetPinDirection+0x1c0>
 27c:	80 95       	com	r24
 27e:	84 23       	and	r24, r20
 280:	8c 93       	st	X, r24
 282:	38 c0       	rjmp	.+112    	; 0x2f4 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	3e 83       	std	Y+6, r19	; 0x06
 28c:	2d 83       	std	Y+5, r18	; 0x05
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
 290:	9e 81       	ldd	r25, Y+6	; 0x06
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	c9 f0       	breq	.+50     	; 0x2c8 <DIO_u8SetPinDirection+0x214>
 296:	2d 81       	ldd	r18, Y+5	; 0x05
 298:	3e 81       	ldd	r19, Y+6	; 0x06
 29a:	21 30       	cpi	r18, 0x01	; 1
 29c:	31 05       	cpc	r19, r1
 29e:	51 f5       	brne	.+84     	; 0x2f4 <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
 2a0:	a1 e3       	ldi	r26, 0x31	; 49
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	e1 e3       	ldi	r30, 0x31	; 49
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	48 2f       	mov	r20, r24
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 2e       	mov	r0, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_u8SetPinDirection+0x20a>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_u8SetPinDirection+0x206>
 2c2:	84 2b       	or	r24, r20
 2c4:	8c 93       	st	X, r24
 2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
 2c8:	a1 e3       	ldi	r26, 0x31	; 49
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e1 e3       	ldi	r30, 0x31	; 49
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	48 2f       	mov	r20, r24
 2d4:	8b 81       	ldd	r24, Y+3	; 0x03
 2d6:	28 2f       	mov	r18, r24
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_u8SetPinDirection+0x232>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_u8SetPinDirection+0x22e>
 2ea:	80 95       	com	r24
 2ec:	84 23       	and	r24, r20
 2ee:	8c 93       	st	X, r24
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
 2f2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 2f6:	2e 96       	adiw	r28, 0x0e	; 14
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	cf 91       	pop	r28
 304:	df 91       	pop	r29
 306:	08 95       	ret

00000308 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
 308:	df 93       	push	r29
 30a:	cf 93       	push	r28
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	2e 97       	sbiw	r28, 0x0e	; 14
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
 31c:	8a 83       	std	Y+2, r24	; 0x02
 31e:	6b 83       	std	Y+3, r22	; 0x03
 320:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	84 30       	cpi	r24, 0x04	; 4
 32a:	08 f0       	brcs	.+2      	; 0x32e <DIO_u8SetPinValue+0x26>
 32c:	0c c1       	rjmp	.+536    	; 0x546 <DIO_u8SetPinValue+0x23e>
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	08 f0       	brcs	.+2      	; 0x336 <DIO_u8SetPinValue+0x2e>
 334:	08 c1       	rjmp	.+528    	; 0x546 <DIO_u8SetPinValue+0x23e>
 336:	8c 81       	ldd	r24, Y+4	; 0x04
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	21 f0       	breq	.+8      	; 0x344 <DIO_u8SetPinValue+0x3c>
 33c:	8c 81       	ldd	r24, Y+4	; 0x04
 33e:	88 23       	and	r24, r24
 340:	09 f0       	breq	.+2      	; 0x344 <DIO_u8SetPinValue+0x3c>
 342:	01 c1       	rjmp	.+514    	; 0x546 <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	28 2f       	mov	r18, r24
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	3e 87       	std	Y+14, r19	; 0x0e
 34c:	2d 87       	std	Y+13, r18	; 0x0d
 34e:	8d 85       	ldd	r24, Y+13	; 0x0d
 350:	9e 85       	ldd	r25, Y+14	; 0x0e
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	91 05       	cpc	r25, r1
 356:	09 f4       	brne	.+2      	; 0x35a <DIO_u8SetPinValue+0x52>
 358:	4f c0       	rjmp	.+158    	; 0x3f8 <DIO_u8SetPinValue+0xf0>
 35a:	2d 85       	ldd	r18, Y+13	; 0x0d
 35c:	3e 85       	ldd	r19, Y+14	; 0x0e
 35e:	22 30       	cpi	r18, 0x02	; 2
 360:	31 05       	cpc	r19, r1
 362:	2c f4       	brge	.+10     	; 0x36e <DIO_u8SetPinValue+0x66>
 364:	8d 85       	ldd	r24, Y+13	; 0x0d
 366:	9e 85       	ldd	r25, Y+14	; 0x0e
 368:	00 97       	sbiw	r24, 0x00	; 0
 36a:	71 f0       	breq	.+28     	; 0x388 <DIO_u8SetPinValue+0x80>
 36c:	ed c0       	rjmp	.+474    	; 0x548 <DIO_u8SetPinValue+0x240>
 36e:	2d 85       	ldd	r18, Y+13	; 0x0d
 370:	3e 85       	ldd	r19, Y+14	; 0x0e
 372:	22 30       	cpi	r18, 0x02	; 2
 374:	31 05       	cpc	r19, r1
 376:	09 f4       	brne	.+2      	; 0x37a <DIO_u8SetPinValue+0x72>
 378:	77 c0       	rjmp	.+238    	; 0x468 <DIO_u8SetPinValue+0x160>
 37a:	8d 85       	ldd	r24, Y+13	; 0x0d
 37c:	9e 85       	ldd	r25, Y+14	; 0x0e
 37e:	83 30       	cpi	r24, 0x03	; 3
 380:	91 05       	cpc	r25, r1
 382:	09 f4       	brne	.+2      	; 0x386 <DIO_u8SetPinValue+0x7e>
 384:	a9 c0       	rjmp	.+338    	; 0x4d8 <DIO_u8SetPinValue+0x1d0>
 386:	e0 c0       	rjmp	.+448    	; 0x548 <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	3c 87       	std	Y+12, r19	; 0x0c
 390:	2b 87       	std	Y+11, r18	; 0x0b
 392:	8b 85       	ldd	r24, Y+11	; 0x0b
 394:	9c 85       	ldd	r25, Y+12	; 0x0c
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	d1 f0       	breq	.+52     	; 0x3ce <DIO_u8SetPinValue+0xc6>
 39a:	2b 85       	ldd	r18, Y+11	; 0x0b
 39c:	3c 85       	ldd	r19, Y+12	; 0x0c
 39e:	21 30       	cpi	r18, 0x01	; 1
 3a0:	31 05       	cpc	r19, r1
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <DIO_u8SetPinValue+0x9e>
 3a4:	d1 c0       	rjmp	.+418    	; 0x548 <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
 3a6:	ab e3       	ldi	r26, 0x3B	; 59
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	eb e3       	ldi	r30, 0x3B	; 59
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8SetPinValue+0xbc>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8SetPinValue+0xb8>
 3c8:	84 2b       	or	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	bd c0       	rjmp	.+378    	; 0x548 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
 3ce:	ab e3       	ldi	r26, 0x3B	; 59
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	eb e3       	ldi	r30, 0x3B	; 59
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8SetPinValue+0xe4>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8SetPinValue+0xe0>
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8c 93       	st	X, r24
 3f6:	a8 c0       	rjmp	.+336    	; 0x548 <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	3a 87       	std	Y+10, r19	; 0x0a
 400:	29 87       	std	Y+9, r18	; 0x09
 402:	89 85       	ldd	r24, Y+9	; 0x09
 404:	9a 85       	ldd	r25, Y+10	; 0x0a
 406:	00 97       	sbiw	r24, 0x00	; 0
 408:	d1 f0       	breq	.+52     	; 0x43e <DIO_u8SetPinValue+0x136>
 40a:	29 85       	ldd	r18, Y+9	; 0x09
 40c:	3a 85       	ldd	r19, Y+10	; 0x0a
 40e:	21 30       	cpi	r18, 0x01	; 1
 410:	31 05       	cpc	r19, r1
 412:	09 f0       	breq	.+2      	; 0x416 <DIO_u8SetPinValue+0x10e>
 414:	99 c0       	rjmp	.+306    	; 0x548 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
 416:	a8 e3       	ldi	r26, 0x38	; 56
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e8 e3       	ldi	r30, 0x38	; 56
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 2e       	mov	r0, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_u8SetPinValue+0x12c>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_u8SetPinValue+0x128>
 438:	84 2b       	or	r24, r20
 43a:	8c 93       	st	X, r24
 43c:	85 c0       	rjmp	.+266    	; 0x548 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
 43e:	a8 e3       	ldi	r26, 0x38	; 56
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	e8 e3       	ldi	r30, 0x38	; 56
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	48 2f       	mov	r20, r24
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 2e       	mov	r0, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_u8SetPinValue+0x154>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_u8SetPinValue+0x150>
 460:	80 95       	com	r24
 462:	84 23       	and	r24, r20
 464:	8c 93       	st	X, r24
 466:	70 c0       	rjmp	.+224    	; 0x548 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
 468:	8c 81       	ldd	r24, Y+4	; 0x04
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	38 87       	std	Y+8, r19	; 0x08
 470:	2f 83       	std	Y+7, r18	; 0x07
 472:	8f 81       	ldd	r24, Y+7	; 0x07
 474:	98 85       	ldd	r25, Y+8	; 0x08
 476:	00 97       	sbiw	r24, 0x00	; 0
 478:	d1 f0       	breq	.+52     	; 0x4ae <DIO_u8SetPinValue+0x1a6>
 47a:	2f 81       	ldd	r18, Y+7	; 0x07
 47c:	38 85       	ldd	r19, Y+8	; 0x08
 47e:	21 30       	cpi	r18, 0x01	; 1
 480:	31 05       	cpc	r19, r1
 482:	09 f0       	breq	.+2      	; 0x486 <DIO_u8SetPinValue+0x17e>
 484:	61 c0       	rjmp	.+194    	; 0x548 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
 486:	a5 e3       	ldi	r26, 0x35	; 53
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	e5 e3       	ldi	r30, 0x35	; 53
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	48 2f       	mov	r20, r24
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	28 2f       	mov	r18, r24
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 2e       	mov	r0, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_u8SetPinValue+0x19c>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	0a 94       	dec	r0
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_u8SetPinValue+0x198>
 4a8:	84 2b       	or	r24, r20
 4aa:	8c 93       	st	X, r24
 4ac:	4d c0       	rjmp	.+154    	; 0x548 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
 4ae:	a5 e3       	ldi	r26, 0x35	; 53
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	e5 e3       	ldi	r30, 0x35	; 53
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	48 2f       	mov	r20, r24
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 2e       	mov	r0, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_u8SetPinValue+0x1c4>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_u8SetPinValue+0x1c0>
 4d0:	80 95       	com	r24
 4d2:	84 23       	and	r24, r20
 4d4:	8c 93       	st	X, r24
 4d6:	38 c0       	rjmp	.+112    	; 0x548 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	28 2f       	mov	r18, r24
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	3e 83       	std	Y+6, r19	; 0x06
 4e0:	2d 83       	std	Y+5, r18	; 0x05
 4e2:	8d 81       	ldd	r24, Y+5	; 0x05
 4e4:	9e 81       	ldd	r25, Y+6	; 0x06
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	c9 f0       	breq	.+50     	; 0x51c <DIO_u8SetPinValue+0x214>
 4ea:	2d 81       	ldd	r18, Y+5	; 0x05
 4ec:	3e 81       	ldd	r19, Y+6	; 0x06
 4ee:	21 30       	cpi	r18, 0x01	; 1
 4f0:	31 05       	cpc	r19, r1
 4f2:	51 f5       	brne	.+84     	; 0x548 <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
 4f4:	a2 e3       	ldi	r26, 0x32	; 50
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	e2 e3       	ldi	r30, 0x32	; 50
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	48 2f       	mov	r20, r24
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 2e       	mov	r0, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_u8SetPinValue+0x20a>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_u8SetPinValue+0x206>
 516:	84 2b       	or	r24, r20
 518:	8c 93       	st	X, r24
 51a:	16 c0       	rjmp	.+44     	; 0x548 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
 51c:	a2 e3       	ldi	r26, 0x32	; 50
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e2 e3       	ldi	r30, 0x32	; 50
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	48 2f       	mov	r20, r24
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 2e       	mov	r0, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_u8SetPinValue+0x232>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	0a 94       	dec	r0
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_u8SetPinValue+0x22e>
 53e:	80 95       	com	r24
 540:	84 23       	and	r24, r20
 542:	8c 93       	st	X, r24
 544:	01 c0       	rjmp	.+2      	; 0x548 <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
 546:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
 548:	89 81       	ldd	r24, Y+1	; 0x01
}
 54a:	2e 96       	adiw	r28, 0x0e	; 14
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
 556:	cf 91       	pop	r28
 558:	df 91       	pop	r29
 55a:	08 95       	ret

0000055c <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
 55c:	df 93       	push	r29
 55e:	cf 93       	push	r28
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	27 97       	sbiw	r28, 0x07	; 7
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	8a 83       	std	Y+2, r24	; 0x02
 572:	6b 83       	std	Y+3, r22	; 0x03
 574:	5d 83       	std	Y+5, r21	; 0x05
 576:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
 57c:	8a 81       	ldd	r24, Y+2	; 0x02
 57e:	84 30       	cpi	r24, 0x04	; 4
 580:	08 f0       	brcs	.+2      	; 0x584 <DIO_u8GetPinValue+0x28>
 582:	ea c0       	rjmp	.+468    	; 0x758 <DIO_u8GetPinValue+0x1fc>
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	88 30       	cpi	r24, 0x08	; 8
 588:	08 f0       	brcs	.+2      	; 0x58c <DIO_u8GetPinValue+0x30>
 58a:	e6 c0       	rjmp	.+460    	; 0x758 <DIO_u8GetPinValue+0x1fc>
 58c:	8c 81       	ldd	r24, Y+4	; 0x04
 58e:	9d 81       	ldd	r25, Y+5	; 0x05
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	09 f4       	brne	.+2      	; 0x596 <DIO_u8GetPinValue+0x3a>
 594:	e1 c0       	rjmp	.+450    	; 0x758 <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	28 2f       	mov	r18, r24
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	3f 83       	std	Y+7, r19	; 0x07
 59e:	2e 83       	std	Y+6, r18	; 0x06
 5a0:	4e 81       	ldd	r20, Y+6	; 0x06
 5a2:	5f 81       	ldd	r21, Y+7	; 0x07
 5a4:	41 30       	cpi	r20, 0x01	; 1
 5a6:	51 05       	cpc	r21, r1
 5a8:	09 f4       	brne	.+2      	; 0x5ac <DIO_u8GetPinValue+0x50>
 5aa:	48 c0       	rjmp	.+144    	; 0x63c <DIO_u8GetPinValue+0xe0>
 5ac:	8e 81       	ldd	r24, Y+6	; 0x06
 5ae:	9f 81       	ldd	r25, Y+7	; 0x07
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	91 05       	cpc	r25, r1
 5b4:	34 f4       	brge	.+12     	; 0x5c2 <DIO_u8GetPinValue+0x66>
 5b6:	2e 81       	ldd	r18, Y+6	; 0x06
 5b8:	3f 81       	ldd	r19, Y+7	; 0x07
 5ba:	21 15       	cp	r18, r1
 5bc:	31 05       	cpc	r19, r1
 5be:	71 f0       	breq	.+28     	; 0x5dc <DIO_u8GetPinValue+0x80>
 5c0:	cc c0       	rjmp	.+408    	; 0x75a <DIO_u8GetPinValue+0x1fe>
 5c2:	4e 81       	ldd	r20, Y+6	; 0x06
 5c4:	5f 81       	ldd	r21, Y+7	; 0x07
 5c6:	42 30       	cpi	r20, 0x02	; 2
 5c8:	51 05       	cpc	r21, r1
 5ca:	09 f4       	brne	.+2      	; 0x5ce <DIO_u8GetPinValue+0x72>
 5cc:	67 c0       	rjmp	.+206    	; 0x69c <DIO_u8GetPinValue+0x140>
 5ce:	8e 81       	ldd	r24, Y+6	; 0x06
 5d0:	9f 81       	ldd	r25, Y+7	; 0x07
 5d2:	83 30       	cpi	r24, 0x03	; 3
 5d4:	91 05       	cpc	r25, r1
 5d6:	09 f4       	brne	.+2      	; 0x5da <DIO_u8GetPinValue+0x7e>
 5d8:	90 c0       	rjmp	.+288    	; 0x6fa <DIO_u8GetPinValue+0x19e>
 5da:	bf c0       	rjmp	.+382    	; 0x75a <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
 5dc:	e9 e3       	ldi	r30, 0x39	; 57
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	8b 81       	ldd	r24, Y+3	; 0x03
 5e8:	88 2f       	mov	r24, r24
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	a9 01       	movw	r20, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_u8GetPinValue+0x98>
 5f0:	55 95       	asr	r21
 5f2:	47 95       	ror	r20
 5f4:	8a 95       	dec	r24
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_u8GetPinValue+0x94>
 5f8:	ca 01       	movw	r24, r20
 5fa:	81 70       	andi	r24, 0x01	; 1
 5fc:	90 70       	andi	r25, 0x00	; 0
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	21 f4       	brne	.+8      	; 0x60a <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 602:	ec 81       	ldd	r30, Y+4	; 0x04
 604:	fd 81       	ldd	r31, Y+5	; 0x05
 606:	10 82       	st	Z, r1
 608:	a8 c0       	rjmp	.+336    	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
 60a:	e9 e3       	ldi	r30, 0x39	; 57
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	a9 01       	movw	r20, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_u8GetPinValue+0xc6>
 61e:	55 95       	asr	r21
 620:	47 95       	ror	r20
 622:	8a 95       	dec	r24
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_u8GetPinValue+0xc2>
 626:	ca 01       	movw	r24, r20
 628:	81 70       	andi	r24, 0x01	; 1
 62a:	90 70       	andi	r25, 0x00	; 0
 62c:	88 23       	and	r24, r24
 62e:	09 f4       	brne	.+2      	; 0x632 <DIO_u8GetPinValue+0xd6>
 630:	94 c0       	rjmp	.+296    	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
 632:	ec 81       	ldd	r30, Y+4	; 0x04
 634:	fd 81       	ldd	r31, Y+5	; 0x05
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	80 83       	st	Z, r24
 63a:	8f c0       	rjmp	.+286    	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
 63c:	e6 e3       	ldi	r30, 0x36	; 54
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	8b 81       	ldd	r24, Y+3	; 0x03
 648:	88 2f       	mov	r24, r24
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	a9 01       	movw	r20, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_u8GetPinValue+0xf8>
 650:	55 95       	asr	r21
 652:	47 95       	ror	r20
 654:	8a 95       	dec	r24
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_u8GetPinValue+0xf4>
 658:	ca 01       	movw	r24, r20
 65a:	81 70       	andi	r24, 0x01	; 1
 65c:	90 70       	andi	r25, 0x00	; 0
 65e:	00 97       	sbiw	r24, 0x00	; 0
 660:	21 f4       	brne	.+8      	; 0x66a <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 662:	ec 81       	ldd	r30, Y+4	; 0x04
 664:	fd 81       	ldd	r31, Y+5	; 0x05
 666:	10 82       	st	Z, r1
 668:	78 c0       	rjmp	.+240    	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
 66a:	e6 e3       	ldi	r30, 0x36	; 54
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	88 2f       	mov	r24, r24
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	a9 01       	movw	r20, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_u8GetPinValue+0x126>
 67e:	55 95       	asr	r21
 680:	47 95       	ror	r20
 682:	8a 95       	dec	r24
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_u8GetPinValue+0x122>
 686:	ca 01       	movw	r24, r20
 688:	81 70       	andi	r24, 0x01	; 1
 68a:	90 70       	andi	r25, 0x00	; 0
 68c:	88 23       	and	r24, r24
 68e:	09 f4       	brne	.+2      	; 0x692 <DIO_u8GetPinValue+0x136>
 690:	64 c0       	rjmp	.+200    	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
 692:	ec 81       	ldd	r30, Y+4	; 0x04
 694:	fd 81       	ldd	r31, Y+5	; 0x05
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	80 83       	st	Z, r24
 69a:	5f c0       	rjmp	.+190    	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
 69c:	e3 e3       	ldi	r30, 0x33	; 51
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	28 2f       	mov	r18, r24
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
 6a8:	88 2f       	mov	r24, r24
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	a9 01       	movw	r20, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_u8GetPinValue+0x158>
 6b0:	55 95       	asr	r21
 6b2:	47 95       	ror	r20
 6b4:	8a 95       	dec	r24
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_u8GetPinValue+0x154>
 6b8:	ca 01       	movw	r24, r20
 6ba:	81 70       	andi	r24, 0x01	; 1
 6bc:	90 70       	andi	r25, 0x00	; 0
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	21 f4       	brne	.+8      	; 0x6ca <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 6c2:	ec 81       	ldd	r30, Y+4	; 0x04
 6c4:	fd 81       	ldd	r31, Y+5	; 0x05
 6c6:	10 82       	st	Z, r1
 6c8:	48 c0       	rjmp	.+144    	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
 6ca:	e3 e3       	ldi	r30, 0x33	; 51
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	28 2f       	mov	r18, r24
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	88 2f       	mov	r24, r24
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	a9 01       	movw	r20, r18
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_u8GetPinValue+0x186>
 6de:	55 95       	asr	r21
 6e0:	47 95       	ror	r20
 6e2:	8a 95       	dec	r24
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_u8GetPinValue+0x182>
 6e6:	ca 01       	movw	r24, r20
 6e8:	81 70       	andi	r24, 0x01	; 1
 6ea:	90 70       	andi	r25, 0x00	; 0
 6ec:	88 23       	and	r24, r24
 6ee:	a9 f1       	breq	.+106    	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
 6f0:	ec 81       	ldd	r30, Y+4	; 0x04
 6f2:	fd 81       	ldd	r31, Y+5	; 0x05
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	80 83       	st	Z, r24
 6f8:	30 c0       	rjmp	.+96     	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
 6fa:	e0 e3       	ldi	r30, 0x30	; 48
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	28 2f       	mov	r18, r24
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	8b 81       	ldd	r24, Y+3	; 0x03
 706:	88 2f       	mov	r24, r24
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	a9 01       	movw	r20, r18
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_u8GetPinValue+0x1b6>
 70e:	55 95       	asr	r21
 710:	47 95       	ror	r20
 712:	8a 95       	dec	r24
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_u8GetPinValue+0x1b2>
 716:	ca 01       	movw	r24, r20
 718:	81 70       	andi	r24, 0x01	; 1
 71a:	90 70       	andi	r25, 0x00	; 0
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	21 f4       	brne	.+8      	; 0x728 <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 720:	ec 81       	ldd	r30, Y+4	; 0x04
 722:	fd 81       	ldd	r31, Y+5	; 0x05
 724:	10 82       	st	Z, r1
 726:	19 c0       	rjmp	.+50     	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
 728:	e0 e3       	ldi	r30, 0x30	; 48
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	28 2f       	mov	r18, r24
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	a9 01       	movw	r20, r18
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_u8GetPinValue+0x1e4>
 73c:	55 95       	asr	r21
 73e:	47 95       	ror	r20
 740:	8a 95       	dec	r24
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_u8GetPinValue+0x1e0>
 744:	ca 01       	movw	r24, r20
 746:	81 70       	andi	r24, 0x01	; 1
 748:	90 70       	andi	r25, 0x00	; 0
 74a:	88 23       	and	r24, r24
 74c:	31 f0       	breq	.+12     	; 0x75a <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
 74e:	ec 81       	ldd	r30, Y+4	; 0x04
 750:	fd 81       	ldd	r31, Y+5	; 0x05
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	80 83       	st	Z, r24
 756:	01 c0       	rjmp	.+2      	; 0x75a <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
 758:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 75a:	89 81       	ldd	r24, Y+1	; 0x01
}
 75c:	27 96       	adiw	r28, 0x07	; 7
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	de bf       	out	0x3e, r29	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	cd bf       	out	0x3d, r28	; 61
 768:	cf 91       	pop	r28
 76a:	df 91       	pop	r29
 76c:	08 95       	ret

0000076e <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
 76e:	df 93       	push	r29
 770:	cf 93       	push	r28
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	2d 97       	sbiw	r28, 0x0d	; 13
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	8a 83       	std	Y+2, r24	; 0x02
 784:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
 78a:	8a 81       	ldd	r24, Y+2	; 0x02
 78c:	84 30       	cpi	r24, 0x04	; 4
 78e:	08 f0       	brcs	.+2      	; 0x792 <DIO_u8SetPortDirection+0x24>
 790:	87 c0       	rjmp	.+270    	; 0x8a0 <__stack+0x41>
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	81 30       	cpi	r24, 0x01	; 1
 796:	21 f0       	breq	.+8      	; 0x7a0 <DIO_u8SetPortDirection+0x32>
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	88 23       	and	r24, r24
 79c:	09 f0       	breq	.+2      	; 0x7a0 <DIO_u8SetPortDirection+0x32>
 79e:	80 c0       	rjmp	.+256    	; 0x8a0 <__stack+0x41>
	{
		switch(Copy_u8PortID)
 7a0:	8a 81       	ldd	r24, Y+2	; 0x02
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	3d 87       	std	Y+13, r19	; 0x0d
 7a8:	2c 87       	std	Y+12, r18	; 0x0c
 7aa:	8c 85       	ldd	r24, Y+12	; 0x0c
 7ac:	9d 85       	ldd	r25, Y+13	; 0x0d
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	91 05       	cpc	r25, r1
 7b2:	71 f1       	breq	.+92     	; 0x810 <DIO_u8SetPortDirection+0xa2>
 7b4:	2c 85       	ldd	r18, Y+12	; 0x0c
 7b6:	3d 85       	ldd	r19, Y+13	; 0x0d
 7b8:	22 30       	cpi	r18, 0x02	; 2
 7ba:	31 05       	cpc	r19, r1
 7bc:	2c f4       	brge	.+10     	; 0x7c8 <DIO_u8SetPortDirection+0x5a>
 7be:	8c 85       	ldd	r24, Y+12	; 0x0c
 7c0:	9d 85       	ldd	r25, Y+13	; 0x0d
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	69 f0       	breq	.+26     	; 0x7e0 <DIO_u8SetPortDirection+0x72>
 7c6:	6d c0       	rjmp	.+218    	; 0x8a2 <__stack+0x43>
 7c8:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ca:	3d 85       	ldd	r19, Y+13	; 0x0d
 7cc:	22 30       	cpi	r18, 0x02	; 2
 7ce:	31 05       	cpc	r19, r1
 7d0:	b9 f1       	breq	.+110    	; 0x840 <DIO_u8SetPortDirection+0xd2>
 7d2:	8c 85       	ldd	r24, Y+12	; 0x0c
 7d4:	9d 85       	ldd	r25, Y+13	; 0x0d
 7d6:	83 30       	cpi	r24, 0x03	; 3
 7d8:	91 05       	cpc	r25, r1
 7da:	09 f4       	brne	.+2      	; 0x7de <DIO_u8SetPortDirection+0x70>
 7dc:	49 c0       	rjmp	.+146    	; 0x870 <__stack+0x11>
 7de:	61 c0       	rjmp	.+194    	; 0x8a2 <__stack+0x43>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
 7e0:	8b 81       	ldd	r24, Y+3	; 0x03
 7e2:	28 2f       	mov	r18, r24
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	3b 87       	std	Y+11, r19	; 0x0b
 7e8:	2a 87       	std	Y+10, r18	; 0x0a
 7ea:	8a 85       	ldd	r24, Y+10	; 0x0a
 7ec:	9b 85       	ldd	r25, Y+11	; 0x0b
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	31 f0       	breq	.+12     	; 0x7fe <DIO_u8SetPortDirection+0x90>
 7f2:	2a 85       	ldd	r18, Y+10	; 0x0a
 7f4:	3b 85       	ldd	r19, Y+11	; 0x0b
 7f6:	21 30       	cpi	r18, 0x01	; 1
 7f8:	31 05       	cpc	r19, r1
 7fa:	29 f0       	breq	.+10     	; 0x806 <DIO_u8SetPortDirection+0x98>
 7fc:	52 c0       	rjmp	.+164    	; 0x8a2 <__stack+0x43>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
 7fe:	ea e3       	ldi	r30, 0x3A	; 58
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	10 82       	st	Z, r1
 804:	4e c0       	rjmp	.+156    	; 0x8a2 <__stack+0x43>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
 806:	ea e3       	ldi	r30, 0x3A	; 58
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	80 83       	st	Z, r24
 80e:	49 c0       	rjmp	.+146    	; 0x8a2 <__stack+0x43>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	28 2f       	mov	r18, r24
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	39 87       	std	Y+9, r19	; 0x09
 818:	28 87       	std	Y+8, r18	; 0x08
 81a:	88 85       	ldd	r24, Y+8	; 0x08
 81c:	99 85       	ldd	r25, Y+9	; 0x09
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	31 f0       	breq	.+12     	; 0x82e <DIO_u8SetPortDirection+0xc0>
 822:	28 85       	ldd	r18, Y+8	; 0x08
 824:	39 85       	ldd	r19, Y+9	; 0x09
 826:	21 30       	cpi	r18, 0x01	; 1
 828:	31 05       	cpc	r19, r1
 82a:	29 f0       	breq	.+10     	; 0x836 <DIO_u8SetPortDirection+0xc8>
 82c:	3a c0       	rjmp	.+116    	; 0x8a2 <__stack+0x43>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
 82e:	e7 e3       	ldi	r30, 0x37	; 55
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	10 82       	st	Z, r1
 834:	36 c0       	rjmp	.+108    	; 0x8a2 <__stack+0x43>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
 836:	e7 e3       	ldi	r30, 0x37	; 55
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	80 83       	st	Z, r24
 83e:	31 c0       	rjmp	.+98     	; 0x8a2 <__stack+0x43>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
 840:	8b 81       	ldd	r24, Y+3	; 0x03
 842:	28 2f       	mov	r18, r24
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	3f 83       	std	Y+7, r19	; 0x07
 848:	2e 83       	std	Y+6, r18	; 0x06
 84a:	8e 81       	ldd	r24, Y+6	; 0x06
 84c:	9f 81       	ldd	r25, Y+7	; 0x07
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	31 f0       	breq	.+12     	; 0x85e <DIO_u8SetPortDirection+0xf0>
 852:	2e 81       	ldd	r18, Y+6	; 0x06
 854:	3f 81       	ldd	r19, Y+7	; 0x07
 856:	21 30       	cpi	r18, 0x01	; 1
 858:	31 05       	cpc	r19, r1
 85a:	29 f0       	breq	.+10     	; 0x866 <__stack+0x7>
 85c:	22 c0       	rjmp	.+68     	; 0x8a2 <__stack+0x43>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
 85e:	e4 e3       	ldi	r30, 0x34	; 52
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	10 82       	st	Z, r1
 864:	1e c0       	rjmp	.+60     	; 0x8a2 <__stack+0x43>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
 866:	e4 e3       	ldi	r30, 0x34	; 52
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	80 83       	st	Z, r24
 86e:	19 c0       	rjmp	.+50     	; 0x8a2 <__stack+0x43>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
 870:	8b 81       	ldd	r24, Y+3	; 0x03
 872:	28 2f       	mov	r18, r24
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	3d 83       	std	Y+5, r19	; 0x05
 878:	2c 83       	std	Y+4, r18	; 0x04
 87a:	8c 81       	ldd	r24, Y+4	; 0x04
 87c:	9d 81       	ldd	r25, Y+5	; 0x05
 87e:	00 97       	sbiw	r24, 0x00	; 0
 880:	31 f0       	breq	.+12     	; 0x88e <__stack+0x2f>
 882:	2c 81       	ldd	r18, Y+4	; 0x04
 884:	3d 81       	ldd	r19, Y+5	; 0x05
 886:	21 30       	cpi	r18, 0x01	; 1
 888:	31 05       	cpc	r19, r1
 88a:	29 f0       	breq	.+10     	; 0x896 <__stack+0x37>
 88c:	0a c0       	rjmp	.+20     	; 0x8a2 <__stack+0x43>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
 88e:	e1 e3       	ldi	r30, 0x31	; 49
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	10 82       	st	Z, r1
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <__stack+0x43>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
 896:	e1 e3       	ldi	r30, 0x31	; 49
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	80 83       	st	Z, r24
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
 8a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 8a4:	2d 96       	adiw	r28, 0x0d	; 13
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	f8 94       	cli
 8aa:	de bf       	out	0x3e, r29	; 62
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	cd bf       	out	0x3d, r28	; 61
 8b0:	cf 91       	pop	r28
 8b2:	df 91       	pop	r29
 8b4:	08 95       	ret

000008b6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
 8b6:	df 93       	push	r29
 8b8:	cf 93       	push	r28
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <DIO_u8SetPortValue+0x6>
 8bc:	00 d0       	rcall	.+0      	; 0x8be <DIO_u8SetPortValue+0x8>
 8be:	0f 92       	push	r0
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	8a 83       	std	Y+2, r24	; 0x02
 8c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	28 2f       	mov	r18, r24
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	3d 83       	std	Y+5, r19	; 0x05
 8d4:	2c 83       	std	Y+4, r18	; 0x04
 8d6:	8c 81       	ldd	r24, Y+4	; 0x04
 8d8:	9d 81       	ldd	r25, Y+5	; 0x05
 8da:	81 30       	cpi	r24, 0x01	; 1
 8dc:	91 05       	cpc	r25, r1
 8de:	d1 f0       	breq	.+52     	; 0x914 <DIO_u8SetPortValue+0x5e>
 8e0:	2c 81       	ldd	r18, Y+4	; 0x04
 8e2:	3d 81       	ldd	r19, Y+5	; 0x05
 8e4:	22 30       	cpi	r18, 0x02	; 2
 8e6:	31 05       	cpc	r19, r1
 8e8:	2c f4       	brge	.+10     	; 0x8f4 <DIO_u8SetPortValue+0x3e>
 8ea:	8c 81       	ldd	r24, Y+4	; 0x04
 8ec:	9d 81       	ldd	r25, Y+5	; 0x05
 8ee:	00 97       	sbiw	r24, 0x00	; 0
 8f0:	61 f0       	breq	.+24     	; 0x90a <DIO_u8SetPortValue+0x54>
 8f2:	1f c0       	rjmp	.+62     	; 0x932 <DIO_u8SetPortValue+0x7c>
 8f4:	2c 81       	ldd	r18, Y+4	; 0x04
 8f6:	3d 81       	ldd	r19, Y+5	; 0x05
 8f8:	22 30       	cpi	r18, 0x02	; 2
 8fa:	31 05       	cpc	r19, r1
 8fc:	81 f0       	breq	.+32     	; 0x91e <DIO_u8SetPortValue+0x68>
 8fe:	8c 81       	ldd	r24, Y+4	; 0x04
 900:	9d 81       	ldd	r25, Y+5	; 0x05
 902:	83 30       	cpi	r24, 0x03	; 3
 904:	91 05       	cpc	r25, r1
 906:	81 f0       	breq	.+32     	; 0x928 <DIO_u8SetPortValue+0x72>
 908:	14 c0       	rjmp	.+40     	; 0x932 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
 90a:	eb e3       	ldi	r30, 0x3B	; 59
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	80 83       	st	Z, r24
 912:	10 c0       	rjmp	.+32     	; 0x934 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
 914:	e8 e3       	ldi	r30, 0x38	; 56
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	8b 81       	ldd	r24, Y+3	; 0x03
 91a:	80 83       	st	Z, r24
 91c:	0b c0       	rjmp	.+22     	; 0x934 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
 91e:	e5 e3       	ldi	r30, 0x35	; 53
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	8b 81       	ldd	r24, Y+3	; 0x03
 924:	80 83       	st	Z, r24
 926:	06 c0       	rjmp	.+12     	; 0x934 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
 928:	e2 e3       	ldi	r30, 0x32	; 50
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	8b 81       	ldd	r24, Y+3	; 0x03
 92e:	80 83       	st	Z, r24
 930:	01 c0       	rjmp	.+2      	; 0x934 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
 932:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 934:	89 81       	ldd	r24, Y+1	; 0x01
}
 936:	0f 90       	pop	r0
 938:	0f 90       	pop	r0
 93a:	0f 90       	pop	r0
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	cf 91       	pop	r28
 942:	df 91       	pop	r29
 944:	08 95       	ret

00000946 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
 946:	df 93       	push	r29
 948:	cf 93       	push	r28
 94a:	00 d0       	rcall	.+0      	; 0x94c <DIO_u8GetPortValue+0x6>
 94c:	00 d0       	rcall	.+0      	; 0x94e <DIO_u8GetPortValue+0x8>
 94e:	00 d0       	rcall	.+0      	; 0x950 <DIO_u8GetPortValue+0xa>
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	8a 83       	std	Y+2, r24	; 0x02
 956:	7c 83       	std	Y+4, r23	; 0x04
 958:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
 95e:	8b 81       	ldd	r24, Y+3	; 0x03
 960:	9c 81       	ldd	r25, Y+4	; 0x04
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	e9 f1       	breq	.+122    	; 0x9e0 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
 966:	8a 81       	ldd	r24, Y+2	; 0x02
 968:	28 2f       	mov	r18, r24
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	3e 83       	std	Y+6, r19	; 0x06
 96e:	2d 83       	std	Y+5, r18	; 0x05
 970:	8d 81       	ldd	r24, Y+5	; 0x05
 972:	9e 81       	ldd	r25, Y+6	; 0x06
 974:	81 30       	cpi	r24, 0x01	; 1
 976:	91 05       	cpc	r25, r1
 978:	e1 f0       	breq	.+56     	; 0x9b2 <DIO_u8GetPortValue+0x6c>
 97a:	2d 81       	ldd	r18, Y+5	; 0x05
 97c:	3e 81       	ldd	r19, Y+6	; 0x06
 97e:	22 30       	cpi	r18, 0x02	; 2
 980:	31 05       	cpc	r19, r1
 982:	2c f4       	brge	.+10     	; 0x98e <DIO_u8GetPortValue+0x48>
 984:	8d 81       	ldd	r24, Y+5	; 0x05
 986:	9e 81       	ldd	r25, Y+6	; 0x06
 988:	00 97       	sbiw	r24, 0x00	; 0
 98a:	61 f0       	breq	.+24     	; 0x9a4 <DIO_u8GetPortValue+0x5e>
 98c:	27 c0       	rjmp	.+78     	; 0x9dc <DIO_u8GetPortValue+0x96>
 98e:	2d 81       	ldd	r18, Y+5	; 0x05
 990:	3e 81       	ldd	r19, Y+6	; 0x06
 992:	22 30       	cpi	r18, 0x02	; 2
 994:	31 05       	cpc	r19, r1
 996:	a1 f0       	breq	.+40     	; 0x9c0 <DIO_u8GetPortValue+0x7a>
 998:	8d 81       	ldd	r24, Y+5	; 0x05
 99a:	9e 81       	ldd	r25, Y+6	; 0x06
 99c:	83 30       	cpi	r24, 0x03	; 3
 99e:	91 05       	cpc	r25, r1
 9a0:	b1 f0       	breq	.+44     	; 0x9ce <DIO_u8GetPortValue+0x88>
 9a2:	1c c0       	rjmp	.+56     	; 0x9dc <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
 9a4:	e9 e3       	ldi	r30, 0x39	; 57
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	eb 81       	ldd	r30, Y+3	; 0x03
 9ac:	fc 81       	ldd	r31, Y+4	; 0x04
 9ae:	80 83       	st	Z, r24
 9b0:	18 c0       	rjmp	.+48     	; 0x9e2 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
 9b2:	e6 e3       	ldi	r30, 0x36	; 54
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	80 81       	ld	r24, Z
 9b8:	eb 81       	ldd	r30, Y+3	; 0x03
 9ba:	fc 81       	ldd	r31, Y+4	; 0x04
 9bc:	80 83       	st	Z, r24
 9be:	11 c0       	rjmp	.+34     	; 0x9e2 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
 9c0:	e3 e3       	ldi	r30, 0x33	; 51
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	eb 81       	ldd	r30, Y+3	; 0x03
 9c8:	fc 81       	ldd	r31, Y+4	; 0x04
 9ca:	80 83       	st	Z, r24
 9cc:	0a c0       	rjmp	.+20     	; 0x9e2 <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
 9ce:	e0 e3       	ldi	r30, 0x30	; 48
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	eb 81       	ldd	r30, Y+3	; 0x03
 9d6:	fc 81       	ldd	r31, Y+4	; 0x04
 9d8:	80 83       	st	Z, r24
 9da:	03 c0       	rjmp	.+6      	; 0x9e2 <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
 9dc:	19 82       	std	Y+1, r1	; 0x01
 9de:	01 c0       	rjmp	.+2      	; 0x9e2 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
 9e0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	26 96       	adiw	r28, 0x06	; 6
 9e6:	0f b6       	in	r0, 0x3f	; 63
 9e8:	f8 94       	cli
 9ea:	de bf       	out	0x3e, r29	; 62
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	cd bf       	out	0x3d, r28	; 61
 9f0:	cf 91       	pop	r28
 9f2:	df 91       	pop	r29
 9f4:	08 95       	ret

000009f6 <SPI_voidInit>:
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_config.h"

void SPI_voidInit(void)
{
 9f6:	df 93       	push	r29
 9f8:	cf 93       	push	r28
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPI_u8_SPCR_REG,1);
	CLR_BIT(SPI_u8_SPCR_REG,0);
		
	#elif (SPI_u8_MODE == SPI_u8_SLAVE_MODE)
	/* Data Order = MSB First */
	CLR_BIT(SPI_u8_SPCR_REG,5);
 9fe:	ad e2       	ldi	r26, 0x2D	; 45
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	ed e2       	ldi	r30, 0x2D	; 45
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	8f 7d       	andi	r24, 0xDF	; 223
 a0a:	8c 93       	st	X, r24
	/* Select Slave Mode */
	CLR_BIT(SPI_u8_SPCR_REG,4);
 a0c:	ad e2       	ldi	r26, 0x2D	; 45
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	ed e2       	ldi	r30, 0x2D	; 45
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	8f 7e       	andi	r24, 0xEF	; 239
 a18:	8c 93       	st	X, r24
	/* Clock Polatity Falling/Rising  Clock Phase Setup/Sample */
	SET_BIT(SPI_u8_SPCR_REG,3);
 a1a:	ad e2       	ldi	r26, 0x2D	; 45
 a1c:	b0 e0       	ldi	r27, 0x00	; 0
 a1e:	ed e2       	ldi	r30, 0x2D	; 45
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	88 60       	ori	r24, 0x08	; 8
 a26:	8c 93       	st	X, r24
	SET_BIT(SPI_u8_SPCR_REG,2);
 a28:	ad e2       	ldi	r26, 0x2D	; 45
 a2a:	b0 e0       	ldi	r27, 0x00	; 0
 a2c:	ed e2       	ldi	r30, 0x2D	; 45
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	84 60       	ori	r24, 0x04	; 4
 a34:	8c 93       	st	X, r24
	#else
		#error "Wrong Choice"
	#endif

    /* Enable SPI */
	SET_BIT(SPI_u8_SPCR_REG,6);
 a36:	ad e2       	ldi	r26, 0x2D	; 45
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	ed e2       	ldi	r30, 0x2D	; 45
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	80 64       	ori	r24, 0x40	; 64
 a42:	8c 93       	st	X, r24
	
}
 a44:	cf 91       	pop	r28
 a46:	df 91       	pop	r29
 a48:	08 95       	ret

00000a4a <SPI_u8TransRecive>:

u8    SPI_u8TransRecive(u8 Copy_u8SendDataByte ,u8 * Copy_pu8RecievedDataByte)
{
 a4a:	df 93       	push	r29
 a4c:	cf 93       	push	r28
 a4e:	00 d0       	rcall	.+0      	; 0xa50 <SPI_u8TransRecive+0x6>
 a50:	00 d0       	rcall	.+0      	; 0xa52 <SPI_u8TransRecive+0x8>
 a52:	cd b7       	in	r28, 0x3d	; 61
 a54:	de b7       	in	r29, 0x3e	; 62
 a56:	8a 83       	std	Y+2, r24	; 0x02
 a58:	7c 83       	std	Y+4, r23	; 0x04
 a5a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
 a5c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8RecievedDataByte != NULL)
 a5e:	8b 81       	ldd	r24, Y+3	; 0x03
 a60:	9c 81       	ldd	r25, Y+4	; 0x04
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	89 f0       	breq	.+34     	; 0xa88 <SPI_u8TransRecive+0x3e>
	{
		/* Send Data Byte */
		SPI_u8_SPDR_REG = Copy_u8SendDataByte;
 a66:	ef e2       	ldi	r30, 0x2F	; 47
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	8a 81       	ldd	r24, Y+2	; 0x02
 a6c:	80 83       	st	Z, r24
		/* Check The Flag */
		while(!GET_BIT(SPI_u8_SPSR_REG,7));
 a6e:	ee e2       	ldi	r30, 0x2E	; 46
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	80 81       	ld	r24, Z
 a74:	88 23       	and	r24, r24
 a76:	dc f7       	brge	.-10     	; 0xa6e <SPI_u8TransRecive+0x24>
		/* Read The Input Data */
		*Copy_pu8RecievedDataByte = SPI_u8_SPDR_REG;
 a78:	ef e2       	ldi	r30, 0x2F	; 47
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	80 81       	ld	r24, Z
 a7e:	eb 81       	ldd	r30, Y+3	; 0x03
 a80:	fc 81       	ldd	r31, Y+4	; 0x04
 a82:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 a88:	89 81       	ldd	r24, Y+1	; 0x01
}
 a8a:	0f 90       	pop	r0
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	cf 91       	pop	r28
 a94:	df 91       	pop	r29
 a96:	08 95       	ret

00000a98 <SPI_u8TransReciveStringSync>:

u8   SPI_u8TransReciveStringSync(u8 * Copy_pu8SendDataString ,u8 * Copy_pu8RecievedDataString)
{
 a98:	df 93       	push	r29
 a9a:	cf 93       	push	r28
 a9c:	cd b7       	in	r28, 0x3d	; 61
 a9e:	de b7       	in	r29, 0x3e	; 62
 aa0:	2a 97       	sbiw	r28, 0x0a	; 10
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	f8 94       	cli
 aa6:	de bf       	out	0x3e, r29	; 62
 aa8:	0f be       	out	0x3f, r0	; 63
 aaa:	cd bf       	out	0x3d, r28	; 61
 aac:	9f 83       	std	Y+7, r25	; 0x07
 aae:	8e 83       	std	Y+6, r24	; 0x06
 ab0:	79 87       	std	Y+9, r23	; 0x09
 ab2:	68 87       	std	Y+8, r22	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_NOK;
 ab4:	1b 82       	std	Y+3, r1	; 0x03
	u8 * Local_u8ReceivedData;
	if(Copy_pu8SendDataString != NULL )
 ab6:	8e 81       	ldd	r24, Y+6	; 0x06
 ab8:	9f 81       	ldd	r25, Y+7	; 0x07
 aba:	00 97       	sbiw	r24, 0x00	; 0
 abc:	51 f1       	breq	.+84     	; 0xb12 <SPI_u8TransReciveStringSync+0x7a>
	{
	    u8 character = 0;
 abe:	1a 82       	std	Y+2, r1	; 0x02
	    u8 i = 0;
 ac0:	19 82       	std	Y+1, r1	; 0x01
 ac2:	1a c0       	rjmp	.+52     	; 0xaf8 <SPI_u8TransReciveStringSync+0x60>
		while(Copy_pu8SendDataString[character] != '\0')
		{
			character++ ;
 ac4:	8a 81       	ldd	r24, Y+2	; 0x02
 ac6:	8f 5f       	subi	r24, 0xFF	; 255
 ac8:	8a 83       	std	Y+2, r24	; 0x02
 aca:	12 c0       	rjmp	.+36     	; 0xaf0 <SPI_u8TransReciveStringSync+0x58>
		 for(  ; i < character; i++)
		 {
		  /* Write String  */
			 SPI_u8TransRecive (Copy_pu8SendDataString[i],&Local_u8ReceivedData);
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	28 2f       	mov	r18, r24
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	8e 81       	ldd	r24, Y+6	; 0x06
 ad4:	9f 81       	ldd	r25, Y+7	; 0x07
 ad6:	fc 01       	movw	r30, r24
 ad8:	e2 0f       	add	r30, r18
 ada:	f3 1f       	adc	r31, r19
 adc:	80 81       	ld	r24, Z
 ade:	9e 01       	movw	r18, r28
 ae0:	2c 5f       	subi	r18, 0xFC	; 252
 ae2:	3f 4f       	sbci	r19, 0xFF	; 255
 ae4:	b9 01       	movw	r22, r18
 ae6:	0e 94 25 05 	call	0xa4a	; 0xa4a <SPI_u8TransRecive>
	    u8 character = 0;
	    u8 i = 0;
		while(Copy_pu8SendDataString[character] != '\0')
		{
			character++ ;
		 for(  ; i < character; i++)
 aea:	89 81       	ldd	r24, Y+1	; 0x01
 aec:	8f 5f       	subi	r24, 0xFF	; 255
 aee:	89 83       	std	Y+1, r24	; 0x01
 af0:	99 81       	ldd	r25, Y+1	; 0x01
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	98 17       	cp	r25, r24
 af6:	50 f3       	brcs	.-44     	; 0xacc <SPI_u8TransReciveStringSync+0x34>
	u8 * Local_u8ReceivedData;
	if(Copy_pu8SendDataString != NULL )
	{
	    u8 character = 0;
	    u8 i = 0;
		while(Copy_pu8SendDataString[character] != '\0')
 af8:	8a 81       	ldd	r24, Y+2	; 0x02
 afa:	28 2f       	mov	r18, r24
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	8e 81       	ldd	r24, Y+6	; 0x06
 b00:	9f 81       	ldd	r25, Y+7	; 0x07
 b02:	fc 01       	movw	r30, r24
 b04:	e2 0f       	add	r30, r18
 b06:	f3 1f       	adc	r31, r19
 b08:	80 81       	ld	r24, Z
 b0a:	88 23       	and	r24, r24
 b0c:	d9 f6       	brne	.-74     	; 0xac4 <SPI_u8TransReciveStringSync+0x2c>
		  /* Write String  */
			 SPI_u8TransRecive (Copy_pu8SendDataString[i],&Local_u8ReceivedData);
		 }

		}
		Local_u8ErrorState = STD_TYPES_OK;
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	8b 83       	std	Y+3, r24	; 0x03
	}
}
 b12:	2a 96       	adiw	r28, 0x0a	; 10
 b14:	0f b6       	in	r0, 0x3f	; 63
 b16:	f8 94       	cli
 b18:	de bf       	out	0x3e, r29	; 62
 b1a:	0f be       	out	0x3f, r0	; 63
 b1c:	cd bf       	out	0x3d, r28	; 61
 b1e:	cf 91       	pop	r28
 b20:	df 91       	pop	r29
 b22:	08 95       	ret

00000b24 <main>:
/* MCAL */
#include "DIO_interface.h"
#include "SPI_interface.h"

int main(void)
{
 b24:	df 93       	push	r29
 b26:	cf 93       	push	r28
 b28:	00 d0       	rcall	.+0      	; 0xb2a <main+0x6>
 b2a:	cd b7       	in	r28, 0x3d	; 61
 b2c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Data;
	u8 Local_u8Flag =0;
 b2e:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8Init();
 b30:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8Init>

	SPI_voidInit();
 b34:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SPI_voidInit>

	while(1)
	{
		SPI_u8TransRecive(10,&Local_u8Data);
 b38:	9e 01       	movw	r18, r28
 b3a:	2e 5f       	subi	r18, 0xFE	; 254
 b3c:	3f 4f       	sbci	r19, 0xFF	; 255
 b3e:	8a e0       	ldi	r24, 0x0A	; 10
 b40:	b9 01       	movw	r22, r18
 b42:	0e 94 25 05 	call	0xa4a	; 0xa4a <SPI_u8TransRecive>
		if(Local_u8Data == 'a')
 b46:	8a 81       	ldd	r24, Y+2	; 0x02
 b48:	81 36       	cpi	r24, 0x61	; 97
 b4a:	b1 f7       	brne	.-20     	; 0xb38 <main+0x14>
		{
			if(Local_u8Flag ==0)
 b4c:	89 81       	ldd	r24, Y+1	; 0x01
 b4e:	88 23       	and	r24, r24
 b50:	41 f4       	brne	.+16     	; 0xb62 <main+0x3e>
			{
				DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	60 e0       	ldi	r22, 0x00	; 0
 b56:	41 e0       	ldi	r20, 0x01	; 1
 b58:	0e 94 84 01 	call	0x308	; 0x308 <DIO_u8SetPinValue>
				Local_u8Flag =1;
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	89 83       	std	Y+1, r24	; 0x01
 b60:	eb cf       	rjmp	.-42     	; 0xb38 <main+0x14>
			}
			else
			{
				DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
 b62:	80 e0       	ldi	r24, 0x00	; 0
 b64:	60 e0       	ldi	r22, 0x00	; 0
 b66:	40 e0       	ldi	r20, 0x00	; 0
 b68:	0e 94 84 01 	call	0x308	; 0x308 <DIO_u8SetPinValue>
				Local_u8Flag =0;
 b6c:	19 82       	std	Y+1, r1	; 0x01
 b6e:	e4 cf       	rjmp	.-56     	; 0xb38 <main+0x14>

00000b70 <_exit>:
 b70:	f8 94       	cli

00000b72 <__stop_program>:
 b72:	ff cf       	rjmp	.-2      	; 0xb72 <__stop_program>
