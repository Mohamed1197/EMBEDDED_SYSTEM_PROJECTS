
TEST_17_5_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000045b4  00004648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008000f6  008000f6  000046de  2**0
                  ALLOC
  3 .stab         00003dec  00000000  00000000  000046e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001539  00000000  00000000  000084cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000bd39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ce3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000df3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e1fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ea8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__vector_1>
       8:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_2>
       c:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__vector_6>
      1c:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__vector_10>
      2c:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 1c 	call	0x3808	; 0x3808 <main>
      8a:	0c 94 d8 22 	jmp	0x45b0	; 0x45b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ed       	ldi	r26, 0xD4	; 212
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ed       	ldi	r24, 0xD4	; 212
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 ed       	ldi	r22, 0xD4	; 212
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
static void (*ADC_pfNotification)(u16) = NULL;

static u8 ADC_u8BusyFlag =0;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	   CLR_BIT(ADC_u8_ADMUX_REG,7);
	   CLR_BIT(ADC_u8_ADMUX_REG,6);
	}
#elif(ADC_VREF == AVCC)
	{
	    CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
	    SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
#endif

	/* ADC Adjust Result */
#if(ADJUST_RESULT == RIGHT_ADJUST)
	{
		CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	{
		SET_BIT(ADC_u8_ADCSRA_REG,5);
	}
#elif(ADC_AUTO_TRIG_MODE == ADC_AUTO_TRIG_DISABLE)
	{
		CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_ADCSRA_REG,1);
	    SET_BIT(ADC_u8_ADCSRA_REG,0);
	}
#elif(ADC_CLOCK == CLOCK_64)
	{
		SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	    CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
#endif

	/* ADC Enable Peripheral */
#if(ADC_MODE == ADC_ENABLE)
	{
		SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
#elif(ADC_MODE == ADC_DISABLE)
	{
		CLR_BIT(ADC_u8_ADCSRA_REG,7);
	}
#endif
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSunchNonBlocking>:

u8 ADC_u8GetDigitalValueSunchNonBlocking(u8 Copy_u8ChannelNb,u16* Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u8TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSunchNonBlocking+0x2e>
     d48:	5c c0       	rjmp	.+184    	; 0xe02 <ADC_u8GetDigitalValueSunchNonBlocking+0xe6>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSunchNonBlocking+0x38>
     d52:	57 c0       	rjmp	.+174    	; 0xe02 <ADC_u8GetDigitalValueSunchNonBlocking+0xe6>
	{
		/* Clear MUX 4..0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 7e       	andi	r24, 0xE0	; 224
     d60:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     d62:	a7 e2       	ldi	r26, 0x27	; 39
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e2       	ldi	r30, 0x27	; 39
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	90 81       	ld	r25, Z
     d6c:	8e 81       	ldd	r24, Y+6	; 0x06
     d6e:	89 2b       	or	r24, r25
     d70:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d72:	a6 e2       	ldi	r26, 0x26	; 38
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e6 e2       	ldi	r30, 0x26	; 38
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	8c 93       	st	X, r24
     d80:	0b c0       	rjmp	.+22     	; 0xd98 <ADC_u8GetDigitalValueSunchNonBlocking+0x7c>
		/* Wait Till Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)==0) && (Local_u8TimeOutCounter < ADC_u8_TIME_OUT_MAX_VALUE))
		{
			Local_u8TimeOutCounter ++;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	ab 81       	ldd	r26, Y+3	; 0x03
     d88:	bc 81       	ldd	r27, Y+4	; 0x04
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	ab 83       	std	Y+3, r26	; 0x03
     d96:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Till Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)==0) && (Local_u8TimeOutCounter < ADC_u8_TIME_OUT_MAX_VALUE))
     d98:	e6 e2       	ldi	r30, 0x26	; 38
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 95       	swap	r24
     da0:	8f 70       	andi	r24, 0x0F	; 15
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	81 70       	andi	r24, 0x01	; 1
     da8:	90 70       	andi	r25, 0x00	; 0
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	61 f4       	brne	.+24     	; 0xdc6 <ADC_u8GetDigitalValueSunchNonBlocking+0xaa>
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	ab 81       	ldd	r26, Y+3	; 0x03
     db4:	bc 81       	ldd	r27, Y+4	; 0x04
     db6:	80 3a       	cpi	r24, 0xA0	; 160
     db8:	26 e8       	ldi	r18, 0x86	; 134
     dba:	92 07       	cpc	r25, r18
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	a2 07       	cpc	r26, r18
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	b2 07       	cpc	r27, r18
     dc4:	f0 f2       	brcs	.-68     	; 0xd82 <ADC_u8GetDigitalValueSunchNonBlocking+0x66>
		{
			Local_u8TimeOutCounter ++;
		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(Local_u8TimeOutCounter >= ADC_u8_TIME_OUT_MAX_VALUE)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	ab 81       	ldd	r26, Y+3	; 0x03
     dcc:	bc 81       	ldd	r27, Y+4	; 0x04
     dce:	80 3a       	cpi	r24, 0xA0	; 160
     dd0:	26 e8       	ldi	r18, 0x86	; 134
     dd2:	92 07       	cpc	r25, r18
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	a2 07       	cpc	r26, r18
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	b2 07       	cpc	r27, r18
     ddc:	10 f0       	brcs	.+4      	; 0xde2 <ADC_u8GetDigitalValueSunchNonBlocking+0xc6>
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     dde:	1d 82       	std	Y+5, r1	; 0x05
     de0:	11 c0       	rjmp	.+34     	; 0xe04 <ADC_u8GetDigitalValueSunchNonBlocking+0xe8>
		}
		else
		{
			/* Read Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     de2:	e4 e2       	ldi	r30, 0x24	; 36
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	ef 81       	ldd	r30, Y+7	; 0x07
     dec:	f8 85       	ldd	r31, Y+8	; 0x08
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
			/* Clear Flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     df2:	a6 e2       	ldi	r26, 0x26	; 38
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e6 e2       	ldi	r30, 0x26	; 38
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	80 61       	ori	r24, 0x10	; 16
     dfe:	8c 93       	st	X, r24
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <ADC_u8GetDigitalValueSunchNonBlocking+0xe8>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e02:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e06:	28 96       	adiw	r28, 0x08	; 8
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <ADC_u8GetDigitalValueAsync>:
u8 ADC_u8GetDigitalValueAsync(u8 Copy_u8ChannelNb,void(*Copy_PfNotification)(u16))
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <ADC_u8GetDigitalValueAsync+0x6>
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <ADC_u8GetDigitalValueAsync+0x8>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	8a 83       	std	Y+2, r24	; 0x02
     e26:	7c 83       	std	Y+4, r23	; 0x04
     e28:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (*Copy_PfNotification != NULL) && (ADC_u8BusyFlag == 0) )
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	80 32       	cpi	r24, 0x20	; 32
     e32:	78 f5       	brcc	.+94     	; 0xe92 <ADC_u8GetDigitalValueAsync+0x7a>
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	59 f1       	breq	.+86     	; 0xe92 <ADC_u8GetDigitalValueAsync+0x7a>
     e3c:	80 91 f8 00 	lds	r24, 0x00F8
     e40:	88 23       	and	r24, r24
     e42:	39 f5       	brne	.+78     	; 0xe92 <ADC_u8GetDigitalValueAsync+0x7a>
	{
		/* ADC is Busy */
		ADC_u8BusyFlag = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 f8 00 	sts	0x00F8, r24
		/* Updating Global Pointer to a Function With the Notification Function */
		ADC_pfNotification = Copy_PfNotification;
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	90 93 f7 00 	sts	0x00F7, r25
     e52:	80 93 f6 00 	sts	0x00F6, r24
		/* Enable Interrupt PIE */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e56:	a6 e2       	ldi	r26, 0x26	; 38
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e6 e2       	ldi	r30, 0x26	; 38
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
		/* Clear MUX 4..0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e64:	a7 e2       	ldi	r26, 0x27	; 39
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 7e       	andi	r24, 0xE0	; 224
     e70:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     e72:	a7 e2       	ldi	r26, 0x27	; 39
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e7 e2       	ldi	r30, 0x27	; 39
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	90 81       	ld	r25, Z
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	89 2b       	or	r24, r25
     e80:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e82:	a6 e2       	ldi	r26, 0x26	; 38
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e2       	ldi	r30, 0x26	; 38
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	8c 93       	st	X, r24
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <ADC_u8GetDigitalValueAsync+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e92:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <ADC_u8ReadADCRegister>:
u8 ADC_u8ReadADCRegister(u16 * Copy_pu16ADCRegValue)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <ADC_u8ReadADCRegister+0x6>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9b 83       	std	Y+3, r25	; 0x03
     eb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCRegValue !=NULL)
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	49 f0       	breq	.+18     	; 0xed2 <ADC_u8ReadADCRegister+0x2e>
	{
	    *Copy_pu16ADCRegValue = ADC_u16_ADC_REG;
     ec0:	e4 e2       	ldi	r30, 0x24	; 36
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	ea 81       	ldd	r30, Y+2	; 0x02
     eca:	fb 81       	ldd	r31, Y+3	; 0x03
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <ADC_u8ReadADCRegister+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ed2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <__vector_16>:
/* Prototype of ADC ISR */
void __vector_16(void)   __attribute__((signal));
void __vector_16(void)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     f0c:	80 91 f6 00 	lds	r24, 0x00F6
     f10:	90 91 f7 00 	lds	r25, 0x00F7
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	99 f0       	breq	.+38     	; 0xf3e <__vector_16+0x5c>
	{
		/* Clear PIE */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     f18:	a6 e2       	ldi	r26, 0x26	; 38
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e6 e2       	ldi	r30, 0x26	; 38
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     f26:	20 91 f6 00 	lds	r18, 0x00F6
     f2a:	30 91 f7 00 	lds	r19, 0x00F7
     f2e:	e4 e2       	ldi	r30, 0x24	; 36
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	91 81       	ldd	r25, Z+1	; 0x01
     f36:	f9 01       	movw	r30, r18
     f38:	09 95       	icall
		/* Clear Busy Flag */
		ADC_u8BusyFlag =0;
     f3a:	10 92 f8 00 	sts	0x00F8, r1
	}
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	bf 91       	pop	r27
     f48:	af 91       	pop	r26
     f4a:	9f 91       	pop	r25
     f4c:	8f 91       	pop	r24
     f4e:	7f 91       	pop	r23
     f50:	6f 91       	pop	r22
     f52:	5f 91       	pop	r21
     f54:	4f 91       	pop	r20
     f56:	3f 91       	pop	r19
     f58:	2f 91       	pop	r18
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <DIO_u8Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8Init            (void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     f6e:	ea e3       	ldi	r30, 0x3A	; 58
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 ee       	ldi	r24, 0xE0	; 224
     f74:	80 83       	st	Z, r24
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     f76:	e7 e3       	ldi	r30, 0x37	; 55
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	10 82       	st	Z, r1
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     f7c:	e4 e3       	ldi	r30, 0x34	; 52
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	80 83       	st	Z, r24
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     f84:	e1 e3       	ldi	r30, 0x31	; 49
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	8f e0       	ldi	r24, 0x0F	; 15
     f8a:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     f8c:	eb e3       	ldi	r30, 0x3B	; 59
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     f92:	e8 e3       	ldi	r30, 0x38	; 56
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     f98:	e5 e3       	ldi	r30, 0x35	; 53
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     f9e:	e2 e3       	ldi	r30, 0x32	; 50
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	80 83       	st	Z, r24
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2e 97       	sbiw	r28, 0x0e	; 14
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	8a 83       	std	Y+2, r24	; 0x02
     fc4:	6b 83       	std	Y+3, r22	; 0x03
     fc6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <DIO_u8SetPinDirection+0x26>
     fd2:	0c c1       	rjmp	.+536    	; 0x11ec <DIO_u8SetPinDirection+0x23e>
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	88 30       	cpi	r24, 0x08	; 8
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <DIO_u8SetPinDirection+0x2e>
     fda:	08 c1       	rjmp	.+528    	; 0x11ec <DIO_u8SetPinDirection+0x23e>
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	88 23       	and	r24, r24
     fe0:	21 f0       	breq	.+8      	; 0xfea <DIO_u8SetPinDirection+0x3c>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	09 f0       	breq	.+2      	; 0xfea <DIO_u8SetPinDirection+0x3c>
     fe8:	01 c1       	rjmp	.+514    	; 0x11ec <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3e 87       	std	Y+14, r19	; 0x0e
     ff2:	2d 87       	std	Y+13, r18	; 0x0d
     ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <DIO_u8SetPinDirection+0x52>
     ffe:	4f c0       	rjmp	.+158    	; 0x109e <DIO_u8SetPinDirection+0xf0>
    1000:	2d 85       	ldd	r18, Y+13	; 0x0d
    1002:	3e 85       	ldd	r19, Y+14	; 0x0e
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	2c f4       	brge	.+10     	; 0x1014 <DIO_u8SetPinDirection+0x66>
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	71 f0       	breq	.+28     	; 0x102e <DIO_u8SetPinDirection+0x80>
    1012:	ed c0       	rjmp	.+474    	; 0x11ee <DIO_u8SetPinDirection+0x240>
    1014:	2d 85       	ldd	r18, Y+13	; 0x0d
    1016:	3e 85       	ldd	r19, Y+14	; 0x0e
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_u8SetPinDirection+0x72>
    101e:	77 c0       	rjmp	.+238    	; 0x110e <DIO_u8SetPinDirection+0x160>
    1020:	8d 85       	ldd	r24, Y+13	; 0x0d
    1022:	9e 85       	ldd	r25, Y+14	; 0x0e
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <DIO_u8SetPinDirection+0x7e>
    102a:	a9 c0       	rjmp	.+338    	; 0x117e <DIO_u8SetPinDirection+0x1d0>
    102c:	e0 c0       	rjmp	.+448    	; 0x11ee <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 87       	std	Y+12, r19	; 0x0c
    1036:	2b 87       	std	Y+11, r18	; 0x0b
    1038:	8b 85       	ldd	r24, Y+11	; 0x0b
    103a:	9c 85       	ldd	r25, Y+12	; 0x0c
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	d1 f0       	breq	.+52     	; 0x1074 <DIO_u8SetPinDirection+0xc6>
    1040:	2b 85       	ldd	r18, Y+11	; 0x0b
    1042:	3c 85       	ldd	r19, Y+12	; 0x0c
    1044:	21 30       	cpi	r18, 0x01	; 1
    1046:	31 05       	cpc	r19, r1
    1048:	09 f0       	breq	.+2      	; 0x104c <DIO_u8SetPinDirection+0x9e>
    104a:	d1 c0       	rjmp	.+418    	; 0x11ee <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
    104c:	aa e3       	ldi	r26, 0x3A	; 58
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ea e3       	ldi	r30, 0x3A	; 58
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinDirection+0xbc>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinDirection+0xb8>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	bd c0       	rjmp	.+378    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
    1074:	aa e3       	ldi	r26, 0x3A	; 58
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ea e3       	ldi	r30, 0x3A	; 58
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_u8SetPinDirection+0xe4>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_u8SetPinDirection+0xe0>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	a8 c0       	rjmp	.+336    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3a 87       	std	Y+10, r19	; 0x0a
    10a6:	29 87       	std	Y+9, r18	; 0x09
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	d1 f0       	breq	.+52     	; 0x10e4 <DIO_u8SetPinDirection+0x136>
    10b0:	29 85       	ldd	r18, Y+9	; 0x09
    10b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b4:	21 30       	cpi	r18, 0x01	; 1
    10b6:	31 05       	cpc	r19, r1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <DIO_u8SetPinDirection+0x10e>
    10ba:	99 c0       	rjmp	.+306    	; 0x11ee <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_u8SetPinDirection+0x12c>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_u8SetPinDirection+0x128>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	85 c0       	rjmp	.+266    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinDirection+0x154>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinDirection+0x150>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	70 c0       	rjmp	.+224    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	38 87       	std	Y+8, r19	; 0x08
    1116:	2f 83       	std	Y+7, r18	; 0x07
    1118:	8f 81       	ldd	r24, Y+7	; 0x07
    111a:	98 85       	ldd	r25, Y+8	; 0x08
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	d1 f0       	breq	.+52     	; 0x1154 <DIO_u8SetPinDirection+0x1a6>
    1120:	2f 81       	ldd	r18, Y+7	; 0x07
    1122:	38 85       	ldd	r19, Y+8	; 0x08
    1124:	21 30       	cpi	r18, 0x01	; 1
    1126:	31 05       	cpc	r19, r1
    1128:	09 f0       	breq	.+2      	; 0x112c <DIO_u8SetPinDirection+0x17e>
    112a:	61 c0       	rjmp	.+194    	; 0x11ee <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
    112c:	a4 e3       	ldi	r26, 0x34	; 52
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e4 e3       	ldi	r30, 0x34	; 52
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_u8SetPinDirection+0x19c>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_u8SetPinDirection+0x198>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	4d c0       	rjmp	.+154    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
    1154:	a4 e3       	ldi	r26, 0x34	; 52
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e4 e3       	ldi	r30, 0x34	; 52
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8SetPinDirection+0x1c4>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8SetPinDirection+0x1c0>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	38 c0       	rjmp	.+112    	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3e 83       	std	Y+6, r19	; 0x06
    1186:	2d 83       	std	Y+5, r18	; 0x05
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	c9 f0       	breq	.+50     	; 0x11c2 <DIO_u8SetPinDirection+0x214>
    1190:	2d 81       	ldd	r18, Y+5	; 0x05
    1192:	3e 81       	ldd	r19, Y+6	; 0x06
    1194:	21 30       	cpi	r18, 0x01	; 1
    1196:	31 05       	cpc	r19, r1
    1198:	51 f5       	brne	.+84     	; 0x11ee <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
    119a:	a1 e3       	ldi	r26, 0x31	; 49
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e1 e3       	ldi	r30, 0x31	; 49
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_u8SetPinDirection+0x20a>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_u8SetPinDirection+0x206>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	16 c0       	rjmp	.+44     	; 0x11ee <DIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
    11c2:	a1 e3       	ldi	r26, 0x31	; 49
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_u8SetPinDirection+0x232>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_u8SetPinDirection+0x22e>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    11ec:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f0:	2e 96       	adiw	r28, 0x0e	; 14
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	2e 97       	sbiw	r28, 0x0e	; 14
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	8a 83       	std	Y+2, r24	; 0x02
    1218:	6b 83       	std	Y+3, r22	; 0x03
    121a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	84 30       	cpi	r24, 0x04	; 4
    1224:	08 f0       	brcs	.+2      	; 0x1228 <DIO_u8SetPinValue+0x26>
    1226:	0c c1       	rjmp	.+536    	; 0x1440 <DIO_u8SetPinValue+0x23e>
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	88 30       	cpi	r24, 0x08	; 8
    122c:	08 f0       	brcs	.+2      	; 0x1230 <DIO_u8SetPinValue+0x2e>
    122e:	08 c1       	rjmp	.+528    	; 0x1440 <DIO_u8SetPinValue+0x23e>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	21 f0       	breq	.+8      	; 0x123e <DIO_u8SetPinValue+0x3c>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	88 23       	and	r24, r24
    123a:	09 f0       	breq	.+2      	; 0x123e <DIO_u8SetPinValue+0x3c>
    123c:	01 c1       	rjmp	.+514    	; 0x1440 <DIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3e 87       	std	Y+14, r19	; 0x0e
    1246:	2d 87       	std	Y+13, r18	; 0x0d
    1248:	8d 85       	ldd	r24, Y+13	; 0x0d
    124a:	9e 85       	ldd	r25, Y+14	; 0x0e
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <DIO_u8SetPinValue+0x52>
    1252:	4f c0       	rjmp	.+158    	; 0x12f2 <DIO_u8SetPinValue+0xf0>
    1254:	2d 85       	ldd	r18, Y+13	; 0x0d
    1256:	3e 85       	ldd	r19, Y+14	; 0x0e
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <DIO_u8SetPinValue+0x66>
    125e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1260:	9e 85       	ldd	r25, Y+14	; 0x0e
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	71 f0       	breq	.+28     	; 0x1282 <DIO_u8SetPinValue+0x80>
    1266:	ed c0       	rjmp	.+474    	; 0x1442 <DIO_u8SetPinValue+0x240>
    1268:	2d 85       	ldd	r18, Y+13	; 0x0d
    126a:	3e 85       	ldd	r19, Y+14	; 0x0e
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <DIO_u8SetPinValue+0x72>
    1272:	77 c0       	rjmp	.+238    	; 0x1362 <DIO_u8SetPinValue+0x160>
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_u8SetPinValue+0x7e>
    127e:	a9 c0       	rjmp	.+338    	; 0x13d2 <DIO_u8SetPinValue+0x1d0>
    1280:	e0 c0       	rjmp	.+448    	; 0x1442 <DIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3c 87       	std	Y+12, r19	; 0x0c
    128a:	2b 87       	std	Y+11, r18	; 0x0b
    128c:	8b 85       	ldd	r24, Y+11	; 0x0b
    128e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	d1 f0       	breq	.+52     	; 0x12c8 <DIO_u8SetPinValue+0xc6>
    1294:	2b 85       	ldd	r18, Y+11	; 0x0b
    1296:	3c 85       	ldd	r19, Y+12	; 0x0c
    1298:	21 30       	cpi	r18, 0x01	; 1
    129a:	31 05       	cpc	r19, r1
    129c:	09 f0       	breq	.+2      	; 0x12a0 <DIO_u8SetPinValue+0x9e>
    129e:	d1 c0       	rjmp	.+418    	; 0x1442 <DIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
    12a0:	ab e3       	ldi	r26, 0x3B	; 59
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e3       	ldi	r30, 0x3B	; 59
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8SetPinValue+0xbc>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8SetPinValue+0xb8>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	bd c0       	rjmp	.+378    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
    12c8:	ab e3       	ldi	r26, 0x3B	; 59
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_u8SetPinValue+0xe4>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_u8SetPinValue+0xe0>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	a8 c0       	rjmp	.+336    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	3a 87       	std	Y+10, r19	; 0x0a
    12fa:	29 87       	std	Y+9, r18	; 0x09
    12fc:	89 85       	ldd	r24, Y+9	; 0x09
    12fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	d1 f0       	breq	.+52     	; 0x1338 <DIO_u8SetPinValue+0x136>
    1304:	29 85       	ldd	r18, Y+9	; 0x09
    1306:	3a 85       	ldd	r19, Y+10	; 0x0a
    1308:	21 30       	cpi	r18, 0x01	; 1
    130a:	31 05       	cpc	r19, r1
    130c:	09 f0       	breq	.+2      	; 0x1310 <DIO_u8SetPinValue+0x10e>
    130e:	99 c0       	rjmp	.+306    	; 0x1442 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8SetPinValue+0x12c>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8SetPinValue+0x128>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	85 c0       	rjmp	.+266    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_u8SetPinValue+0x154>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_u8SetPinValue+0x150>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	70 c0       	rjmp	.+224    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	38 87       	std	Y+8, r19	; 0x08
    136a:	2f 83       	std	Y+7, r18	; 0x07
    136c:	8f 81       	ldd	r24, Y+7	; 0x07
    136e:	98 85       	ldd	r25, Y+8	; 0x08
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	d1 f0       	breq	.+52     	; 0x13a8 <DIO_u8SetPinValue+0x1a6>
    1374:	2f 81       	ldd	r18, Y+7	; 0x07
    1376:	38 85       	ldd	r19, Y+8	; 0x08
    1378:	21 30       	cpi	r18, 0x01	; 1
    137a:	31 05       	cpc	r19, r1
    137c:	09 f0       	breq	.+2      	; 0x1380 <DIO_u8SetPinValue+0x17e>
    137e:	61 c0       	rjmp	.+194    	; 0x1442 <DIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8SetPinValue+0x19c>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_u8SetPinValue+0x198>
    13a2:	84 2b       	or	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	4d c0       	rjmp	.+154    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    13a8:	a5 e3       	ldi	r26, 0x35	; 53
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8SetPinValue+0x1c4>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8SetPinValue+0x1c0>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	38 c0       	rjmp	.+112    	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3e 83       	std	Y+6, r19	; 0x06
    13da:	2d 83       	std	Y+5, r18	; 0x05
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	c9 f0       	breq	.+50     	; 0x1416 <DIO_u8SetPinValue+0x214>
    13e4:	2d 81       	ldd	r18, Y+5	; 0x05
    13e6:	3e 81       	ldd	r19, Y+6	; 0x06
    13e8:	21 30       	cpi	r18, 0x01	; 1
    13ea:	31 05       	cpc	r19, r1
    13ec:	51 f5       	brne	.+84     	; 0x1442 <DIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    13ee:	a2 e3       	ldi	r26, 0x32	; 50
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_u8SetPinValue+0x20a>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_u8SetPinValue+0x206>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <DIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    1416:	a2 e3       	ldi	r26, 0x32	; 50
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e2 e3       	ldi	r30, 0x32	; 50
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_u8SetPinValue+0x232>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_u8SetPinValue+0x22e>
    1438:	80 95       	com	r24
    143a:	84 23       	and	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <DIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    1440:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    1442:	89 81       	ldd	r24, Y+1	; 0x01
}
    1444:	2e 96       	adiw	r28, 0x0e	; 14
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	27 97       	sbiw	r28, 0x07	; 7
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	6b 83       	std	Y+3, r22	; 0x03
    146e:	5d 83       	std	Y+5, r21	; 0x05
    1470:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	08 f0       	brcs	.+2      	; 0x147e <DIO_u8GetPinValue+0x28>
    147c:	ea c0       	rjmp	.+468    	; 0x1652 <DIO_u8GetPinValue+0x1fc>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 30       	cpi	r24, 0x08	; 8
    1482:	08 f0       	brcs	.+2      	; 0x1486 <DIO_u8GetPinValue+0x30>
    1484:	e6 c0       	rjmp	.+460    	; 0x1652 <DIO_u8GetPinValue+0x1fc>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	09 f4       	brne	.+2      	; 0x1490 <DIO_u8GetPinValue+0x3a>
    148e:	e1 c0       	rjmp	.+450    	; 0x1652 <DIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3f 83       	std	Y+7, r19	; 0x07
    1498:	2e 83       	std	Y+6, r18	; 0x06
    149a:	4e 81       	ldd	r20, Y+6	; 0x06
    149c:	5f 81       	ldd	r21, Y+7	; 0x07
    149e:	41 30       	cpi	r20, 0x01	; 1
    14a0:	51 05       	cpc	r21, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <DIO_u8GetPinValue+0x50>
    14a4:	48 c0       	rjmp	.+144    	; 0x1536 <DIO_u8GetPinValue+0xe0>
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	9f 81       	ldd	r25, Y+7	; 0x07
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	91 05       	cpc	r25, r1
    14ae:	34 f4       	brge	.+12     	; 0x14bc <DIO_u8GetPinValue+0x66>
    14b0:	2e 81       	ldd	r18, Y+6	; 0x06
    14b2:	3f 81       	ldd	r19, Y+7	; 0x07
    14b4:	21 15       	cp	r18, r1
    14b6:	31 05       	cpc	r19, r1
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <DIO_u8GetPinValue+0x80>
    14ba:	cc c0       	rjmp	.+408    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
    14bc:	4e 81       	ldd	r20, Y+6	; 0x06
    14be:	5f 81       	ldd	r21, Y+7	; 0x07
    14c0:	42 30       	cpi	r20, 0x02	; 2
    14c2:	51 05       	cpc	r21, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <DIO_u8GetPinValue+0x72>
    14c6:	67 c0       	rjmp	.+206    	; 0x1596 <DIO_u8GetPinValue+0x140>
    14c8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ca:	9f 81       	ldd	r25, Y+7	; 0x07
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <DIO_u8GetPinValue+0x7e>
    14d2:	90 c0       	rjmp	.+288    	; 0x15f4 <DIO_u8GetPinValue+0x19e>
    14d4:	bf c0       	rjmp	.+382    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    14d6:	e9 e3       	ldi	r30, 0x39	; 57
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a9 01       	movw	r20, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <DIO_u8GetPinValue+0x98>
    14ea:	55 95       	asr	r21
    14ec:	47 95       	ror	r20
    14ee:	8a 95       	dec	r24
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <DIO_u8GetPinValue+0x94>
    14f2:	ca 01       	movw	r24, r20
    14f4:	81 70       	andi	r24, 0x01	; 1
    14f6:	90 70       	andi	r25, 0x00	; 0
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	21 f4       	brne	.+8      	; 0x1504 <DIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    14fc:	ec 81       	ldd	r30, Y+4	; 0x04
    14fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1500:	10 82       	st	Z, r1
    1502:	a8 c0       	rjmp	.+336    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    1504:	e9 e3       	ldi	r30, 0x39	; 57
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_u8GetPinValue+0xc6>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_u8GetPinValue+0xc2>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	90 70       	andi	r25, 0x00	; 0
    1526:	88 23       	and	r24, r24
    1528:	09 f4       	brne	.+2      	; 0x152c <DIO_u8GetPinValue+0xd6>
    152a:	94 c0       	rjmp	.+296    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    152c:	ec 81       	ldd	r30, Y+4	; 0x04
    152e:	fd 81       	ldd	r31, Y+5	; 0x05
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	80 83       	st	Z, r24
    1534:	8f c0       	rjmp	.+286    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    1536:	e6 e3       	ldi	r30, 0x36	; 54
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a9 01       	movw	r20, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_u8GetPinValue+0xf8>
    154a:	55 95       	asr	r21
    154c:	47 95       	ror	r20
    154e:	8a 95       	dec	r24
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_u8GetPinValue+0xf4>
    1552:	ca 01       	movw	r24, r20
    1554:	81 70       	andi	r24, 0x01	; 1
    1556:	90 70       	andi	r25, 0x00	; 0
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	21 f4       	brne	.+8      	; 0x1564 <DIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    155c:	ec 81       	ldd	r30, Y+4	; 0x04
    155e:	fd 81       	ldd	r31, Y+5	; 0x05
    1560:	10 82       	st	Z, r1
    1562:	78 c0       	rjmp	.+240    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    1564:	e6 e3       	ldi	r30, 0x36	; 54
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a9 01       	movw	r20, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_u8GetPinValue+0x126>
    1578:	55 95       	asr	r21
    157a:	47 95       	ror	r20
    157c:	8a 95       	dec	r24
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_u8GetPinValue+0x122>
    1580:	ca 01       	movw	r24, r20
    1582:	81 70       	andi	r24, 0x01	; 1
    1584:	90 70       	andi	r25, 0x00	; 0
    1586:	88 23       	and	r24, r24
    1588:	09 f4       	brne	.+2      	; 0x158c <DIO_u8GetPinValue+0x136>
    158a:	64 c0       	rjmp	.+200    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    158c:	ec 81       	ldd	r30, Y+4	; 0x04
    158e:	fd 81       	ldd	r31, Y+5	; 0x05
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 83       	st	Z, r24
    1594:	5f c0       	rjmp	.+190    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    1596:	e3 e3       	ldi	r30, 0x33	; 51
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_u8GetPinValue+0x158>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_u8GetPinValue+0x154>
    15b2:	ca 01       	movw	r24, r20
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	90 70       	andi	r25, 0x00	; 0
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <DIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15bc:	ec 81       	ldd	r30, Y+4	; 0x04
    15be:	fd 81       	ldd	r31, Y+5	; 0x05
    15c0:	10 82       	st	Z, r1
    15c2:	48 c0       	rjmp	.+144    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    15c4:	e3 e3       	ldi	r30, 0x33	; 51
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a9 01       	movw	r20, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_u8GetPinValue+0x186>
    15d8:	55 95       	asr	r21
    15da:	47 95       	ror	r20
    15dc:	8a 95       	dec	r24
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_u8GetPinValue+0x182>
    15e0:	ca 01       	movw	r24, r20
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	90 70       	andi	r25, 0x00	; 0
    15e6:	88 23       	and	r24, r24
    15e8:	a9 f1       	breq	.+106    	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    15ea:	ec 81       	ldd	r30, Y+4	; 0x04
    15ec:	fd 81       	ldd	r31, Y+5	; 0x05
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 83       	st	Z, r24
    15f2:	30 c0       	rjmp	.+96     	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    15f4:	e0 e3       	ldi	r30, 0x30	; 48
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a9 01       	movw	r20, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_u8GetPinValue+0x1b6>
    1608:	55 95       	asr	r21
    160a:	47 95       	ror	r20
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_u8GetPinValue+0x1b2>
    1610:	ca 01       	movw	r24, r20
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	90 70       	andi	r25, 0x00	; 0
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	21 f4       	brne	.+8      	; 0x1622 <DIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    161a:	ec 81       	ldd	r30, Y+4	; 0x04
    161c:	fd 81       	ldd	r31, Y+5	; 0x05
    161e:	10 82       	st	Z, r1
    1620:	19 c0       	rjmp	.+50     	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    1622:	e0 e3       	ldi	r30, 0x30	; 48
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a9 01       	movw	r20, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_u8GetPinValue+0x1e4>
    1636:	55 95       	asr	r21
    1638:	47 95       	ror	r20
    163a:	8a 95       	dec	r24
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_u8GetPinValue+0x1e0>
    163e:	ca 01       	movw	r24, r20
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	90 70       	andi	r25, 0x00	; 0
    1644:	88 23       	and	r24, r24
    1646:	31 f0       	breq	.+12     	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1648:	ec 81       	ldd	r30, Y+4	; 0x04
    164a:	fd 81       	ldd	r31, Y+5	; 0x05
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 83       	st	Z, r24
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <DIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1652:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1654:	89 81       	ldd	r24, Y+1	; 0x01
}
    1656:	27 96       	adiw	r28, 0x07	; 7
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2d 97       	sbiw	r28, 0x0d	; 13
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	08 f0       	brcs	.+2      	; 0x168c <DIO_u8SetPortDirection+0x24>
    168a:	87 c0       	rjmp	.+270    	; 0x179a <DIO_u8SetPortDirection+0x132>
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	21 f0       	breq	.+8      	; 0x169a <DIO_u8SetPortDirection+0x32>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	88 23       	and	r24, r24
    1696:	09 f0       	breq	.+2      	; 0x169a <DIO_u8SetPortDirection+0x32>
    1698:	80 c0       	rjmp	.+256    	; 0x179a <DIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3d 87       	std	Y+13, r19	; 0x0d
    16a2:	2c 87       	std	Y+12, r18	; 0x0c
    16a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	91 05       	cpc	r25, r1
    16ac:	71 f1       	breq	.+92     	; 0x170a <DIO_u8SetPortDirection+0xa2>
    16ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    16b0:	3d 85       	ldd	r19, Y+13	; 0x0d
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <DIO_u8SetPortDirection+0x5a>
    16b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f0       	breq	.+26     	; 0x16da <DIO_u8SetPortDirection+0x72>
    16c0:	6d c0       	rjmp	.+218    	; 0x179c <DIO_u8SetPortDirection+0x134>
    16c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	b9 f1       	breq	.+110    	; 0x173a <DIO_u8SetPortDirection+0xd2>
    16cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	91 05       	cpc	r25, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <DIO_u8SetPortDirection+0x70>
    16d6:	49 c0       	rjmp	.+146    	; 0x176a <DIO_u8SetPortDirection+0x102>
    16d8:	61 c0       	rjmp	.+194    	; 0x179c <DIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3b 87       	std	Y+11, r19	; 0x0b
    16e2:	2a 87       	std	Y+10, r18	; 0x0a
    16e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <DIO_u8SetPortDirection+0x90>
    16ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    16f0:	21 30       	cpi	r18, 0x01	; 1
    16f2:	31 05       	cpc	r19, r1
    16f4:	29 f0       	breq	.+10     	; 0x1700 <DIO_u8SetPortDirection+0x98>
    16f6:	52 c0       	rjmp	.+164    	; 0x179c <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    16f8:	ea e3       	ldi	r30, 0x3A	; 58
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	10 82       	st	Z, r1
    16fe:	4e c0       	rjmp	.+156    	; 0x179c <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    1700:	ea e3       	ldi	r30, 0x3A	; 58
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	80 83       	st	Z, r24
    1708:	49 c0       	rjmp	.+146    	; 0x179c <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	39 87       	std	Y+9, r19	; 0x09
    1712:	28 87       	std	Y+8, r18	; 0x08
    1714:	88 85       	ldd	r24, Y+8	; 0x08
    1716:	99 85       	ldd	r25, Y+9	; 0x09
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	31 f0       	breq	.+12     	; 0x1728 <DIO_u8SetPortDirection+0xc0>
    171c:	28 85       	ldd	r18, Y+8	; 0x08
    171e:	39 85       	ldd	r19, Y+9	; 0x09
    1720:	21 30       	cpi	r18, 0x01	; 1
    1722:	31 05       	cpc	r19, r1
    1724:	29 f0       	breq	.+10     	; 0x1730 <DIO_u8SetPortDirection+0xc8>
    1726:	3a c0       	rjmp	.+116    	; 0x179c <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    1728:	e7 e3       	ldi	r30, 0x37	; 55
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	10 82       	st	Z, r1
    172e:	36 c0       	rjmp	.+108    	; 0x179c <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    1730:	e7 e3       	ldi	r30, 0x37	; 55
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	80 83       	st	Z, r24
    1738:	31 c0       	rjmp	.+98     	; 0x179c <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3f 83       	std	Y+7, r19	; 0x07
    1742:	2e 83       	std	Y+6, r18	; 0x06
    1744:	8e 81       	ldd	r24, Y+6	; 0x06
    1746:	9f 81       	ldd	r25, Y+7	; 0x07
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	31 f0       	breq	.+12     	; 0x1758 <DIO_u8SetPortDirection+0xf0>
    174c:	2e 81       	ldd	r18, Y+6	; 0x06
    174e:	3f 81       	ldd	r19, Y+7	; 0x07
    1750:	21 30       	cpi	r18, 0x01	; 1
    1752:	31 05       	cpc	r19, r1
    1754:	29 f0       	breq	.+10     	; 0x1760 <DIO_u8SetPortDirection+0xf8>
    1756:	22 c0       	rjmp	.+68     	; 0x179c <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    1758:	e4 e3       	ldi	r30, 0x34	; 52
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	10 82       	st	Z, r1
    175e:	1e c0       	rjmp	.+60     	; 0x179c <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    1760:	e4 e3       	ldi	r30, 0x34	; 52
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	80 83       	st	Z, r24
    1768:	19 c0       	rjmp	.+50     	; 0x179c <DIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	3d 83       	std	Y+5, r19	; 0x05
    1772:	2c 83       	std	Y+4, r18	; 0x04
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	31 f0       	breq	.+12     	; 0x1788 <DIO_u8SetPortDirection+0x120>
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	21 30       	cpi	r18, 0x01	; 1
    1782:	31 05       	cpc	r19, r1
    1784:	29 f0       	breq	.+10     	; 0x1790 <DIO_u8SetPortDirection+0x128>
    1786:	0a c0       	rjmp	.+20     	; 0x179c <DIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    1788:	e1 e3       	ldi	r30, 0x31	; 49
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	10 82       	st	Z, r1
    178e:	06 c0       	rjmp	.+12     	; 0x179c <DIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    1790:	e1 e3       	ldi	r30, 0x31	; 49
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	80 83       	st	Z, r24
    1798:	01 c0       	rjmp	.+2      	; 0x179c <DIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    179a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    179c:	89 81       	ldd	r24, Y+1	; 0x01
}
    179e:	2d 96       	adiw	r28, 0x0d	; 13
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <DIO_u8SetPortValue+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_u8SetPortValue+0x8>
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3d 83       	std	Y+5, r19	; 0x05
    17ce:	2c 83       	std	Y+4, r18	; 0x04
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 05       	cpc	r25, r1
    17d8:	d1 f0       	breq	.+52     	; 0x180e <DIO_u8SetPortValue+0x5e>
    17da:	2c 81       	ldd	r18, Y+4	; 0x04
    17dc:	3d 81       	ldd	r19, Y+5	; 0x05
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	2c f4       	brge	.+10     	; 0x17ee <DIO_u8SetPortValue+0x3e>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	61 f0       	breq	.+24     	; 0x1804 <DIO_u8SetPortValue+0x54>
    17ec:	1f c0       	rjmp	.+62     	; 0x182c <DIO_u8SetPortValue+0x7c>
    17ee:	2c 81       	ldd	r18, Y+4	; 0x04
    17f0:	3d 81       	ldd	r19, Y+5	; 0x05
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	81 f0       	breq	.+32     	; 0x1818 <DIO_u8SetPortValue+0x68>
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	9d 81       	ldd	r25, Y+5	; 0x05
    17fc:	83 30       	cpi	r24, 0x03	; 3
    17fe:	91 05       	cpc	r25, r1
    1800:	81 f0       	breq	.+32     	; 0x1822 <DIO_u8SetPortValue+0x72>
    1802:	14 c0       	rjmp	.+40     	; 0x182c <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	80 83       	st	Z, r24
    180c:	10 c0       	rjmp	.+32     	; 0x182e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    180e:	e8 e3       	ldi	r30, 0x38	; 56
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	80 83       	st	Z, r24
    1816:	0b c0       	rjmp	.+22     	; 0x182e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	80 83       	st	Z, r24
    1820:	06 c0       	rjmp	.+12     	; 0x182e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	80 83       	st	Z, r24
    182a:	01 c0       	rjmp	.+2      	; 0x182e <DIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    182c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <DIO_u8GetPortValue+0x6>
    1846:	00 d0       	rcall	.+0      	; 0x1848 <DIO_u8GetPortValue+0x8>
    1848:	00 d0       	rcall	.+0      	; 0x184a <DIO_u8GetPortValue+0xa>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	7c 83       	std	Y+4, r23	; 0x04
    1852:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	e9 f1       	breq	.+122    	; 0x18da <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3e 83       	std	Y+6, r19	; 0x06
    1868:	2d 83       	std	Y+5, r18	; 0x05
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	e1 f0       	breq	.+56     	; 0x18ac <DIO_u8GetPortValue+0x6c>
    1874:	2d 81       	ldd	r18, Y+5	; 0x05
    1876:	3e 81       	ldd	r19, Y+6	; 0x06
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	2c f4       	brge	.+10     	; 0x1888 <DIO_u8GetPortValue+0x48>
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	61 f0       	breq	.+24     	; 0x189e <DIO_u8GetPortValue+0x5e>
    1886:	27 c0       	rjmp	.+78     	; 0x18d6 <DIO_u8GetPortValue+0x96>
    1888:	2d 81       	ldd	r18, Y+5	; 0x05
    188a:	3e 81       	ldd	r19, Y+6	; 0x06
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	a1 f0       	breq	.+40     	; 0x18ba <DIO_u8GetPortValue+0x7a>
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	91 05       	cpc	r25, r1
    189a:	b1 f0       	breq	.+44     	; 0x18c8 <DIO_u8GetPortValue+0x88>
    189c:	1c c0       	rjmp	.+56     	; 0x18d6 <DIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    189e:	e9 e3       	ldi	r30, 0x39	; 57
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	eb 81       	ldd	r30, Y+3	; 0x03
    18a6:	fc 81       	ldd	r31, Y+4	; 0x04
    18a8:	80 83       	st	Z, r24
    18aa:	18 c0       	rjmp	.+48     	; 0x18dc <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    18ac:	e6 e3       	ldi	r30, 0x36	; 54
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	eb 81       	ldd	r30, Y+3	; 0x03
    18b4:	fc 81       	ldd	r31, Y+4	; 0x04
    18b6:	80 83       	st	Z, r24
    18b8:	11 c0       	rjmp	.+34     	; 0x18dc <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    18ba:	e3 e3       	ldi	r30, 0x33	; 51
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	eb 81       	ldd	r30, Y+3	; 0x03
    18c2:	fc 81       	ldd	r31, Y+4	; 0x04
    18c4:	80 83       	st	Z, r24
    18c6:	0a c0       	rjmp	.+20     	; 0x18dc <DIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    18c8:	e0 e3       	ldi	r30, 0x30	; 48
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	eb 81       	ldd	r30, Y+3	; 0x03
    18d0:	fc 81       	ldd	r31, Y+4	; 0x04
    18d2:	80 83       	st	Z, r24
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <DIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    18d6:	19 82       	std	Y+1, r1	; 0x01
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    18da:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	26 96       	adiw	r28, 0x06	; 6
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <EXTI_u8SetCallBack>:

/* Array of Global Pointers to Function */
static void (*EXTI_ApfEXTI[3])(void) = {NULL,NULL,NULL};

u8 EXTI_u8SetCallBack(void(*Copy_pf)(void),u8 Copy_u8CallBackIndex)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <EXTI_u8SetCallBack+0x6>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <EXTI_u8SetCallBack+0x8>
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	9b 83       	std	Y+3, r25	; 0x03
    18fe:	8a 83       	std	Y+2, r24	; 0x02
    1900:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8CallBackIndex <= EXTI_u8_INT2) && (Copy_pf != NULL ))
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	83 30       	cpi	r24, 0x03	; 3
    190a:	88 f4       	brcc	.+34     	; 0x192e <EXTI_u8SetCallBack+0x3e>
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	9b 81       	ldd	r25, Y+3	; 0x03
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	69 f0       	breq	.+26     	; 0x192e <EXTI_u8SetCallBack+0x3e>
	{
		EXTI_ApfEXTI[Copy_u8CallBackIndex] = Copy_pf;
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	fc 01       	movw	r30, r24
    1920:	e7 50       	subi	r30, 0x07	; 7
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <EXTI_u8SetCallBack+0x40>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    192e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1930:	89 81       	ldd	r24, Y+1	; 0x01

}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <EXTI_u8Enable>:

u8 EXTI_u8Enable (u8 Copy_u8_EXTIIndex , u8 Copy_u8EXTIEdge)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	2b 97       	sbiw	r28, 0x0b	; 11
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	8a 83       	std	Y+2, r24	; 0x02
    1956:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8_EXTIIndex)
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3b 87       	std	Y+11, r19	; 0x0b
    1964:	2a 87       	std	Y+10, r18	; 0x0a
    1966:	8a 85       	ldd	r24, Y+10	; 0x0a
    1968:	9b 85       	ldd	r25, Y+11	; 0x0b
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	91 05       	cpc	r25, r1
    196e:	09 f4       	brne	.+2      	; 0x1972 <EXTI_u8Enable+0x32>
    1970:	6f c0       	rjmp	.+222    	; 0x1a50 <EXTI_u8Enable+0x110>
    1972:	2a 85       	ldd	r18, Y+10	; 0x0a
    1974:	3b 85       	ldd	r19, Y+11	; 0x0b
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	09 f4       	brne	.+2      	; 0x197e <EXTI_u8Enable+0x3e>
    197c:	cd c0       	rjmp	.+410    	; 0x1b18 <EXTI_u8Enable+0x1d8>
    197e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1980:	9b 85       	ldd	r25, Y+11	; 0x0b
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	09 f0       	breq	.+2      	; 0x1988 <EXTI_u8Enable+0x48>
    1986:	f0 c0       	rjmp	.+480    	; 0x1b68 <EXTI_u8Enable+0x228>
	{
	    case EXTI_u8_INT0:
	    	switch(Copy_u8EXTIEdge)
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	39 87       	std	Y+9, r19	; 0x09
    1990:	28 87       	std	Y+8, r18	; 0x08
    1992:	88 85       	ldd	r24, Y+8	; 0x08
    1994:	99 85       	ldd	r25, Y+9	; 0x09
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	91 05       	cpc	r25, r1
    199a:	21 f1       	breq	.+72     	; 0x19e4 <EXTI_u8Enable+0xa4>
    199c:	28 85       	ldd	r18, Y+8	; 0x08
    199e:	39 85       	ldd	r19, Y+9	; 0x09
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <EXTI_u8Enable+0x70>
    19a6:	88 85       	ldd	r24, Y+8	; 0x08
    19a8:	99 85       	ldd	r25, Y+9	; 0x09
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <EXTI_u8Enable+0x86>
    19ae:	47 c0       	rjmp	.+142    	; 0x1a3e <EXTI_u8Enable+0xfe>
    19b0:	28 85       	ldd	r18, Y+8	; 0x08
    19b2:	39 85       	ldd	r19, Y+9	; 0x09
    19b4:	22 30       	cpi	r18, 0x02	; 2
    19b6:	31 05       	cpc	r19, r1
    19b8:	99 f1       	breq	.+102    	; 0x1a20 <EXTI_u8Enable+0xe0>
    19ba:	88 85       	ldd	r24, Y+8	; 0x08
    19bc:	99 85       	ldd	r25, Y+9	; 0x09
    19be:	83 30       	cpi	r24, 0x03	; 3
    19c0:	91 05       	cpc	r25, r1
    19c2:	f9 f0       	breq	.+62     	; 0x1a02 <EXTI_u8Enable+0xc2>
    19c4:	3c c0       	rjmp	.+120    	; 0x1a3e <EXTI_u8Enable+0xfe>
	    	{
	    	    case EXTI_u8_FALLING_EDGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,1);
    19c6:	a5 e5       	ldi	r26, 0x55	; 85
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e5       	ldi	r30, 0x55	; 85
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	82 60       	ori	r24, 0x02	; 2
    19d2:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,0);
    19d4:	a5 e5       	ldi	r26, 0x55	; 85
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e5       	ldi	r30, 0x55	; 85
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8e 7f       	andi	r24, 0xFE	; 254
    19e0:	8c 93       	st	X, r24
    19e2:	2e c0       	rjmp	.+92     	; 0x1a40 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_RISING_EDGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,1);
    19e4:	a5 e5       	ldi	r26, 0x55	; 85
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e5       	ldi	r30, 0x55	; 85
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	82 60       	ori	r24, 0x02	; 2
    19f0:	8c 93       	st	X, r24
	    	    	SET_BIT(EXTI_u8_MCUCR,0);
    19f2:	a5 e5       	ldi	r26, 0x55	; 85
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e5       	ldi	r30, 0x55	; 85
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	8c 93       	st	X, r24
    1a00:	1f c0       	rjmp	.+62     	; 0x1a40 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_LOW_LEVEL:
	    	    	CLR_BIT(EXTI_u8_MCUCR,1);
    1a02:	a5 e5       	ldi	r26, 0x55	; 85
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e5 e5       	ldi	r30, 0x55	; 85
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8d 7f       	andi	r24, 0xFD	; 253
    1a0e:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,0);
    1a10:	a5 e5       	ldi	r26, 0x55	; 85
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e5       	ldi	r30, 0x55	; 85
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8e 7f       	andi	r24, 0xFE	; 254
    1a1c:	8c 93       	st	X, r24
    1a1e:	10 c0       	rjmp	.+32     	; 0x1a40 <EXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_ANY_LOGICAL_CHANGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,0);
    1a20:	a5 e5       	ldi	r26, 0x55	; 85
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e5       	ldi	r30, 0x55	; 85
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	81 60       	ori	r24, 0x01	; 1
    1a2c:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,1);
    1a2e:	a5 e5       	ldi	r26, 0x55	; 85
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e5 e5       	ldi	r30, 0x55	; 85
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	8d 7f       	andi	r24, 0xFD	; 253
    1a3a:	8c 93       	st	X, r24
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <EXTI_u8Enable+0x100>
	    		break;
	    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    1a3e:	19 82       	std	Y+1, r1	; 0x01
	    	}
	    	/* Enable PIE */
	    	SET_BIT(EXTI_u8_GICR,6);
    1a40:	ab e5       	ldi	r26, 0x5B	; 91
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	eb e5       	ldi	r30, 0x5B	; 91
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 64       	ori	r24, 0x40	; 64
    1a4c:	8c 93       	st	X, r24
    1a4e:	8d c0       	rjmp	.+282    	; 0x1b6a <EXTI_u8Enable+0x22a>
		break;
		    case EXTI_u8_INT1:
		    	switch(Copy_u8EXTIEdge)
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	3f 83       	std	Y+7, r19	; 0x07
    1a58:	2e 83       	std	Y+6, r18	; 0x06
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	91 05       	cpc	r25, r1
    1a62:	21 f1       	breq	.+72     	; 0x1aac <EXTI_u8Enable+0x16c>
    1a64:	2e 81       	ldd	r18, Y+6	; 0x06
    1a66:	3f 81       	ldd	r19, Y+7	; 0x07
    1a68:	22 30       	cpi	r18, 0x02	; 2
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <EXTI_u8Enable+0x138>
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	61 f0       	breq	.+24     	; 0x1a8e <EXTI_u8Enable+0x14e>
    1a76:	47 c0       	rjmp	.+142    	; 0x1b06 <EXTI_u8Enable+0x1c6>
    1a78:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7c:	22 30       	cpi	r18, 0x02	; 2
    1a7e:	31 05       	cpc	r19, r1
    1a80:	99 f1       	breq	.+102    	; 0x1ae8 <EXTI_u8Enable+0x1a8>
    1a82:	8e 81       	ldd	r24, Y+6	; 0x06
    1a84:	9f 81       	ldd	r25, Y+7	; 0x07
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	91 05       	cpc	r25, r1
    1a8a:	f9 f0       	breq	.+62     	; 0x1aca <EXTI_u8Enable+0x18a>
    1a8c:	3c c0       	rjmp	.+120    	; 0x1b06 <EXTI_u8Enable+0x1c6>
		    	{
		    	    case EXTI_u8_FALLING_EDGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,3);
    1a8e:	a5 e5       	ldi	r26, 0x55	; 85
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e5       	ldi	r30, 0x55	; 85
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	88 60       	ori	r24, 0x08	; 8
    1a9a:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,2);
    1a9c:	a5 e5       	ldi	r26, 0x55	; 85
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e5 e5       	ldi	r30, 0x55	; 85
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8b 7f       	andi	r24, 0xFB	; 251
    1aa8:	8c 93       	st	X, r24
    1aaa:	2e c0       	rjmp	.+92     	; 0x1b08 <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_RISING_EDGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,3);
    1aac:	a5 e5       	ldi	r26, 0x55	; 85
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e5       	ldi	r30, 0x55	; 85
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 60       	ori	r24, 0x08	; 8
    1ab8:	8c 93       	st	X, r24
		    	    	SET_BIT(EXTI_u8_MCUCR,2);
    1aba:	a5 e5       	ldi	r26, 0x55	; 85
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e5       	ldi	r30, 0x55	; 85
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	84 60       	ori	r24, 0x04	; 4
    1ac6:	8c 93       	st	X, r24
    1ac8:	1f c0       	rjmp	.+62     	; 0x1b08 <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_LOW_LEVEL:
		    	    	CLR_BIT(EXTI_u8_MCUCR,2);
    1aca:	a5 e5       	ldi	r26, 0x55	; 85
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e5       	ldi	r30, 0x55	; 85
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8b 7f       	andi	r24, 0xFB	; 251
    1ad6:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,3);
    1ad8:	a5 e5       	ldi	r26, 0x55	; 85
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e5 e5       	ldi	r30, 0x55	; 85
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	87 7f       	andi	r24, 0xF7	; 247
    1ae4:	8c 93       	st	X, r24
    1ae6:	10 c0       	rjmp	.+32     	; 0x1b08 <EXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_ANY_LOGICAL_CHANGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,2);
    1ae8:	a5 e5       	ldi	r26, 0x55	; 85
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e5       	ldi	r30, 0x55	; 85
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	84 60       	ori	r24, 0x04	; 4
    1af4:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,3);
    1af6:	a5 e5       	ldi	r26, 0x55	; 85
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e5       	ldi	r30, 0x55	; 85
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	87 7f       	andi	r24, 0xF7	; 247
    1b02:	8c 93       	st	X, r24
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <EXTI_u8Enable+0x1c8>
		    		break;
		    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    1b06:	19 82       	std	Y+1, r1	; 0x01
		    	}
		    	/* Enable PIE */
		    	SET_BIT(EXTI_u8_GICR,7);
    1b08:	ab e5       	ldi	r26, 0x5B	; 91
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	eb e5       	ldi	r30, 0x5B	; 91
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	8c 93       	st	X, r24
    1b16:	29 c0       	rjmp	.+82     	; 0x1b6a <EXTI_u8Enable+0x22a>
			break;
			    case EXTI_u8_INT2:
			    	switch(Copy_u8EXTIEdge)
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	31 f0       	breq	.+12     	; 0x1b36 <EXTI_u8Enable+0x1f6>
    1b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2e:	21 30       	cpi	r18, 0x01	; 1
    1b30:	31 05       	cpc	r19, r1
    1b32:	49 f0       	breq	.+18     	; 0x1b46 <EXTI_u8Enable+0x206>
    1b34:	10 c0       	rjmp	.+32     	; 0x1b56 <EXTI_u8Enable+0x216>
			    	{
			    	    case EXTI_u8_FALLING_EDGE:
                             CLR_BIT(EXTI_u8_MCUCSR,6);
    1b36:	a4 e5       	ldi	r26, 0x54	; 84
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e4 e5       	ldi	r30, 0x54	; 84
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 7b       	andi	r24, 0xBF	; 191
    1b42:	8c 93       	st	X, r24
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <EXTI_u8Enable+0x218>
			    		break;
			    	    case EXTI_u8_RISING_EDGE:
                             SET_BIT(EXTI_u8_MCUCSR,6);
    1b46:	a4 e5       	ldi	r26, 0x54	; 84
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e4 e5       	ldi	r30, 0x54	; 84
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	80 64       	ori	r24, 0x40	; 64
    1b52:	8c 93       	st	X, r24
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <EXTI_u8Enable+0x218>
			    		break;
			    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    1b56:	19 82       	std	Y+1, r1	; 0x01
			    	}
			    	/* Enable PIE */
			    	SET_BIT(EXTI_u8_GICR,5);
    1b58:	ab e5       	ldi	r26, 0x5B	; 91
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	eb e5       	ldi	r30, 0x5B	; 91
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	80 62       	ori	r24, 0x20	; 32
    1b64:	8c 93       	st	X, r24
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <EXTI_u8Enable+0x22a>
				break;
			    	default: Local_u8ErrorState = STD_TYPES_NOK;
    1b68:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState;
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6c:	2b 96       	adiw	r28, 0x0b	; 11
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <EXTI_u8Disable>:

u8 EXTI_u8Disable(u8 Copy_u8_EXTIIndex)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <EXTI_u8Disable+0x6>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <EXTI_u8Disable+0x8>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTIIndex)
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	3c 83       	std	Y+4, r19	; 0x04
    1b98:	2b 83       	std	Y+3, r18	; 0x03
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	89 f0       	breq	.+34     	; 0x1bc6 <EXTI_u8Disable+0x48>
    1ba4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba8:	22 30       	cpi	r18, 0x02	; 2
    1baa:	31 05       	cpc	r19, r1
    1bac:	a1 f0       	breq	.+40     	; 0x1bd6 <EXTI_u8Disable+0x58>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	c1 f4       	brne	.+48     	; 0x1be6 <EXTI_u8Disable+0x68>
	{
	case EXTI_u8_INT0: CLR_BIT(EXTI_u8_GICR,6);break;
    1bb6:	ab e5       	ldi	r26, 0x5B	; 91
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	eb e5       	ldi	r30, 0x5B	; 91
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8f 7b       	andi	r24, 0xBF	; 191
    1bc2:	8c 93       	st	X, r24
    1bc4:	11 c0       	rjmp	.+34     	; 0x1be8 <EXTI_u8Disable+0x6a>
	case EXTI_u8_INT1: CLR_BIT(EXTI_u8_GICR,7);break;
    1bc6:	ab e5       	ldi	r26, 0x5B	; 91
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	eb e5       	ldi	r30, 0x5B	; 91
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 77       	andi	r24, 0x7F	; 127
    1bd2:	8c 93       	st	X, r24
    1bd4:	09 c0       	rjmp	.+18     	; 0x1be8 <EXTI_u8Disable+0x6a>
	case EXTI_u8_INT2: CLR_BIT(EXTI_u8_GICR,5);break;
    1bd6:	ab e5       	ldi	r26, 0x5B	; 91
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	eb e5       	ldi	r30, 0x5B	; 91
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 7d       	andi	r24, 0xDF	; 223
    1be2:	8c 93       	st	X, r24
    1be4:	01 c0       	rjmp	.+2      	; 0x1be8 <EXTI_u8Disable+0x6a>
	default: Local_u8ErrorState = STD_TYPES_NOK;
    1be6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01

}
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <__vector_1>:

/* Prototype for ISR function */
/* EXTI0 ISR */
void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
    1bf8:	1f 92       	push	r1
    1bfa:	0f 92       	push	r0
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	0f 92       	push	r0
    1c00:	11 24       	eor	r1, r1
    1c02:	2f 93       	push	r18
    1c04:	3f 93       	push	r19
    1c06:	4f 93       	push	r20
    1c08:	5f 93       	push	r21
    1c0a:	6f 93       	push	r22
    1c0c:	7f 93       	push	r23
    1c0e:	8f 93       	push	r24
    1c10:	9f 93       	push	r25
    1c12:	af 93       	push	r26
    1c14:	bf 93       	push	r27
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
    1c22:	80 91 f9 00 	lds	r24, 0x00F9
    1c26:	90 91 fa 00 	lds	r25, 0x00FA
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	29 f0       	breq	.+10     	; 0x1c38 <__vector_1+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT0]();
    1c2e:	e0 91 f9 00 	lds	r30, 0x00F9
    1c32:	f0 91 fa 00 	lds	r31, 0x00FA
    1c36:	09 95       	icall
	}
}
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	ff 91       	pop	r31
    1c3e:	ef 91       	pop	r30
    1c40:	bf 91       	pop	r27
    1c42:	af 91       	pop	r26
    1c44:	9f 91       	pop	r25
    1c46:	8f 91       	pop	r24
    1c48:	7f 91       	pop	r23
    1c4a:	6f 91       	pop	r22
    1c4c:	5f 91       	pop	r21
    1c4e:	4f 91       	pop	r20
    1c50:	3f 91       	pop	r19
    1c52:	2f 91       	pop	r18
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__vector_2>:
/* EXTI1 ISR */
void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	2f 93       	push	r18
    1c6a:	3f 93       	push	r19
    1c6c:	4f 93       	push	r20
    1c6e:	5f 93       	push	r21
    1c70:	6f 93       	push	r22
    1c72:	7f 93       	push	r23
    1c74:	8f 93       	push	r24
    1c76:	9f 93       	push	r25
    1c78:	af 93       	push	r26
    1c7a:	bf 93       	push	r27
    1c7c:	ef 93       	push	r30
    1c7e:	ff 93       	push	r31
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
    1c88:	80 91 fb 00 	lds	r24, 0x00FB
    1c8c:	90 91 fc 00 	lds	r25, 0x00FC
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	29 f0       	breq	.+10     	; 0x1c9e <__vector_2+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT1]();
    1c94:	e0 91 fb 00 	lds	r30, 0x00FB
    1c98:	f0 91 fc 00 	lds	r31, 0x00FC
    1c9c:	09 95       	icall
	}
}
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	ff 91       	pop	r31
    1ca4:	ef 91       	pop	r30
    1ca6:	bf 91       	pop	r27
    1ca8:	af 91       	pop	r26
    1caa:	9f 91       	pop	r25
    1cac:	8f 91       	pop	r24
    1cae:	7f 91       	pop	r23
    1cb0:	6f 91       	pop	r22
    1cb2:	5f 91       	pop	r21
    1cb4:	4f 91       	pop	r20
    1cb6:	3f 91       	pop	r19
    1cb8:	2f 91       	pop	r18
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <__vector_3>:
/* EXTI2 ISR */
void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    1cc4:	1f 92       	push	r1
    1cc6:	0f 92       	push	r0
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	0f 92       	push	r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	2f 93       	push	r18
    1cd0:	3f 93       	push	r19
    1cd2:	4f 93       	push	r20
    1cd4:	5f 93       	push	r21
    1cd6:	6f 93       	push	r22
    1cd8:	7f 93       	push	r23
    1cda:	8f 93       	push	r24
    1cdc:	9f 93       	push	r25
    1cde:	af 93       	push	r26
    1ce0:	bf 93       	push	r27
    1ce2:	ef 93       	push	r30
    1ce4:	ff 93       	push	r31
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
    1cee:	80 91 fd 00 	lds	r24, 0x00FD
    1cf2:	90 91 fe 00 	lds	r25, 0x00FE
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	29 f0       	breq	.+10     	; 0x1d04 <__vector_3+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT2]();
    1cfa:	e0 91 fd 00 	lds	r30, 0x00FD
    1cfe:	f0 91 fe 00 	lds	r31, 0x00FE
    1d02:	09 95       	icall
	}
}
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	ff 91       	pop	r31
    1d0a:	ef 91       	pop	r30
    1d0c:	bf 91       	pop	r27
    1d0e:	af 91       	pop	r26
    1d10:	9f 91       	pop	r25
    1d12:	8f 91       	pop	r24
    1d14:	7f 91       	pop	r23
    1d16:	6f 91       	pop	r22
    1d18:	5f 91       	pop	r21
    1d1a:	4f 91       	pop	r20
    1d1c:	3f 91       	pop	r19
    1d1e:	2f 91       	pop	r18
    1d20:	0f 90       	pop	r0
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	0f 90       	pop	r0
    1d26:	1f 90       	pop	r1
    1d28:	18 95       	reti

00001d2a <GI_voidEnable>:
/* Defination of SREG */
#define GI_u8_SREG              *((volatile u8*)0x5F)


void GI_voidEnable (void)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
    1d32:	af e5       	ldi	r26, 0x5F	; 95
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	ef e5       	ldi	r30, 0x5F	; 95
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 68       	ori	r24, 0x80	; 128
    1d3e:	8c 93       	st	X, r24
}
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <GI_voidDisable>:

void GI_voidDisable(void)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
    1d4e:	af e5       	ldi	r26, 0x5F	; 95
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ef e5       	ldi	r30, 0x5F	; 95
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8f 77       	andi	r24, 0x7F	; 127
    1d5a:	8c 93       	st	X, r24
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <KPD_u8GetKey>:
static u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN, KPD_u8_R2_PIN, KPD_u8_R3_PIN, KPD_u8_R4_PIN};
static u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN, KPD_u8_C2_PIN, KPD_u8_C3_PIN, KPD_u8_C4_PIN};

/* Rows output *//* Columns Input */
u8 KPD_u8GetKey(u8 * Copy_pu8ReturnedKey)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	a3 97       	sbiw	r28, 0x23	; 35
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	9b a3       	std	Y+35, r25	; 0x23
    1d78:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
    1d7e:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
    1d80:	8a a1       	ldd	r24, Y+34	; 0x22
    1d82:	9b a1       	ldd	r25, Y+35	; 0x23
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <KPD_u8GetKey+0x28>
    1d88:	53 c1       	rjmp	.+678    	; 0x2030 <KPD_u8GetKey+0x2ce>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1d8a:	ea a1       	ldd	r30, Y+34	; 0x22
    1d8c:	fb a1       	ldd	r31, Y+35	; 0x23
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	80 83       	st	Z, r24
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    1d92:	1f 8e       	std	Y+31, r1	; 0x1f
    1d94:	48 c1       	rjmp	.+656    	; 0x2026 <KPD_u8GetKey+0x2c4>
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
    1d96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e4 51       	subi	r30, 0x14	; 20
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	90 81       	ld	r25, Z
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	69 2f       	mov	r22, r25
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    1dae:	1e 8e       	std	Y+30, r1	; 0x1e
    1db0:	24 c1       	rjmp	.+584    	; 0x1ffa <KPD_u8GetKey+0x298>
		    {
			    DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    1db2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	fc 01       	movw	r30, r24
    1dba:	e0 51       	subi	r30, 0x10	; 16
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	90 81       	ld	r25, Z
    1dc0:	9e 01       	movw	r18, r28
    1dc2:	2f 5d       	subi	r18, 0xDF	; 223
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	69 2f       	mov	r22, r25
    1dca:	a9 01       	movw	r20, r18
    1dcc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
    1dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd2:	88 23       	and	r24, r24
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <KPD_u8GetKey+0x76>
    1dd6:	0e c1       	rjmp	.+540    	; 0x1ff4 <KPD_u8GetKey+0x292>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 ea       	ldi	r26, 0xA0	; 160
    1dde:	b1 e4       	ldi	r27, 0x41	; 65
    1de0:	89 8f       	std	Y+25, r24	; 0x19
    1de2:	9a 8f       	std	Y+26, r25	; 0x1a
    1de4:	ab 8f       	std	Y+27, r26	; 0x1b
    1de6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8d 8b       	std	Y+21, r24	; 0x15
    1e02:	9e 8b       	std	Y+22, r25	; 0x16
    1e04:	af 8b       	std	Y+23, r26	; 0x17
    1e06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e08:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <KPD_u8GetKey+0xc8>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9c 8b       	std	Y+20, r25	; 0x14
    1e26:	8b 8b       	std	Y+19, r24	; 0x13
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <KPD_u8GetKey+0x146>
	else if (__tmp > 65535)
    1e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e30:	98 8d       	ldd	r25, Y+24	; 0x18
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <KPD_u8GetKey+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	69 8d       	ldd	r22, Y+25	; 0x19
    1e44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9c 8b       	std	Y+20, r25	; 0x14
    1e68:	8b 8b       	std	Y+19, r24	; 0x13
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <KPD_u8GetKey+0x128>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9a 8b       	std	Y+18, r25	; 0x12
    1e72:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e74:	89 89       	ldd	r24, Y+17	; 0x11
    1e76:	9a 89       	ldd	r25, Y+18	; 0x12
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <KPD_u8GetKey+0x116>
    1e7c:	9a 8b       	std	Y+18, r25	; 0x12
    1e7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8b 89       	ldd	r24, Y+19	; 0x13
    1e82:	9c 89       	ldd	r25, Y+20	; 0x14
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9c 8b       	std	Y+20, r25	; 0x14
    1e88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <KPD_u8GetKey+0x10a>
    1e92:	24 c0       	rjmp	.+72     	; 0x1edc <KPD_u8GetKey+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9c 8b       	std	Y+20, r25	; 0x14
    1ea6:	8b 8b       	std	Y+19, r24	; 0x13
    1ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1eac:	98 8b       	std	Y+16, r25	; 0x10
    1eae:	8f 87       	std	Y+15, r24	; 0x0f
    1eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb2:	98 89       	ldd	r25, Y+16	; 0x10
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <KPD_u8GetKey+0x152>
    1eb8:	98 8b       	std	Y+16, r25	; 0x10
    1eba:	8f 87       	std	Y+15, r24	; 0x0f
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <KPD_u8GetKey+0x17a>
			    {
				    /* Debouncing */
				    _delay_ms(20);
				    while(Local_u8ReturnedPinValue == DIO_u8_LOW)
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    1ebe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e0 51       	subi	r30, 0x10	; 16
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	90 81       	ld	r25, Z
    1ecc:	9e 01       	movw	r18, r28
    1ece:	2f 5d       	subi	r18, 0xDF	; 223
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	83 e0       	ldi	r24, 0x03	; 3
    1ed4:	69 2f       	mov	r22, r25
    1ed6:	a9 01       	movw	r20, r18
    1ed8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_u8GetPinValue>
			    /* Check if Switch is pressed */
			    if(Local_u8ReturnedPinValue == DIO_u8_LOW)
			    {
				    /* Debouncing */
				    _delay_ms(20);
				    while(Local_u8ReturnedPinValue == DIO_u8_LOW)
    1edc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ede:	88 23       	and	r24, r24
    1ee0:	71 f3       	breq	.-36     	; 0x1ebe <KPD_u8GetKey+0x15c>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a0 e2       	ldi	r26, 0x20	; 32
    1ee8:	b1 e4       	ldi	r27, 0x41	; 65
    1eea:	8b 87       	std	Y+11, r24	; 0x0b
    1eec:	9c 87       	std	Y+12, r25	; 0x0c
    1eee:	ad 87       	std	Y+13, r26	; 0x0d
    1ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a ef       	ldi	r20, 0xFA	; 250
    1f00:	54 e4       	ldi	r21, 0x44	; 68
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8f 83       	std	Y+7, r24	; 0x07
    1f0c:	98 87       	std	Y+8, r25	; 0x08
    1f0e:	a9 87       	std	Y+9, r26	; 0x09
    1f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f12:	6f 81       	ldd	r22, Y+7	; 0x07
    1f14:	78 85       	ldd	r23, Y+8	; 0x08
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <KPD_u8GetKey+0x1d2>
		__ticks = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <KPD_u8GetKey+0x250>
	else if (__tmp > 65535)
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	3f ef       	ldi	r19, 0xFF	; 255
    1f40:	4f e7       	ldi	r20, 0x7F	; 127
    1f42:	57 e4       	ldi	r21, 0x47	; 71
    1f44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f48:	18 16       	cp	r1, r24
    1f4a:	4c f5       	brge	.+82     	; 0x1f9e <KPD_u8GetKey+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e2       	ldi	r20, 0x20	; 32
    1f5a:	51 e4       	ldi	r21, 0x41	; 65
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	0f c0       	rjmp	.+30     	; 0x1f94 <KPD_u8GetKey+0x232>
    1f76:	88 ec       	ldi	r24, 0xC8	; 200
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9c 83       	std	Y+4, r25	; 0x04
    1f7c:	8b 83       	std	Y+3, r24	; 0x03
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <KPD_u8GetKey+0x220>
    1f86:	9c 83       	std	Y+4, r25	; 0x04
    1f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	69 f7       	brne	.-38     	; 0x1f76 <KPD_u8GetKey+0x214>
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <KPD_u8GetKey+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <KPD_u8GetKey+0x25c>
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
				    {
			            DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
				    }
				     _delay_ms(10);
                     * Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8_RowsCounter][Local_u8_ColsCounter];	
    1fc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc8:	48 2f       	mov	r20, r24
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	82 0f       	add	r24, r18
    1fde:	93 1f       	adc	r25, r19
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	e4 52       	subi	r30, 0x24	; 36
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	ea a1       	ldd	r30, Y+34	; 0x22
    1fea:	fb a1       	ldd	r31, Y+35	; 0x23
    1fec:	80 83       	st	Z, r24
                     Local_u8Flag = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff2:	07 c0       	rjmp	.+14     	; 0x2002 <KPD_u8GetKey+0x2a0>
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
		{
		  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
          /* Read Coloumns */
		  for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    1ff4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	8e 8f       	std	Y+30, r24	; 0x1e
    1ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ffc:	84 30       	cpi	r24, 0x04	; 4
    1ffe:	08 f4       	brcc	.+2      	; 0x2002 <KPD_u8GetKey+0x2a0>
    2000:	d8 ce       	rjmp	.-592    	; 0x1db2 <KPD_u8GetKey+0x50>
					break;
					
			    }
		     }
			 /* Deactivate currently Row  */
		     DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_HIGH);
    2002:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	fc 01       	movw	r30, r24
    200a:	e4 51       	subi	r30, 0x14	; 20
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	90 81       	ld	r25, Z
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	69 2f       	mov	r22, r25
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
		   	 if(Local_u8Flag == 1)
    201a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	49 f0       	breq	.+18     	; 0x2032 <KPD_u8GetKey+0x2d0>
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    2020:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	8f 8f       	std	Y+31, r24	; 0x1f
    2026:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2028:	84 30       	cpi	r24, 0x04	; 4
    202a:	08 f4       	brcc	.+2      	; 0x202e <KPD_u8GetKey+0x2cc>
    202c:	b4 ce       	rjmp	.-664    	; 0x1d96 <KPD_u8GetKey+0x34>
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <KPD_u8GetKey+0x2d0>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2030:	18 a2       	std	Y+32, r1	; 0x20
	}
	return Local_u8ErrorState;
    2032:	88 a1       	ldd	r24, Y+32	; 0x20
	
}
    2034:	a3 96       	adiw	r28, 0x23	; 35
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit     (void)
{
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	cc 54       	subi	r28, 0x4C	; 76
    2054:	d0 40       	sbci	r29, 0x00	; 0
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	fe 01       	movw	r30, r28
    2062:	e7 5b       	subi	r30, 0xB7	; 183
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	ac e0       	ldi	r26, 0x0C	; 12
    206c:	b2 e4       	ldi	r27, 0x42	; 66
    206e:	80 83       	st	Z, r24
    2070:	91 83       	std	Z+1, r25	; 0x01
    2072:	a2 83       	std	Z+2, r26	; 0x02
    2074:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	8e 01       	movw	r16, r28
    2078:	0b 5b       	subi	r16, 0xBB	; 187
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	fe 01       	movw	r30, r28
    207e:	e7 5b       	subi	r30, 0xB7	; 183
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a ef       	ldi	r20, 0xFA	; 250
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	f8 01       	movw	r30, r16
    209c:	80 83       	st	Z, r24
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	a2 83       	std	Z+2, r26	; 0x02
    20a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a4:	fe 01       	movw	r30, r28
    20a6:	eb 5b       	subi	r30, 0xBB	; 187
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	44 f4       	brge	.+16     	; 0x20d2 <LCD_voidInit+0x8c>
		__ticks = 1;
    20c2:	fe 01       	movw	r30, r28
    20c4:	ed 5b       	subi	r30, 0xBD	; 189
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
    20d0:	64 c0       	rjmp	.+200    	; 0x219a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    20d2:	fe 01       	movw	r30, r28
    20d4:	eb 5b       	subi	r30, 0xBB	; 187
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	0c f0       	brlt	.+2      	; 0x20f2 <LCD_voidInit+0xac>
    20f0:	43 c0       	rjmp	.+134    	; 0x2178 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	fe 01       	movw	r30, r28
    20f4:	e7 5b       	subi	r30, 0xB7	; 183
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	60 81       	ld	r22, Z
    20fa:	71 81       	ldd	r23, Z+1	; 0x01
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	8e 01       	movw	r16, r28
    2112:	0d 5b       	subi	r16, 0xBD	; 189
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	f8 01       	movw	r30, r16
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	1f c0       	rjmp	.+62     	; 0x2168 <LCD_voidInit+0x122>
    212a:	fe 01       	movw	r30, r28
    212c:	ef 5b       	subi	r30, 0xBF	; 191
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	88 ec       	ldi	r24, 0xC8	; 200
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
    2138:	fe 01       	movw	r30, r28
    213a:	ef 5b       	subi	r30, 0xBF	; 191
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_voidInit+0xfc>
    2146:	fe 01       	movw	r30, r28
    2148:	ef 5b       	subi	r30, 0xBF	; 191
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	de 01       	movw	r26, r28
    2152:	ad 5b       	subi	r26, 0xBD	; 189
    2154:	bf 4f       	sbci	r27, 0xFF	; 255
    2156:	fe 01       	movw	r30, r28
    2158:	ed 5b       	subi	r30, 0xBD	; 189
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	11 96       	adiw	r26, 0x01	; 1
    2164:	9c 93       	st	X, r25
    2166:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	fe 01       	movw	r30, r28
    216a:	ed 5b       	subi	r30, 0xBD	; 189
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	d1 f6       	brne	.-76     	; 0x212a <LCD_voidInit+0xe4>
    2176:	24 c0       	rjmp	.+72     	; 0x21c0 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	8e 01       	movw	r16, r28
    217a:	0d 5b       	subi	r16, 0xBD	; 189
    217c:	1f 4f       	sbci	r17, 0xFF	; 255
    217e:	fe 01       	movw	r30, r28
    2180:	eb 5b       	subi	r30, 0xBB	; 187
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	f8 01       	movw	r30, r16
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
    219a:	fe 01       	movw	r30, r28
    219c:	ed 5b       	subi	r30, 0xBD	; 189
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	fe 01       	movw	r30, r28
    21a6:	ff 96       	adiw	r30, 0x3f	; 63
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	fe 01       	movw	r30, r28
    21ae:	ff 96       	adiw	r30, 0x3f	; 63
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_voidInit+0x16e>
    21b8:	fe 01       	movw	r30, r28
    21ba:	ff 96       	adiw	r30, 0x3f	; 63
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set Cmnd 0b00111000 */
	LCD_voidSendCmnd(0b00111000);
    21c0:	88 e3       	ldi	r24, 0x38	; 56
    21c2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 e2       	ldi	r26, 0x20	; 32
    21cc:	b2 e4       	ldi	r27, 0x42	; 66
    21ce:	8b af       	std	Y+59, r24	; 0x3b
    21d0:	9c af       	std	Y+60, r25	; 0x3c
    21d2:	ad af       	std	Y+61, r26	; 0x3d
    21d4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21d6:	6b ad       	ldd	r22, Y+59	; 0x3b
    21d8:	7c ad       	ldd	r23, Y+60	; 0x3c
    21da:	8d ad       	ldd	r24, Y+61	; 0x3d
    21dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    21de:	2b ea       	ldi	r18, 0xAB	; 171
    21e0:	3a ea       	ldi	r19, 0xAA	; 170
    21e2:	4a e2       	ldi	r20, 0x2A	; 42
    21e4:	50 e4       	ldi	r21, 0x40	; 64
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	8f ab       	std	Y+55, r24	; 0x37
    21f0:	98 af       	std	Y+56, r25	; 0x38
    21f2:	a9 af       	std	Y+57, r26	; 0x39
    21f4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    21f6:	6f a9       	ldd	r22, Y+55	; 0x37
    21f8:	78 ad       	ldd	r23, Y+56	; 0x38
    21fa:	89 ad       	ldd	r24, Y+57	; 0x39
    21fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	1c f4       	brge	.+6      	; 0x2214 <LCD_voidInit+0x1ce>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	8e ab       	std	Y+54, r24	; 0x36
    2212:	91 c0       	rjmp	.+290    	; 0x2336 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2214:	6f a9       	ldd	r22, Y+55	; 0x37
    2216:	78 ad       	ldd	r23, Y+56	; 0x38
    2218:	89 ad       	ldd	r24, Y+57	; 0x39
    221a:	9a ad       	ldd	r25, Y+58	; 0x3a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	53 e4       	ldi	r21, 0x43	; 67
    2224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	0c f0       	brlt	.+2      	; 0x222e <LCD_voidInit+0x1e8>
    222c:	7b c0       	rjmp	.+246    	; 0x2324 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    222e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2230:	7c ad       	ldd	r23, Y+60	; 0x3c
    2232:	8d ad       	ldd	r24, Y+61	; 0x3d
    2234:	9e ad       	ldd	r25, Y+62	; 0x3e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a e7       	ldi	r20, 0x7A	; 122
    223c:	54 e4       	ldi	r21, 0x44	; 68
    223e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8a ab       	std	Y+50, r24	; 0x32
    2248:	9b ab       	std	Y+51, r25	; 0x33
    224a:	ac ab       	std	Y+52, r26	; 0x34
    224c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	6a a9       	ldd	r22, Y+50	; 0x32
    2250:	7b a9       	ldd	r23, Y+51	; 0x33
    2252:	8c a9       	ldd	r24, Y+52	; 0x34
    2254:	9d a9       	ldd	r25, Y+53	; 0x35
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a ef       	ldi	r20, 0xFA	; 250
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8e a7       	std	Y+46, r24	; 0x2e
    2268:	9f a7       	std	Y+47, r25	; 0x2f
    226a:	a8 ab       	std	Y+48, r26	; 0x30
    226c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    226e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2270:	7f a5       	ldd	r23, Y+47	; 0x2f
    2272:	88 a9       	ldd	r24, Y+48	; 0x30
    2274:	99 a9       	ldd	r25, Y+49	; 0x31
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <LCD_voidInit+0x24a>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9d a7       	std	Y+45, r25	; 0x2d
    228c:	8c a7       	std	Y+44, r24	; 0x2c
    228e:	3f c0       	rjmp	.+126    	; 0x230e <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2290:	6e a5       	ldd	r22, Y+46	; 0x2e
    2292:	7f a5       	ldd	r23, Y+47	; 0x2f
    2294:	88 a9       	ldd	r24, Y+48	; 0x30
    2296:	99 a9       	ldd	r25, Y+49	; 0x31
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	6a a9       	ldd	r22, Y+50	; 0x32
    22aa:	7b a9       	ldd	r23, Y+51	; 0x33
    22ac:	8c a9       	ldd	r24, Y+52	; 0x34
    22ae:	9d a9       	ldd	r25, Y+53	; 0x35
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9d a7       	std	Y+45, r25	; 0x2d
    22ce:	8c a7       	std	Y+44, r24	; 0x2c
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <LCD_voidInit+0x2aa>
    22d2:	88 ec       	ldi	r24, 0xC8	; 200
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9b a7       	std	Y+43, r25	; 0x2b
    22d8:	8a a7       	std	Y+42, r24	; 0x2a
    22da:	8a a5       	ldd	r24, Y+42	; 0x2a
    22dc:	9b a5       	ldd	r25, Y+43	; 0x2b
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_voidInit+0x298>
    22e2:	9b a7       	std	Y+43, r25	; 0x2b
    22e4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    22e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9d a7       	std	Y+45, r25	; 0x2d
    22ee:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    22f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <LCD_voidInit+0x28c>
    22f8:	24 c0       	rjmp	.+72     	; 0x2342 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6e a5       	ldd	r22, Y+46	; 0x2e
    22fc:	7f a5       	ldd	r23, Y+47	; 0x2f
    22fe:	88 a9       	ldd	r24, Y+48	; 0x30
    2300:	99 a9       	ldd	r25, Y+49	; 0x31
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9d a7       	std	Y+45, r25	; 0x2d
    230c:	8c a7       	std	Y+44, r24	; 0x2c
    230e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2310:	9d a5       	ldd	r25, Y+45	; 0x2d
    2312:	99 a7       	std	Y+41, r25	; 0x29
    2314:	88 a7       	std	Y+40, r24	; 0x28
    2316:	88 a5       	ldd	r24, Y+40	; 0x28
    2318:	99 a5       	ldd	r25, Y+41	; 0x29
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCD_voidInit+0x2d4>
    231e:	99 a7       	std	Y+41, r25	; 0x29
    2320:	88 a7       	std	Y+40, r24	; 0x28
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2324:	6f a9       	ldd	r22, Y+55	; 0x37
    2326:	78 ad       	ldd	r23, Y+56	; 0x38
    2328:	89 ad       	ldd	r24, Y+57	; 0x39
    232a:	9a ad       	ldd	r25, Y+58	; 0x3a
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	8e ab       	std	Y+54, r24	; 0x36
    2336:	8e a9       	ldd	r24, Y+54	; 0x36
    2338:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    233a:	8f a1       	ldd	r24, Y+39	; 0x27
    233c:	8a 95       	dec	r24
    233e:	f1 f7       	brne	.-4      	; 0x233c <LCD_voidInit+0x2f6>
    2340:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmnd(0b00001111);
    2342:	8f e0       	ldi	r24, 0x0F	; 15
    2344:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e2       	ldi	r26, 0x20	; 32
    234e:	b2 e4       	ldi	r27, 0x42	; 66
    2350:	8b a3       	std	Y+35, r24	; 0x23
    2352:	9c a3       	std	Y+36, r25	; 0x24
    2354:	ad a3       	std	Y+37, r26	; 0x25
    2356:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2358:	6b a1       	ldd	r22, Y+35	; 0x23
    235a:	7c a1       	ldd	r23, Y+36	; 0x24
    235c:	8d a1       	ldd	r24, Y+37	; 0x25
    235e:	9e a1       	ldd	r25, Y+38	; 0x26
    2360:	2b ea       	ldi	r18, 0xAB	; 171
    2362:	3a ea       	ldi	r19, 0xAA	; 170
    2364:	4a e2       	ldi	r20, 0x2A	; 42
    2366:	50 e4       	ldi	r21, 0x40	; 64
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	8f 8f       	std	Y+31, r24	; 0x1f
    2372:	98 a3       	std	Y+32, r25	; 0x20
    2374:	a9 a3       	std	Y+33, r26	; 0x21
    2376:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2378:	6f 8d       	ldd	r22, Y+31	; 0x1f
    237a:	78 a1       	ldd	r23, Y+32	; 0x20
    237c:	89 a1       	ldd	r24, Y+33	; 0x21
    237e:	9a a1       	ldd	r25, Y+34	; 0x22
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	1c f4       	brge	.+6      	; 0x2396 <LCD_voidInit+0x350>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	8e 8f       	std	Y+30, r24	; 0x1e
    2394:	91 c0       	rjmp	.+290    	; 0x24b8 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2396:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2398:	78 a1       	ldd	r23, Y+32	; 0x20
    239a:	89 a1       	ldd	r24, Y+33	; 0x21
    239c:	9a a1       	ldd	r25, Y+34	; 0x22
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4f e7       	ldi	r20, 0x7F	; 127
    23a4:	53 e4       	ldi	r21, 0x43	; 67
    23a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	0c f0       	brlt	.+2      	; 0x23b0 <LCD_voidInit+0x36a>
    23ae:	7b c0       	rjmp	.+246    	; 0x24a6 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    23b0:	6b a1       	ldd	r22, Y+35	; 0x23
    23b2:	7c a1       	ldd	r23, Y+36	; 0x24
    23b4:	8d a1       	ldd	r24, Y+37	; 0x25
    23b6:	9e a1       	ldd	r25, Y+38	; 0x26
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a e7       	ldi	r20, 0x7A	; 122
    23be:	54 e4       	ldi	r21, 0x44	; 68
    23c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	8a 8f       	std	Y+26, r24	; 0x1a
    23ca:	9b 8f       	std	Y+27, r25	; 0x1b
    23cc:	ac 8f       	std	Y+28, r26	; 0x1c
    23ce:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23d2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	4a ef       	ldi	r20, 0xFA	; 250
    23de:	54 e4       	ldi	r21, 0x44	; 68
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	8e 8b       	std	Y+22, r24	; 0x16
    23ea:	9f 8b       	std	Y+23, r25	; 0x17
    23ec:	a8 8f       	std	Y+24, r26	; 0x18
    23ee:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    23f0:	6e 89       	ldd	r22, Y+22	; 0x16
    23f2:	7f 89       	ldd	r23, Y+23	; 0x17
    23f4:	88 8d       	ldd	r24, Y+24	; 0x18
    23f6:	99 8d       	ldd	r25, Y+25	; 0x19
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	2c f4       	brge	.+10     	; 0x2412 <LCD_voidInit+0x3cc>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9d 8b       	std	Y+21, r25	; 0x15
    240e:	8c 8b       	std	Y+20, r24	; 0x14
    2410:	3f c0       	rjmp	.+126    	; 0x2490 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2412:	6e 89       	ldd	r22, Y+22	; 0x16
    2414:	7f 89       	ldd	r23, Y+23	; 0x17
    2416:	88 8d       	ldd	r24, Y+24	; 0x18
    2418:	99 8d       	ldd	r25, Y+25	; 0x19
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	4c f5       	brge	.+82     	; 0x247c <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    242c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    242e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2430:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e2       	ldi	r20, 0x20	; 32
    2438:	51 e4       	ldi	r21, 0x41	; 65
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9d 8b       	std	Y+21, r25	; 0x15
    2450:	8c 8b       	std	Y+20, r24	; 0x14
    2452:	0f c0       	rjmp	.+30     	; 0x2472 <LCD_voidInit+0x42c>
    2454:	88 ec       	ldi	r24, 0xC8	; 200
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9b 8b       	std	Y+19, r25	; 0x13
    245a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    245c:	8a 89       	ldd	r24, Y+18	; 0x12
    245e:	9b 89       	ldd	r25, Y+19	; 0x13
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_voidInit+0x41a>
    2464:	9b 8b       	std	Y+19, r25	; 0x13
    2466:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2468:	8c 89       	ldd	r24, Y+20	; 0x14
    246a:	9d 89       	ldd	r25, Y+21	; 0x15
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	9d 8b       	std	Y+21, r25	; 0x15
    2470:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2472:	8c 89       	ldd	r24, Y+20	; 0x14
    2474:	9d 89       	ldd	r25, Y+21	; 0x15
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	69 f7       	brne	.-38     	; 0x2454 <LCD_voidInit+0x40e>
    247a:	24 c0       	rjmp	.+72     	; 0x24c4 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247c:	6e 89       	ldd	r22, Y+22	; 0x16
    247e:	7f 89       	ldd	r23, Y+23	; 0x17
    2480:	88 8d       	ldd	r24, Y+24	; 0x18
    2482:	99 8d       	ldd	r25, Y+25	; 0x19
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9d 8b       	std	Y+21, r25	; 0x15
    248e:	8c 8b       	std	Y+20, r24	; 0x14
    2490:	8c 89       	ldd	r24, Y+20	; 0x14
    2492:	9d 89       	ldd	r25, Y+21	; 0x15
    2494:	99 8b       	std	Y+17, r25	; 0x11
    2496:	88 8b       	std	Y+16, r24	; 0x10
    2498:	88 89       	ldd	r24, Y+16	; 0x10
    249a:	99 89       	ldd	r25, Y+17	; 0x11
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_voidInit+0x456>
    24a0:	99 8b       	std	Y+17, r25	; 0x11
    24a2:	88 8b       	std	Y+16, r24	; 0x10
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24a8:	78 a1       	ldd	r23, Y+32	; 0x20
    24aa:	89 a1       	ldd	r24, Y+33	; 0x21
    24ac:	9a a1       	ldd	r25, Y+34	; 0x22
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8e 8f       	std	Y+30, r24	; 0x1e
    24b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ba:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24be:	8a 95       	dec	r24
    24c0:	f1 f7       	brne	.-4      	; 0x24be <LCD_voidInit+0x478>
    24c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmnd(0b00000001);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a0 e0       	ldi	r26, 0x00	; 0
    24d0:	b0 e4       	ldi	r27, 0x40	; 64
    24d2:	8b 87       	std	Y+11, r24	; 0x0b
    24d4:	9c 87       	std	Y+12, r25	; 0x0c
    24d6:	ad 87       	std	Y+13, r26	; 0x0d
    24d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24da:	6b 85       	ldd	r22, Y+11	; 0x0b
    24dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24de:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a ef       	ldi	r20, 0xFA	; 250
    24e8:	54 e4       	ldi	r21, 0x44	; 68
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	8f 83       	std	Y+7, r24	; 0x07
    24f4:	98 87       	std	Y+8, r25	; 0x08
    24f6:	a9 87       	std	Y+9, r26	; 0x09
    24f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e8       	ldi	r20, 0x80	; 128
    2508:	5f e3       	ldi	r21, 0x3F	; 63
    250a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250e:	88 23       	and	r24, r24
    2510:	2c f4       	brge	.+10     	; 0x251c <LCD_voidInit+0x4d6>
		__ticks = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
    251a:	3f c0       	rjmp	.+126    	; 0x259a <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	9a 85       	ldd	r25, Y+10	; 0x0a
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f e7       	ldi	r20, 0x7F	; 127
    252a:	57 e4       	ldi	r21, 0x47	; 71
    252c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2530:	18 16       	cp	r1, r24
    2532:	4c f5       	brge	.+82     	; 0x2586 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	6b 85       	ldd	r22, Y+11	; 0x0b
    2536:	7c 85       	ldd	r23, Y+12	; 0x0c
    2538:	8d 85       	ldd	r24, Y+13	; 0x0d
    253a:	9e 85       	ldd	r25, Y+14	; 0x0e
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e2       	ldi	r20, 0x20	; 32
    2542:	51 e4       	ldi	r21, 0x41	; 65
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	0f c0       	rjmp	.+30     	; 0x257c <LCD_voidInit+0x536>
    255e:	88 ec       	ldi	r24, 0xC8	; 200
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9c 83       	std	Y+4, r25	; 0x04
    2564:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	9c 81       	ldd	r25, Y+4	; 0x04
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_voidInit+0x524>
    256e:	9c 83       	std	Y+4, r25	; 0x04
    2570:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	69 f7       	brne	.-38     	; 0x255e <LCD_voidInit+0x518>
    2584:	14 c0       	rjmp	.+40     	; 0x25ae <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2586:	6f 81       	ldd	r22, Y+7	; 0x07
    2588:	78 85       	ldd	r23, Y+8	; 0x08
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	9a 85       	ldd	r25, Y+10	; 0x0a
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	9a 81       	ldd	r25, Y+2	; 0x02
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_voidInit+0x560>
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0b00000110);
    25ae:	86 e0       	ldi	r24, 0x06	; 6
    25b0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
	
}
    25b4:	c4 5b       	subi	r28, 0xB4	; 180
    25b6:	df 4f       	sbci	r29, 0xFF	; 255
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	08 95       	ret

000025cc <LCD_voidClear>:

void LCD_voidClear       (void)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	2e 97       	sbiw	r28, 0x0e	; 14
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00000001);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 ea       	ldi	r26, 0xA0	; 160
    25ec:	b1 e4       	ldi	r27, 0x41	; 65
    25ee:	8b 87       	std	Y+11, r24	; 0x0b
    25f0:	9c 87       	std	Y+12, r25	; 0x0c
    25f2:	ad 87       	std	Y+13, r26	; 0x0d
    25f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a ef       	ldi	r20, 0xFA	; 250
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8f 83       	std	Y+7, r24	; 0x07
    2610:	98 87       	std	Y+8, r25	; 0x08
    2612:	a9 87       	std	Y+9, r26	; 0x09
    2614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <LCD_voidClear+0x6c>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <LCD_voidClear+0xcc>
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9c 83       	std	Y+4, r25	; 0x04
    2680:	8b 83       	std	Y+3, r24	; 0x03
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_voidClear+0xba>
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <LCD_voidClear+0xae>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_voidClear+0xf6>
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    26ca:	2e 96       	adiw	r28, 0x0e	; 14
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <LCD_voidCursorBlinkerOff>:

void LCD_voidCursorBlinkerOff(void)
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	2e 97       	sbiw	r28, 0x0e	; 14
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00001100);
    26f0:	8c e0       	ldi	r24, 0x0C	; 12
    26f2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 ea       	ldi	r26, 0xA0	; 160
    26fc:	b1 e4       	ldi	r27, 0x41	; 65
    26fe:	8b 87       	std	Y+11, r24	; 0x0b
    2700:	9c 87       	std	Y+12, r25	; 0x0c
    2702:	ad 87       	std	Y+13, r26	; 0x0d
    2704:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	6b 85       	ldd	r22, Y+11	; 0x0b
    2708:	7c 85       	ldd	r23, Y+12	; 0x0c
    270a:	8d 85       	ldd	r24, Y+13	; 0x0d
    270c:	9e 85       	ldd	r25, Y+14	; 0x0e
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a ef       	ldi	r20, 0xFA	; 250
    2714:	54 e4       	ldi	r21, 0x44	; 68
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8f 83       	std	Y+7, r24	; 0x07
    2720:	98 87       	std	Y+8, r25	; 0x08
    2722:	a9 87       	std	Y+9, r26	; 0x09
    2724:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	2c f4       	brge	.+10     	; 0x2748 <LCD_voidCursorBlinkerOff+0x6c>
		__ticks = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <LCD_voidCursorBlinkerOff+0xea>
	else if (__tmp > 65535)
    2748:	6f 81       	ldd	r22, Y+7	; 0x07
    274a:	78 85       	ldd	r23, Y+8	; 0x08
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275c:	18 16       	cp	r1, r24
    275e:	4c f5       	brge	.+82     	; 0x27b2 <LCD_voidCursorBlinkerOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	6b 85       	ldd	r22, Y+11	; 0x0b
    2762:	7c 85       	ldd	r23, Y+12	; 0x0c
    2764:	8d 85       	ldd	r24, Y+13	; 0x0d
    2766:	9e 85       	ldd	r25, Y+14	; 0x0e
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <LCD_voidCursorBlinkerOff+0xcc>
    278a:	88 ec       	ldi	r24, 0xC8	; 200
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9c 83       	std	Y+4, r25	; 0x04
    2790:	8b 83       	std	Y+3, r24	; 0x03
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <LCD_voidCursorBlinkerOff+0xba>
    279a:	9c 83       	std	Y+4, r25	; 0x04
    279c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	69 f7       	brne	.-38     	; 0x278a <LCD_voidCursorBlinkerOff+0xae>
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <LCD_voidCursorBlinkerOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	6f 81       	ldd	r22, Y+7	; 0x07
    27b4:	78 85       	ldd	r23, Y+8	; 0x08
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_voidCursorBlinkerOff+0xf6>
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    27da:	2e 96       	adiw	r28, 0x0e	; 14
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <LCD_voidSendCmnd>:

void LCD_voidSendCmnd (u8 Copy_u8Cmnd)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	e1 97       	sbiw	r28, 0x31	; 49
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	67 e0       	ldi	r22, 0x07	; 7
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	66 e0       	ldi	r22, 0x06	; 6
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
	/* Send Cmnd byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	69 a9       	ldd	r22, Y+49	; 0x31
    281a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	65 e0       	ldi	r22, 0x05	; 5
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e8       	ldi	r26, 0x80	; 128
    282e:	bf e3       	ldi	r27, 0x3F	; 63
    2830:	8d a7       	std	Y+45, r24	; 0x2d
    2832:	9e a7       	std	Y+46, r25	; 0x2e
    2834:	af a7       	std	Y+47, r26	; 0x2f
    2836:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2838:	6d a5       	ldd	r22, Y+45	; 0x2d
    283a:	7e a5       	ldd	r23, Y+46	; 0x2e
    283c:	8f a5       	ldd	r24, Y+47	; 0x2f
    283e:	98 a9       	ldd	r25, Y+48	; 0x30
    2840:	2b ea       	ldi	r18, 0xAB	; 171
    2842:	3a ea       	ldi	r19, 0xAA	; 170
    2844:	4a e2       	ldi	r20, 0x2A	; 42
    2846:	50 e4       	ldi	r21, 0x40	; 64
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	89 a7       	std	Y+41, r24	; 0x29
    2852:	9a a7       	std	Y+42, r25	; 0x2a
    2854:	ab a7       	std	Y+43, r26	; 0x2b
    2856:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2858:	69 a5       	ldd	r22, Y+41	; 0x29
    285a:	7a a5       	ldd	r23, Y+42	; 0x2a
    285c:	8b a5       	ldd	r24, Y+43	; 0x2b
    285e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	1c f4       	brge	.+6      	; 0x2876 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	88 a7       	std	Y+40, r24	; 0x28
    2874:	91 c0       	rjmp	.+290    	; 0x2998 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2876:	69 a5       	ldd	r22, Y+41	; 0x29
    2878:	7a a5       	ldd	r23, Y+42	; 0x2a
    287a:	8b a5       	ldd	r24, Y+43	; 0x2b
    287c:	9c a5       	ldd	r25, Y+44	; 0x2c
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4f e7       	ldi	r20, 0x7F	; 127
    2884:	53 e4       	ldi	r21, 0x43	; 67
    2886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    288a:	18 16       	cp	r1, r24
    288c:	0c f0       	brlt	.+2      	; 0x2890 <LCD_voidSendCmnd+0xa4>
    288e:	7b c0       	rjmp	.+246    	; 0x2986 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2890:	6d a5       	ldd	r22, Y+45	; 0x2d
    2892:	7e a5       	ldd	r23, Y+46	; 0x2e
    2894:	8f a5       	ldd	r24, Y+47	; 0x2f
    2896:	98 a9       	ldd	r25, Y+48	; 0x30
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a e7       	ldi	r20, 0x7A	; 122
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8c a3       	std	Y+36, r24	; 0x24
    28aa:	9d a3       	std	Y+37, r25	; 0x25
    28ac:	ae a3       	std	Y+38, r26	; 0x26
    28ae:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b0:	6c a1       	ldd	r22, Y+36	; 0x24
    28b2:	7d a1       	ldd	r23, Y+37	; 0x25
    28b4:	8e a1       	ldd	r24, Y+38	; 0x26
    28b6:	9f a1       	ldd	r25, Y+39	; 0x27
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	4a ef       	ldi	r20, 0xFA	; 250
    28be:	54 e4       	ldi	r21, 0x44	; 68
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	88 a3       	std	Y+32, r24	; 0x20
    28ca:	99 a3       	std	Y+33, r25	; 0x21
    28cc:	aa a3       	std	Y+34, r26	; 0x22
    28ce:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    28d0:	68 a1       	ldd	r22, Y+32	; 0x20
    28d2:	79 a1       	ldd	r23, Y+33	; 0x21
    28d4:	8a a1       	ldd	r24, Y+34	; 0x22
    28d6:	9b a1       	ldd	r25, Y+35	; 0x23
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e8       	ldi	r20, 0x80	; 128
    28de:	5f e3       	ldi	r21, 0x3F	; 63
    28e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e4:	88 23       	and	r24, r24
    28e6:	2c f4       	brge	.+10     	; 0x28f2 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	9f 8f       	std	Y+31, r25	; 0x1f
    28ee:	8e 8f       	std	Y+30, r24	; 0x1e
    28f0:	3f c0       	rjmp	.+126    	; 0x2970 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    28f2:	68 a1       	ldd	r22, Y+32	; 0x20
    28f4:	79 a1       	ldd	r23, Y+33	; 0x21
    28f6:	8a a1       	ldd	r24, Y+34	; 0x22
    28f8:	9b a1       	ldd	r25, Y+35	; 0x23
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	3f ef       	ldi	r19, 0xFF	; 255
    28fe:	4f e7       	ldi	r20, 0x7F	; 127
    2900:	57 e4       	ldi	r21, 0x47	; 71
    2902:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2906:	18 16       	cp	r1, r24
    2908:	4c f5       	brge	.+82     	; 0x295c <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290a:	6c a1       	ldd	r22, Y+36	; 0x24
    290c:	7d a1       	ldd	r23, Y+37	; 0x25
    290e:	8e a1       	ldd	r24, Y+38	; 0x26
    2910:	9f a1       	ldd	r25, Y+39	; 0x27
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e2       	ldi	r20, 0x20	; 32
    2918:	51 e4       	ldi	r21, 0x41	; 65
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	9f 8f       	std	Y+31, r25	; 0x1f
    2930:	8e 8f       	std	Y+30, r24	; 0x1e
    2932:	0f c0       	rjmp	.+30     	; 0x2952 <LCD_voidSendCmnd+0x166>
    2934:	88 ec       	ldi	r24, 0xC8	; 200
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	9d 8f       	std	Y+29, r25	; 0x1d
    293a:	8c 8f       	std	Y+28, r24	; 0x1c
    293c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    293e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_voidSendCmnd+0x154>
    2944:	9d 8f       	std	Y+29, r25	; 0x1d
    2946:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2948:	8e 8d       	ldd	r24, Y+30	; 0x1e
    294a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	9f 8f       	std	Y+31, r25	; 0x1f
    2950:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2952:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2954:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	69 f7       	brne	.-38     	; 0x2934 <LCD_voidSendCmnd+0x148>
    295a:	24 c0       	rjmp	.+72     	; 0x29a4 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295c:	68 a1       	ldd	r22, Y+32	; 0x20
    295e:	79 a1       	ldd	r23, Y+33	; 0x21
    2960:	8a a1       	ldd	r24, Y+34	; 0x22
    2962:	9b a1       	ldd	r25, Y+35	; 0x23
    2964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	9f 8f       	std	Y+31, r25	; 0x1f
    296e:	8e 8f       	std	Y+30, r24	; 0x1e
    2970:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2972:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2974:	9b 8f       	std	Y+27, r25	; 0x1b
    2976:	8a 8f       	std	Y+26, r24	; 0x1a
    2978:	8a 8d       	ldd	r24, Y+26	; 0x1a
    297a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <LCD_voidSendCmnd+0x190>
    2980:	9b 8f       	std	Y+27, r25	; 0x1b
    2982:	8a 8f       	std	Y+26, r24	; 0x1a
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2986:	69 a5       	ldd	r22, Y+41	; 0x29
    2988:	7a a5       	ldd	r23, Y+42	; 0x2a
    298a:	8b a5       	ldd	r24, Y+43	; 0x2b
    298c:	9c a5       	ldd	r25, Y+44	; 0x2c
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	88 a7       	std	Y+40, r24	; 0x28
    2998:	88 a5       	ldd	r24, Y+40	; 0x28
    299a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    299c:	89 8d       	ldd	r24, Y+25	; 0x19
    299e:	8a 95       	dec	r24
    29a0:	f1 f7       	brne	.-4      	; 0x299e <LCD_voidSendCmnd+0x1b2>
    29a2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	65 e0       	ldi	r22, 0x05	; 5
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 e8       	ldi	r26, 0x80	; 128
    29b4:	bf e3       	ldi	r27, 0x3F	; 63
    29b6:	8d 8b       	std	Y+21, r24	; 0x15
    29b8:	9e 8b       	std	Y+22, r25	; 0x16
    29ba:	af 8b       	std	Y+23, r26	; 0x17
    29bc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29be:	6d 89       	ldd	r22, Y+21	; 0x15
    29c0:	7e 89       	ldd	r23, Y+22	; 0x16
    29c2:	8f 89       	ldd	r24, Y+23	; 0x17
    29c4:	98 8d       	ldd	r25, Y+24	; 0x18
    29c6:	2b ea       	ldi	r18, 0xAB	; 171
    29c8:	3a ea       	ldi	r19, 0xAA	; 170
    29ca:	4a e2       	ldi	r20, 0x2A	; 42
    29cc:	50 e4       	ldi	r21, 0x40	; 64
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	89 8b       	std	Y+17, r24	; 0x11
    29d8:	9a 8b       	std	Y+18, r25	; 0x12
    29da:	ab 8b       	std	Y+19, r26	; 0x13
    29dc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    29de:	69 89       	ldd	r22, Y+17	; 0x11
    29e0:	7a 89       	ldd	r23, Y+18	; 0x12
    29e2:	8b 89       	ldd	r24, Y+19	; 0x13
    29e4:	9c 89       	ldd	r25, Y+20	; 0x14
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	1c f4       	brge	.+6      	; 0x29fc <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	88 8b       	std	Y+16, r24	; 0x10
    29fa:	91 c0       	rjmp	.+290    	; 0x2b1e <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    29fc:	69 89       	ldd	r22, Y+17	; 0x11
    29fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	53 e4       	ldi	r21, 0x43	; 67
    2a0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	0c f0       	brlt	.+2      	; 0x2a16 <LCD_voidSendCmnd+0x22a>
    2a14:	7b c0       	rjmp	.+246    	; 0x2b0c <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    2a16:	6d 89       	ldd	r22, Y+21	; 0x15
    2a18:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4a e7       	ldi	r20, 0x7A	; 122
    2a24:	54 e4       	ldi	r21, 0x44	; 68
    2a26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	8c 87       	std	Y+12, r24	; 0x0c
    2a30:	9d 87       	std	Y+13, r25	; 0x0d
    2a32:	ae 87       	std	Y+14, r26	; 0x0e
    2a34:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a38:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a ef       	ldi	r20, 0xFA	; 250
    2a44:	54 e4       	ldi	r21, 0x44	; 68
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	88 87       	std	Y+8, r24	; 0x08
    2a50:	99 87       	std	Y+9, r25	; 0x09
    2a52:	aa 87       	std	Y+10, r26	; 0x0a
    2a54:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a56:	68 85       	ldd	r22, Y+8	; 0x08
    2a58:	79 85       	ldd	r23, Y+9	; 0x09
    2a5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9f 83       	std	Y+7, r25	; 0x07
    2a74:	8e 83       	std	Y+6, r24	; 0x06
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2a78:	68 85       	ldd	r22, Y+8	; 0x08
    2a7a:	79 85       	ldd	r23, Y+9	; 0x09
    2a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a92:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a94:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a96:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9f 83       	std	Y+7, r25	; 0x07
    2ab6:	8e 83       	std	Y+6, r24	; 0x06
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <LCD_voidSendCmnd+0x2ec>
    2aba:	88 ec       	ldi	r24, 0xC8	; 200
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9d 83       	std	Y+5, r25	; 0x05
    2ac0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_voidSendCmnd+0x2da>
    2aca:	9d 83       	std	Y+5, r25	; 0x05
    2acc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	9f 83       	std	Y+7, r25	; 0x07
    2ad6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    2ada:	9f 81       	ldd	r25, Y+7	; 0x07
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <LCD_voidSendCmnd+0x2ce>
    2ae0:	24 c0       	rjmp	.+72     	; 0x2b2a <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	68 85       	ldd	r22, Y+8	; 0x08
    2ae4:	79 85       	ldd	r23, Y+9	; 0x09
    2ae6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9f 83       	std	Y+7, r25	; 0x07
    2af4:	8e 83       	std	Y+6, r24	; 0x06
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	9f 81       	ldd	r25, Y+7	; 0x07
    2afa:	9b 83       	std	Y+3, r25	; 0x03
    2afc:	8a 83       	std	Y+2, r24	; 0x02
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	9b 81       	ldd	r25, Y+3	; 0x03
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_voidSendCmnd+0x316>
    2b06:	9b 83       	std	Y+3, r25	; 0x03
    2b08:	8a 83       	std	Y+2, r24	; 0x02
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b0c:	69 89       	ldd	r22, Y+17	; 0x11
    2b0e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b10:	8b 89       	ldd	r24, Y+19	; 0x13
    2b12:	9c 89       	ldd	r25, Y+20	; 0x14
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	88 8b       	std	Y+16, r24	; 0x10
    2b1e:	88 89       	ldd	r24, Y+16	; 0x10
    2b20:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	8a 95       	dec	r24
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <LCD_voidSendCmnd+0x338>
    2b28:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    2b2a:	e1 96       	adiw	r28, 0x31	; 49
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <LCD_voidSendChar>:
void LCD_voidSendChar (u8 Copy_u8Char)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	e1 97       	sbiw	r28, 0x31	; 49
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	89 ab       	std	Y+49, r24	; 0x31
	/* Rs = 1 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	67 e0       	ldi	r22, 0x07	; 7
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
	/* Rw = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	66 e0       	ldi	r22, 0x06	; 6
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
	/* Send Char byte to the Data Pins of LCD */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	69 a9       	ldd	r22, Y+49	; 0x31
    2b6a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_u8SetPortValue>
	/* Pulse of Enable E = 1 , E = 0 */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	65 e0       	ldi	r22, 0x05	; 5
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e8       	ldi	r26, 0x80	; 128
    2b7e:	bf e3       	ldi	r27, 0x3F	; 63
    2b80:	8d a7       	std	Y+45, r24	; 0x2d
    2b82:	9e a7       	std	Y+46, r25	; 0x2e
    2b84:	af a7       	std	Y+47, r26	; 0x2f
    2b86:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b88:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b90:	2b ea       	ldi	r18, 0xAB	; 171
    2b92:	3a ea       	ldi	r19, 0xAA	; 170
    2b94:	4a e2       	ldi	r20, 0x2A	; 42
    2b96:	50 e4       	ldi	r21, 0x40	; 64
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	89 a7       	std	Y+41, r24	; 0x29
    2ba2:	9a a7       	std	Y+42, r25	; 0x2a
    2ba4:	ab a7       	std	Y+43, r26	; 0x2b
    2ba6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ba8:	69 a5       	ldd	r22, Y+41	; 0x29
    2baa:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bac:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bae:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	1c f4       	brge	.+6      	; 0x2bc6 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	88 a7       	std	Y+40, r24	; 0x28
    2bc4:	91 c0       	rjmp	.+290    	; 0x2ce8 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2bc6:	69 a5       	ldd	r22, Y+41	; 0x29
    2bc8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	53 e4       	ldi	r21, 0x43	; 67
    2bd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	0c f0       	brlt	.+2      	; 0x2be0 <LCD_voidSendChar+0xa4>
    2bde:	7b c0       	rjmp	.+246    	; 0x2cd6 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2be0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2be2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2be4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be6:	98 a9       	ldd	r25, Y+48	; 0x30
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	4a e7       	ldi	r20, 0x7A	; 122
    2bee:	54 e4       	ldi	r21, 0x44	; 68
    2bf0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	8c a3       	std	Y+36, r24	; 0x24
    2bfa:	9d a3       	std	Y+37, r25	; 0x25
    2bfc:	ae a3       	std	Y+38, r26	; 0x26
    2bfe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6c a1       	ldd	r22, Y+36	; 0x24
    2c02:	7d a1       	ldd	r23, Y+37	; 0x25
    2c04:	8e a1       	ldd	r24, Y+38	; 0x26
    2c06:	9f a1       	ldd	r25, Y+39	; 0x27
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	88 a3       	std	Y+32, r24	; 0x20
    2c1a:	99 a3       	std	Y+33, r25	; 0x21
    2c1c:	aa a3       	std	Y+34, r26	; 0x22
    2c1e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2c20:	68 a1       	ldd	r22, Y+32	; 0x20
    2c22:	79 a1       	ldd	r23, Y+33	; 0x21
    2c24:	8a a1       	ldd	r24, Y+34	; 0x22
    2c26:	9b a1       	ldd	r25, Y+35	; 0x23
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9f 8f       	std	Y+31, r25	; 0x1f
    2c3e:	8e 8f       	std	Y+30, r24	; 0x1e
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2c42:	68 a1       	ldd	r22, Y+32	; 0x20
    2c44:	79 a1       	ldd	r23, Y+33	; 0x21
    2c46:	8a a1       	ldd	r24, Y+34	; 0x22
    2c48:	9b a1       	ldd	r25, Y+35	; 0x23
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6c a1       	ldd	r22, Y+36	; 0x24
    2c5c:	7d a1       	ldd	r23, Y+37	; 0x25
    2c5e:	8e a1       	ldd	r24, Y+38	; 0x26
    2c60:	9f a1       	ldd	r25, Y+39	; 0x27
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9f 8f       	std	Y+31, r25	; 0x1f
    2c80:	8e 8f       	std	Y+30, r24	; 0x1e
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <LCD_voidSendChar+0x166>
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9d 8f       	std	Y+29, r25	; 0x1d
    2c8a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_voidSendChar+0x154>
    2c94:	9d 8f       	std	Y+29, r25	; 0x1d
    2c96:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9f 8f       	std	Y+31, r25	; 0x1f
    2ca0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ca4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <LCD_voidSendChar+0x148>
    2caa:	24 c0       	rjmp	.+72     	; 0x2cf4 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	68 a1       	ldd	r22, Y+32	; 0x20
    2cae:	79 a1       	ldd	r23, Y+33	; 0x21
    2cb0:	8a a1       	ldd	r24, Y+34	; 0x22
    2cb2:	9b a1       	ldd	r25, Y+35	; 0x23
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9f 8f       	std	Y+31, r25	; 0x1f
    2cbe:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cc4:	9b 8f       	std	Y+27, r25	; 0x1b
    2cc6:	8a 8f       	std	Y+26, r24	; 0x1a
    2cc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <LCD_voidSendChar+0x190>
    2cd0:	9b 8f       	std	Y+27, r25	; 0x1b
    2cd2:	8a 8f       	std	Y+26, r24	; 0x1a
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cd6:	69 a5       	ldd	r22, Y+41	; 0x29
    2cd8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	88 a7       	std	Y+40, r24	; 0x28
    2ce8:	88 a5       	ldd	r24, Y+40	; 0x28
    2cea:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cec:	89 8d       	ldd	r24, Y+25	; 0x19
    2cee:	8a 95       	dec	r24
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <LCD_voidSendChar+0x1b2>
    2cf2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	65 e0       	ldi	r22, 0x05	; 5
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_u8SetPinValue>
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a0 e8       	ldi	r26, 0x80	; 128
    2d04:	bf e3       	ldi	r27, 0x3F	; 63
    2d06:	8d 8b       	std	Y+21, r24	; 0x15
    2d08:	9e 8b       	std	Y+22, r25	; 0x16
    2d0a:	af 8b       	std	Y+23, r26	; 0x17
    2d0c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d10:	7e 89       	ldd	r23, Y+22	; 0x16
    2d12:	8f 89       	ldd	r24, Y+23	; 0x17
    2d14:	98 8d       	ldd	r25, Y+24	; 0x18
    2d16:	2b ea       	ldi	r18, 0xAB	; 171
    2d18:	3a ea       	ldi	r19, 0xAA	; 170
    2d1a:	4a e2       	ldi	r20, 0x2A	; 42
    2d1c:	50 e4       	ldi	r21, 0x40	; 64
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	89 8b       	std	Y+17, r24	; 0x11
    2d28:	9a 8b       	std	Y+18, r25	; 0x12
    2d2a:	ab 8b       	std	Y+19, r26	; 0x13
    2d2c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d2e:	69 89       	ldd	r22, Y+17	; 0x11
    2d30:	7a 89       	ldd	r23, Y+18	; 0x12
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	9c 89       	ldd	r25, Y+20	; 0x14
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e8       	ldi	r20, 0x80	; 128
    2d3c:	5f e3       	ldi	r21, 0x3F	; 63
    2d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d42:	88 23       	and	r24, r24
    2d44:	1c f4       	brge	.+6      	; 0x2d4c <LCD_voidSendChar+0x210>
		__ticks = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	88 8b       	std	Y+16, r24	; 0x10
    2d4a:	91 c0       	rjmp	.+290    	; 0x2e6e <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    2d4c:	69 89       	ldd	r22, Y+17	; 0x11
    2d4e:	7a 89       	ldd	r23, Y+18	; 0x12
    2d50:	8b 89       	ldd	r24, Y+19	; 0x13
    2d52:	9c 89       	ldd	r25, Y+20	; 0x14
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	4f e7       	ldi	r20, 0x7F	; 127
    2d5a:	53 e4       	ldi	r21, 0x43	; 67
    2d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	0c f0       	brlt	.+2      	; 0x2d66 <LCD_voidSendChar+0x22a>
    2d64:	7b c0       	rjmp	.+246    	; 0x2e5c <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2d66:	6d 89       	ldd	r22, Y+21	; 0x15
    2d68:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	4a e7       	ldi	r20, 0x7A	; 122
    2d74:	54 e4       	ldi	r21, 0x44	; 68
    2d76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	8c 87       	std	Y+12, r24	; 0x0c
    2d80:	9d 87       	std	Y+13, r25	; 0x0d
    2d82:	ae 87       	std	Y+14, r26	; 0x0e
    2d84:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d86:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d88:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	4a ef       	ldi	r20, 0xFA	; 250
    2d94:	54 e4       	ldi	r21, 0x44	; 68
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	88 87       	std	Y+8, r24	; 0x08
    2da0:	99 87       	std	Y+9, r25	; 0x09
    2da2:	aa 87       	std	Y+10, r26	; 0x0a
    2da4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2da6:	68 85       	ldd	r22, Y+8	; 0x08
    2da8:	79 85       	ldd	r23, Y+9	; 0x09
    2daa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e8       	ldi	r20, 0x80	; 128
    2db4:	5f e3       	ldi	r21, 0x3F	; 63
    2db6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dba:	88 23       	and	r24, r24
    2dbc:	2c f4       	brge	.+10     	; 0x2dc8 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9f 83       	std	Y+7, r25	; 0x07
    2dc4:	8e 83       	std	Y+6, r24	; 0x06
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2dc8:	68 85       	ldd	r22, Y+8	; 0x08
    2dca:	79 85       	ldd	r23, Y+9	; 0x09
    2dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dce:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	3f ef       	ldi	r19, 0xFF	; 255
    2dd4:	4f e7       	ldi	r20, 0x7F	; 127
    2dd6:	57 e4       	ldi	r21, 0x47	; 71
    2dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ddc:	18 16       	cp	r1, r24
    2dde:	4c f5       	brge	.+82     	; 0x2e32 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2de2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2de4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2de6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e2       	ldi	r20, 0x20	; 32
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9f 83       	std	Y+7, r25	; 0x07
    2e06:	8e 83       	std	Y+6, r24	; 0x06
    2e08:	0f c0       	rjmp	.+30     	; 0x2e28 <LCD_voidSendChar+0x2ec>
    2e0a:	88 ec       	ldi	r24, 0xC8	; 200
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9d 83       	std	Y+5, r25	; 0x05
    2e10:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e12:	8c 81       	ldd	r24, Y+4	; 0x04
    2e14:	9d 81       	ldd	r25, Y+5	; 0x05
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <LCD_voidSendChar+0x2da>
    2e1a:	9d 83       	std	Y+5, r25	; 0x05
    2e1c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e20:	9f 81       	ldd	r25, Y+7	; 0x07
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	9f 83       	std	Y+7, r25	; 0x07
    2e26:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e28:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <LCD_voidSendChar+0x2ce>
    2e30:	24 c0       	rjmp	.+72     	; 0x2e7a <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e32:	68 85       	ldd	r22, Y+8	; 0x08
    2e34:	79 85       	ldd	r23, Y+9	; 0x09
    2e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9f 83       	std	Y+7, r25	; 0x07
    2e44:	8e 83       	std	Y+6, r24	; 0x06
    2e46:	8e 81       	ldd	r24, Y+6	; 0x06
    2e48:	9f 81       	ldd	r25, Y+7	; 0x07
    2e4a:	9b 83       	std	Y+3, r25	; 0x03
    2e4c:	8a 83       	std	Y+2, r24	; 0x02
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	9b 81       	ldd	r25, Y+3	; 0x03
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <LCD_voidSendChar+0x316>
    2e56:	9b 83       	std	Y+3, r25	; 0x03
    2e58:	8a 83       	std	Y+2, r24	; 0x02
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e5c:	69 89       	ldd	r22, Y+17	; 0x11
    2e5e:	7a 89       	ldd	r23, Y+18	; 0x12
    2e60:	8b 89       	ldd	r24, Y+19	; 0x13
    2e62:	9c 89       	ldd	r25, Y+20	; 0x14
    2e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	88 8b       	std	Y+16, r24	; 0x10
    2e6e:	88 89       	ldd	r24, Y+16	; 0x10
    2e70:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	8a 95       	dec	r24
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <LCD_voidSendChar+0x338>
    2e78:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    2e7a:	e1 96       	adiw	r28, 0x31	; 49
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <LCD_voidWriteString>:
void LCD_voidWriteString (u8 * Copy_pu8String)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <LCD_voidWriteString+0x6>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <LCD_voidWriteString+0x8>
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8String != NULL )
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	21 f1       	breq	.+72     	; 0x2eec <LCD_voidWriteString+0x60>
	{
	    u8 x = 0;
    2ea4:	1a 82       	std	Y+2, r1	; 0x02
	    u8 i = 0;
    2ea6:	19 82       	std	Y+1, r1	; 0x01
    2ea8:	16 c0       	rjmp	.+44     	; 0x2ed6 <LCD_voidWriteString+0x4a>
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	8a 83       	std	Y+2, r24	; 0x02
    2eb0:	0e c0       	rjmp	.+28     	; 0x2ece <LCD_voidWriteString+0x42>
		 for(  ; i < x; i++)
		 {
		  /* Write Character on LCD */
		  LCD_voidSendChar (Copy_pu8String[i]);
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	e2 0f       	add	r30, r18
    2ec0:	f3 1f       	adc	r31, r19
    2ec2:	80 81       	ld	r24, Z
    2ec4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
		{
		 x++ ;
		 for(  ; i < x; i++)
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	8f 5f       	subi	r24, 0xFF	; 255
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	99 81       	ldd	r25, Y+1	; 0x01
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	98 17       	cp	r25, r24
    2ed4:	70 f3       	brcs	.-36     	; 0x2eb2 <LCD_voidWriteString+0x26>
{
	if(Copy_pu8String != NULL )
	{
	    u8 x = 0;
	    u8 i = 0;
		while(Copy_pu8String[x] != '\0')
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	28 2f       	mov	r18, r24
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	e2 0f       	add	r30, r18
    2ee4:	f3 1f       	adc	r31, r19
    2ee6:	80 81       	ld	r24, Z
    2ee8:	88 23       	and	r24, r24
    2eea:	f9 f6       	brne	.-66     	; 0x2eaa <LCD_voidWriteString+0x1e>
		 }
		 
		}
	}
	
}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <LCD_u8_GoTo_XY>:
u8 LCD_u8_GoTo_XY     (u8 Copy_u8X,u8 Copy_u8Y)
{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <LCD_u8_GoTo_XY+0x6>
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <LCD_u8_GoTo_XY+0x8>
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <LCD_u8_GoTo_XY+0xa>
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	8a 83       	std	Y+2, r24	; 0x02
    2f0a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8X <=1)&&(Copy_u8Y <= 39))
    2f10:	8a 81       	ldd	r24, Y+2	; 0x02
    2f12:	82 30       	cpi	r24, 0x02	; 2
    2f14:	e0 f4       	brcc	.+56     	; 0x2f4e <LCD_u8_GoTo_XY+0x54>
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	88 32       	cpi	r24, 0x28	; 40
    2f1a:	c8 f4       	brcc	.+50     	; 0x2f4e <LCD_u8_GoTo_XY+0x54>
	{
		switch(Copy_u8X)
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	3d 83       	std	Y+5, r19	; 0x05
    2f24:	2c 83       	std	Y+4, r18	; 0x04
    2f26:	8c 81       	ldd	r24, Y+4	; 0x04
    2f28:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	31 f0       	breq	.+12     	; 0x2f3a <LCD_u8_GoTo_XY+0x40>
    2f2e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f30:	3d 81       	ldd	r19, Y+5	; 0x05
    2f32:	21 30       	cpi	r18, 0x01	; 1
    2f34:	31 05       	cpc	r19, r1
    2f36:	31 f0       	breq	.+12     	; 0x2f44 <LCD_u8_GoTo_XY+0x4a>
    2f38:	0b c0       	rjmp	.+22     	; 0x2f50 <LCD_u8_GoTo_XY+0x56>
		{
		case LCD_u8_LINE0 : LCD_voidSendCmnd(0x80 + Copy_u8Y);break;
    2f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3c:	80 58       	subi	r24, 0x80	; 128
    2f3e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    2f42:	06 c0       	rjmp	.+12     	; 0x2f50 <LCD_u8_GoTo_XY+0x56>

		case LCD_u8_LINE1 : LCD_voidSendCmnd(0xC0 + Copy_u8Y);break;
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	80 54       	subi	r24, 0x40	; 64
    2f48:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    2f4c:	01 c0       	rjmp	.+2      	; 0x2f50 <LCD_u8_GoTo_XY+0x56>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    2f4e:	19 82       	std	Y+1, r1	; 0x01
	}


}
    2f50:	26 96       	adiw	r28, 0x06	; 6
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber (u32  Copy_u32Num)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	66 97       	sbiw	r28, 0x16	; 22
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	6b 8b       	std	Y+19, r22	; 0x13
    2f78:	7c 8b       	std	Y+20, r23	; 0x14
    2f7a:	8d 8b       	std	Y+21, r24	; 0x15
    2f7c:	9e 8b       	std	Y+22, r25	; 0x16

	u8 Arr[10];
	u8 Local_Remainder = 1;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	88 87       	std	Y+8, r24	; 0x08
	u32 Local_Number = Copy_u32Num;
    2f82:	8b 89       	ldd	r24, Y+19	; 0x13
    2f84:	9c 89       	ldd	r25, Y+20	; 0x14
    2f86:	ad 89       	ldd	r26, Y+21	; 0x15
    2f88:	be 89       	ldd	r27, Y+22	; 0x16
    2f8a:	8c 83       	std	Y+4, r24	; 0x04
    2f8c:	9d 83       	std	Y+5, r25	; 0x05
    2f8e:	ae 83       	std	Y+6, r26	; 0x06
    2f90:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_Counter = 0;
    2f92:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    2f94:	8a e0       	ldi	r24, 0x0A	; 10
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	42 c0       	rjmp	.+132    	; 0x301e <LCD_voidWriteNumber+0xbc>
	{
		Local_Remainder = Local_Number % 10 ;
    2f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9e:	ae 81       	ldd	r26, Y+6	; 0x06
    2fa0:	bf 81       	ldd	r27, Y+7	; 0x07
    2fa2:	2a e0       	ldi	r18, 0x0A	; 10
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	50 e0       	ldi	r21, 0x00	; 0
    2faa:	bc 01       	movw	r22, r24
    2fac:	cd 01       	movw	r24, r26
    2fae:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__udivmodsi4>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	88 87       	std	Y+8, r24	; 0x08
		Local_Number    = Local_Number /10 ;
    2fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fba:	9d 81       	ldd	r25, Y+5	; 0x05
    2fbc:	ae 81       	ldd	r26, Y+6	; 0x06
    2fbe:	bf 81       	ldd	r27, Y+7	; 0x07
    2fc0:	2a e0       	ldi	r18, 0x0A	; 10
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e0       	ldi	r20, 0x00	; 0
    2fc6:	50 e0       	ldi	r21, 0x00	; 0
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__udivmodsi4>
    2fd0:	da 01       	movw	r26, r20
    2fd2:	c9 01       	movw	r24, r18
    2fd4:	8c 83       	std	Y+4, r24	; 0x04
    2fd6:	9d 83       	std	Y+5, r25	; 0x05
    2fd8:	ae 83       	std	Y+6, r26	; 0x06
    2fda:	bf 83       	std	Y+7, r27	; 0x07

		if((Local_Remainder ==0) && (Local_Number<1) && (Local_Counter>0) )
    2fdc:	88 85       	ldd	r24, Y+8	; 0x08
    2fde:	88 23       	and	r24, r24
    2fe0:	59 f4       	brne	.+22     	; 0x2ff8 <LCD_voidWriteNumber+0x96>
    2fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe6:	ae 81       	ldd	r26, Y+6	; 0x06
    2fe8:	bf 81       	ldd	r27, Y+7	; 0x07
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	a1 05       	cpc	r26, r1
    2fee:	b1 05       	cpc	r27, r1
    2ff0:	19 f4       	brne	.+6      	; 0x2ff8 <LCD_voidWriteNumber+0x96>
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	88 23       	and	r24, r24
    2ff6:	b9 f4       	brne	.+46     	; 0x3026 <LCD_voidWriteNumber+0xc4>
		{
			break;
		}
		Local_Counter ++;
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	8f 5f       	subi	r24, 0xFF	; 255
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
		Arr[initial-1] = Local_Remainder ;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	9c 01       	movw	r18, r24
    3006:	21 50       	subi	r18, 0x01	; 1
    3008:	30 40       	sbci	r19, 0x00	; 0
    300a:	ce 01       	movw	r24, r28
    300c:	09 96       	adiw	r24, 0x09	; 9
    300e:	fc 01       	movw	r30, r24
    3010:	e2 0f       	add	r30, r18
    3012:	f3 1f       	adc	r31, r19
    3014:	88 85       	ldd	r24, Y+8	; 0x08
    3016:	80 83       	st	Z, r24
	u32 Local_Number = Copy_u32Num;
	u8 Local_Counter = 0;
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	81 50       	subi	r24, 0x01	; 1
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	88 23       	and	r24, r24
    3022:	09 f0       	breq	.+2      	; 0x3026 <LCD_voidWriteNumber+0xc4>
    3024:	ba cf       	rjmp	.-140    	; 0x2f9a <LCD_voidWriteNumber+0x38>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    3026:	8a e0       	ldi	r24, 0x0A	; 10
    3028:	9b 81       	ldd	r25, Y+3	; 0x03
    302a:	89 1b       	sub	r24, r25
    302c:	8a 83       	std	Y+2, r24	; 0x02
    302e:	0f c0       	rjmp	.+30     	; 0x304e <LCD_voidWriteNumber+0xec>
	{
		LCD_voidSendChar(Arr[Local_Counter2]+48);
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	ce 01       	movw	r24, r28
    3038:	09 96       	adiw	r24, 0x09	; 9
    303a:	fc 01       	movw	r30, r24
    303c:	e2 0f       	add	r30, r18
    303e:	f3 1f       	adc	r31, r19
    3040:	80 81       	ld	r24, Z
    3042:	80 5d       	subi	r24, 0xD0	; 208
    3044:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	8f 5f       	subi	r24, 0xFF	; 255
    304c:	8a 83       	std	Y+2, r24	; 0x02
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	8a 30       	cpi	r24, 0x0A	; 10
    3052:	70 f3       	brcs	.-36     	; 0x3030 <LCD_voidWriteNumber+0xce>
		LCD_voidSendChar(Arr[Local_Counter2]+48);
	}



}
    3054:	66 96       	adiw	r28, 0x16	; 22
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharNo,u8 Copy_u8X,u8 Copy_u8Y,u8 * Copy_PSpecialChar)
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	28 97       	sbiw	r28, 0x08	; 8
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	8a 83       	std	Y+2, r24	; 0x02
    307c:	6b 83       	std	Y+3, r22	; 0x03
    307e:	4c 83       	std	Y+4, r20	; 0x04
    3080:	3e 83       	std	Y+6, r19	; 0x06
    3082:	2d 83       	std	Y+5, r18	; 0x05

	switch(Copy_u8CharNo)
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	28 2f       	mov	r18, r24
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	38 87       	std	Y+8, r19	; 0x08
    308c:	2f 83       	std	Y+7, r18	; 0x07
    308e:	8f 81       	ldd	r24, Y+7	; 0x07
    3090:	98 85       	ldd	r25, Y+8	; 0x08
    3092:	83 30       	cpi	r24, 0x03	; 3
    3094:	91 05       	cpc	r25, r1
    3096:	a9 f1       	breq	.+106    	; 0x3102 <LCD_voidSendSpecialChar+0x9c>
    3098:	2f 81       	ldd	r18, Y+7	; 0x07
    309a:	38 85       	ldd	r19, Y+8	; 0x08
    309c:	24 30       	cpi	r18, 0x04	; 4
    309e:	31 05       	cpc	r19, r1
    30a0:	7c f4       	brge	.+30     	; 0x30c0 <LCD_voidSendSpecialChar+0x5a>
    30a2:	8f 81       	ldd	r24, Y+7	; 0x07
    30a4:	98 85       	ldd	r25, Y+8	; 0x08
    30a6:	81 30       	cpi	r24, 0x01	; 1
    30a8:	91 05       	cpc	r25, r1
    30aa:	19 f1       	breq	.+70     	; 0x30f2 <LCD_voidSendSpecialChar+0x8c>
    30ac:	2f 81       	ldd	r18, Y+7	; 0x07
    30ae:	38 85       	ldd	r19, Y+8	; 0x08
    30b0:	22 30       	cpi	r18, 0x02	; 2
    30b2:	31 05       	cpc	r19, r1
    30b4:	14 f5       	brge	.+68     	; 0x30fa <LCD_voidSendSpecialChar+0x94>
    30b6:	8f 81       	ldd	r24, Y+7	; 0x07
    30b8:	98 85       	ldd	r25, Y+8	; 0x08
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	b1 f0       	breq	.+44     	; 0x30ea <LCD_voidSendSpecialChar+0x84>
    30be:	34 c0       	rjmp	.+104    	; 0x3128 <LCD_voidSendSpecialChar+0xc2>
    30c0:	2f 81       	ldd	r18, Y+7	; 0x07
    30c2:	38 85       	ldd	r19, Y+8	; 0x08
    30c4:	25 30       	cpi	r18, 0x05	; 5
    30c6:	31 05       	cpc	r19, r1
    30c8:	21 f1       	breq	.+72     	; 0x3112 <LCD_voidSendSpecialChar+0xac>
    30ca:	8f 81       	ldd	r24, Y+7	; 0x07
    30cc:	98 85       	ldd	r25, Y+8	; 0x08
    30ce:	85 30       	cpi	r24, 0x05	; 5
    30d0:	91 05       	cpc	r25, r1
    30d2:	dc f0       	brlt	.+54     	; 0x310a <LCD_voidSendSpecialChar+0xa4>
    30d4:	2f 81       	ldd	r18, Y+7	; 0x07
    30d6:	38 85       	ldd	r19, Y+8	; 0x08
    30d8:	26 30       	cpi	r18, 0x06	; 6
    30da:	31 05       	cpc	r19, r1
    30dc:	f1 f0       	breq	.+60     	; 0x311a <LCD_voidSendSpecialChar+0xb4>
    30de:	8f 81       	ldd	r24, Y+7	; 0x07
    30e0:	98 85       	ldd	r25, Y+8	; 0x08
    30e2:	87 30       	cpi	r24, 0x07	; 7
    30e4:	91 05       	cpc	r25, r1
    30e6:	e9 f0       	breq	.+58     	; 0x3122 <LCD_voidSendSpecialChar+0xbc>
    30e8:	1f c0       	rjmp	.+62     	; 0x3128 <LCD_voidSendSpecialChar+0xc2>
	{
	case 0:
		LCD_voidSendCmnd(0b01000000);
    30ea:	80 e4       	ldi	r24, 0x40	; 64
    30ec:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    30f0:	1b c0       	rjmp	.+54     	; 0x3128 <LCD_voidSendSpecialChar+0xc2>

		break;
	case 1:
	    LCD_voidSendCmnd(0b01001000);
    30f2:	88 e4       	ldi	r24, 0x48	; 72
    30f4:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    30f8:	17 c0       	rjmp	.+46     	; 0x3128 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 2:
	    LCD_voidSendCmnd(0b01010000);
    30fa:	80 e5       	ldi	r24, 0x50	; 80
    30fc:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    3100:	13 c0       	rjmp	.+38     	; 0x3128 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 3:
	    LCD_voidSendCmnd(0b01011000);
    3102:	88 e5       	ldi	r24, 0x58	; 88
    3104:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 4:
	    LCD_voidSendCmnd(0b01100000);
    310a:	80 e6       	ldi	r24, 0x60	; 96
    310c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    3110:	0b c0       	rjmp	.+22     	; 0x3128 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 5:
	    LCD_voidSendCmnd(0b01101000);
    3112:	88 e6       	ldi	r24, 0x68	; 104
    3114:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    3118:	07 c0       	rjmp	.+14     	; 0x3128 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 6:
	    LCD_voidSendCmnd(0b01110000);
    311a:	80 e7       	ldi	r24, 0x70	; 112
    311c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
    3120:	03 c0       	rjmp	.+6      	; 0x3128 <LCD_voidSendSpecialChar+0xc2>
		break;
	case 7:
	    LCD_voidSendCmnd(0b01111000);
    3122:	88 e7       	ldi	r24, 0x78	; 120
    3124:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    3128:	19 82       	std	Y+1, r1	; 0x01
    312a:	0e c0       	rjmp	.+28     	; 0x3148 <LCD_voidSendSpecialChar+0xe2>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	fc 01       	movw	r30, r24
    3138:	e2 0f       	add	r30, r18
    313a:	f3 1f       	adc	r31, r19
    313c:	80 81       	ld	r24, Z
    313e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
	    LCD_voidSendCmnd(0b01111000);
		break;
	}


	 for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	8f 5f       	subi	r24, 0xFF	; 255
    3146:	89 83       	std	Y+1, r24	; 0x01
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	88 30       	cpi	r24, 0x08	; 8
    314c:	78 f3       	brcs	.-34     	; 0x312c <LCD_voidSendSpecialChar+0xc6>
	 {
		 LCD_voidSendChar(Copy_PSpecialChar[specialchar]);
	 }

	 LCD_u8_GoTo_XY( Copy_u8X, Copy_u8Y);
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	6c 81       	ldd	r22, Y+4	; 0x04
    3152:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
	 LCD_voidSendChar(Copy_u8CharNo);
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>


}
    315c:	28 96       	adiw	r28, 0x08	; 8
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <LCD_voidShiftDispRight>:

void LCD_voidShiftDispRight(void)
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011100);
    3176:	8c e1       	ldi	r24, 0x1C	; 28
    3178:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
}
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <LCD_voidShiftDispLeft>:
void LCD_voidShiftDispLeft(void)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00011000);
    318a:	88 e1       	ldi	r24, 0x18	; 24
    318c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidSendCmnd>
}
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <TMR_voidTimer0Init>:
static void (*TMR_pfTimer1CTC)(void) = NULL;

volatile static u16 TMR_u16OnPeriod , TMR_u16OffPeriod , TMR1_ISR_CTC_Counter = 0;

void TMR_voidTimer0Init(void)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
	   }
      #endif
	}
#elif (TIMER0_MODE == FAST_PWM)
	{
		SET_BIT(TMR_u8_TCCR0_REG,6);
    319e:	a3 e5       	ldi	r26, 0x53	; 83
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	e3 e5       	ldi	r30, 0x53	; 83
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	80 64       	ori	r24, 0x40	; 64
    31aa:	8c 93       	st	X, r24
		SET_BIT(TMR_u8_TCCR0_REG,3);
    31ac:	a3 e5       	ldi	r26, 0x53	; 83
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	e3 e5       	ldi	r30, 0x53	; 83
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	88 60       	ori	r24, 0x08	; 8
    31b8:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,5);
	SET_BIT(TMR_u8_TCCR0_REG,4);
}
#elif ((TMR0_COMPARE_OUTPUT_MODE == CLEAR_OC0_ON_COMPARE) || (TMR0_COMPARE_OUTPUT_MODE == NON_INVERTING_PWM))
{
	SET_BIT(TMR_u8_TCCR0_REG,5);
    31ba:	a3 e5       	ldi	r26, 0x53	; 83
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	e3 e5       	ldi	r30, 0x53	; 83
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	80 62       	ori	r24, 0x20	; 32
    31c6:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,4);
    31c8:	a3 e5       	ldi	r26, 0x53	; 83
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	e3 e5       	ldi	r30, 0x53	; 83
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	8f 7e       	andi	r24, 0xEF	; 239
    31d4:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,1);
		 SET_BIT(TMR_u8_TCCR0_REG,0);
	}
#elif (TMR0_PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR0_REG,2);
    31d6:	a3 e5       	ldi	r26, 0x53	; 83
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e3 e5       	ldi	r30, 0x53	; 83
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	8b 7f       	andi	r24, 0xFB	; 251
    31e2:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR0_REG,1);
    31e4:	a3 e5       	ldi	r26, 0x53	; 83
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e3 e5       	ldi	r30, 0x53	; 83
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	82 60       	ori	r24, 0x02	; 2
    31f0:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,0);
    31f2:	a3 e5       	ldi	r26, 0x53	; 83
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	e3 e5       	ldi	r30, 0x53	; 83
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	8e 7f       	andi	r24, 0xFE	; 254
    31fe:	8c 93       	st	X, r24
//		/* Prescaler => 8 */
//   	CLR_BIT(TMR_u8_TCCR0_REG,2);
//	    SET_BIT(TMR_u8_TCCR0_REG,1);
//	    CLR_BIT(TMR_u8_TCCR0_REG,0);

}
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <TMR_u8Timer1GetCounterValue>:

u8   TMR_u8Timer1GetCounterValue(u16 * Copy_pu16CounterValue)
{
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	00 d0       	rcall	.+0      	; 0x320c <TMR_u8Timer1GetCounterValue+0x6>
    320c:	0f 92       	push	r0
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	9b 83       	std	Y+3, r25	; 0x03
    3214:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    3216:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16CounterValue != NULL)
    3218:	8a 81       	ldd	r24, Y+2	; 0x02
    321a:	9b 81       	ldd	r25, Y+3	; 0x03
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	51 f0       	breq	.+20     	; 0x3234 <TMR_u8Timer1GetCounterValue+0x2e>
	{
		*Copy_pu16CounterValue = TMR_u16_TCNT1_REG;
    3220:	ec e4       	ldi	r30, 0x4C	; 76
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	ea 81       	ldd	r30, Y+2	; 0x02
    322a:	fb 81       	ldd	r31, Y+3	; 0x03
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3234:	89 81       	ldd	r24, Y+1	; 0x01
}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <TMR_voidTimer1Init>:

void TMR_voidTimer1Init(void)
{
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
	   	 CLR_BIT(TMR_u8_TCCR1B_REG,4);
		 CLR_BIT(TMR_u8_TCCR1B_REG,3);
	}
#elif(TIMER1_MODE == CTC_OCR1A)
	{
		 CLR_BIT(TMR_u8_TCCR1A_REG,1);
    324a:	af e4       	ldi	r26, 0x4F	; 79
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	ef e4       	ldi	r30, 0x4F	; 79
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	8d 7f       	andi	r24, 0xFD	; 253
    3256:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1A_REG,0);
    3258:	af e4       	ldi	r26, 0x4F	; 79
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	ef e4       	ldi	r30, 0x4F	; 79
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	8e 7f       	andi	r24, 0xFE	; 254
    3264:	8c 93       	st	X, r24
	   	 CLR_BIT(TMR_u8_TCCR1B_REG,4);
    3266:	ae e4       	ldi	r26, 0x4E	; 78
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	ee e4       	ldi	r30, 0x4E	; 78
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	8f 7e       	andi	r24, 0xEF	; 239
    3272:	8c 93       	st	X, r24
	   	 SET_BIT(TMR_u8_TCCR1B_REG,3);
    3274:	ae e4       	ldi	r26, 0x4E	; 78
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	ee e4       	ldi	r30, 0x4E	; 78
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	88 60       	ori	r24, 0x08	; 8
    3280:	8c 93       	st	X, r24
         #if (TIMER1_PIE == ENABLE_TIMER1_PIE)
         {
	         SET_BIT(TMR_u8_TIMSK_REG,4);
    3282:	a9 e5       	ldi	r26, 0x59	; 89
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	e9 e5       	ldi	r30, 0x59	; 89
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	80 61       	ori	r24, 0x10	; 16
    328e:	8c 93       	st	X, r24

	 /* Timer1 Compare Output Mode IF Selection */
	  /*   Channel A     */
#if (TMR1_CHANNELA_COMPARE_OUTPUT_MODE == OC0_DISCONNECTED)
{
	CLR_BIT(TMR_u8_TCCR1A_REG,7);
    3290:	af e4       	ldi	r26, 0x4F	; 79
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	ef e4       	ldi	r30, 0x4F	; 79
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	8f 77       	andi	r24, 0x7F	; 127
    329c:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1A_REG,6);
    329e:	af e4       	ldi	r26, 0x4F	; 79
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	ef e4       	ldi	r30, 0x4F	; 79
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	8f 7b       	andi	r24, 0xBF	; 191
    32aa:	8c 93       	st	X, r24
#endif

      /*   Channel B     */
#if (TMR1_CHANNELB_COMPARE_OUTPUT_MODE == OC0_DISCONNECTED)
{
CLR_BIT(TMR_u8_TCCR1A_REG,5);
    32ac:	af e4       	ldi	r26, 0x4F	; 79
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	ef e4       	ldi	r30, 0x4F	; 79
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	8f 7d       	andi	r24, 0xDF	; 223
    32b8:	8c 93       	st	X, r24
CLR_BIT(TMR_u8_TCCR1A_REG,4);
    32ba:	af e4       	ldi	r26, 0x4F	; 79
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	ef e4       	ldi	r30, 0x4F	; 79
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	8f 7e       	andi	r24, 0xEF	; 239
    32c6:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,1);
		 SET_BIT(TMR_u8_TCCR1B_REG,0);
	}
#elif (TMR1_PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR1B_REG,2);
    32c8:	ae e4       	ldi	r26, 0x4E	; 78
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	ee e4       	ldi	r30, 0x4E	; 78
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	8b 7f       	andi	r24, 0xFB	; 251
    32d4:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR1B_REG,1);
    32d6:	ae e4       	ldi	r26, 0x4E	; 78
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	ee e4       	ldi	r30, 0x4E	; 78
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	82 60       	ori	r24, 0x02	; 2
    32e2:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,0);
    32e4:	ae e4       	ldi	r26, 0x4E	; 78
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	ee e4       	ldi	r30, 0x4E	; 78
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	8e 7f       	andi	r24, 0xFE	; 254
    32f0:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR1B_REG,0);
	}
#endif


}
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <TMR_voidTimer1SetCompareMatchValueChannelA>:

void TMR_voidTimer1SetCompareMatchValueChannelA(u16 Copy_u16CompareMatchValue)
{
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	00 d0       	rcall	.+0      	; 0x32fe <TMR_voidTimer1SetCompareMatchValueChannelA+0x6>
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 83       	std	Y+1, r24	; 0x01
	TMR_u16_OCR1A_REG = Copy_u16CompareMatchValue;
    3306:	ea e4       	ldi	r30, 0x4A	; 74
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	9a 81       	ldd	r25, Y+2	; 0x02
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	80 83       	st	Z, r24
}
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <TMR_voidTimer1CTCCounter>:

void TMR_voidTimer1CTCCounter(u16 Copy_u16CTCCounter)
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	00 d0       	rcall	.+0      	; 0x3322 <TMR_voidTimer1CTCCounter+0x6>
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	9a 83       	std	Y+2, r25	; 0x02
    3328:	89 83       	std	Y+1, r24	; 0x01
	TMR1_ISR_CTC_Counter = Copy_u16CTCCounter;
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	9a 81       	ldd	r25, Y+2	; 0x02
    332e:	90 93 06 01 	sts	0x0106, r25
    3332:	80 93 05 01 	sts	0x0105, r24
}
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <TMR_voidTimer0SetCompareMatchValue>:

void TMR_voidTimer0SetCompareMatchValue(u8 Copy_u8OCRValue)
{
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	0f 92       	push	r0
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	89 83       	std	Y+1, r24	; 0x01
	TMR_u8_OCR0_REG = Copy_u8OCRValue;
    334c:	ec e5       	ldi	r30, 0x5C	; 92
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	80 83       	st	Z, r24
}
    3354:	0f 90       	pop	r0
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	08 95       	ret

0000335c <TMR_u8Timer0OVFSetCallBack>:

u8  TMR_u8Timer0OVFSetCallBack(void(*Copy_pf)(void))
{
    335c:	df 93       	push	r29
    335e:	cf 93       	push	r28
    3360:	00 d0       	rcall	.+0      	; 0x3362 <TMR_u8Timer0OVFSetCallBack+0x6>
    3362:	0f 92       	push	r0
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	9b 83       	std	Y+3, r25	; 0x03
    336a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	9b 81       	ldd	r25, Y+3	; 0x03
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	39 f0       	breq	.+14     	; 0x3386 <TMR_u8Timer0OVFSetCallBack+0x2a>
	{
		TMR_pfTimer0OVF = Copy_pf;
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	9b 81       	ldd	r25, Y+3	; 0x03
    337c:	90 93 00 01 	sts	0x0100, r25
    3380:	80 93 ff 00 	sts	0x00FF, r24
    3384:	01 c0       	rjmp	.+2      	; 0x3388 <TMR_u8Timer0OVFSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    3386:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    3388:	89 81       	ldd	r24, Y+1	; 0x01
}
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	08 95       	ret

00003396 <TMR_u8Timer0CTCSetCallBack>:

u8  TMR_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    3396:	df 93       	push	r29
    3398:	cf 93       	push	r28
    339a:	00 d0       	rcall	.+0      	; 0x339c <TMR_u8Timer0CTCSetCallBack+0x6>
    339c:	0f 92       	push	r0
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	9b 83       	std	Y+3, r25	; 0x03
    33a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	00 97       	sbiw	r24, 0x00	; 0
    33b0:	39 f0       	breq	.+14     	; 0x33c0 <TMR_u8Timer0CTCSetCallBack+0x2a>
	{
		TMR_pfTimer0CTC = Copy_pf;
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	9b 81       	ldd	r25, Y+3	; 0x03
    33b6:	90 93 02 01 	sts	0x0102, r25
    33ba:	80 93 01 01 	sts	0x0101, r24
    33be:	01 c0       	rjmp	.+2      	; 0x33c2 <TMR_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    33c0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	cf 91       	pop	r28
    33cc:	df 91       	pop	r29
    33ce:	08 95       	ret

000033d0 <TMR_u8Timer1CTCSetCallBack>:

u8  TMR_u8Timer1CTCSetCallBack(void (*Copy_pf)(void))
{
    33d0:	df 93       	push	r29
    33d2:	cf 93       	push	r28
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <TMR_u8Timer1CTCSetCallBack+0x6>
    33d6:	0f 92       	push	r0
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	9b 83       	std	Y+3, r25	; 0x03
    33de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	9b 81       	ldd	r25, Y+3	; 0x03
    33e8:	00 97       	sbiw	r24, 0x00	; 0
    33ea:	39 f0       	breq	.+14     	; 0x33fa <TMR_u8Timer1CTCSetCallBack+0x2a>
	{
		TMR_pfTimer1CTC = Copy_pf;
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	9b 81       	ldd	r25, Y+3	; 0x03
    33f0:	90 93 04 01 	sts	0x0104, r25
    33f4:	80 93 03 01 	sts	0x0103, r24
    33f8:	01 c0       	rjmp	.+2      	; 0x33fc <TMR_u8Timer1CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
    33fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    33fe:	0f 90       	pop	r0
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	08 95       	ret

0000340a <TMR_voidHWICUEnable>:

void TMR_voidHWICUEnable(void)
{
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
	/* Select Triggering Interrupt source of ICU = Rising Edge */
	SET_BIT(TMR_u8_TCCR1B_REG,6);
    3412:	ae e4       	ldi	r26, 0x4E	; 78
    3414:	b0 e0       	ldi	r27, 0x00	; 0
    3416:	ee e4       	ldi	r30, 0x4E	; 78
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	80 64       	ori	r24, 0x40	; 64
    341e:	8c 93       	st	X, r24

	/* Enable ICU Interrupt */
	SET_BIT(TMR_u8_TIMSK_REG,5);
    3420:	a9 e5       	ldi	r26, 0x59	; 89
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	e9 e5       	ldi	r30, 0x59	; 89
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	80 62       	ori	r24, 0x20	; 32
    342c:	8c 93       	st	X, r24
}
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <TMR_voidHWICUDisable>:

void TMR_voidHWICUDisable(void)
{
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
	/* Disable ICU Interrupt */
	SET_BIT(TMR_u8_TIMSK_REG,5);
    343c:	a9 e5       	ldi	r26, 0x59	; 89
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	e9 e5       	ldi	r30, 0x59	; 89
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	80 62       	ori	r24, 0x20	; 32
    3448:	8c 93       	st	X, r24

}
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <TMR_u8GetPWMTotalPeriod>:

u8   TMR_u8GetPWMTotalPeriod(u32 * Copy_pu32TotalPeriod)
{
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	00 d0       	rcall	.+0      	; 0x3456 <TMR_u8GetPWMTotalPeriod+0x6>
    3456:	0f 92       	push	r0
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	9b 83       	std	Y+3, r25	; 0x03
    345e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    3460:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu32TotalPeriod != NULL)
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	9b 81       	ldd	r25, Y+3	; 0x03
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	a9 f0       	breq	.+42     	; 0x3494 <TMR_u8GetPWMTotalPeriod+0x44>
	{
		*Copy_pu32TotalPeriod = TMR_u16OnPeriod + TMR_u16OffPeriod;
    346a:	20 91 10 01 	lds	r18, 0x0110
    346e:	30 91 11 01 	lds	r19, 0x0111
    3472:	80 91 12 01 	lds	r24, 0x0112
    3476:	90 91 13 01 	lds	r25, 0x0113
    347a:	82 0f       	add	r24, r18
    347c:	93 1f       	adc	r25, r19
    347e:	cc 01       	movw	r24, r24
    3480:	a0 e0       	ldi	r26, 0x00	; 0
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	ea 81       	ldd	r30, Y+2	; 0x02
    3486:	fb 81       	ldd	r31, Y+3	; 0x03
    3488:	80 83       	st	Z, r24
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	a2 83       	std	Z+2, r26	; 0x02
    348e:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8ErrorState = STD_TYPES_OK;
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3494:	89 81       	ldd	r24, Y+1	; 0x01
}
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	cf 91       	pop	r28
    349e:	df 91       	pop	r29
    34a0:	08 95       	ret

000034a2 <TMR_u8GetPWMDutyCycle>:

u8   TMR_u8GetPWMDutyCycle(u8 * Copy_pu8DutyCycle)
{
    34a2:	ef 92       	push	r14
    34a4:	ff 92       	push	r15
    34a6:	0f 93       	push	r16
    34a8:	1f 93       	push	r17
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	00 d0       	rcall	.+0      	; 0x34b0 <TMR_u8GetPWMDutyCycle+0xe>
    34b0:	0f 92       	push	r0
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	9b 83       	std	Y+3, r25	; 0x03
    34b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    34ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8DutyCycle != NULL)
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	9b 81       	ldd	r25, Y+3	; 0x03
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	49 f1       	breq	.+82     	; 0x3516 <TMR_u8GetPWMDutyCycle+0x74>
	{
		*Copy_pu8DutyCycle =(u8)((TMR_u16OnPeriod * 100UL)/(TMR_u16OnPeriod + TMR_u16OffPeriod));
    34c4:	80 91 10 01 	lds	r24, 0x0110
    34c8:	90 91 11 01 	lds	r25, 0x0111
    34cc:	cc 01       	movw	r24, r24
    34ce:	a0 e0       	ldi	r26, 0x00	; 0
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	24 e6       	ldi	r18, 0x64	; 100
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	50 e0       	ldi	r21, 0x00	; 0
    34da:	bc 01       	movw	r22, r24
    34dc:	cd 01       	movw	r24, r26
    34de:	0e 94 4c 22 	call	0x4498	; 0x4498 <__mulsi3>
    34e2:	7b 01       	movw	r14, r22
    34e4:	8c 01       	movw	r16, r24
    34e6:	20 91 10 01 	lds	r18, 0x0110
    34ea:	30 91 11 01 	lds	r19, 0x0111
    34ee:	80 91 12 01 	lds	r24, 0x0112
    34f2:	90 91 13 01 	lds	r25, 0x0113
    34f6:	82 0f       	add	r24, r18
    34f8:	93 1f       	adc	r25, r19
    34fa:	9c 01       	movw	r18, r24
    34fc:	40 e0       	ldi	r20, 0x00	; 0
    34fe:	50 e0       	ldi	r21, 0x00	; 0
    3500:	c8 01       	movw	r24, r16
    3502:	b7 01       	movw	r22, r14
    3504:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__udivmodsi4>
    3508:	da 01       	movw	r26, r20
    350a:	c9 01       	movw	r24, r18
    350c:	ea 81       	ldd	r30, Y+2	; 0x02
    350e:	fb 81       	ldd	r31, Y+3	; 0x03
    3510:	80 83       	st	Z, r24

		Local_u8ErrorState = STD_TYPES_OK;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3516:	89 81       	ldd	r24, Y+1	; 0x01
}
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	ff 90       	pop	r15
    3528:	ef 90       	pop	r14
    352a:	08 95       	ret

0000352c <TMR_u8GetPWMOnPeriod>:

u8   TMR_u8GetPWMOnPeriod(u16 * Copy_pu16OnPeriod)
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	00 d0       	rcall	.+0      	; 0x3532 <TMR_u8GetPWMOnPeriod+0x6>
    3532:	0f 92       	push	r0
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	9b 83       	std	Y+3, r25	; 0x03
    353a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    353c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16OnPeriod != NULL)
    353e:	8a 81       	ldd	r24, Y+2	; 0x02
    3540:	9b 81       	ldd	r25, Y+3	; 0x03
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	51 f0       	breq	.+20     	; 0x355a <TMR_u8GetPWMOnPeriod+0x2e>
	{
		*Copy_pu16OnPeriod = TMR_u16OnPeriod;
    3546:	80 91 10 01 	lds	r24, 0x0110
    354a:	90 91 11 01 	lds	r25, 0x0111
    354e:	ea 81       	ldd	r30, Y+2	; 0x02
    3550:	fb 81       	ldd	r31, Y+3	; 0x03
    3552:	91 83       	std	Z+1, r25	; 0x01
    3554:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    355a:	89 81       	ldd	r24, Y+1	; 0x01
}
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <__vector_11>:

/* Prototype of ISR Timer0 OVF */
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
    3568:	1f 92       	push	r1
    356a:	0f 92       	push	r0
    356c:	0f b6       	in	r0, 0x3f	; 63
    356e:	0f 92       	push	r0
    3570:	11 24       	eor	r1, r1
    3572:	2f 93       	push	r18
    3574:	3f 93       	push	r19
    3576:	4f 93       	push	r20
    3578:	5f 93       	push	r21
    357a:	6f 93       	push	r22
    357c:	7f 93       	push	r23
    357e:	8f 93       	push	r24
    3580:	9f 93       	push	r25
    3582:	af 93       	push	r26
    3584:	bf 93       	push	r27
    3586:	ef 93       	push	r30
    3588:	ff 93       	push	r31
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    3592:	80 91 07 01 	lds	r24, 0x0107
    3596:	90 91 08 01 	lds	r25, 0x0108
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	90 93 08 01 	sts	0x0108, r25
    35a0:	80 93 07 01 	sts	0x0107, r24
	if(Local_u16Counter == 3907)
    35a4:	80 91 07 01 	lds	r24, 0x0107
    35a8:	90 91 08 01 	lds	r25, 0x0108
    35ac:	2f e0       	ldi	r18, 0x0F	; 15
    35ae:	83 34       	cpi	r24, 0x43	; 67
    35b0:	92 07       	cpc	r25, r18
    35b2:	99 f4       	brne	.+38     	; 0x35da <__vector_11+0x72>
	{
		/* Set Preload Value */
		TMR_u8_TCNT0_REG = PRELOAD_VALUE;
    35b4:	e2 e5       	ldi	r30, 0x52	; 82
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 ec       	ldi	r24, 0xC0	; 192
    35ba:	80 83       	st	Z, r24
		/* Reset Counter */
		Local_u16Counter = 0;
    35bc:	10 92 08 01 	sts	0x0108, r1
    35c0:	10 92 07 01 	sts	0x0107, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0OVF != NULL)
    35c4:	80 91 ff 00 	lds	r24, 0x00FF
    35c8:	90 91 00 01 	lds	r25, 0x0100
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	29 f0       	breq	.+10     	; 0x35da <__vector_11+0x72>
		{
			TMR_pfTimer0OVF();
    35d0:	e0 91 ff 00 	lds	r30, 0x00FF
    35d4:	f0 91 00 01 	lds	r31, 0x0100
    35d8:	09 95       	icall
		}
	}
}
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	ff 91       	pop	r31
    35e0:	ef 91       	pop	r30
    35e2:	bf 91       	pop	r27
    35e4:	af 91       	pop	r26
    35e6:	9f 91       	pop	r25
    35e8:	8f 91       	pop	r24
    35ea:	7f 91       	pop	r23
    35ec:	6f 91       	pop	r22
    35ee:	5f 91       	pop	r21
    35f0:	4f 91       	pop	r20
    35f2:	3f 91       	pop	r19
    35f4:	2f 91       	pop	r18
    35f6:	0f 90       	pop	r0
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	0f 90       	pop	r0
    35fc:	1f 90       	pop	r1
    35fe:	18 95       	reti

00003600 <__vector_10>:
/* Prototype of ISR Timer0 Compare Match */
void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
    3600:	1f 92       	push	r1
    3602:	0f 92       	push	r0
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	0f 92       	push	r0
    3608:	11 24       	eor	r1, r1
    360a:	2f 93       	push	r18
    360c:	3f 93       	push	r19
    360e:	4f 93       	push	r20
    3610:	5f 93       	push	r21
    3612:	6f 93       	push	r22
    3614:	7f 93       	push	r23
    3616:	8f 93       	push	r24
    3618:	9f 93       	push	r25
    361a:	af 93       	push	r26
    361c:	bf 93       	push	r27
    361e:	ef 93       	push	r30
    3620:	ff 93       	push	r31
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    362a:	80 91 09 01 	lds	r24, 0x0109
    362e:	90 91 0a 01 	lds	r25, 0x010A
    3632:	01 96       	adiw	r24, 0x01	; 1
    3634:	90 93 0a 01 	sts	0x010A, r25
    3638:	80 93 09 01 	sts	0x0109, r24
	if(Local_u16Counter == 10000)
    363c:	80 91 09 01 	lds	r24, 0x0109
    3640:	90 91 0a 01 	lds	r25, 0x010A
    3644:	27 e2       	ldi	r18, 0x27	; 39
    3646:	80 31       	cpi	r24, 0x10	; 16
    3648:	92 07       	cpc	r25, r18
    364a:	79 f4       	brne	.+30     	; 0x366a <__vector_10+0x6a>
	{
		/* Reset Counter */
		Local_u16Counter = 0;
    364c:	10 92 0a 01 	sts	0x010A, r1
    3650:	10 92 09 01 	sts	0x0109, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0CTC != NULL)
    3654:	80 91 01 01 	lds	r24, 0x0101
    3658:	90 91 02 01 	lds	r25, 0x0102
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	29 f0       	breq	.+10     	; 0x366a <__vector_10+0x6a>
		{
			TMR_pfTimer0CTC();
    3660:	e0 91 01 01 	lds	r30, 0x0101
    3664:	f0 91 02 01 	lds	r31, 0x0102
    3668:	09 95       	icall
		}
	}
}
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	ff 91       	pop	r31
    3670:	ef 91       	pop	r30
    3672:	bf 91       	pop	r27
    3674:	af 91       	pop	r26
    3676:	9f 91       	pop	r25
    3678:	8f 91       	pop	r24
    367a:	7f 91       	pop	r23
    367c:	6f 91       	pop	r22
    367e:	5f 91       	pop	r21
    3680:	4f 91       	pop	r20
    3682:	3f 91       	pop	r19
    3684:	2f 91       	pop	r18
    3686:	0f 90       	pop	r0
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	0f 90       	pop	r0
    368c:	1f 90       	pop	r1
    368e:	18 95       	reti

00003690 <__vector_6>:

/* Prototype of ISR Timer1 ICU */
void __vector_6(void)     __attribute__((signal));
void __vector_6(void)
{
    3690:	1f 92       	push	r1
    3692:	0f 92       	push	r0
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	0f 92       	push	r0
    3698:	11 24       	eor	r1, r1
    369a:	2f 93       	push	r18
    369c:	3f 93       	push	r19
    369e:	8f 93       	push	r24
    36a0:	9f 93       	push	r25
    36a2:	af 93       	push	r26
    36a4:	bf 93       	push	r27
    36a6:	ef 93       	push	r30
    36a8:	ff 93       	push	r31
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	00 d0       	rcall	.+0      	; 0x36b0 <__vector_6+0x20>
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16TimerValue = TMR_u16_ICR1_REG;
    36b4:	e6 e4       	ldi	r30, 0x46	; 70
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	91 81       	ldd	r25, Z+1	; 0x01
    36bc:	9a 83       	std	Y+2, r25	; 0x02
    36be:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8Flag = 0;
	static u16 Local_u16OldValue = 0;
	if(Local_u8Flag == 0) /* Rising Edge */
    36c0:	80 91 0d 01 	lds	r24, 0x010D
    36c4:	88 23       	and	r24, r24
    36c6:	b9 f4       	brne	.+46     	; 0x36f6 <__vector_6+0x66>
	{
		TMR_u16OffPeriod = Local_u16TimerValue - Local_u16OldValue;
    36c8:	20 91 0b 01 	lds	r18, 0x010B
    36cc:	30 91 0c 01 	lds	r19, 0x010C
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	9a 81       	ldd	r25, Y+2	; 0x02
    36d4:	82 1b       	sub	r24, r18
    36d6:	93 0b       	sbc	r25, r19
    36d8:	90 93 13 01 	sts	0x0113, r25
    36dc:	80 93 12 01 	sts	0x0112, r24
		/* Trigger Source into Falling Edge */
		CLR_BIT(TMR_u8_TCCR1B_REG,6);
    36e0:	ae e4       	ldi	r26, 0x4E	; 78
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	ee e4       	ldi	r30, 0x4E	; 78
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	8f 7b       	andi	r24, 0xBF	; 191
    36ec:	8c 93       	st	X, r24
		Local_u8Flag = 1;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	80 93 0d 01 	sts	0x010D, r24
    36f4:	15 c0       	rjmp	.+42     	; 0x3720 <__vector_6+0x90>
	}
	else
	{
		TMR_u16OnPeriod = Local_u16TimerValue - Local_u16OldValue;
    36f6:	20 91 0b 01 	lds	r18, 0x010B
    36fa:	30 91 0c 01 	lds	r19, 0x010C
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	82 1b       	sub	r24, r18
    3704:	93 0b       	sbc	r25, r19
    3706:	90 93 11 01 	sts	0x0111, r25
    370a:	80 93 10 01 	sts	0x0110, r24
		/* Trigger Source into Rising Edge */
		SET_BIT(TMR_u8_TCCR1B_REG,6);
    370e:	ae e4       	ldi	r26, 0x4E	; 78
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	ee e4       	ldi	r30, 0x4E	; 78
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	80 64       	ori	r24, 0x40	; 64
    371a:	8c 93       	st	X, r24
		Local_u8Flag = 0;
    371c:	10 92 0d 01 	sts	0x010D, r1
	}
	Local_u16OldValue = Local_u16TimerValue;
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	9a 81       	ldd	r25, Y+2	; 0x02
    3724:	90 93 0c 01 	sts	0x010C, r25
    3728:	80 93 0b 01 	sts	0x010B, r24
}
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	cf 91       	pop	r28
    3732:	df 91       	pop	r29
    3734:	ff 91       	pop	r31
    3736:	ef 91       	pop	r30
    3738:	bf 91       	pop	r27
    373a:	af 91       	pop	r26
    373c:	9f 91       	pop	r25
    373e:	8f 91       	pop	r24
    3740:	3f 91       	pop	r19
    3742:	2f 91       	pop	r18
    3744:	0f 90       	pop	r0
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	0f 90       	pop	r0
    374a:	1f 90       	pop	r1
    374c:	18 95       	reti

0000374e <__vector_7>:

/* Prototype of ISR Timer1 Compare Match A */
void __vector_7(void)       __attribute__((signal));
void __vector_7(void)
{
    374e:	1f 92       	push	r1
    3750:	0f 92       	push	r0
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	0f 92       	push	r0
    3756:	11 24       	eor	r1, r1
    3758:	2f 93       	push	r18
    375a:	3f 93       	push	r19
    375c:	4f 93       	push	r20
    375e:	5f 93       	push	r21
    3760:	6f 93       	push	r22
    3762:	7f 93       	push	r23
    3764:	8f 93       	push	r24
    3766:	9f 93       	push	r25
    3768:	af 93       	push	r26
    376a:	bf 93       	push	r27
    376c:	ef 93       	push	r30
    376e:	ff 93       	push	r31
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    3778:	80 91 0e 01 	lds	r24, 0x010E
    377c:	90 91 0f 01 	lds	r25, 0x010F
    3780:	01 96       	adiw	r24, 0x01	; 1
    3782:	90 93 0f 01 	sts	0x010F, r25
    3786:	80 93 0e 01 	sts	0x010E, r24
	if(TMR1_ISR_CTC_Counter != 0)
    378a:	80 91 05 01 	lds	r24, 0x0105
    378e:	90 91 06 01 	lds	r25, 0x0106
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	d9 f0       	breq	.+54     	; 0x37cc <__vector_7+0x7e>
	{
	     if(Local_u16Counter == TMR1_ISR_CTC_Counter)
    3796:	20 91 0e 01 	lds	r18, 0x010E
    379a:	30 91 0f 01 	lds	r19, 0x010F
    379e:	80 91 05 01 	lds	r24, 0x0105
    37a2:	90 91 06 01 	lds	r25, 0x0106
    37a6:	28 17       	cp	r18, r24
    37a8:	39 07       	cpc	r19, r25
    37aa:	d9 f4       	brne	.+54     	; 0x37e2 <__vector_7+0x94>
	     {
	     	/* Reset Counter */
	     	Local_u16Counter = 0;
    37ac:	10 92 0f 01 	sts	0x010F, r1
    37b0:	10 92 0e 01 	sts	0x010E, r1
	     	/* Call CallBack Function */
	     	if(TMR_pfTimer1CTC != NULL)
    37b4:	80 91 03 01 	lds	r24, 0x0103
    37b8:	90 91 04 01 	lds	r25, 0x0104
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	89 f0       	breq	.+34     	; 0x37e2 <__vector_7+0x94>
	     	{
	     		TMR_pfTimer1CTC();
    37c0:	e0 91 03 01 	lds	r30, 0x0103
    37c4:	f0 91 04 01 	lds	r31, 0x0104
    37c8:	09 95       	icall
    37ca:	0b c0       	rjmp	.+22     	; 0x37e2 <__vector_7+0x94>
	     }
	}
	else
	{
     	/* Call CallBack Function */
     	if(TMR_pfTimer1CTC != NULL)
    37cc:	80 91 03 01 	lds	r24, 0x0103
    37d0:	90 91 04 01 	lds	r25, 0x0104
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	29 f0       	breq	.+10     	; 0x37e2 <__vector_7+0x94>
     	{
     		TMR_pfTimer1CTC();
    37d8:	e0 91 03 01 	lds	r30, 0x0103
    37dc:	f0 91 04 01 	lds	r31, 0x0104
    37e0:	09 95       	icall
     	}
	}

}
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	ff 91       	pop	r31
    37e8:	ef 91       	pop	r30
    37ea:	bf 91       	pop	r27
    37ec:	af 91       	pop	r26
    37ee:	9f 91       	pop	r25
    37f0:	8f 91       	pop	r24
    37f2:	7f 91       	pop	r23
    37f4:	6f 91       	pop	r22
    37f6:	5f 91       	pop	r21
    37f8:	4f 91       	pop	r20
    37fa:	3f 91       	pop	r19
    37fc:	2f 91       	pop	r18
    37fe:	0f 90       	pop	r0
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	0f 90       	pop	r0
    3804:	1f 90       	pop	r1
    3806:	18 95       	reti

00003808 <main>:
void Display_Temperature_LCD(void);



int main(void)
{
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62


	/* Peripherals Initialization */
	DIO_u8Init();
    3810:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_u8Init>
	ADC_voidInit();
    3814:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
    LCD_voidInit();
    3818:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_voidInit>


	/* Calls a Functions that asks the user to enter Password */
	Ask_For_Login();
    381c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Ask_For_Login>

    while(1)
    {

    	/* Calls a Functions that Displays The Current Temperature  */
    	Display_Temperature_LCD();
    3820:	0e 94 13 1c 	call	0x3826	; 0x3826 <Display_Temperature_LCD>
    3824:	fd cf       	rjmp	.-6      	; 0x3820 <main+0x18>

00003826 <Display_Temperature_LCD>:
}


/* Functions Implementation  */
void Display_Temperature_LCD(void)
{
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	64 97       	sbiw	r28, 0x14	; 20
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	cd bf       	out	0x3d, r28	; 61
	u16 Digital_Value, Analog_value;
	u8 Temerature , Temerature_dec;

	ADC_u8GetDigitalValueSunchNonBlocking(ADC_u8_CHANNEL_0,&Digital_Value);
    383a:	9e 01       	movw	r18, r28
    383c:	2d 5e       	subi	r18, 0xED	; 237
    383e:	3f 4f       	sbci	r19, 0xFF	; 255
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	b9 01       	movw	r22, r18
    3844:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValueSunchNonBlocking>
	Analog_value = (u16)((Digital_Value*5000UL)/1024);
    3848:	8b 89       	ldd	r24, Y+19	; 0x13
    384a:	9c 89       	ldd	r25, Y+20	; 0x14
    384c:	cc 01       	movw	r24, r24
    384e:	a0 e0       	ldi	r26, 0x00	; 0
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	28 e8       	ldi	r18, 0x88	; 136
    3854:	33 e1       	ldi	r19, 0x13	; 19
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	50 e0       	ldi	r21, 0x00	; 0
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 4c 22 	call	0x4498	; 0x4498 <__mulsi3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	07 2e       	mov	r0, r23
    3868:	7a e0       	ldi	r23, 0x0A	; 10
    386a:	b6 95       	lsr	r27
    386c:	a7 95       	ror	r26
    386e:	97 95       	ror	r25
    3870:	87 95       	ror	r24
    3872:	7a 95       	dec	r23
    3874:	d1 f7       	brne	.-12     	; 0x386a <Display_Temperature_LCD+0x44>
    3876:	70 2d       	mov	r23, r0
    3878:	9a 8b       	std	Y+18, r25	; 0x12
    387a:	89 8b       	std	Y+17, r24	; 0x11
	Temerature_dec = (Analog_value % 10);
    387c:	89 89       	ldd	r24, Y+17	; 0x11
    387e:	9a 89       	ldd	r25, Y+18	; 0x12
    3880:	2a e0       	ldi	r18, 0x0A	; 10
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	b9 01       	movw	r22, r18
    3886:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <__udivmodhi4>
    388a:	8f 87       	std	Y+15, r24	; 0x0f
	Temerature = (Analog_value/10);
    388c:	89 89       	ldd	r24, Y+17	; 0x11
    388e:	9a 89       	ldd	r25, Y+18	; 0x12
    3890:	2a e0       	ldi	r18, 0x0A	; 10
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	b9 01       	movw	r22, r18
    3896:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <__udivmodhi4>
    389a:	cb 01       	movw	r24, r22
    389c:	88 8b       	std	Y+16, r24	; 0x10


	LCD_voidClear();
    389e:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_voidClear>
	LCD_u8_GoTo_XY(0,1);
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	61 e0       	ldi	r22, 0x01	; 1
    38a6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
	LCD_voidWriteString("Temperature");
    38aa:	80 e6       	ldi	r24, 0x60	; 96
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>
	LCD_u8_GoTo_XY(1,1);
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	61 e0       	ldi	r22, 0x01	; 1
    38b6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
	LCD_voidWriteNumber(Temerature);
    38ba:	88 89       	ldd	r24, Y+16	; 0x10
    38bc:	88 2f       	mov	r24, r24
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	a0 e0       	ldi	r26, 0x00	; 0
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	bc 01       	movw	r22, r24
    38c6:	cd 01       	movw	r24, r26
    38c8:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_voidWriteNumber>
	LCD_voidWriteString(".");
    38cc:	8c e6       	ldi	r24, 0x6C	; 108
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>
	LCD_voidWriteNumber(Temerature_dec);
    38d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38d6:	88 2f       	mov	r24, r24
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	a0 e0       	ldi	r26, 0x00	; 0
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_voidWriteNumber>
	LCD_u8_GoTo_XY(1,6);
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	66 e0       	ldi	r22, 0x06	; 6
    38ea:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
	LCD_voidWriteString("C");
    38ee:	8e e6       	ldi	r24, 0x6E	; 110
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	aa e7       	ldi	r26, 0x7A	; 122
    38fc:	b4 e4       	ldi	r27, 0x44	; 68
    38fe:	8b 87       	std	Y+11, r24	; 0x0b
    3900:	9c 87       	std	Y+12, r25	; 0x0c
    3902:	ad 87       	std	Y+13, r26	; 0x0d
    3904:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3906:	6b 85       	ldd	r22, Y+11	; 0x0b
    3908:	7c 85       	ldd	r23, Y+12	; 0x0c
    390a:	8d 85       	ldd	r24, Y+13	; 0x0d
    390c:	9e 85       	ldd	r25, Y+14	; 0x0e
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	4a ef       	ldi	r20, 0xFA	; 250
    3914:	54 e4       	ldi	r21, 0x44	; 68
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	8f 83       	std	Y+7, r24	; 0x07
    3920:	98 87       	std	Y+8, r25	; 0x08
    3922:	a9 87       	std	Y+9, r26	; 0x09
    3924:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3926:	6f 81       	ldd	r22, Y+7	; 0x07
    3928:	78 85       	ldd	r23, Y+8	; 0x08
    392a:	89 85       	ldd	r24, Y+9	; 0x09
    392c:	9a 85       	ldd	r25, Y+10	; 0x0a
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e8       	ldi	r20, 0x80	; 128
    3934:	5f e3       	ldi	r21, 0x3F	; 63
    3936:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    393a:	88 23       	and	r24, r24
    393c:	2c f4       	brge	.+10     	; 0x3948 <Display_Temperature_LCD+0x122>
		__ticks = 1;
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	9e 83       	std	Y+6, r25	; 0x06
    3944:	8d 83       	std	Y+5, r24	; 0x05
    3946:	3f c0       	rjmp	.+126    	; 0x39c6 <Display_Temperature_LCD+0x1a0>
	else if (__tmp > 65535)
    3948:	6f 81       	ldd	r22, Y+7	; 0x07
    394a:	78 85       	ldd	r23, Y+8	; 0x08
    394c:	89 85       	ldd	r24, Y+9	; 0x09
    394e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	3f ef       	ldi	r19, 0xFF	; 255
    3954:	4f e7       	ldi	r20, 0x7F	; 127
    3956:	57 e4       	ldi	r21, 0x47	; 71
    3958:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    395c:	18 16       	cp	r1, r24
    395e:	4c f5       	brge	.+82     	; 0x39b2 <Display_Temperature_LCD+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3960:	6b 85       	ldd	r22, Y+11	; 0x0b
    3962:	7c 85       	ldd	r23, Y+12	; 0x0c
    3964:	8d 85       	ldd	r24, Y+13	; 0x0d
    3966:	9e 85       	ldd	r25, Y+14	; 0x0e
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	40 e2       	ldi	r20, 0x20	; 32
    396e:	51 e4       	ldi	r21, 0x41	; 65
    3970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	bc 01       	movw	r22, r24
    397a:	cd 01       	movw	r24, r26
    397c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	9e 83       	std	Y+6, r25	; 0x06
    3986:	8d 83       	std	Y+5, r24	; 0x05
    3988:	0f c0       	rjmp	.+30     	; 0x39a8 <Display_Temperature_LCD+0x182>
    398a:	88 ec       	ldi	r24, 0xC8	; 200
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	9c 83       	std	Y+4, r25	; 0x04
    3990:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3992:	8b 81       	ldd	r24, Y+3	; 0x03
    3994:	9c 81       	ldd	r25, Y+4	; 0x04
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	f1 f7       	brne	.-4      	; 0x3996 <Display_Temperature_LCD+0x170>
    399a:	9c 83       	std	Y+4, r25	; 0x04
    399c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	9e 81       	ldd	r25, Y+6	; 0x06
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	9e 83       	std	Y+6, r25	; 0x06
    39a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a8:	8d 81       	ldd	r24, Y+5	; 0x05
    39aa:	9e 81       	ldd	r25, Y+6	; 0x06
    39ac:	00 97       	sbiw	r24, 0x00	; 0
    39ae:	69 f7       	brne	.-38     	; 0x398a <Display_Temperature_LCD+0x164>
    39b0:	14 c0       	rjmp	.+40     	; 0x39da <Display_Temperature_LCD+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b2:	6f 81       	ldd	r22, Y+7	; 0x07
    39b4:	78 85       	ldd	r23, Y+8	; 0x08
    39b6:	89 85       	ldd	r24, Y+9	; 0x09
    39b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	9e 83       	std	Y+6, r25	; 0x06
    39c4:	8d 83       	std	Y+5, r24	; 0x05
    39c6:	8d 81       	ldd	r24, Y+5	; 0x05
    39c8:	9e 81       	ldd	r25, Y+6	; 0x06
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	89 83       	std	Y+1, r24	; 0x01
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	9a 81       	ldd	r25, Y+2	; 0x02
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	f1 f7       	brne	.-4      	; 0x39d2 <Display_Temperature_LCD+0x1ac>
    39d6:	9a 83       	std	Y+2, r25	; 0x02
    39d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    39da:	64 96       	adiw	r28, 0x14	; 20
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	de bf       	out	0x3e, r29	; 62
    39e2:	0f be       	out	0x3f, r0	; 63
    39e4:	cd bf       	out	0x3d, r28	; 61
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <Ask_For_Login>:



void Ask_For_Login(void)
{
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	df 93       	push	r29
    39f2:	cf 93       	push	r28
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	c7 55       	subi	r28, 0x57	; 87
    39fa:	d0 40       	sbci	r29, 0x00	; 0
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8Key;
    static u16 password = 2580 ,value , Num1=0;
    static u8 Operator = 0,counter=0 , counter2=0;

    LCD_voidWriteString("Enter Passcode :");
    3a06:	80 e7       	ldi	r24, 0x70	; 112
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>
    LCD_u8_GoTo_XY(1,4);
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	64 e0       	ldi	r22, 0x04	; 4
    3a12:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
	while(1)
	{
		KPD_u8GetKey(&Local_u8Key);
    3a16:	ce 01       	movw	r24, r28
    3a18:	8b 5a       	subi	r24, 0xAB	; 171
    3a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1c:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <KPD_u8GetKey>
	       if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    3a20:	fe 01       	movw	r30, r28
    3a22:	eb 5a       	subi	r30, 0xAB	; 171
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	80 81       	ld	r24, Z
    3a28:	8f 3f       	cpi	r24, 0xFF	; 255
    3a2a:	a9 f3       	breq	.-22     	; 0x3a16 <Ask_For_Login+0x2a>
	       {
	    	   if(counter<4)
    3a2c:	80 91 15 01 	lds	r24, 0x0115
    3a30:	84 30       	cpi	r24, 0x04	; 4
    3a32:	08 f0       	brcs	.+2      	; 0x3a36 <Ask_For_Login+0x4a>
    3a34:	20 c3       	rjmp	.+1600   	; 0x4076 <Ask_For_Login+0x68a>
	    	   {
	    		   counter++;
    3a36:	80 91 15 01 	lds	r24, 0x0115
    3a3a:	8f 5f       	subi	r24, 0xFF	; 255
    3a3c:	80 93 15 01 	sts	0x0115, r24

	    	   switch(Local_u8Key)
    3a40:	fe 01       	movw	r30, r28
    3a42:	eb 5a       	subi	r30, 0xAB	; 171
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	80 81       	ld	r24, Z
    3a48:	28 2f       	mov	r18, r24
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	68 96       	adiw	r28, 0x18	; 24
    3a4e:	3f af       	std	Y+63, r19	; 0x3f
    3a50:	2e af       	std	Y+62, r18	; 0x3e
    3a52:	68 97       	sbiw	r28, 0x18	; 24
    3a54:	68 96       	adiw	r28, 0x18	; 24
    3a56:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a58:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a5a:	68 97       	sbiw	r28, 0x18	; 24
    3a5c:	84 33       	cpi	r24, 0x34	; 52
    3a5e:	91 05       	cpc	r25, r1
    3a60:	09 f4       	brne	.+2      	; 0x3a64 <Ask_For_Login+0x78>
    3a62:	e7 c0       	rjmp	.+462    	; 0x3c32 <Ask_For_Login+0x246>
    3a64:	68 96       	adiw	r28, 0x18	; 24
    3a66:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a68:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a6a:	68 97       	sbiw	r28, 0x18	; 24
    3a6c:	e5 33       	cpi	r30, 0x35	; 53
    3a6e:	f1 05       	cpc	r31, r1
    3a70:	4c f5       	brge	.+82     	; 0x3ac4 <Ask_For_Login+0xd8>
    3a72:	68 96       	adiw	r28, 0x18	; 24
    3a74:	2e ad       	ldd	r18, Y+62	; 0x3e
    3a76:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a78:	68 97       	sbiw	r28, 0x18	; 24
    3a7a:	21 33       	cpi	r18, 0x31	; 49
    3a7c:	31 05       	cpc	r19, r1
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <Ask_For_Login+0x96>
    3a80:	72 c0       	rjmp	.+228    	; 0x3b66 <Ask_For_Login+0x17a>
    3a82:	68 96       	adiw	r28, 0x18	; 24
    3a84:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a86:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a88:	68 97       	sbiw	r28, 0x18	; 24
    3a8a:	82 33       	cpi	r24, 0x32	; 50
    3a8c:	91 05       	cpc	r25, r1
    3a8e:	4c f4       	brge	.+18     	; 0x3aa2 <Ask_For_Login+0xb6>
    3a90:	68 96       	adiw	r28, 0x18	; 24
    3a92:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a94:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a96:	68 97       	sbiw	r28, 0x18	; 24
    3a98:	e0 33       	cpi	r30, 0x30	; 48
    3a9a:	f1 05       	cpc	r31, r1
    3a9c:	09 f4       	brne	.+2      	; 0x3aa0 <Ask_For_Login+0xb4>
    3a9e:	43 c0       	rjmp	.+134    	; 0x3b26 <Ask_For_Login+0x13a>
    3aa0:	94 c1       	rjmp	.+808    	; 0x3dca <Ask_For_Login+0x3de>
    3aa2:	68 96       	adiw	r28, 0x18	; 24
    3aa4:	2e ad       	ldd	r18, Y+62	; 0x3e
    3aa6:	3f ad       	ldd	r19, Y+63	; 0x3f
    3aa8:	68 97       	sbiw	r28, 0x18	; 24
    3aaa:	22 33       	cpi	r18, 0x32	; 50
    3aac:	31 05       	cpc	r19, r1
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <Ask_For_Login+0xc6>
    3ab0:	7c c0       	rjmp	.+248    	; 0x3baa <Ask_For_Login+0x1be>
    3ab2:	68 96       	adiw	r28, 0x18	; 24
    3ab4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ab6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ab8:	68 97       	sbiw	r28, 0x18	; 24
    3aba:	83 33       	cpi	r24, 0x33	; 51
    3abc:	91 05       	cpc	r25, r1
    3abe:	09 f4       	brne	.+2      	; 0x3ac2 <Ask_For_Login+0xd6>
    3ac0:	96 c0       	rjmp	.+300    	; 0x3bee <Ask_For_Login+0x202>
    3ac2:	83 c1       	rjmp	.+774    	; 0x3dca <Ask_For_Login+0x3de>
    3ac4:	68 96       	adiw	r28, 0x18	; 24
    3ac6:	ee ad       	ldd	r30, Y+62	; 0x3e
    3ac8:	ff ad       	ldd	r31, Y+63	; 0x3f
    3aca:	68 97       	sbiw	r28, 0x18	; 24
    3acc:	e7 33       	cpi	r30, 0x37	; 55
    3ace:	f1 05       	cpc	r31, r1
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <Ask_For_Login+0xe8>
    3ad2:	15 c1       	rjmp	.+554    	; 0x3cfe <Ask_For_Login+0x312>
    3ad4:	68 96       	adiw	r28, 0x18	; 24
    3ad6:	2e ad       	ldd	r18, Y+62	; 0x3e
    3ad8:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ada:	68 97       	sbiw	r28, 0x18	; 24
    3adc:	28 33       	cpi	r18, 0x38	; 56
    3ade:	31 05       	cpc	r19, r1
    3ae0:	8c f4       	brge	.+34     	; 0x3b04 <Ask_For_Login+0x118>
    3ae2:	68 96       	adiw	r28, 0x18	; 24
    3ae4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ae6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ae8:	68 97       	sbiw	r28, 0x18	; 24
    3aea:	85 33       	cpi	r24, 0x35	; 53
    3aec:	91 05       	cpc	r25, r1
    3aee:	09 f4       	brne	.+2      	; 0x3af2 <Ask_For_Login+0x106>
    3af0:	c2 c0       	rjmp	.+388    	; 0x3c76 <Ask_For_Login+0x28a>
    3af2:	68 96       	adiw	r28, 0x18	; 24
    3af4:	ee ad       	ldd	r30, Y+62	; 0x3e
    3af6:	ff ad       	ldd	r31, Y+63	; 0x3f
    3af8:	68 97       	sbiw	r28, 0x18	; 24
    3afa:	e6 33       	cpi	r30, 0x36	; 54
    3afc:	f1 05       	cpc	r31, r1
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <Ask_For_Login+0x116>
    3b00:	dc c0       	rjmp	.+440    	; 0x3cba <Ask_For_Login+0x2ce>
    3b02:	63 c1       	rjmp	.+710    	; 0x3dca <Ask_For_Login+0x3de>
    3b04:	68 96       	adiw	r28, 0x18	; 24
    3b06:	2e ad       	ldd	r18, Y+62	; 0x3e
    3b08:	3f ad       	ldd	r19, Y+63	; 0x3f
    3b0a:	68 97       	sbiw	r28, 0x18	; 24
    3b0c:	28 33       	cpi	r18, 0x38	; 56
    3b0e:	31 05       	cpc	r19, r1
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <Ask_For_Login+0x128>
    3b12:	17 c1       	rjmp	.+558    	; 0x3d42 <Ask_For_Login+0x356>
    3b14:	68 96       	adiw	r28, 0x18	; 24
    3b16:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b18:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b1a:	68 97       	sbiw	r28, 0x18	; 24
    3b1c:	89 33       	cpi	r24, 0x39	; 57
    3b1e:	91 05       	cpc	r25, r1
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <Ask_For_Login+0x138>
    3b22:	31 c1       	rjmp	.+610    	; 0x3d86 <Ask_For_Login+0x39a>
    3b24:	52 c1       	rjmp	.+676    	; 0x3dca <Ask_For_Login+0x3de>
	    	   {
	    	   case '0':
	    		   value =0;
    3b26:	10 92 1a 01 	sts	0x011A, r1
    3b2a:	10 92 19 01 	sts	0x0119, r1
	    		   Num1 = (Num1*10) +value ;
    3b2e:	80 91 17 01 	lds	r24, 0x0117
    3b32:	90 91 18 01 	lds	r25, 0x0118
    3b36:	9c 01       	movw	r18, r24
    3b38:	22 0f       	add	r18, r18
    3b3a:	33 1f       	adc	r19, r19
    3b3c:	c9 01       	movw	r24, r18
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	28 0f       	add	r18, r24
    3b48:	39 1f       	adc	r19, r25
    3b4a:	80 91 19 01 	lds	r24, 0x0119
    3b4e:	90 91 1a 01 	lds	r25, 0x011A
    3b52:	82 0f       	add	r24, r18
    3b54:	93 1f       	adc	r25, r19
    3b56:	90 93 18 01 	sts	0x0118, r25
    3b5a:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('0');
    3b5e:	80 e3       	ldi	r24, 0x30	; 48
    3b60:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3b64:	88 c2       	rjmp	.+1296   	; 0x4076 <Ask_For_Login+0x68a>
	    		   break;
	    	   case '1':
	    		   value =1;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	90 93 1a 01 	sts	0x011A, r25
    3b6e:	80 93 19 01 	sts	0x0119, r24
	    		   Num1 = (Num1*10) +value ;
    3b72:	80 91 17 01 	lds	r24, 0x0117
    3b76:	90 91 18 01 	lds	r25, 0x0118
    3b7a:	9c 01       	movw	r18, r24
    3b7c:	22 0f       	add	r18, r18
    3b7e:	33 1f       	adc	r19, r19
    3b80:	c9 01       	movw	r24, r18
    3b82:	88 0f       	add	r24, r24
    3b84:	99 1f       	adc	r25, r25
    3b86:	88 0f       	add	r24, r24
    3b88:	99 1f       	adc	r25, r25
    3b8a:	28 0f       	add	r18, r24
    3b8c:	39 1f       	adc	r19, r25
    3b8e:	80 91 19 01 	lds	r24, 0x0119
    3b92:	90 91 1a 01 	lds	r25, 0x011A
    3b96:	82 0f       	add	r24, r18
    3b98:	93 1f       	adc	r25, r19
    3b9a:	90 93 18 01 	sts	0x0118, r25
    3b9e:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('1');
    3ba2:	81 e3       	ldi	r24, 0x31	; 49
    3ba4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3ba8:	66 c2       	rjmp	.+1228   	; 0x4076 <Ask_For_Login+0x68a>
	    		   break;
	    	   case '2':
	    	       value =2;
    3baa:	82 e0       	ldi	r24, 0x02	; 2
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	90 93 1a 01 	sts	0x011A, r25
    3bb2:	80 93 19 01 	sts	0x0119, r24
	    	       Num1 = (Num1*10) +value ;
    3bb6:	80 91 17 01 	lds	r24, 0x0117
    3bba:	90 91 18 01 	lds	r25, 0x0118
    3bbe:	9c 01       	movw	r18, r24
    3bc0:	22 0f       	add	r18, r18
    3bc2:	33 1f       	adc	r19, r19
    3bc4:	c9 01       	movw	r24, r18
    3bc6:	88 0f       	add	r24, r24
    3bc8:	99 1f       	adc	r25, r25
    3bca:	88 0f       	add	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	28 0f       	add	r18, r24
    3bd0:	39 1f       	adc	r19, r25
    3bd2:	80 91 19 01 	lds	r24, 0x0119
    3bd6:	90 91 1a 01 	lds	r25, 0x011A
    3bda:	82 0f       	add	r24, r18
    3bdc:	93 1f       	adc	r25, r19
    3bde:	90 93 18 01 	sts	0x0118, r25
    3be2:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('2');
    3be6:	82 e3       	ldi	r24, 0x32	; 50
    3be8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3bec:	44 c2       	rjmp	.+1160   	; 0x4076 <Ask_For_Login+0x68a>
	    	       break;
	    	   case '3':
	    	       value =3;
    3bee:	83 e0       	ldi	r24, 0x03	; 3
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	90 93 1a 01 	sts	0x011A, r25
    3bf6:	80 93 19 01 	sts	0x0119, r24
	    	       Num1 = (Num1*10) +value ;
    3bfa:	80 91 17 01 	lds	r24, 0x0117
    3bfe:	90 91 18 01 	lds	r25, 0x0118
    3c02:	9c 01       	movw	r18, r24
    3c04:	22 0f       	add	r18, r18
    3c06:	33 1f       	adc	r19, r19
    3c08:	c9 01       	movw	r24, r18
    3c0a:	88 0f       	add	r24, r24
    3c0c:	99 1f       	adc	r25, r25
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	28 0f       	add	r18, r24
    3c14:	39 1f       	adc	r19, r25
    3c16:	80 91 19 01 	lds	r24, 0x0119
    3c1a:	90 91 1a 01 	lds	r25, 0x011A
    3c1e:	82 0f       	add	r24, r18
    3c20:	93 1f       	adc	r25, r19
    3c22:	90 93 18 01 	sts	0x0118, r25
    3c26:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('3');
    3c2a:	83 e3       	ldi	r24, 0x33	; 51
    3c2c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3c30:	22 c2       	rjmp	.+1092   	; 0x4076 <Ask_For_Login+0x68a>
	    	       break;
	    	   case '4':
	    	       value =4;
    3c32:	84 e0       	ldi	r24, 0x04	; 4
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	90 93 1a 01 	sts	0x011A, r25
    3c3a:	80 93 19 01 	sts	0x0119, r24
	    	       Num1 = (Num1*10) +value ;
    3c3e:	80 91 17 01 	lds	r24, 0x0117
    3c42:	90 91 18 01 	lds	r25, 0x0118
    3c46:	9c 01       	movw	r18, r24
    3c48:	22 0f       	add	r18, r18
    3c4a:	33 1f       	adc	r19, r19
    3c4c:	c9 01       	movw	r24, r18
    3c4e:	88 0f       	add	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	28 0f       	add	r18, r24
    3c58:	39 1f       	adc	r19, r25
    3c5a:	80 91 19 01 	lds	r24, 0x0119
    3c5e:	90 91 1a 01 	lds	r25, 0x011A
    3c62:	82 0f       	add	r24, r18
    3c64:	93 1f       	adc	r25, r19
    3c66:	90 93 18 01 	sts	0x0118, r25
    3c6a:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('4');
    3c6e:	84 e3       	ldi	r24, 0x34	; 52
    3c70:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3c74:	00 c2       	rjmp	.+1024   	; 0x4076 <Ask_For_Login+0x68a>
	    	       break;
	    	   case '5':
	    	       value =5;
    3c76:	85 e0       	ldi	r24, 0x05	; 5
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	90 93 1a 01 	sts	0x011A, r25
    3c7e:	80 93 19 01 	sts	0x0119, r24
	    	       Num1 = (Num1*10) +value ;
    3c82:	80 91 17 01 	lds	r24, 0x0117
    3c86:	90 91 18 01 	lds	r25, 0x0118
    3c8a:	9c 01       	movw	r18, r24
    3c8c:	22 0f       	add	r18, r18
    3c8e:	33 1f       	adc	r19, r19
    3c90:	c9 01       	movw	r24, r18
    3c92:	88 0f       	add	r24, r24
    3c94:	99 1f       	adc	r25, r25
    3c96:	88 0f       	add	r24, r24
    3c98:	99 1f       	adc	r25, r25
    3c9a:	28 0f       	add	r18, r24
    3c9c:	39 1f       	adc	r19, r25
    3c9e:	80 91 19 01 	lds	r24, 0x0119
    3ca2:	90 91 1a 01 	lds	r25, 0x011A
    3ca6:	82 0f       	add	r24, r18
    3ca8:	93 1f       	adc	r25, r19
    3caa:	90 93 18 01 	sts	0x0118, r25
    3cae:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('5');
    3cb2:	85 e3       	ldi	r24, 0x35	; 53
    3cb4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3cb8:	de c1       	rjmp	.+956    	; 0x4076 <Ask_For_Login+0x68a>
	    	       break;
	    	   case '6':
	    	       value =6;
    3cba:	86 e0       	ldi	r24, 0x06	; 6
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	90 93 1a 01 	sts	0x011A, r25
    3cc2:	80 93 19 01 	sts	0x0119, r24
	    	       Num1 = (Num1*10) +value ;
    3cc6:	80 91 17 01 	lds	r24, 0x0117
    3cca:	90 91 18 01 	lds	r25, 0x0118
    3cce:	9c 01       	movw	r18, r24
    3cd0:	22 0f       	add	r18, r18
    3cd2:	33 1f       	adc	r19, r19
    3cd4:	c9 01       	movw	r24, r18
    3cd6:	88 0f       	add	r24, r24
    3cd8:	99 1f       	adc	r25, r25
    3cda:	88 0f       	add	r24, r24
    3cdc:	99 1f       	adc	r25, r25
    3cde:	28 0f       	add	r18, r24
    3ce0:	39 1f       	adc	r19, r25
    3ce2:	80 91 19 01 	lds	r24, 0x0119
    3ce6:	90 91 1a 01 	lds	r25, 0x011A
    3cea:	82 0f       	add	r24, r18
    3cec:	93 1f       	adc	r25, r19
    3cee:	90 93 18 01 	sts	0x0118, r25
    3cf2:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('6');
    3cf6:	86 e3       	ldi	r24, 0x36	; 54
    3cf8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3cfc:	bc c1       	rjmp	.+888    	; 0x4076 <Ask_For_Login+0x68a>
	    	       break;
	    	   case '7':
	    	       value =7;
    3cfe:	87 e0       	ldi	r24, 0x07	; 7
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	90 93 1a 01 	sts	0x011A, r25
    3d06:	80 93 19 01 	sts	0x0119, r24
	    	       Num1 = (Num1*10) +value ;
    3d0a:	80 91 17 01 	lds	r24, 0x0117
    3d0e:	90 91 18 01 	lds	r25, 0x0118
    3d12:	9c 01       	movw	r18, r24
    3d14:	22 0f       	add	r18, r18
    3d16:	33 1f       	adc	r19, r19
    3d18:	c9 01       	movw	r24, r18
    3d1a:	88 0f       	add	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	88 0f       	add	r24, r24
    3d20:	99 1f       	adc	r25, r25
    3d22:	28 0f       	add	r18, r24
    3d24:	39 1f       	adc	r19, r25
    3d26:	80 91 19 01 	lds	r24, 0x0119
    3d2a:	90 91 1a 01 	lds	r25, 0x011A
    3d2e:	82 0f       	add	r24, r18
    3d30:	93 1f       	adc	r25, r19
    3d32:	90 93 18 01 	sts	0x0118, r25
    3d36:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('7');
    3d3a:	87 e3       	ldi	r24, 0x37	; 55
    3d3c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3d40:	9a c1       	rjmp	.+820    	; 0x4076 <Ask_For_Login+0x68a>
	    	        break;
	       	   case '8':
	        	   value =8;
    3d42:	88 e0       	ldi	r24, 0x08	; 8
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	90 93 1a 01 	sts	0x011A, r25
    3d4a:	80 93 19 01 	sts	0x0119, r24
	        	   Num1 = (Num1*10) +value ;
    3d4e:	80 91 17 01 	lds	r24, 0x0117
    3d52:	90 91 18 01 	lds	r25, 0x0118
    3d56:	9c 01       	movw	r18, r24
    3d58:	22 0f       	add	r18, r18
    3d5a:	33 1f       	adc	r19, r19
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	28 0f       	add	r18, r24
    3d68:	39 1f       	adc	r19, r25
    3d6a:	80 91 19 01 	lds	r24, 0x0119
    3d6e:	90 91 1a 01 	lds	r25, 0x011A
    3d72:	82 0f       	add	r24, r18
    3d74:	93 1f       	adc	r25, r19
    3d76:	90 93 18 01 	sts	0x0118, r25
    3d7a:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('8');
    3d7e:	88 e3       	ldi	r24, 0x38	; 56
    3d80:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3d84:	78 c1       	rjmp	.+752    	; 0x4076 <Ask_For_Login+0x68a>
	        	    break;
	           case '9':
	        	   value =9;
    3d86:	89 e0       	ldi	r24, 0x09	; 9
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	90 93 1a 01 	sts	0x011A, r25
    3d8e:	80 93 19 01 	sts	0x0119, r24
	        	   Num1 = (Num1*10) +value ;
    3d92:	80 91 17 01 	lds	r24, 0x0117
    3d96:	90 91 18 01 	lds	r25, 0x0118
    3d9a:	9c 01       	movw	r18, r24
    3d9c:	22 0f       	add	r18, r18
    3d9e:	33 1f       	adc	r19, r19
    3da0:	c9 01       	movw	r24, r18
    3da2:	88 0f       	add	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	88 0f       	add	r24, r24
    3da8:	99 1f       	adc	r25, r25
    3daa:	28 0f       	add	r18, r24
    3dac:	39 1f       	adc	r19, r25
    3dae:	80 91 19 01 	lds	r24, 0x0119
    3db2:	90 91 1a 01 	lds	r25, 0x011A
    3db6:	82 0f       	add	r24, r18
    3db8:	93 1f       	adc	r25, r19
    3dba:	90 93 18 01 	sts	0x0118, r25
    3dbe:	80 93 17 01 	sts	0x0117, r24
	    		   LCD_voidSendChar('9');
    3dc2:	89 e3       	ldi	r24, 0x39	; 57
    3dc4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <LCD_voidSendChar>
    3dc8:	56 c1       	rjmp	.+684    	; 0x4076 <Ask_For_Login+0x68a>
	        	    break;
	           default:
	        	   LCD_voidClear();
    3dca:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_voidClear>

	        	   LCD_u8_GoTo_XY(0,1);
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	61 e0       	ldi	r22, 0x01	; 1
    3dd2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
	        	   LCD_voidWriteString("Please Enter");
    3dd6:	81 e8       	ldi	r24, 0x81	; 129
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>

	        	   LCD_u8_GoTo_XY(1,1);
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	61 e0       	ldi	r22, 0x01	; 1
    3de2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
	        	   LCD_voidWriteString("Numbers Only");
    3de6:	8e e8       	ldi	r24, 0x8E	; 142
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>
    3dee:	fe 01       	movw	r30, r28
    3df0:	ef 5a       	subi	r30, 0xAF	; 175
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e8       	ldi	r25, 0x80	; 128
    3df8:	ab eb       	ldi	r26, 0xBB	; 187
    3dfa:	b4 e4       	ldi	r27, 0x44	; 68
    3dfc:	80 83       	st	Z, r24
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	a2 83       	std	Z+2, r26	; 0x02
    3e02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e04:	8e 01       	movw	r16, r28
    3e06:	03 5b       	subi	r16, 0xB3	; 179
    3e08:	1f 4f       	sbci	r17, 0xFF	; 255
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	ef 5a       	subi	r30, 0xAF	; 175
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	60 81       	ld	r22, Z
    3e12:	71 81       	ldd	r23, Z+1	; 0x01
    3e14:	82 81       	ldd	r24, Z+2	; 0x02
    3e16:	93 81       	ldd	r25, Z+3	; 0x03
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	4a ef       	ldi	r20, 0xFA	; 250
    3e1e:	54 e4       	ldi	r21, 0x44	; 68
    3e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	f8 01       	movw	r30, r16
    3e2a:	80 83       	st	Z, r24
    3e2c:	91 83       	std	Z+1, r25	; 0x01
    3e2e:	a2 83       	std	Z+2, r26	; 0x02
    3e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e32:	fe 01       	movw	r30, r28
    3e34:	e3 5b       	subi	r30, 0xB3	; 179
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	60 81       	ld	r22, Z
    3e3a:	71 81       	ldd	r23, Z+1	; 0x01
    3e3c:	82 81       	ldd	r24, Z+2	; 0x02
    3e3e:	93 81       	ldd	r25, Z+3	; 0x03
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e8       	ldi	r20, 0x80	; 128
    3e46:	5f e3       	ldi	r21, 0x3F	; 63
    3e48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e4c:	88 23       	and	r24, r24
    3e4e:	44 f4       	brge	.+16     	; 0x3e60 <Ask_For_Login+0x474>
		__ticks = 1;
    3e50:	fe 01       	movw	r30, r28
    3e52:	e5 5b       	subi	r30, 0xB5	; 181
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	80 83       	st	Z, r24
    3e5e:	64 c0       	rjmp	.+200    	; 0x3f28 <Ask_For_Login+0x53c>
	else if (__tmp > 65535)
    3e60:	fe 01       	movw	r30, r28
    3e62:	e3 5b       	subi	r30, 0xB3	; 179
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	60 81       	ld	r22, Z
    3e68:	71 81       	ldd	r23, Z+1	; 0x01
    3e6a:	82 81       	ldd	r24, Z+2	; 0x02
    3e6c:	93 81       	ldd	r25, Z+3	; 0x03
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	3f ef       	ldi	r19, 0xFF	; 255
    3e72:	4f e7       	ldi	r20, 0x7F	; 127
    3e74:	57 e4       	ldi	r21, 0x47	; 71
    3e76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e7a:	18 16       	cp	r1, r24
    3e7c:	0c f0       	brlt	.+2      	; 0x3e80 <Ask_For_Login+0x494>
    3e7e:	43 c0       	rjmp	.+134    	; 0x3f06 <Ask_For_Login+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e80:	fe 01       	movw	r30, r28
    3e82:	ef 5a       	subi	r30, 0xAF	; 175
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	60 81       	ld	r22, Z
    3e88:	71 81       	ldd	r23, Z+1	; 0x01
    3e8a:	82 81       	ldd	r24, Z+2	; 0x02
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	40 e2       	ldi	r20, 0x20	; 32
    3e94:	51 e4       	ldi	r21, 0x41	; 65
    3e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	8e 01       	movw	r16, r28
    3ea0:	05 5b       	subi	r16, 0xB5	; 181
    3ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea4:	bc 01       	movw	r22, r24
    3ea6:	cd 01       	movw	r24, r26
    3ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	f8 01       	movw	r30, r16
    3eb2:	91 83       	std	Z+1, r25	; 0x01
    3eb4:	80 83       	st	Z, r24
    3eb6:	1f c0       	rjmp	.+62     	; 0x3ef6 <Ask_For_Login+0x50a>
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e7 5b       	subi	r30, 0xB7	; 183
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	88 ec       	ldi	r24, 0xC8	; 200
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	91 83       	std	Z+1, r25	; 0x01
    3ec4:	80 83       	st	Z, r24
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e7 5b       	subi	r30, 0xB7	; 183
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	80 81       	ld	r24, Z
    3ece:	91 81       	ldd	r25, Z+1	; 0x01
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <Ask_For_Login+0x4e4>
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e7 5b       	subi	r30, 0xB7	; 183
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	91 83       	std	Z+1, r25	; 0x01
    3edc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ede:	de 01       	movw	r26, r28
    3ee0:	a5 5b       	subi	r26, 0xB5	; 181
    3ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	e5 5b       	subi	r30, 0xB5	; 181
    3ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eea:	80 81       	ld	r24, Z
    3eec:	91 81       	ldd	r25, Z+1	; 0x01
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	11 96       	adiw	r26, 0x01	; 1
    3ef2:	9c 93       	st	X, r25
    3ef4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e5 5b       	subi	r30, 0xB5	; 181
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	80 81       	ld	r24, Z
    3efe:	91 81       	ldd	r25, Z+1	; 0x01
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	d1 f6       	brne	.-76     	; 0x3eb8 <Ask_For_Login+0x4cc>
    3f04:	27 c0       	rjmp	.+78     	; 0x3f54 <Ask_For_Login+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f06:	8e 01       	movw	r16, r28
    3f08:	05 5b       	subi	r16, 0xB5	; 181
    3f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e3 5b       	subi	r30, 0xB3	; 179
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	60 81       	ld	r22, Z
    3f14:	71 81       	ldd	r23, Z+1	; 0x01
    3f16:	82 81       	ldd	r24, Z+2	; 0x02
    3f18:	93 81       	ldd	r25, Z+3	; 0x03
    3f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	f8 01       	movw	r30, r16
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
    3f28:	de 01       	movw	r26, r28
    3f2a:	a9 5b       	subi	r26, 0xB9	; 185
    3f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e5 5b       	subi	r30, 0xB5	; 181
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	91 81       	ldd	r25, Z+1	; 0x01
    3f38:	8d 93       	st	X+, r24
    3f3a:	9c 93       	st	X, r25
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	e9 5b       	subi	r30, 0xB9	; 185
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	80 81       	ld	r24, Z
    3f44:	91 81       	ldd	r25, Z+1	; 0x01
    3f46:	01 97       	sbiw	r24, 0x01	; 1
    3f48:	f1 f7       	brne	.-4      	; 0x3f46 <Ask_For_Login+0x55a>
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e9 5b       	subi	r30, 0xB9	; 185
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	80 83       	st	Z, r24
	        	   _delay_ms(1500);

	        	   LCD_voidClear();
    3f54:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_voidClear>
	        	   LCD_voidWriteString("Try Again ");
    3f58:	8b e9       	ldi	r24, 0x9B	; 155
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>
	        	   LCD_u8_GoTo_XY(1,4);
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	64 e0       	ldi	r22, 0x04	; 4
    3f64:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
    3f68:	fe 01       	movw	r30, r28
    3f6a:	ed 5b       	subi	r30, 0xBD	; 189
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	aa ef       	ldi	r26, 0xFA	; 250
    3f74:	b3 e4       	ldi	r27, 0x43	; 67
    3f76:	80 83       	st	Z, r24
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	a2 83       	std	Z+2, r26	; 0x02
    3f7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f7e:	8e 01       	movw	r16, r28
    3f80:	01 5c       	subi	r16, 0xC1	; 193
    3f82:	1f 4f       	sbci	r17, 0xFF	; 255
    3f84:	fe 01       	movw	r30, r28
    3f86:	ed 5b       	subi	r30, 0xBD	; 189
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	60 81       	ld	r22, Z
    3f8c:	71 81       	ldd	r23, Z+1	; 0x01
    3f8e:	82 81       	ldd	r24, Z+2	; 0x02
    3f90:	93 81       	ldd	r25, Z+3	; 0x03
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	4a ef       	ldi	r20, 0xFA	; 250
    3f98:	54 e4       	ldi	r21, 0x44	; 68
    3f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	f8 01       	movw	r30, r16
    3fa4:	80 83       	st	Z, r24
    3fa6:	91 83       	std	Z+1, r25	; 0x01
    3fa8:	a2 83       	std	Z+2, r26	; 0x02
    3faa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fac:	fe 01       	movw	r30, r28
    3fae:	ff 96       	adiw	r30, 0x3f	; 63
    3fb0:	60 81       	ld	r22, Z
    3fb2:	71 81       	ldd	r23, Z+1	; 0x01
    3fb4:	82 81       	ldd	r24, Z+2	; 0x02
    3fb6:	93 81       	ldd	r25, Z+3	; 0x03
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	40 e8       	ldi	r20, 0x80	; 128
    3fbe:	5f e3       	ldi	r21, 0x3F	; 63
    3fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fc4:	88 23       	and	r24, r24
    3fc6:	2c f4       	brge	.+10     	; 0x3fd2 <Ask_For_Login+0x5e6>
		__ticks = 1;
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	9e af       	std	Y+62, r25	; 0x3e
    3fce:	8d af       	std	Y+61, r24	; 0x3d
    3fd0:	46 c0       	rjmp	.+140    	; 0x405e <Ask_For_Login+0x672>
	else if (__tmp > 65535)
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	ff 96       	adiw	r30, 0x3f	; 63
    3fd6:	60 81       	ld	r22, Z
    3fd8:	71 81       	ldd	r23, Z+1	; 0x01
    3fda:	82 81       	ldd	r24, Z+2	; 0x02
    3fdc:	93 81       	ldd	r25, Z+3	; 0x03
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	3f ef       	ldi	r19, 0xFF	; 255
    3fe2:	4f e7       	ldi	r20, 0x7F	; 127
    3fe4:	57 e4       	ldi	r21, 0x47	; 71
    3fe6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fea:	18 16       	cp	r1, r24
    3fec:	64 f5       	brge	.+88     	; 0x4046 <Ask_For_Login+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fee:	fe 01       	movw	r30, r28
    3ff0:	ed 5b       	subi	r30, 0xBD	; 189
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	60 81       	ld	r22, Z
    3ff6:	71 81       	ldd	r23, Z+1	; 0x01
    3ff8:	82 81       	ldd	r24, Z+2	; 0x02
    3ffa:	93 81       	ldd	r25, Z+3	; 0x03
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	40 e2       	ldi	r20, 0x20	; 32
    4002:	51 e4       	ldi	r21, 0x41	; 65
    4004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	bc 01       	movw	r22, r24
    400e:	cd 01       	movw	r24, r26
    4010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	9e af       	std	Y+62, r25	; 0x3e
    401a:	8d af       	std	Y+61, r24	; 0x3d
    401c:	0f c0       	rjmp	.+30     	; 0x403c <Ask_For_Login+0x650>
    401e:	88 ec       	ldi	r24, 0xC8	; 200
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	9c af       	std	Y+60, r25	; 0x3c
    4024:	8b af       	std	Y+59, r24	; 0x3b
    4026:	8b ad       	ldd	r24, Y+59	; 0x3b
    4028:	9c ad       	ldd	r25, Y+60	; 0x3c
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <Ask_For_Login+0x63e>
    402e:	9c af       	std	Y+60, r25	; 0x3c
    4030:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4032:	8d ad       	ldd	r24, Y+61	; 0x3d
    4034:	9e ad       	ldd	r25, Y+62	; 0x3e
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	9e af       	std	Y+62, r25	; 0x3e
    403a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403c:	8d ad       	ldd	r24, Y+61	; 0x3d
    403e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	69 f7       	brne	.-38     	; 0x401e <Ask_For_Login+0x632>
    4044:	16 c0       	rjmp	.+44     	; 0x4072 <Ask_For_Login+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4046:	fe 01       	movw	r30, r28
    4048:	ff 96       	adiw	r30, 0x3f	; 63
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	9e af       	std	Y+62, r25	; 0x3e
    405c:	8d af       	std	Y+61, r24	; 0x3d
    405e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4060:	9e ad       	ldd	r25, Y+62	; 0x3e
    4062:	9a af       	std	Y+58, r25	; 0x3a
    4064:	89 af       	std	Y+57, r24	; 0x39
    4066:	89 ad       	ldd	r24, Y+57	; 0x39
    4068:	9a ad       	ldd	r25, Y+58	; 0x3a
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	f1 f7       	brne	.-4      	; 0x406a <Ask_For_Login+0x67e>
    406e:	9a af       	std	Y+58, r25	; 0x3a
    4070:	89 af       	std	Y+57, r24	; 0x39
	        	   _delay_ms(500);
	        	   counter =0 ;
    4072:	10 92 15 01 	sts	0x0115, r1

	    	   }

	    	   }
	    	   if(counter>3)
    4076:	80 91 15 01 	lds	r24, 0x0115
    407a:	84 30       	cpi	r24, 0x04	; 4
    407c:	08 f4       	brcc	.+2      	; 0x4080 <Ask_For_Login+0x694>
    407e:	cb cc       	rjmp	.-1642   	; 0x3a16 <Ask_For_Login+0x2a>
	    	   {
	    		   if(Num1 == password)
    4080:	20 91 17 01 	lds	r18, 0x0117
    4084:	30 91 18 01 	lds	r19, 0x0118
    4088:	80 91 f4 00 	lds	r24, 0x00F4
    408c:	90 91 f5 00 	lds	r25, 0x00F5
    4090:	28 17       	cp	r18, r24
    4092:	39 07       	cpc	r19, r25
    4094:	09 f0       	breq	.+2      	; 0x4098 <Ask_For_Login+0x6ac>
    4096:	ed c0       	rjmp	.+474    	; 0x4272 <Ask_For_Login+0x886>
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	aa e7       	ldi	r26, 0x7A	; 122
    409e:	b4 e4       	ldi	r27, 0x44	; 68
    40a0:	8d ab       	std	Y+53, r24	; 0x35
    40a2:	9e ab       	std	Y+54, r25	; 0x36
    40a4:	af ab       	std	Y+55, r26	; 0x37
    40a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a8:	6d a9       	ldd	r22, Y+53	; 0x35
    40aa:	7e a9       	ldd	r23, Y+54	; 0x36
    40ac:	8f a9       	ldd	r24, Y+55	; 0x37
    40ae:	98 ad       	ldd	r25, Y+56	; 0x38
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	4a ef       	ldi	r20, 0xFA	; 250
    40b6:	54 e4       	ldi	r21, 0x44	; 68
    40b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	89 ab       	std	Y+49, r24	; 0x31
    40c2:	9a ab       	std	Y+50, r25	; 0x32
    40c4:	ab ab       	std	Y+51, r26	; 0x33
    40c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40c8:	69 a9       	ldd	r22, Y+49	; 0x31
    40ca:	7a a9       	ldd	r23, Y+50	; 0x32
    40cc:	8b a9       	ldd	r24, Y+51	; 0x33
    40ce:	9c a9       	ldd	r25, Y+52	; 0x34
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	40 e8       	ldi	r20, 0x80	; 128
    40d6:	5f e3       	ldi	r21, 0x3F	; 63
    40d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40dc:	88 23       	and	r24, r24
    40de:	2c f4       	brge	.+10     	; 0x40ea <Ask_For_Login+0x6fe>
		__ticks = 1;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	98 ab       	std	Y+48, r25	; 0x30
    40e6:	8f a7       	std	Y+47, r24	; 0x2f
    40e8:	3f c0       	rjmp	.+126    	; 0x4168 <Ask_For_Login+0x77c>
	else if (__tmp > 65535)
    40ea:	69 a9       	ldd	r22, Y+49	; 0x31
    40ec:	7a a9       	ldd	r23, Y+50	; 0x32
    40ee:	8b a9       	ldd	r24, Y+51	; 0x33
    40f0:	9c a9       	ldd	r25, Y+52	; 0x34
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	3f ef       	ldi	r19, 0xFF	; 255
    40f6:	4f e7       	ldi	r20, 0x7F	; 127
    40f8:	57 e4       	ldi	r21, 0x47	; 71
    40fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40fe:	18 16       	cp	r1, r24
    4100:	4c f5       	brge	.+82     	; 0x4154 <Ask_For_Login+0x768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4102:	6d a9       	ldd	r22, Y+53	; 0x35
    4104:	7e a9       	ldd	r23, Y+54	; 0x36
    4106:	8f a9       	ldd	r24, Y+55	; 0x37
    4108:	98 ad       	ldd	r25, Y+56	; 0x38
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e2       	ldi	r20, 0x20	; 32
    4110:	51 e4       	ldi	r21, 0x41	; 65
    4112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	bc 01       	movw	r22, r24
    411c:	cd 01       	movw	r24, r26
    411e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	98 ab       	std	Y+48, r25	; 0x30
    4128:	8f a7       	std	Y+47, r24	; 0x2f
    412a:	0f c0       	rjmp	.+30     	; 0x414a <Ask_For_Login+0x75e>
    412c:	88 ec       	ldi	r24, 0xC8	; 200
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	9e a7       	std	Y+46, r25	; 0x2e
    4132:	8d a7       	std	Y+45, r24	; 0x2d
    4134:	8d a5       	ldd	r24, Y+45	; 0x2d
    4136:	9e a5       	ldd	r25, Y+46	; 0x2e
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	f1 f7       	brne	.-4      	; 0x4138 <Ask_For_Login+0x74c>
    413c:	9e a7       	std	Y+46, r25	; 0x2e
    413e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4140:	8f a5       	ldd	r24, Y+47	; 0x2f
    4142:	98 a9       	ldd	r25, Y+48	; 0x30
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	98 ab       	std	Y+48, r25	; 0x30
    4148:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414a:	8f a5       	ldd	r24, Y+47	; 0x2f
    414c:	98 a9       	ldd	r25, Y+48	; 0x30
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	69 f7       	brne	.-38     	; 0x412c <Ask_For_Login+0x740>
    4152:	14 c0       	rjmp	.+40     	; 0x417c <Ask_For_Login+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4154:	69 a9       	ldd	r22, Y+49	; 0x31
    4156:	7a a9       	ldd	r23, Y+50	; 0x32
    4158:	8b a9       	ldd	r24, Y+51	; 0x33
    415a:	9c a9       	ldd	r25, Y+52	; 0x34
    415c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	98 ab       	std	Y+48, r25	; 0x30
    4166:	8f a7       	std	Y+47, r24	; 0x2f
    4168:	8f a5       	ldd	r24, Y+47	; 0x2f
    416a:	98 a9       	ldd	r25, Y+48	; 0x30
    416c:	9c a7       	std	Y+44, r25	; 0x2c
    416e:	8b a7       	std	Y+43, r24	; 0x2b
    4170:	8b a5       	ldd	r24, Y+43	; 0x2b
    4172:	9c a5       	ldd	r25, Y+44	; 0x2c
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	f1 f7       	brne	.-4      	; 0x4174 <Ask_For_Login+0x788>
    4178:	9c a7       	std	Y+44, r25	; 0x2c
    417a:	8b a7       	std	Y+43, r24	; 0x2b
	    		   {
	    		   _delay_ms(1000);

	    		   LCD_voidClear();
    417c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_voidClear>
	    		   LCD_voidCursorBlinkerOff();
    4180:	0e 94 6e 13 	call	0x26dc	; 0x26dc <LCD_voidCursorBlinkerOff>
	    		   LCD_voidWriteString(" Welcome Mohamed");
    4184:	86 ea       	ldi	r24, 0xA6	; 166
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>
    418c:	80 e0       	ldi	r24, 0x00	; 0
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	aa e7       	ldi	r26, 0x7A	; 122
    4192:	b4 e4       	ldi	r27, 0x44	; 68
    4194:	8f a3       	std	Y+39, r24	; 0x27
    4196:	98 a7       	std	Y+40, r25	; 0x28
    4198:	a9 a7       	std	Y+41, r26	; 0x29
    419a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419c:	6f a1       	ldd	r22, Y+39	; 0x27
    419e:	78 a5       	ldd	r23, Y+40	; 0x28
    41a0:	89 a5       	ldd	r24, Y+41	; 0x29
    41a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	4a ef       	ldi	r20, 0xFA	; 250
    41aa:	54 e4       	ldi	r21, 0x44	; 68
    41ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b0:	dc 01       	movw	r26, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	8b a3       	std	Y+35, r24	; 0x23
    41b6:	9c a3       	std	Y+36, r25	; 0x24
    41b8:	ad a3       	std	Y+37, r26	; 0x25
    41ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41bc:	6b a1       	ldd	r22, Y+35	; 0x23
    41be:	7c a1       	ldd	r23, Y+36	; 0x24
    41c0:	8d a1       	ldd	r24, Y+37	; 0x25
    41c2:	9e a1       	ldd	r25, Y+38	; 0x26
    41c4:	20 e0       	ldi	r18, 0x00	; 0
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	40 e8       	ldi	r20, 0x80	; 128
    41ca:	5f e3       	ldi	r21, 0x3F	; 63
    41cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41d0:	88 23       	and	r24, r24
    41d2:	2c f4       	brge	.+10     	; 0x41de <Ask_For_Login+0x7f2>
		__ticks = 1;
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	9a a3       	std	Y+34, r25	; 0x22
    41da:	89 a3       	std	Y+33, r24	; 0x21
    41dc:	3f c0       	rjmp	.+126    	; 0x425c <Ask_For_Login+0x870>
	else if (__tmp > 65535)
    41de:	6b a1       	ldd	r22, Y+35	; 0x23
    41e0:	7c a1       	ldd	r23, Y+36	; 0x24
    41e2:	8d a1       	ldd	r24, Y+37	; 0x25
    41e4:	9e a1       	ldd	r25, Y+38	; 0x26
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	3f ef       	ldi	r19, 0xFF	; 255
    41ea:	4f e7       	ldi	r20, 0x7F	; 127
    41ec:	57 e4       	ldi	r21, 0x47	; 71
    41ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41f2:	18 16       	cp	r1, r24
    41f4:	4c f5       	brge	.+82     	; 0x4248 <Ask_For_Login+0x85c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f6:	6f a1       	ldd	r22, Y+39	; 0x27
    41f8:	78 a5       	ldd	r23, Y+40	; 0x28
    41fa:	89 a5       	ldd	r24, Y+41	; 0x29
    41fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	40 e2       	ldi	r20, 0x20	; 32
    4204:	51 e4       	ldi	r21, 0x41	; 65
    4206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	bc 01       	movw	r22, r24
    4210:	cd 01       	movw	r24, r26
    4212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	9a a3       	std	Y+34, r25	; 0x22
    421c:	89 a3       	std	Y+33, r24	; 0x21
    421e:	0f c0       	rjmp	.+30     	; 0x423e <Ask_For_Login+0x852>
    4220:	88 ec       	ldi	r24, 0xC8	; 200
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	98 a3       	std	Y+32, r25	; 0x20
    4226:	8f 8f       	std	Y+31, r24	; 0x1f
    4228:	8f 8d       	ldd	r24, Y+31	; 0x1f
    422a:	98 a1       	ldd	r25, Y+32	; 0x20
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	f1 f7       	brne	.-4      	; 0x422c <Ask_For_Login+0x840>
    4230:	98 a3       	std	Y+32, r25	; 0x20
    4232:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4234:	89 a1       	ldd	r24, Y+33	; 0x21
    4236:	9a a1       	ldd	r25, Y+34	; 0x22
    4238:	01 97       	sbiw	r24, 0x01	; 1
    423a:	9a a3       	std	Y+34, r25	; 0x22
    423c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    423e:	89 a1       	ldd	r24, Y+33	; 0x21
    4240:	9a a1       	ldd	r25, Y+34	; 0x22
    4242:	00 97       	sbiw	r24, 0x00	; 0
    4244:	69 f7       	brne	.-38     	; 0x4220 <Ask_For_Login+0x834>
    4246:	1c c1       	rjmp	.+568    	; 0x4480 <Ask_For_Login+0xa94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4248:	6b a1       	ldd	r22, Y+35	; 0x23
    424a:	7c a1       	ldd	r23, Y+36	; 0x24
    424c:	8d a1       	ldd	r24, Y+37	; 0x25
    424e:	9e a1       	ldd	r25, Y+38	; 0x26
    4250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	9a a3       	std	Y+34, r25	; 0x22
    425a:	89 a3       	std	Y+33, r24	; 0x21
    425c:	89 a1       	ldd	r24, Y+33	; 0x21
    425e:	9a a1       	ldd	r25, Y+34	; 0x22
    4260:	9e 8f       	std	Y+30, r25	; 0x1e
    4262:	8d 8f       	std	Y+29, r24	; 0x1d
    4264:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4266:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	f1 f7       	brne	.-4      	; 0x4268 <Ask_For_Login+0x87c>
    426c:	9e 8f       	std	Y+30, r25	; 0x1e
    426e:	8d 8f       	std	Y+29, r24	; 0x1d
    4270:	07 c1       	rjmp	.+526    	; 0x4480 <Ask_For_Login+0xa94>
	    		   break;
	    		   }
	    		   else
	    		   {

	    			   if(counter2 < 2)
    4272:	80 91 14 01 	lds	r24, 0x0114
    4276:	82 30       	cpi	r24, 0x02	; 2
    4278:	08 f0       	brcs	.+2      	; 0x427c <Ask_For_Login+0x890>
    427a:	88 c0       	rjmp	.+272    	; 0x438c <Ask_For_Login+0x9a0>
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	aa e7       	ldi	r26, 0x7A	; 122
    4282:	b4 e4       	ldi	r27, 0x44	; 68
    4284:	89 8f       	std	Y+25, r24	; 0x19
    4286:	9a 8f       	std	Y+26, r25	; 0x1a
    4288:	ab 8f       	std	Y+27, r26	; 0x1b
    428a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428c:	69 8d       	ldd	r22, Y+25	; 0x19
    428e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	4a ef       	ldi	r20, 0xFA	; 250
    429a:	54 e4       	ldi	r21, 0x44	; 68
    429c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	8d 8b       	std	Y+21, r24	; 0x15
    42a6:	9e 8b       	std	Y+22, r25	; 0x16
    42a8:	af 8b       	std	Y+23, r26	; 0x17
    42aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42ac:	6d 89       	ldd	r22, Y+21	; 0x15
    42ae:	7e 89       	ldd	r23, Y+22	; 0x16
    42b0:	8f 89       	ldd	r24, Y+23	; 0x17
    42b2:	98 8d       	ldd	r25, Y+24	; 0x18
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	40 e8       	ldi	r20, 0x80	; 128
    42ba:	5f e3       	ldi	r21, 0x3F	; 63
    42bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42c0:	88 23       	and	r24, r24
    42c2:	2c f4       	brge	.+10     	; 0x42ce <Ask_For_Login+0x8e2>
		__ticks = 1;
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	9c 8b       	std	Y+20, r25	; 0x14
    42ca:	8b 8b       	std	Y+19, r24	; 0x13
    42cc:	3f c0       	rjmp	.+126    	; 0x434c <Ask_For_Login+0x960>
	else if (__tmp > 65535)
    42ce:	6d 89       	ldd	r22, Y+21	; 0x15
    42d0:	7e 89       	ldd	r23, Y+22	; 0x16
    42d2:	8f 89       	ldd	r24, Y+23	; 0x17
    42d4:	98 8d       	ldd	r25, Y+24	; 0x18
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	3f ef       	ldi	r19, 0xFF	; 255
    42da:	4f e7       	ldi	r20, 0x7F	; 127
    42dc:	57 e4       	ldi	r21, 0x47	; 71
    42de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42e2:	18 16       	cp	r1, r24
    42e4:	4c f5       	brge	.+82     	; 0x4338 <Ask_For_Login+0x94c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e6:	69 8d       	ldd	r22, Y+25	; 0x19
    42e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	40 e2       	ldi	r20, 0x20	; 32
    42f4:	51 e4       	ldi	r21, 0x41	; 65
    42f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	9c 8b       	std	Y+20, r25	; 0x14
    430c:	8b 8b       	std	Y+19, r24	; 0x13
    430e:	0f c0       	rjmp	.+30     	; 0x432e <Ask_For_Login+0x942>
    4310:	88 ec       	ldi	r24, 0xC8	; 200
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	9a 8b       	std	Y+18, r25	; 0x12
    4316:	89 8b       	std	Y+17, r24	; 0x11
    4318:	89 89       	ldd	r24, Y+17	; 0x11
    431a:	9a 89       	ldd	r25, Y+18	; 0x12
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	f1 f7       	brne	.-4      	; 0x431c <Ask_For_Login+0x930>
    4320:	9a 8b       	std	Y+18, r25	; 0x12
    4322:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4324:	8b 89       	ldd	r24, Y+19	; 0x13
    4326:	9c 89       	ldd	r25, Y+20	; 0x14
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	9c 8b       	std	Y+20, r25	; 0x14
    432c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432e:	8b 89       	ldd	r24, Y+19	; 0x13
    4330:	9c 89       	ldd	r25, Y+20	; 0x14
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	69 f7       	brne	.-38     	; 0x4310 <Ask_For_Login+0x924>
    4336:	14 c0       	rjmp	.+40     	; 0x4360 <Ask_For_Login+0x974>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4338:	6d 89       	ldd	r22, Y+21	; 0x15
    433a:	7e 89       	ldd	r23, Y+22	; 0x16
    433c:	8f 89       	ldd	r24, Y+23	; 0x17
    433e:	98 8d       	ldd	r25, Y+24	; 0x18
    4340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	9c 8b       	std	Y+20, r25	; 0x14
    434a:	8b 8b       	std	Y+19, r24	; 0x13
    434c:	8b 89       	ldd	r24, Y+19	; 0x13
    434e:	9c 89       	ldd	r25, Y+20	; 0x14
    4350:	98 8b       	std	Y+16, r25	; 0x10
    4352:	8f 87       	std	Y+15, r24	; 0x0f
    4354:	8f 85       	ldd	r24, Y+15	; 0x0f
    4356:	98 89       	ldd	r25, Y+16	; 0x10
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <Ask_For_Login+0x96c>
    435c:	98 8b       	std	Y+16, r25	; 0x10
    435e:	8f 87       	std	Y+15, r24	; 0x0f
	    			   {
	    	    		 _delay_ms(1000);
	    	    		 LCD_voidInit();
    4360:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_voidInit>
	    			     LCD_voidWriteString("  Try Again ");
    4364:	87 eb       	ldi	r24, 0xB7	; 183
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>
	    			     counter = 0 ;
    436c:	10 92 15 01 	sts	0x0115, r1
	    			     Num1=0;
    4370:	10 92 18 01 	sts	0x0118, r1
    4374:	10 92 17 01 	sts	0x0117, r1
	    			     counter2++;
    4378:	80 91 14 01 	lds	r24, 0x0114
    437c:	8f 5f       	subi	r24, 0xFF	; 255
    437e:	80 93 14 01 	sts	0x0114, r24
	    			     LCD_u8_GoTo_XY(1,4);
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	64 e0       	ldi	r22, 0x04	; 4
    4386:	0e 94 7d 17 	call	0x2efa	; 0x2efa <LCD_u8_GoTo_XY>
    438a:	45 cb       	rjmp	.-2422   	; 0x3a16 <Ask_For_Login+0x2a>
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	aa e7       	ldi	r26, 0x7A	; 122
    4392:	b4 e4       	ldi	r27, 0x44	; 68
    4394:	8b 87       	std	Y+11, r24	; 0x0b
    4396:	9c 87       	std	Y+12, r25	; 0x0c
    4398:	ad 87       	std	Y+13, r26	; 0x0d
    439a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439c:	6b 85       	ldd	r22, Y+11	; 0x0b
    439e:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	4a ef       	ldi	r20, 0xFA	; 250
    43aa:	54 e4       	ldi	r21, 0x44	; 68
    43ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	8f 83       	std	Y+7, r24	; 0x07
    43b6:	98 87       	std	Y+8, r25	; 0x08
    43b8:	a9 87       	std	Y+9, r26	; 0x09
    43ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43bc:	6f 81       	ldd	r22, Y+7	; 0x07
    43be:	78 85       	ldd	r23, Y+8	; 0x08
    43c0:	89 85       	ldd	r24, Y+9	; 0x09
    43c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e8       	ldi	r20, 0x80	; 128
    43ca:	5f e3       	ldi	r21, 0x3F	; 63
    43cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d0:	88 23       	and	r24, r24
    43d2:	2c f4       	brge	.+10     	; 0x43de <Ask_For_Login+0x9f2>
		__ticks = 1;
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	9e 83       	std	Y+6, r25	; 0x06
    43da:	8d 83       	std	Y+5, r24	; 0x05
    43dc:	3f c0       	rjmp	.+126    	; 0x445c <Ask_For_Login+0xa70>
	else if (__tmp > 65535)
    43de:	6f 81       	ldd	r22, Y+7	; 0x07
    43e0:	78 85       	ldd	r23, Y+8	; 0x08
    43e2:	89 85       	ldd	r24, Y+9	; 0x09
    43e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	3f ef       	ldi	r19, 0xFF	; 255
    43ea:	4f e7       	ldi	r20, 0x7F	; 127
    43ec:	57 e4       	ldi	r21, 0x47	; 71
    43ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f2:	18 16       	cp	r1, r24
    43f4:	4c f5       	brge	.+82     	; 0x4448 <Ask_For_Login+0xa5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    43f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    43fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    43fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	40 e2       	ldi	r20, 0x20	; 32
    4404:	51 e4       	ldi	r21, 0x41	; 65
    4406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	bc 01       	movw	r22, r24
    4410:	cd 01       	movw	r24, r26
    4412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	9e 83       	std	Y+6, r25	; 0x06
    441c:	8d 83       	std	Y+5, r24	; 0x05
    441e:	0f c0       	rjmp	.+30     	; 0x443e <Ask_For_Login+0xa52>
    4420:	88 ec       	ldi	r24, 0xC8	; 200
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	9c 83       	std	Y+4, r25	; 0x04
    4426:	8b 83       	std	Y+3, r24	; 0x03
    4428:	8b 81       	ldd	r24, Y+3	; 0x03
    442a:	9c 81       	ldd	r25, Y+4	; 0x04
    442c:	01 97       	sbiw	r24, 0x01	; 1
    442e:	f1 f7       	brne	.-4      	; 0x442c <Ask_For_Login+0xa40>
    4430:	9c 83       	std	Y+4, r25	; 0x04
    4432:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4434:	8d 81       	ldd	r24, Y+5	; 0x05
    4436:	9e 81       	ldd	r25, Y+6	; 0x06
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	9e 83       	std	Y+6, r25	; 0x06
    443c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    443e:	8d 81       	ldd	r24, Y+5	; 0x05
    4440:	9e 81       	ldd	r25, Y+6	; 0x06
    4442:	00 97       	sbiw	r24, 0x00	; 0
    4444:	69 f7       	brne	.-38     	; 0x4420 <Ask_For_Login+0xa34>
    4446:	14 c0       	rjmp	.+40     	; 0x4470 <Ask_For_Login+0xa84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4448:	6f 81       	ldd	r22, Y+7	; 0x07
    444a:	78 85       	ldd	r23, Y+8	; 0x08
    444c:	89 85       	ldd	r24, Y+9	; 0x09
    444e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	9e 83       	std	Y+6, r25	; 0x06
    445a:	8d 83       	std	Y+5, r24	; 0x05
    445c:	8d 81       	ldd	r24, Y+5	; 0x05
    445e:	9e 81       	ldd	r25, Y+6	; 0x06
    4460:	9a 83       	std	Y+2, r25	; 0x02
    4462:	89 83       	std	Y+1, r24	; 0x01
    4464:	89 81       	ldd	r24, Y+1	; 0x01
    4466:	9a 81       	ldd	r25, Y+2	; 0x02
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	f1 f7       	brne	.-4      	; 0x4468 <Ask_For_Login+0xa7c>
    446c:	9a 83       	std	Y+2, r25	; 0x02
    446e:	89 83       	std	Y+1, r24	; 0x01

	    			   }
	    			   else
	    			   {
	    				   _delay_ms(1000);
	    				   LCD_voidClear();
    4470:	0e 94 e6 12 	call	0x25cc	; 0x25cc <LCD_voidClear>
	    				   LCD_voidCursorBlinkerOff();
    4474:	0e 94 6e 13 	call	0x26dc	; 0x26dc <LCD_voidCursorBlinkerOff>
	    				   LCD_voidWriteString(" Out of tries !");
    4478:	84 ec       	ldi	r24, 0xC4	; 196
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_voidWriteString>


	       }
	}

}
    4480:	c9 5a       	subi	r28, 0xA9	; 169
    4482:	df 4f       	sbci	r29, 0xFF	; 255
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	de bf       	out	0x3e, r29	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	cd bf       	out	0x3d, r28	; 61
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	1f 91       	pop	r17
    4494:	0f 91       	pop	r16
    4496:	08 95       	ret

00004498 <__mulsi3>:
    4498:	62 9f       	mul	r22, r18
    449a:	d0 01       	movw	r26, r0
    449c:	73 9f       	mul	r23, r19
    449e:	f0 01       	movw	r30, r0
    44a0:	82 9f       	mul	r24, r18
    44a2:	e0 0d       	add	r30, r0
    44a4:	f1 1d       	adc	r31, r1
    44a6:	64 9f       	mul	r22, r20
    44a8:	e0 0d       	add	r30, r0
    44aa:	f1 1d       	adc	r31, r1
    44ac:	92 9f       	mul	r25, r18
    44ae:	f0 0d       	add	r31, r0
    44b0:	83 9f       	mul	r24, r19
    44b2:	f0 0d       	add	r31, r0
    44b4:	74 9f       	mul	r23, r20
    44b6:	f0 0d       	add	r31, r0
    44b8:	65 9f       	mul	r22, r21
    44ba:	f0 0d       	add	r31, r0
    44bc:	99 27       	eor	r25, r25
    44be:	72 9f       	mul	r23, r18
    44c0:	b0 0d       	add	r27, r0
    44c2:	e1 1d       	adc	r30, r1
    44c4:	f9 1f       	adc	r31, r25
    44c6:	63 9f       	mul	r22, r19
    44c8:	b0 0d       	add	r27, r0
    44ca:	e1 1d       	adc	r30, r1
    44cc:	f9 1f       	adc	r31, r25
    44ce:	bd 01       	movw	r22, r26
    44d0:	cf 01       	movw	r24, r30
    44d2:	11 24       	eor	r1, r1
    44d4:	08 95       	ret

000044d6 <__udivmodhi4>:
    44d6:	aa 1b       	sub	r26, r26
    44d8:	bb 1b       	sub	r27, r27
    44da:	51 e1       	ldi	r21, 0x11	; 17
    44dc:	07 c0       	rjmp	.+14     	; 0x44ec <__udivmodhi4_ep>

000044de <__udivmodhi4_loop>:
    44de:	aa 1f       	adc	r26, r26
    44e0:	bb 1f       	adc	r27, r27
    44e2:	a6 17       	cp	r26, r22
    44e4:	b7 07       	cpc	r27, r23
    44e6:	10 f0       	brcs	.+4      	; 0x44ec <__udivmodhi4_ep>
    44e8:	a6 1b       	sub	r26, r22
    44ea:	b7 0b       	sbc	r27, r23

000044ec <__udivmodhi4_ep>:
    44ec:	88 1f       	adc	r24, r24
    44ee:	99 1f       	adc	r25, r25
    44f0:	5a 95       	dec	r21
    44f2:	a9 f7       	brne	.-22     	; 0x44de <__udivmodhi4_loop>
    44f4:	80 95       	com	r24
    44f6:	90 95       	com	r25
    44f8:	bc 01       	movw	r22, r24
    44fa:	cd 01       	movw	r24, r26
    44fc:	08 95       	ret

000044fe <__udivmodsi4>:
    44fe:	a1 e2       	ldi	r26, 0x21	; 33
    4500:	1a 2e       	mov	r1, r26
    4502:	aa 1b       	sub	r26, r26
    4504:	bb 1b       	sub	r27, r27
    4506:	fd 01       	movw	r30, r26
    4508:	0d c0       	rjmp	.+26     	; 0x4524 <__udivmodsi4_ep>

0000450a <__udivmodsi4_loop>:
    450a:	aa 1f       	adc	r26, r26
    450c:	bb 1f       	adc	r27, r27
    450e:	ee 1f       	adc	r30, r30
    4510:	ff 1f       	adc	r31, r31
    4512:	a2 17       	cp	r26, r18
    4514:	b3 07       	cpc	r27, r19
    4516:	e4 07       	cpc	r30, r20
    4518:	f5 07       	cpc	r31, r21
    451a:	20 f0       	brcs	.+8      	; 0x4524 <__udivmodsi4_ep>
    451c:	a2 1b       	sub	r26, r18
    451e:	b3 0b       	sbc	r27, r19
    4520:	e4 0b       	sbc	r30, r20
    4522:	f5 0b       	sbc	r31, r21

00004524 <__udivmodsi4_ep>:
    4524:	66 1f       	adc	r22, r22
    4526:	77 1f       	adc	r23, r23
    4528:	88 1f       	adc	r24, r24
    452a:	99 1f       	adc	r25, r25
    452c:	1a 94       	dec	r1
    452e:	69 f7       	brne	.-38     	; 0x450a <__udivmodsi4_loop>
    4530:	60 95       	com	r22
    4532:	70 95       	com	r23
    4534:	80 95       	com	r24
    4536:	90 95       	com	r25
    4538:	9b 01       	movw	r18, r22
    453a:	ac 01       	movw	r20, r24
    453c:	bd 01       	movw	r22, r26
    453e:	cf 01       	movw	r24, r30
    4540:	08 95       	ret

00004542 <__prologue_saves__>:
    4542:	2f 92       	push	r2
    4544:	3f 92       	push	r3
    4546:	4f 92       	push	r4
    4548:	5f 92       	push	r5
    454a:	6f 92       	push	r6
    454c:	7f 92       	push	r7
    454e:	8f 92       	push	r8
    4550:	9f 92       	push	r9
    4552:	af 92       	push	r10
    4554:	bf 92       	push	r11
    4556:	cf 92       	push	r12
    4558:	df 92       	push	r13
    455a:	ef 92       	push	r14
    455c:	ff 92       	push	r15
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	cd b7       	in	r28, 0x3d	; 61
    4568:	de b7       	in	r29, 0x3e	; 62
    456a:	ca 1b       	sub	r28, r26
    456c:	db 0b       	sbc	r29, r27
    456e:	0f b6       	in	r0, 0x3f	; 63
    4570:	f8 94       	cli
    4572:	de bf       	out	0x3e, r29	; 62
    4574:	0f be       	out	0x3f, r0	; 63
    4576:	cd bf       	out	0x3d, r28	; 61
    4578:	09 94       	ijmp

0000457a <__epilogue_restores__>:
    457a:	2a 88       	ldd	r2, Y+18	; 0x12
    457c:	39 88       	ldd	r3, Y+17	; 0x11
    457e:	48 88       	ldd	r4, Y+16	; 0x10
    4580:	5f 84       	ldd	r5, Y+15	; 0x0f
    4582:	6e 84       	ldd	r6, Y+14	; 0x0e
    4584:	7d 84       	ldd	r7, Y+13	; 0x0d
    4586:	8c 84       	ldd	r8, Y+12	; 0x0c
    4588:	9b 84       	ldd	r9, Y+11	; 0x0b
    458a:	aa 84       	ldd	r10, Y+10	; 0x0a
    458c:	b9 84       	ldd	r11, Y+9	; 0x09
    458e:	c8 84       	ldd	r12, Y+8	; 0x08
    4590:	df 80       	ldd	r13, Y+7	; 0x07
    4592:	ee 80       	ldd	r14, Y+6	; 0x06
    4594:	fd 80       	ldd	r15, Y+5	; 0x05
    4596:	0c 81       	ldd	r16, Y+4	; 0x04
    4598:	1b 81       	ldd	r17, Y+3	; 0x03
    459a:	aa 81       	ldd	r26, Y+2	; 0x02
    459c:	b9 81       	ldd	r27, Y+1	; 0x01
    459e:	ce 0f       	add	r28, r30
    45a0:	d1 1d       	adc	r29, r1
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	ed 01       	movw	r28, r26
    45ae:	08 95       	ret

000045b0 <_exit>:
    45b0:	f8 94       	cli

000045b2 <__stop_program>:
    45b2:	ff cf       	rjmp	.-2      	; 0x45b2 <__stop_program>
